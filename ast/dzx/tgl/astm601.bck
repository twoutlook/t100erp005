#該程式已解開Section, 不再透過樣板產出!
{<section id="astm601.description" >}
#+ Version..: T100-ERP-1.00.00(版次:1) Build-000275
#+ 
#+ Filename...: astm601
#+ Description: 自營合約維護作業
#+ Creator....: 01533(2013/10/17)
#+ Modifier...: 01533(2013/10/18)
#+ Buildtype..: 應用 t01 樣板自動產生
#+ 以上段落由子樣板a00產生

{</section>}

{<section id="astm601.global" >}
{<point name="global.memo" />}
    
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
{<Module define>}
 
#單頭 type 宣告
PRIVATE type type_g_stce_m        RECORD
   stcesite LIKE stce_t.stcesite,
   stce005 LIKE stce_t.stce005, 
   stce001 LIKE stce_t.stce001, 
   stce002 LIKE stce_t.stce002, 
   stce003 LIKE stce_t.stce003, 
   stce009 LIKE stce_t.stce009, 
   stce009_desc LIKE type_t.chr80,
   stce010 LIKE stce_t.stce010,
   stce010_desc LIKE type_t.chr80,  
   stce011 LIKE stce_t.stce011,
   stce011_desc LIKE type_t.chr80, 
   stce012 LIKE stce_t.stce012,
   stce012_desc LIKE type_t.chr80,
   stce004 LIKE stce_t.stce004, 
   stce004_desc LIKE type_t.chr80, 
   stceunit LIKE stce_t.stceunit, 
   stceunit_desc LIKE type_t.chr80, 
   stce027 LIKE stce_t.stce027,
   stce021 LIKE stce_t.stce021, 
   stce021_desc LIKE type_t.chr80, 
   stce022 LIKE stce_t.stce022, 
   stce022_desc LIKE type_t.chr80, 
   stce023 LIKE stce_t.stce023,
   stce023_desc LIKE type_t.chr80,    
   stce006 LIKE stce_t.stce006, 
   stce006_desc LIKE type_t.chr80, 
   stce007 LIKE stce_t.stce007, 
   stce007_desc LIKE type_t.chr80, 
   stce008      LIKE stce_t.stce008,
   stce024 LIKE stce_t.stce024, 
   stce024_desc LIKE type_t.chr80, 
   stce028 LIKE stce_t.stce028,
   stce028_desc LIKE type_t.chr80,
   stce025 LIKE stce_t.stce025, 
   stce025_desc LIKE type_t.chr80, 
   stce026 LIKE stce_t.stce026,
   stce026_desc LIKE type_t.chr80,    
   stce013 LIKE stce_t.stce013, 
   stce014 LIKE stce_t.stce014, 
   stce014_desc LIKE type_t.chr80, 
   stce015 LIKE stce_t.stce015, 
   stce015_desc LIKE type_t.chr80, 
   stce016 LIKE stce_t.stce016,
   stce016_desc LIKE type_t.chr80, 
   stce017 LIKE stce_t.stce017, 
   stce018 LIKE stce_t.stce018, 
   stce019 LIKE stce_t.stce019, 
   stce020 LIKE stce_t.stce020,
   next_b  LIKE type_t.dat,
   ooff013 LIKE type_t.chr1000,   
   stcestus LIKE stce_t.stcestus, 
   stceownid LIKE stce_t.stceownid, 
   stceownid_desc LIKE type_t.chr80, 
   stceowndp LIKE stce_t.stceowndp, 
   stceowndp_desc LIKE type_t.chr80, 
   stcecrtid LIKE stce_t.stcecrtid, 
   stcecrtid_desc LIKE type_t.chr80, 
   stcecrtdp LIKE stce_t.stcecrtdp, 
   stcecrtdp_desc LIKE type_t.chr80, 
   stcecrtdt DATETIME YEAR TO SECOND, 
   stcemodid LIKE stce_t.stcemodid, 
   stcemodid_desc LIKE type_t.chr80, 
   stcemoddt DATETIME YEAR TO SECOND, 
   stcecnfid LIKE stce_t.stcecnfid, 
   stcecnfid_desc LIKE type_t.chr80, 
   stcecnfdt DATETIME YEAR TO SECOND
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_stcf_d        RECORD
       stcfseq LIKE stcf_t.stcfseq, 
   stcf002 LIKE stcf_t.stcf002, 
   stcf002_desc LIKE type_t.chr500, 
   stcf021 LIKE stcf_t.stcf021,  #160513-00033#8
   stcf003 LIKE stcf_t.stcf003, 
   stcf004 LIKE stcf_t.stcf004, 
   stcf005 LIKE stcf_t.stcf005, 
   stcf006 LIKE stcf_t.stcf006, 
   stcf007 LIKE stcf_t.stcf007, 
   stcf008 LIKE stcf_t.stcf008, 
   stcf008_desc LIKE type_t.chr500, 
   stcf009 LIKE stcf_t.stcf009, 
   stcf009_desc LIKE type_t.chr500, 
   stcf010 LIKE stcf_t.stcf010, 
   stcf011 LIKE stcf_t.stcf011, 
   stcf012 LIKE stcf_t.stcf012, 
   stcf013 LIKE stcf_t.stcf013, 
   stcf014 LIKE stcf_t.stcf014, 
   stcf015 LIKE stcf_t.stcf015, 
   stcf016 LIKE stcf_t.stcf016, 
   stcf017 LIKE stcf_t.stcf017, 
   stcf018 LIKE stcf_t.stcf018,
   stcf019 LIKE stcf_t.stcf019,
   stcf020 LIKE stcf_t.stcf020,
   stcfsite LIKE stcf_t.stcfsite,
   stcfunit LIKE stcf_t.stcfunit
       END RECORD
PRIVATE TYPE type_g_stcf2_d RECORD
       stchseq LIKE stch_t.stchseq, 
   stch002 LIKE stch_t.stch002, 
   stch002_desc LIKE type_t.chr500, 
   stch003 LIKE stch_t.stch003,
   stchsite LIKE stch_t.stchsite,
   stchunit LIKE stch_t.stchunit
       END RECORD
 
 
 
#模組變數(Module Variables)
DEFINE g_stce_m          type_g_stce_m
DEFINE g_stce_m_t        type_g_stce_m
 
   DEFINE g_stce001_t LIKE stce_t.stce001
 
 
DEFINE g_stcf_d          DYNAMIC ARRAY OF type_g_stcf_d
DEFINE g_stcf_d_t        type_g_stcf_d
DEFINE g_stcf2_d   DYNAMIC ARRAY OF type_g_stcf2_d
DEFINE g_stcf2_d_t type_g_stcf2_d
 
 
 
DEFINE g_browser    DYNAMIC ARRAY OF RECORD    #資料瀏覽之欄位 
         b_statepic     LIKE type_t.chr50,
            b_stce001 LIKE stce_t.stce001,
      b_stce005 LIKE stce_t.stce005,
      b_stce002 LIKE stce_t.stce002,
      b_stce004 LIKE stce_t.stce004,
      b_stce009 LIKE stce_t.stce009,
      b_stce021 LIKE stce_t.stce021,
      b_stce022 LIKE stce_t.stce022,
      b_stce023 LIKE stce_t.stce023,
      b_stce006 LIKE stce_t.stce006,
      b_stce007 LIKE stce_t.stce007,
      b_stce026 LIKE stce_t.stce026,
      b_stce013 LIKE stce_t.stce013,
      b_stce014 LIKE stce_t.stce014,
      b_stce015 LIKE stce_t.stce015,
      b_stce024 LIKE stce_t.stce024,
      b_stce025 LIKE stce_t.stce025,
      b_stce017 LIKE stce_t.stce017,
      b_stce018 LIKE stce_t.stce018,
      b_stce019 LIKE stce_t.stce019,
      b_stce020 LIKE stce_t.stce020,
      b_stce003 LIKE stce_t.stce003,
      b_stceunit LIKE stce_t.stceunit
         #,rank           LIKE type_t.num10
      END RECORD 
      
DEFINE g_browser_f  RECORD    #資料瀏覽之欄位 
         b_statepic     LIKE type_t.chr50,
            b_stce001 LIKE stce_t.stce001,
      b_stce005 LIKE stce_t.stce005,
      b_stce002 LIKE stce_t.stce002,
      b_stce004 LIKE stce_t.stce004,
      b_stce009 LIKE stce_t.stce009,
      b_stce021 LIKE stce_t.stce021,
      b_stce022 LIKE stce_t.stce022,
      b_stce023 LIKE stce_t.stce023,
      b_stce006 LIKE stce_t.stce006,
      b_stce007 LIKE stce_t.stce007,
      b_stce026 LIKE stce_t.stce026,
      b_stce013 LIKE stce_t.stce013,
      b_stce014 LIKE stce_t.stce014,
      b_stce015 LIKE stce_t.stce015,
      b_stce024 LIKE stce_t.stce024,
      b_stce025 LIKE stce_t.stce025,
      b_stce017 LIKE stce_t.stce017,
      b_stce018 LIKE stce_t.stce018,
      b_stce019 LIKE stce_t.stce019,
      b_stce020 LIKE stce_t.stce020,
      b_stce003 LIKE stce_t.stce003,
      b_stceunit LIKE stce_t.stceunit
         #,rank           LIKE type_t.num10
      END RECORD 
      
#無單頭append欄位定義
#無單身append欄位定義
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
DEFINE g_wc2_table2   STRING
 
 
 
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
#DEFINE g_rec_b               LIKE type_t.num5             #單身筆數   #161108-00016#1   2016/11/09  by 08742 mark                      
DEFINE g_rec_b               LIKE type_t.num10             #單身筆數    #161108-00016#1   2016/11/09  by 08742 add          
#DEFINE l_ac                  LIKE type_t.num5             #161108-00016#1   2016/11/09  by 08742 mark       
DEFINE l_ac                  LIKE type_t.num10             #161108-00016#1   2016/11/09  by 08742 add      
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog
    
#DEFINE g_pagestart           LIKE type_t.num5             #page起始筆數#161108-00016#1   2016/11/09  by 08742 mark 
DEFINE g_pagestart           LIKE type_t.num10             #page起始筆數#161108-00016#1   2016/11/09  by 08742 add            
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_page_action         STRING                        #page action
DEFINE g_header_hidden       LIKE type_t.num5              #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5              #隱藏工作Panel
DEFINE g_page                STRING                        #第幾頁
DEFINE g_state               STRING       
 
#161108-00016#1   2016/11/09  by 08742 -S
#DEFINE g_detail_cnt          LIKE type_t.num5             #單身總筆數 
#DEFINE g_detail_idx          LIKE type_t.num5             #單身目前所在筆數
#DEFINE g_detail_idx2         LIKE type_t.num5             #單身2目前所在筆數
#DEFINE g_browser_cnt         LIKE type_t.num5             #Browser總筆數
#DEFINE g_browser_idx         LIKE type_t.num5             #Browser目前所在筆數
#DEFINE g_temp_idx            LIKE type_t.num5             #Browser目前所在筆數(暫存用)
DEFINE g_detail_cnt          LIKE type_t.num10             #單身總筆數  
DEFINE g_detail_idx          LIKE type_t.num10             #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10             #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10             
DEFINE g_browser_idx         LIKE type_t.num10             #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10             #Browser目前所在筆數(暫存用)
#161108-00016#1   2016/11/09  by 08742 -E
 
DEFINE g_searchcol           STRING                        #查詢欄位代碼
DEFINE g_searchstr           STRING                        #查詢欄位字串
DEFINE g_order               STRING                        #查詢排序欄位
                                                        
#DEFINE g_current_row         LIKE type_t.num5             #Browser 所在筆數(暫存用) #161108-00016#1   2016/11/09  by 08742 mark
DEFINE g_current_row         LIKE type_t.num10             #Browser 所在筆數(暫存用) #161108-00016#1   2016/11/09  by 08742 add
DEFINE g_current_sw          BOOLEAN                       #Browser所在筆數用開關
#DEFINE g_current_page        LIKE type_t.num5             #目前所在頁數 #161108-00016#1   2016/11/09  by 08742 mark
DEFINE g_current_page        LIKE type_t.num10             #目前所在頁數 #161108-00016#1   2016/11/09  by 08742 add
DEFINE g_insert              LIKE type_t.chr5              #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
  
{</Module define>}
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point

{</section>}

{<section id="astm601.main" >}
#test
#+ 此段落由子樣板a26產生
#OPTIONS SHORT CIRCUIT
#+ 作業開始 
MAIN
   #add-point:main段define
{<point name="main.define"/>}
   #end add-point   
 
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("ast","")
 
   #add-point:作業初始化
{<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define
{<point name="main.define_sql" />}
   #end add-point
   LET g_forupd_sql = "SELECT stce005,stce001,stce002,stce003,stce009,'',stce004,'',stceunit,'',stce021, 
       '',stce022,'',stce023,'',stce006,'',stce007,'',stce024,'',stce025,'',stce026,stce013,stce014,'', 
       stce015,'',stce017,stce018,stce019,stce020,stcestus,stceownid,'',stceowndp,'',stcecrtid,'',stcecrtdp, 
       '',stcecrtdt,stcemodid,'',stcemoddt,stcecnfid,'',stcecnfdt FROM stce_t WHERE stceent= ? AND stce001=?  
       FOR UPDATE"
   #add-point:SQL_define
{<point name="main.after_define_sql"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   DECLARE astm601_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   IF g_bgjob = "Y" THEN
 
      #add-point:Service Call
{<point name="main.servicecall" />}
      #end add-point
 
   ELSE
      
      #畫面開啟 (identifier)
      OPEN WINDOW w_astm601 WITH FORM cl_ap_formpath("ast",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL astm601_init()   
 
      #進入選單 Menu (="N")
      CALL astm601_ui_dialog() 
	  
      #add-point:畫面關閉前
{<point name="main.before_close" />}
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_astm601
      
   END IF 
   
   CLOSE astm601_cl
   
   
 
   #add-point:作業離開前
{<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
   
END MAIN
 
 

{</section>}

{<section id="astm601.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION astm601_init()
   #add-point:init段define
{<point name="init.define"/>}
   #end add-point    
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1
      CALL cl_set_combo_scc_part('stcestus','50','N,X,Y')
 
      CALL cl_set_combo_scc('stce005','6013') 
   CALL cl_set_combo_scc('stcf004','6006') 
   CALL cl_set_combo_scc('stcf005','6007') 
   CALL cl_set_combo_scc('stcf006','6008') 
   CALL cl_set_combo_scc('stcf007','6009') 
   CALL cl_set_combo_scc('stcf012','6010') 
   CALL cl_set_combo_scc('stcf015','6011') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
 
   #add-point:畫面資料初始化
{<point name="init.init"/>}
   #end add-point
   
   CALL astm601_default_search()
    
END FUNCTION

{</section>}

{<section id="astm601.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION astm601_ui_dialog()
   {<Local define>}
   DEFINE li_idx  LIKE type_t.num5
   {</Local define>}
   #add-point:ui_dialog段define
{<point name="ui_dialog.define"/>}
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   CALL gfrm_curr.setElementImage("logo","logo/applogo.png") 
   IF g_wc.trim() <> "1=1" THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #add-point:ui_dialog段before dialog 
{<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE 
   
      CALL astm601_browser_fill("")
      CALL lib_cl_dlg.cl_dlg_before_display()
      CALL cl_notice()
            
      #判斷前一個動作是否為新增, 若是的話切換到新增的筆數
      IF g_state = "Y" THEN
         FOR li_idx = 1 TO g_browser.getLength()
            IF g_browser[li_idx].b_stce001 = g_stce001_t
 
               THEN
               LET g_current_row = li_idx
               LET g_current_idx = li_idx
               EXIT FOR
            END IF
         END FOR
         LET g_state = ""
      END IF
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
         #INPUT g_searchstr,g_searchcol FROM formonly.searchstr,formonly.cbo_searchcol
         #
         #   BEFORE INPUT
         #   
         #END INPUT
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
 
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
 
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL astm601_fetch('') # reload data
               LET l_ac = 1
               CALL astm601_ui_detailshow() #Setting the current row 
      
               CALL astm601_idx_chk()
               #NEXT FIELD stcfseq
         
         END DISPLAY
        
         DISPLAY ARRAY g_stcf_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               CALL astm601_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               
               #add-point:page1, before row動作
{<point name="ui_dialog.page1.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               CALL FGL_SET_ARR_CURR(g_detail_idx)
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               CALL astm601_idx_chk()
               #add-point:page1自定義行為
{<point name="ui_dialog.page1.before_display"/>}
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
 
 
         ON ACTION detail_qrystr
 
            LET g_action_choice="detail_qrystr"
            IF cl_auth_chk_act("detail_qrystr") THEN 
               MENU "" ATTRIBUTE(STYLE="popup")
 
                  ON ACTION asti203
 
                     LET g_action_choice="asti203"
                     IF cl_auth_chk_act("asti203") THEN 
                        #add-point:ON ACTION asti203
{<point name="menu.detail_show.page1_sub.asti203" />}
                        #END add-point
                        
                     END IF
 
 
                  ON ACTION asti205
 
                     LET g_action_choice="asti205"
                     IF cl_auth_chk_act("asti205") THEN 
                        #add-point:ON ACTION asti205
{<point name="menu.detail_show.page1_sub.asti202" />}
                        #END add-point
                        
                     END IF
 
               END MENU
               #add-point:ON ACTION detail_qrystr
{<point name="menu.detail_show.page1.detail_qrystr" />}
               #END add-point
               EXIT DIALOG
            END IF
 
               
            #add-point:page1自定義行為
{<point name="ui_dialog.page1.action"/>}
            #end add-point
               
         END DISPLAY
        
         DISPLAY ARRAY g_stcf2_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               CALL astm601_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx = l_ac
               
               #add-point:page2, before row動作
{<point name="ui_dialog.body2.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               CALL FGL_SET_ARR_CURR(g_detail_idx)
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_current_page = 2
               CALL astm601_idx_chk()
               #add-point:page2自定義行為
{<point name="ui_dialog.body2.before_display"/>}
               #end add-point
      
            #自訂ACTION(detail_show,page_2)
            
         
            #add-point:page2自定義行為
{<point name="ui_dialog.body2.action"/>}
            #end add-point
         
         END DISPLAY
 
 
         
         #add-point:ui_dialog段自定義display array
{<point name="ui_dialog.more_displayarray"/>}
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_page = "first"
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            LET g_current_row = g_current_idx #目前指標
            IF g_current_idx = 0 THEN
               LET g_current_idx = 1
            END IF
            LET g_current_sw = TRUE
            
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL astm601_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL astm601_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL astm601_idx_chk()
            
            #add-point:ui_dialog段before_dialog2
{<point name="ui_dialog.before_dialog2"/>}
            #end add-point
            
            #NEXT FIELD stcfseq
        
         ON ACTION statechange
            CALL astm601_statechange()
            LET g_action_choice = "statechange"
            EXIT DIALOG
      
         
          
         #ACTION表單列
         ON ACTION filter
            CALL astm601_filter()
            EXIT DIALOG
         
         ON ACTION first
            CALL astm601_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm601_idx_chk()
            
         ON ACTION previous
            CALL astm601_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm601_idx_chk()
            
         ON ACTION jump
            CALL astm601_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm601_idx_chk()
            
         ON ACTION next
            CALL astm601_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm601_idx_chk()
            
         ON ACTION last
            CALL astm601_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm601_idx_chk()
            
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
      
         ON ACTION mainhidden       #主頁摺疊
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            
         ON ACTION worksheethidden   #瀏覽頁折疊
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
       
         ON ACTION controls      #單頭摺疊，可利用hot key "Ctrl-s"開啟/關閉單頭
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("worksheet_detail",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("worksheet_detail",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
 
         ON ACTION delete
 
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN 
               CALL astm601_delete()
               #add-point:ON ACTION delete
{<point name="menu.delete" />}
               #END add-point
            END IF
 
 
         ON ACTION insert
 
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN 
               CALL astm601_insert()
               #add-point:ON ACTION insert
{<point name="menu.insert" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION modify
 
            LET g_aw = ''
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN 
               CALL astm601_modify()
               #add-point:ON ACTION modify
{<point name="menu.modify" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION modify_detail
 
            LET g_aw = g_curr_diag.getCurrentItem()
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN 
               CALL astm601_modify()
               #add-point:ON ACTION modify_detail
{<point name="menu.modify_detail" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION output
 
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN 
               #add-point:ON ACTION output
{<point name="menu.output" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION query
 
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN 
               CALL astm601_query()
               #add-point:ON ACTION query
{<point name="menu.query" />}
               #END add-point
            END IF
 
 
         ON ACTION reproduce
 
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN 
               CALL astm601_reproduce()
               #add-point:ON ACTION reproduce
{<point name="menu.reproduce" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stce009
 
            LET g_action_choice="prog_stce009"
            IF cl_auth_chk_act("prog_stce009") THEN 
               CALL cl_cmdrun_wait("adbm200")
               #add-point:ON ACTION prog_stce009
{<point name="menu.prog_stce009" />}
               #END add-point
               EXIT DIALOG
            END IF
 
           ON ACTION prog_stce010
 
            LET g_action_choice="prog_stce010"
            IF cl_auth_chk_act("prog_stce010") THEN 
               CALL cl_cmdrun_wait("adbm201")
               #add-point:ON ACTION prog_stce009
               
               #END add-point
               EXIT DIALOG
            END IF
 
         ON ACTION prog_stce004
 
            LET g_action_choice="prog_stce004"
            IF cl_auth_chk_act("prog_stce004") THEN 
               CALL cl_cmdrun_wait("astm201")
               #add-point:ON ACTION prog_stce004
{<point name="menu.prog_stce004" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stce021
 
            LET g_action_choice="prog_stce021"
            IF cl_auth_chk_act("prog_stce021") THEN 
               CALL cl_cmdrun_wait("aooi140")
               #add-point:ON ACTION prog_stce021
{<point name="menu.prog_stce021" />}
               #END add-point
               EXIT DIALOG
            END IF
            
          ON ACTION prog_stce022
 
            LET g_action_choice="prog_stce022"
            IF cl_auth_chk_act("prog_stce022") THEN 
               CALL cl_cmdrun_wait("aooi610")
               #add-point:ON ACTION prog_stce021
               
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stce007
 
            LET g_action_choice="prog_stce007"
            IF cl_auth_chk_act("prog_stce007") THEN 
               CALL cl_cmdrun_wait("aooi610")
               #add-point:ON ACTION prog_stce007
{<point name="menu.prog_stce007" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stce006
 
            LET g_action_choice="prog_stce006"
            IF cl_auth_chk_act("prog_stce006") THEN 
               CALL cl_cmdrun_wait("asti201")
               #add-point:ON ACTION prog_stce006
{<point name="menu.prog_stce006" />}
               #END add-point
               EXIT DIALOG
            END IF
 
         
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
            
      END DIALOG
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION

{</section>}

{<section id="astm601.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION astm601_browser_fill(ps_page_action)
   {<Local define>}
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   DEFINE l_searchcol       STRING
   {</Local define>}
   #add-point:browser_fill段define
{<point name="browser_fill.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stce_m.* TO NULL
   CALL g_stcf_d.clear()        
   CALL g_stcf2_d.clear() 
 
 
   CALL g_browser.clear()
   
   #搜尋用
   IF cl_null(g_searchcol) OR g_searchcol = '0' THEN
      LET l_searchcol = "stce001"
 
   ELSE
      LET l_searchcol = g_searchcol
   END IF
   
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
   IF cl_null(l_wc) THEN  #p_wc 查詢條件
      RETURN
   END IF
   
   #add-point:browser_fill,foreach前
{<point name="browser_fill.before_foreach"/>}
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE stce001 ",
 
                        " FROM stce_t ",
                              " ",
                              " LEFT JOIN stcf_t ON stcfent = stceent AND stce001 = stcf001 ",
                              " LEFT JOIN stch_t ON stchent = stceent AND stce001 = stch001", 
 
 
 
                              " ", 
                              " ", 
                       " WHERE stceent = '" ||g_enterprise|| "' AND stcfent = '" ||g_enterprise|| "' AND ",l_wc, " AND ", l_wc2
 
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE stce001 ",
 
                        " FROM stce_t ", 
                              " ",
                              " ",
                        "WHERE stceent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED
 
   END IF
   
   LET g_sql = " SELECT COUNT(*) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前
{<point name="browser_fill.before_count"/>}
   #end add-point
   
   PREPARE header_cnt_pre FROM g_sql
   EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
   FREE header_cnt_pre
 
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
   
   #LET g_page_action = ps_page_action          # Keep Action
   
   IF ps_page_action = "F" OR
      ps_page_action = "P" OR
      ps_page_action = "N" OR
      ps_page_action = "L" THEN
      LET g_page_action = ps_page_action
   END IF
   
   CASE ps_page_action
      WHEN "F" 
         LET g_pagestart = 1
          
      WHEN "P"  
         LET g_pagestart = g_pagestart - g_max_browse
         IF g_pagestart < 1 THEN
            LET g_pagestart = 1
         END IF
          
      WHEN "N"  
         LET g_pagestart = g_pagestart + g_max_browse
         IF g_pagestart > g_browser_cnt THEN
            LET g_pagestart = g_browser_cnt - (g_browser_cnt mod g_max_browse) + 1
            WHILE g_pagestart > g_browser_cnt 
               LET g_pagestart = g_pagestart - g_max_browse
            END WHILE
         END IF
      
      WHEN "L"  
         LET g_pagestart = g_browser_cnt - (g_browser_cnt mod g_max_browse) + 1
         WHILE g_pagestart > g_browser_cnt 
            LET g_pagestart = g_pagestart - g_max_browse
         END WHILE
         
      WHEN '/'
         LET g_pagestart = g_jump
         IF g_pagestart > g_browser_cnt THEN
            LET g_pagestart = 1
         END IF
         
   END CASE
  
   #單身有輸入查詢條件且非null
   IF g_wc2 <> " 1=1" AND NOT cl_null(g_wc2) THEN 
      #依照stce001,stce005,stce002,stce004,stce009,stce021,stce022,stce023,stce006,stce007,stce026,stce013,stce014,stce015,stce024,stce025,stce017,stce018,stce019,stce020,stce003,stceunit Browser欄位定義(取代原本bs_sql功能)
      LET l_sql_rank = "SELECT DISTINCT stcestus,stce001,stce005,stce002,stce004,stce009,stce021,stce022, 
          stce023,stce006,stce007,stce026,stce013,stce014,stce015,stce024,stce025,stce017,stce018,stce019, 
          stce020,stce003,stceunit,DENSE_RANK() OVER(ORDER BY stce001 ",g_order,") AS RANK ",
                        " FROM stce_t ",
                              " ",
                              " LEFT JOIN stcf_t ON stcfent = stceent AND stce001 = stcf001 ",
                              " LEFT JOIN stch_t ON stchent = stceent AND stce001 = stch001",
 
 
 
                              " ",
                              " ",
                       " ",
                       " WHERE stceent = '" ||g_enterprise|| "' AND ",g_wc," AND ",g_wc2
   ELSE
      #單身無輸入資料
      LET l_sql_rank = "SELECT DISTINCT stcestus,stce001,stce005,stce002,stce004,stce009,stce021,stce022, 
          stce023,stce006,stce007,stce026,stce013,stce014,stce015,stce024,stce025,stce017,stce018,stce019, 
          stce020,stce003,stceunit,DENSE_RANK() OVER(ORDER BY stce001 ",g_order,") AS RANK ",
                       " FROM stce_t ",
                            "  ",
                            "  ",
                       " WHERE stceent = '" ||g_enterprise|| "' AND ", g_wc
   END IF
   
   #定義翻頁CURSOR
   LET g_sql= "SELECT stcestus,stce001,stce005,stce002,stce004,stce009,stce021,stce022,stce023,stce006, 
       stce007,stce026,stce013,stce014,stce015,stce024,stce025,stce017,stce018,stce019,stce020,stce003, 
       stceunit FROM (",l_sql_rank,") WHERE ",
              " RANK >= ",1," AND RANK<",1+g_max_browse,
              " ORDER BY ",l_searchcol," ",g_order
               
   #add-point:browser_fill,before_prepare
{<point name="browser_fill.before_prepare"/>}
   #end add-point
               
   PREPARE browse_pre FROM g_sql
   DECLARE browse_cur CURSOR FOR browse_pre
   
   #add-point:browser_fill,open
{<point name="browser_fill.open"/>}
   #end add-point
 
   CALL g_browser.clear()
   LET g_cnt = 1
   FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_stce001,g_browser[g_cnt].b_stce005, 
       g_browser[g_cnt].b_stce002,g_browser[g_cnt].b_stce004,g_browser[g_cnt].b_stce009,g_browser[g_cnt].b_stce021, 
       g_browser[g_cnt].b_stce007,g_browser[g_cnt].b_stce023,g_browser[g_cnt].b_stce006,g_browser[g_cnt].b_stce007, 
       g_browser[g_cnt].b_stce026,g_browser[g_cnt].b_stce013,g_browser[g_cnt].b_stce014,g_browser[g_cnt].b_stce015, 
       g_browser[g_cnt].b_stce024,g_browser[g_cnt].b_stce025,g_browser[g_cnt].b_stce017,g_browser[g_cnt].b_stce018, 
       g_browser[g_cnt].b_stce019,g_browser[g_cnt].b_stce020,g_browser[g_cnt].b_stce003,g_browser[g_cnt].b_stceunit 

      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'foreach:'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         EXIT FOREACH
      END IF
  
      
  
      #add-point:browser_fill段reference
{<point name="browser_fill.reference"/>}
      #end add-point
  
            #此段落由子樣板a24產生
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/open.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/void.png"
 
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/valid.png"
 
 
         
      END CASE
 
 
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_rec THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9035
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         EXIT FOREACH
      END IF
      
   END FOREACH
 
   CALL g_browser.deleteElement(g_cnt)
   LET g_header_cnt = g_browser.getLength()
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
   
   FREE browse_pre
   
   #add-point:browser_fill段結束前
{<point name="browser_fill.after"/>}
   #end add-point
   
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,delete,reproduce", FALSE)
   ELSE
      CALL cl_set_act_visible("statechange,modify,delete,reproduce", TRUE)
   END IF
   
END FUNCTION

{</section>}

{<section id="astm601.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION astm601_ui_headershow()
   #add-point:ui_headershow段define
{<point name="ui_headershow.define"/>}
   #end add-point    
   
   LET g_stce_m.stce001 = g_browser[g_current_idx].b_stce001   
 
    SELECT UNIQUE stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stcesite,stce027,stce021,stce022,stce023,stce006, 
        stce007,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce016,stce017,stce018,stce019,stce020,stcestus, 
        stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid,stcemoddt,stcecnfid,stcecnfdt
 INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004, 
     g_stce_m.stceunit, g_stce_m.stcesite,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007, 
     g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015,g_stce_m.stce016, 
     g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid, 
     g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt,g_stce_m.stcemodid, 
     g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt
 FROM stce_t
 WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
   CALL astm601_show()
   
END FUNCTION

{</section>}

{<section id="astm601.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION astm601_ui_detailshow()
   #add-point:ui_detailshow段define
   {<point name="ui_detailshow.define"/>}
   #end add-point    
   
   #add-point:ui_detailshow段before
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
      CALL g_curr_diag.setCurrentRow("s_detail2",g_detail_idx)
 
 
   END IF
   
   #add-point:ui_detailshow段after
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION

{</section>}

{<section id="astm601.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION astm601_ui_browser_refresh()
   {<Local define>}
   DEFINE l_i  LIKE type_t.num10
   {</Local define>}
   #add-point:ui_browser_refresh段define
   {<point name="ui_browser_refresh.define"/>}
   #end add-point    
   
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_stce001 = g_stce_m.stce001 
 
         THEN  
         CALL g_browser.deleteElement(l_i)
         LET g_header_cnt = g_header_cnt - 1
      END IF
   END FOR
 
   LET g_browser_cnt = g_browser_cnt - 1
   IF g_current_row > g_browser_cnt THEN        #確定browse 筆數指在同一筆
      LET g_current_row = g_browser_cnt
   END IF
 
   #DISPLAY g_browser_cnt TO FORMONLY.b_count    #總筆數的顯示
   
END FUNCTION

{</section>}

{<section id="astm601.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION astm601_construct()
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   #add-point:cs段define
{<point name="cs.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stce_m.* TO NULL
   CALL g_stcf_d.clear()        
   CALL g_stcf2_d.clear() 
 
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
   INITIALIZE g_wc2_table2 TO NULL
 
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前
{<point name="cs.before_construct"/>}
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON stceunit,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stce005,stce027,stce021,stce022, 
          stce023,stce006,stce007,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce016,stce017,stce018,stce019, 
          stce020,stcestus,stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid,stcemoddt,stcecnfid, 
          stcecnfdt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
{<point name="cs.head.before_construct"/>}
            #end add-point 
            
         #公用欄位開窗相關處理
         #此段落由子樣板a11產生
         ##----<<stceownid>>----
         #ON ACTION controlp INFIELD stceownid
         #   CALL q_common('stce_t','stceownid',TRUE,FALSE,g_stce_m.stceownid) RETURNING ls_return
         #   DISPLAY ls_return TO stceownid
         #   NEXT FIELD stceownid  
         #
         ##----<<stceowndp>>----
         #ON ACTION controlp INFIELD stceowndp
         #   CALL q_common('stce_t','stceowndp',TRUE,FALSE,g_stce_m.stceowndp) RETURNING ls_return
         #   DISPLAY ls_return TO stceowndp
         #   NEXT FIELD stceowndp
         #
         ##----<<stcecrtid>>----
         #ON ACTION controlp INFIELD stcecrtid
         #   CALL q_common('stce_t','stcecrtid',TRUE,FALSE,g_stce_m.stcecrtid) RETURNING ls_return
         #   DISPLAY ls_return TO stcecrtid
         #   NEXT FIELD stcecrtid
         #
         ##----<<stcecrtdp>>----
         #ON ACTION controlp INFIELD stcecrtdp
         #   CALL q_common('stce_t','stcecrtdp',TRUE,FALSE,g_stce_m.stcecrtdp) RETURNING ls_return
         #   DISPLAY ls_return TO stcecrtdp
         #   NEXT FIELD stcecrtdp
         #
         ##----<<stcemodid>>----
         #ON ACTION controlp INFIELD stcemodid
         #   CALL q_common('stce_t','stcemodid',TRUE,FALSE,g_stce_m.stcemodid) RETURNING ls_return
         #   DISPLAY ls_return TO stcemodid
         #   NEXT FIELD stcemodid
         #
         ##----<<stcecnfid>>----
         #ON ACTION controlp INFIELD stcecnfid
         #   CALL q_common('stce_t','stcecnfid',TRUE,FALSE,g_stce_m.stcecnfid) RETURNING ls_return
         #   DISPLAY ls_return TO stcecnfid
         #   NEXT FIELD stcecnfid
         #
         ##----<<stanpstid>>----
         ##ON ACTION controlp INFIELD stanpstid
         ##   CALL q_common('stce_t','stanpstid',TRUE,FALSE,g_stce_m.stanpstid) RETURNING ls_return
         ##   DISPLAY ls_return TO stanpstid
         ##   NEXT FIELD stanpstid
         
         ##----<<stcecrtdt>>----
         AFTER FIELD stcecrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stcemoddt>>----
         AFTER FIELD stcemoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stcecnfdt>>----
         AFTER FIELD stcecnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stanpstdt>>----
         #AFTER FIELD stanpstdt
         #   CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
         #   IF NOT cl_null(ls_result) THEN
         #      IF NOT cl_chk_date_symbol(ls_result) THEN
         #         LET ls_result = cl_add_date_extra_cond(ls_result)
         #      END IF
         #   END IF
         #   CALL FGL_DIALOG_SETBUFFER(ls_result)
 
 
            
         #一般欄位開窗相關處理    
         #---------------------------<  Master  >---------------------------
         #----<<stceunit>>----
         #Ctrlp:construct.c.stceunit
         ON ACTION controlp INFIELD stceunit
            #add-point:ON ACTION controlp INFIELD stceunit
{<point name="construct.c.stceunit" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stceunit
            #add-point:BEFORE FIELD stceunit
{<point name="construct.b.stceunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stceunit
            
            #add-point:AFTER FIELD stceunit
{<point name="construct.a.stceunit" />}
            #END add-point
            
 
         #----<<stce005>>----
         #此段落由子樣板a01產生
      #  BEFORE FIELD stce005
      #     #add-point:BEFORE FIELD stce005
{<point name="construct.b.stce005" />}
      #     #END add-point
      #
      #  #此段落由子樣板a02產生
      #  AFTER FIELD stce005
      #     
      #     #add-point:AFTER FIELD stce005
{<point name="construct.a.stce005" />}
      #     #END add-point
      #     
      #
      #  #Ctrlp:construct.c.stce005
      #  ON ACTION controlp INFIELD stce005
      #     #add-point:ON ACTION controlp INFIELD stce005
{<point name="construct.c.stce005" />}
      #     #END add-point
 
         #----<<stce001>>----
         #Ctrlp:construct.c.stce001
         ON ACTION controlp INFIELD stce001
            #add-point:ON ACTION controlp INFIELD stce001
{<point name="construct.c.stce001" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce001
            #add-point:BEFORE FIELD stce001
{<point name="construct.b.stce001" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce001
            
            #add-point:AFTER FIELD stce001
{<point name="construct.a.stce001" />}
            #END add-point
            
 
         #----<<stce002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce002
            #add-point:BEFORE FIELD stce002
{<point name="construct.b.stce002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce002
            
            #add-point:AFTER FIELD stce002
{<point name="construct.a.stce002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce002
         ON ACTION controlp INFIELD stce002
            #add-point:ON ACTION controlp INFIELD stce002
{<point name="construct.c.stce002" />}
            #END add-point
 
         #----<<stce003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce003
            #add-point:BEFORE FIELD stce003
{<point name="construct.b.stce003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce003
            
            #add-point:AFTER FIELD stce003
{<point name="construct.a.stce003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce003
         ON ACTION controlp INFIELD stce003
            #add-point:ON ACTION controlp INFIELD stce003
{<point name="construct.c.stce003" />}
            #END add-point
 
         #----<<stce009>>----
         #Ctrlp:construct.c.stce009
         ON ACTION controlp INFIELD stce009
            #add-point:ON ACTION controlp INFIELD stce009
{<point name="construct.c.stce009" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce009
            #add-point:BEFORE FIELD stce009
{<point name="construct.b.stce009" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce009
            
            #add-point:AFTER FIELD stce009
{<point name="construct.a.stce009" />}
            #END add-point
            
          #----<<stce009>>----
         #Ctrlp:construct.c.stce010
         ON ACTION controlp INFIELD stce010
            #add-point:ON ACTION controlp INFIELD stce010
                        #此段落由子樣板a08產生
            #開窗c段
			   INITIALIZE g_qryparam.* TO NULL
             LET g_qryparam.state = 'c'
		      LET g_qryparam.reqry = FALSE
            CALL q_pmaa001_18()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stce010  #顯示到畫面上

            NEXT FIELD stce010                     #返回原欄位


            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce010
            #add-point:BEFORE FIELD stce009
            
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce010
            
            #add-point:AFTER FIELD stce010
            
            #END add-point
            
         ON ACTION controlp INFIELD stce011
            #add-point:ON ACTION controlp INFIELD stce011
                        #此段落由子樣板a08產生
            #開窗c段
			   INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
		      LET g_qryparam.reqry = FALSE
		      LET g_qryparam.arg1 = '281'
            CALL q_oocq002()                            #呼叫開窗
            DISPLAY g_qryparam.return1 TO stce011  #顯示到畫面上

            NEXT FIELD stce011                     #返回原欄位

         ON ACTION controlp INFIELD stce012
            #add-point:ON ACTION controlp INFIELD stce011
                        #此段落由子樣板a08產生
            #開窗c段
			  # INITIALIZE g_qryparam.* TO NULL
           #  LET g_qryparam.state = 'c'
		     # LET g_qryparam.reqry = FALSE
		     # LET g_qryparam.arg1 = '2035'
           # CALL q_oocq002()                           #呼叫開窗
           # DISPLAY g_qryparam.return1 TO stce012  #顯示到畫面上
           #
           # NEXT FIELD stce012                     #返回原欄位
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1"
            CALL q_oojd001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stce012  #顯示到畫面上

            NEXT FIELD stce012                    #返回原欄位  

         #----<<stce004>>----
         #Ctrlp:construct.c.stce004
         ON ACTION controlp INFIELD stce004
            #add-point:ON ACTION controlp INFIELD stce004
{<point name="construct.c.stce004" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce004
            #add-point:BEFORE FIELD stce004
{<point name="construct.b.stce004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce004
            
            #add-point:AFTER FIELD stce004
{<point name="construct.a.stce004" />}
            #END add-point
            
 
         #----<<stce021>>----
         #Ctrlp:construct.c.stce021
         ON ACTION controlp INFIELD stce021
            #add-point:ON ACTION controlp INFIELD stce021
{<point name="construct.c.stce021" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce021
            #add-point:BEFORE FIELD stce021
{<point name="construct.b.stce021" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce021
            
            #add-point:AFTER FIELD stce021
{<point name="construct.a.stce021" />}
            #END add-point
            
 
         #----<<stce0227>>----
         #Ctrlp:construct.c.stce022
         ON ACTION controlp INFIELD stce022
            #add-point:ON ACTION controlp INFIELD stce022
{<point name="construct.c.stan007" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce022
            #add-point:BEFORE FIELD stce022
{<point name="construct.b.stan007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce022
            
            #add-point:AFTER FIELD stce022
{<point name="construct.a.stan007" />}
            #END add-point
            
 
         #----<<stce023>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce023
            #add-point:BEFORE FIELD stce023
{<point name="construct.b.stce023" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce023
            
            #add-point:AFTER FIELD stce023
{<point name="construct.a.stce023" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce023
         ON ACTION controlp INFIELD stce023
            #add-point:ON ACTION controlp INFIELD stce023
{<point name="construct.c.stce023" />}
            #END add-point
 
         #----<<stce006>>----
         #Ctrlp:construct.c.stce006
         ON ACTION controlp INFIELD stce006
            #add-point:ON ACTION controlp INFIELD stce006
{<point name="construct.c.stce006" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce006
            #add-point:BEFORE FIELD stce006
{<point name="construct.b.stce006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce006
            
            #add-point:AFTER FIELD stce006
{<point name="construct.a.stce006" />}
            #END add-point
            
 
         #----<<stce007>>----
         #Ctrlp:construct.c.stce007
         ON ACTION controlp INFIELD stce007
            #add-point:ON ACTION controlp INFIELD stce007
{<point name="construct.c.stce007" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce007
            #add-point:BEFORE FIELD stce007
{<point name="construct.b.stce007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce007
            
            #add-point:AFTER FIELD stce007
{<point name="construct.a.stce007" />}
            #END add-point
            
 
         #----<<stce024>>----
         #Ctrlp:construct.c.stce024
         ON ACTION controlp INFIELD stce024
            #add-point:ON ACTION controlp INFIELD stce024
{<point name="construct.c.stce024" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce024
            #add-point:BEFORE FIELD stce024
{<point name="construct.b.stce024" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce024
            
            #add-point:AFTER FIELD stce024
{<point name="construct.a.stce024" />}
            #END add-point
            
 
         #----<<stce025>>----
         #Ctrlp:construct.c.stce025
         ON ACTION controlp INFIELD stce025
            #add-point:ON ACTION controlp INFIELD stce025
{<point name="construct.c.stce025" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce025
            #add-point:BEFORE FIELD stce025
{<point name="construct.b.stce025" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce025
            
            #add-point:AFTER FIELD stce025
{<point name="construct.a.stce025" />}
            #END add-point
            
 
         #----<<stce026>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce026
            #add-point:BEFORE FIELD stce026
{<point name="construct.b.stce026" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce026
            
            #add-point:AFTER FIELD stce026
{<point name="construct.a.stce026" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce026
         ON ACTION controlp INFIELD stce026
            #add-point:ON ACTION controlp INFIELD stce026
{<point name="construct.c.stce026" />}
            #END add-point
 
         #----<<stce013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce013
            #add-point:BEFORE FIELD stce013
{<point name="construct.b.stce013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce013
            
            #add-point:AFTER FIELD stce013
{<point name="construct.a.stce013" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce013
         ON ACTION controlp INFIELD stce013
            #add-point:ON ACTION controlp INFIELD stce013
{<point name="construct.c.stce013" />}
            #END add-point
 
         #----<<stce014>>----
         #Ctrlp:construct.c.stce014
         ON ACTION controlp INFIELD stce014
            #add-point:ON ACTION controlp INFIELD stce014
{<point name="construct.c.stce014" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce014
            #add-point:BEFORE FIELD stce014
{<point name="construct.b.stce014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce014
            
            #add-point:AFTER FIELD stce014
{<point name="construct.a.stce014" />}
            #END add-point
            
 
         #----<<stce015>>----
         #Ctrlp:construct.c.stce015
         ON ACTION controlp INFIELD stce015
            #add-point:ON ACTION controlp INFIELD stce015
{<point name="construct.c.stce015" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce015
            #add-point:BEFORE FIELD stce015
{<point name="construct.b.stce015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce015
            
            #add-point:AFTER FIELD stce015
{<point name="construct.a.stce015" />}
            #END add-point
            
 
         #----<<stce017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce017
            #add-point:BEFORE FIELD stce017
{<point name="construct.b.stce017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce017
            
            #add-point:AFTER FIELD stce017
{<point name="construct.a.stce017" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce017
         ON ACTION controlp INFIELD stce017
            #add-point:ON ACTION controlp INFIELD stce017
{<point name="construct.c.stce017" />}
            #END add-point
 
         #----<<stce018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce018
            #add-point:BEFORE FIELD stce018
{<point name="construct.b.stce018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce018
            
            #add-point:AFTER FIELD stce018
{<point name="construct.a.stce018" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce018
         ON ACTION controlp INFIELD stce018
            #add-point:ON ACTION controlp INFIELD stce018
{<point name="construct.c.stce018" />}
            #END add-point
 
         #----<<stce019>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce019
            #add-point:BEFORE FIELD stce019
{<point name="construct.b.stce019" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce019
            
            #add-point:AFTER FIELD stce019
{<point name="construct.a.stce019" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce019
         ON ACTION controlp INFIELD stce019
            #add-point:ON ACTION controlp INFIELD stce019
{<point name="construct.c.stce019" />}
            #END add-point
 
         #----<<stce020>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce020
            #add-point:BEFORE FIELD stce020
{<point name="construct.b.stce020" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce020
            
            #add-point:AFTER FIELD stce020
{<point name="construct.a.stce020" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stce020
         ON ACTION controlp INFIELD stce020
            #add-point:ON ACTION controlp INFIELD stce020
{<point name="construct.c.stce020" />}
            #END add-point
 
         #----<<stcestus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcestus
            #add-point:BEFORE FIELD stcestus
{<point name="construct.b.stcestus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcestus
            
            #add-point:AFTER FIELD stcestus
{<point name="construct.a.stcestus" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stcestus
         ON ACTION controlp INFIELD stcestus
            #add-point:ON ACTION controlp INFIELD stcestus
{<point name="construct.c.stcestus" />}
            #END add-point
 
         #----<<stceownid>>----
         #Ctrlp:construct.c.stceownid
         ON ACTION controlp INFIELD stceownid
            #add-point:ON ACTION controlp INFIELD stceownid
{<point name="construct.c.stceownid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stceownid
            #add-point:BEFORE FIELD stceownid
{<point name="construct.b.stceownid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stceownid
            
            #add-point:AFTER FIELD stceownid
{<point name="construct.a.stceownid" />}
            #END add-point
            
 
         #----<<stceowndp>>----
         #Ctrlp:construct.c.stceowndp
         ON ACTION controlp INFIELD stceowndp
            #add-point:ON ACTION controlp INFIELD stceowndp
{<point name="construct.c.stceowndp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stceowndp
            #add-point:BEFORE FIELD stceowndp
{<point name="construct.b.stceowndp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stceowndp
            
            #add-point:AFTER FIELD stceowndp
{<point name="construct.a.stceowndp" />}
            #END add-point
            
 
         #----<<stcecrtid>>----
         #Ctrlp:construct.c.stcecrtid
         ON ACTION controlp INFIELD stcecrtid
            #add-point:ON ACTION controlp INFIELD stcecrtid
{<point name="construct.c.stcecrtid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcecrtid
            #add-point:BEFORE FIELD stcecrtid
{<point name="construct.b.stcecrtid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcecrtid
            
            #add-point:AFTER FIELD stcecrtid
{<point name="construct.a.stcecrtid" />}
            #END add-point
            
 
         #----<<stcecrtdp>>----
         #Ctrlp:construct.c.stcecrtdp
         ON ACTION controlp INFIELD stcecrtdp
            #add-point:ON ACTION controlp INFIELD stcecrtdp
{<point name="construct.c.stcecrtdp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcecrtdp
            #add-point:BEFORE FIELD stcecrtdp
{<point name="construct.b.stcecrtdp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcecrtdp
            
            #add-point:AFTER FIELD stcecrtdp
{<point name="construct.a.stcecrtdp" />}
            #END add-point
            
 
         #----<<stcecrtdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcecrtdt
            #add-point:BEFORE FIELD stcecrtdt
{<point name="construct.b.stcecrtdt" />}
            #END add-point
 
         #----<<stcemodid>>----
         #Ctrlp:construct.c.stcemodid
         ON ACTION controlp INFIELD stcemodid
            #add-point:ON ACTION controlp INFIELD stcemodid
{<point name="construct.c.stcemodid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcemodid
            #add-point:BEFORE FIELD stcemodid
{<point name="construct.b.stcemodid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcemodid
            
            #add-point:AFTER FIELD stcemodid
{<point name="construct.a.stcemodid" />}
            #END add-point
            
 
         #----<<stcemoddt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcemoddt
            #add-point:BEFORE FIELD stcemoddt
{<point name="construct.b.stcemoddt" />}
            #END add-point
 
         #----<<stcecnfid>>----
         #Ctrlp:construct.c.stcecnfid
         ON ACTION controlp INFIELD stcecnfid
            #add-point:ON ACTION controlp INFIELD stcecnfid
{<point name="construct.c.stcecnfid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcecnfid
            #add-point:BEFORE FIELD stcecnfid
{<point name="construct.b.stcecnfid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcecnfid
            
            #add-point:AFTER FIELD stcecnfid
{<point name="construct.a.stcecnfid" />}
            #END add-point
            
 
         #----<<stcecnfdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcecnfdt
            #add-point:BEFORE FIELD stcecnfdt
{<point name="construct.b.stcecnfdt" />}
            #END add-point
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON stcfseq,stcf002,stcf021,stcf003,stcf004,stcf005,stcf006,stcf007,stcf008,stcf009, 
          stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcf019,stcf020
           FROM s_detail1[1].stcfseq,s_detail1[1].stcf002,s_detail1[1].stcf021,s_detail1[1].stcf003,s_detail1[1].stcf004, 
               s_detail1[1].stcf005,s_detail1[1].stcf006,s_detail1[1].stcf007,s_detail1[1].stcf008,s_detail1[1].stcf009, 
               s_detail1[1].stcf010,s_detail1[1].stcf011,s_detail1[1].stcf012,s_detail1[1].stcf013,s_detail1[1].stcf014, 
               s_detail1[1].stcf015,s_detail1[1].stcf016,s_detail1[1].stcf017,s_detail1[1].stcf018,s_detail1[1].stcf019,s_detail1[1].stcf020
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
{<point name="cs.body.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
       #---------------------<  Detail: page1  >---------------------
         #----<<stcfseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcfseq
            #add-point:BEFORE FIELD stcfseq
{<point name="construct.b.page1.stcfseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcfseq
            
            #add-point:AFTER FIELD stcfseq
{<point name="construct.a.page1.stcfseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcfseq
         ON ACTION controlp INFIELD stcfseq
            #add-point:ON ACTION controlp INFIELD stcfseq
{<point name="construct.c.page1.stcfseq" />}
            #END add-point
 
         #----<<stcf002>>----
         #Ctrlp:construct.c.page1.stcf002
         ON ACTION controlp INFIELD stcf002
            #add-point:ON ACTION controlp INFIELD stcf002
{<point name="construct.c.page1.stcf002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf002
            #add-point:BEFORE FIELD stcf002
{<point name="construct.b.page1.stcf002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf002
            
            #add-point:AFTER FIELD stcf002
{<point name="construct.a.page1.stcf002" />}
            #END add-point
            
 
         #----<<stcf003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf003
            #add-point:BEFORE FIELD stcf003
{<point name="construct.b.page1.stcf003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf003
            
            #add-point:AFTER FIELD stcf003
{<point name="construct.a.page1.stcf003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf003
         ON ACTION controlp INFIELD stcf003
            #add-point:ON ACTION controlp INFIELD stcf003
{<point name="construct.c.page1.stcf003" />}
            #END add-point
 
         #----<<stcf004>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf004
            #add-point:BEFORE FIELD stcf004
{<point name="construct.b.page1.stcf004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf004
            
            #add-point:AFTER FIELD stcf004
{<point name="construct.a.page1.stcf004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf004
         ON ACTION controlp INFIELD stcf004
            #add-point:ON ACTION controlp INFIELD stcf004
{<point name="construct.c.page1.stcf004" />}
            #END add-point
 
         #----<<stcf005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf005
            #add-point:BEFORE FIELD stcf005
{<point name="construct.b.page1.stcf005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf005
            
            #add-point:AFTER FIELD stcf005
{<point name="construct.a.page1.stcf005" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf005
         ON ACTION controlp INFIELD stcf005
            #add-point:ON ACTION controlp INFIELD stcf005
{<point name="construct.c.page1.stcf005" />}
            #END add-point
 
         #----<<stcf006>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf006
            #add-point:BEFORE FIELD stcf006
{<point name="construct.b.page1.stcf006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf006
            
            #add-point:AFTER FIELD stcf006
{<point name="construct.a.page1.stcf006" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf006
         ON ACTION controlp INFIELD stcf006
            #add-point:ON ACTION controlp INFIELD stcf006
{<point name="construct.c.page1.stcf006" />}
            #END add-point
 
         #----<<stcf007>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf007
            #add-point:BEFORE FIELD stcf007
{<point name="construct.b.page1.stcf007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf007
            
            #add-point:AFTER FIELD stcf007
{<point name="construct.a.page1.stcf007" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf007
         ON ACTION controlp INFIELD stcf007
            #add-point:ON ACTION controlp INFIELD stcf007
{<point name="construct.c.page1.stcf007" />}
            #END add-point
 
         #----<<stcf008>>----
         #Ctrlp:construct.c.page1.stcf008
         ON ACTION controlp INFIELD stcf008
            #add-point:ON ACTION controlp INFIELD stcf008
{<point name="construct.c.page1.stcf008" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf008
            #add-point:BEFORE FIELD stcf008
{<point name="construct.b.page1.stcf008" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf008
            
            #add-point:AFTER FIELD stcf008
{<point name="construct.a.page1.stcf008" />}
            #END add-point
            
 
         #----<<stcf009>>----
         #Ctrlp:construct.c.page1.stcf009
         ON ACTION controlp INFIELD stcf009
            #add-point:ON ACTION controlp INFIELD stcf009
{<point name="construct.c.page1.stcf009" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf009
            #add-point:BEFORE FIELD stcf009
{<point name="construct.b.page1.stcf009" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf009
            
            #add-point:AFTER FIELD stcf009
{<point name="construct.a.page1.stcf009" />}
            #END add-point
            
 
         #----<<stcf010>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf010
            #add-point:BEFORE FIELD stcf010
{<point name="construct.b.page1.stcf010" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf010
            
            #add-point:AFTER FIELD stcf010
{<point name="construct.a.page1.stcf010" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf010
         ON ACTION controlp INFIELD stcf010
            #add-point:ON ACTION controlp INFIELD stcf010
{<point name="construct.c.page1.stcf010" />}
            #END add-point
 
         #----<<stcf011>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf011
            #add-point:BEFORE FIELD stcf011
{<point name="construct.b.page1.stcf011" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf011
            
            #add-point:AFTER FIELD stcf011
{<point name="construct.a.page1.stcf011" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf011
         ON ACTION controlp INFIELD stcf011
            #add-point:ON ACTION controlp INFIELD stcf011
{<point name="construct.c.page1.stcf011" />}
            #END add-point
 
         #----<<stcf012>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf012
            #add-point:BEFORE FIELD stcf012
{<point name="construct.b.page1.stcf012" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf012
            
            #add-point:AFTER FIELD stcf012
{<point name="construct.a.page1.stcf012" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf012
         ON ACTION controlp INFIELD stcf012
            #add-point:ON ACTION controlp INFIELD stcf012
{<point name="construct.c.page1.stcf012" />}
            #END add-point
 
         #----<<stcf013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf013
            #add-point:BEFORE FIELD stcf013
{<point name="construct.b.page1.stcf013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf013
            
            #add-point:AFTER FIELD stcf013
{<point name="construct.a.page1.stcf013" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf013
         ON ACTION controlp INFIELD stcf013
            #add-point:ON ACTION controlp INFIELD stcf013
{<point name="construct.c.page1.stcf013" />}
            #END add-point
 
         #----<<stcf014>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf014
            #add-point:BEFORE FIELD stcf014
{<point name="construct.b.page1.stcf014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf014
            
            #add-point:AFTER FIELD stcf014
{<point name="construct.a.page1.stcf014" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf014
         ON ACTION controlp INFIELD stcf014
            #add-point:ON ACTION controlp INFIELD stcf014
{<point name="construct.c.page1.stcf014" />}
            #END add-point
 
         #----<<stcf015>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf015
            #add-point:BEFORE FIELD stcf015
{<point name="construct.b.page1.stcf015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf015
            
            #add-point:AFTER FIELD stcf015
{<point name="construct.a.page1.stcf015" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf015
         ON ACTION controlp INFIELD stcf015
            #add-point:ON ACTION controlp INFIELD stcf015
{<point name="construct.c.page1.stcf015" />}
            #END add-point
 
         #----<<stcf016>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf016
            #add-point:BEFORE FIELD stcf016
{<point name="construct.b.page1.stcf016" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf016
            
            #add-point:AFTER FIELD stcf016
{<point name="construct.a.page1.stcf016" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf016
         ON ACTION controlp INFIELD stcf016
            #add-point:ON ACTION controlp INFIELD stcf016
{<point name="construct.c.page1.stcf016" />}
            #END add-point
 
         #----<<stcf017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf017
            #add-point:BEFORE FIELD stcf017
{<point name="construct.b.page1.stcf017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf017
            
            #add-point:AFTER FIELD stcf017
{<point name="construct.a.page1.stcf017" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf017
         ON ACTION controlp INFIELD stcf017
            #add-point:ON ACTION controlp INFIELD stcf017
{<point name="construct.c.page1.stcf017" />}
            #END add-point
 
         #----<<stcf018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf018
            #add-point:BEFORE FIELD stcf018
{<point name="construct.b.page1.stcf018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf018
            
            #add-point:AFTER FIELD stcf018
{<point name="construct.a.page1.stcf018" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcf018
         ON ACTION controlp INFIELD stcf018
            #add-point:ON ACTION controlp INFIELD stcf018
{<point name="construct.c.page1.stcf018" />}
            #END add-point
 
   
       
      END CONSTRUCT
      
      CONSTRUCT g_wc2_table2 ON stchseq,stch002,stch003
           FROM s_detail2[1].stchseq,s_detail2[1].stch002,s_detail2[1].stch003
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
{<point name="cs.body2.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       
       
       #單身一般欄位開窗相關處理       
       #---------------------<  Detail: page2  >---------------------
         #----<<stchseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stchseq
            #add-point:BEFORE FIELD stchseq
{<point name="construct.b.page2.stchseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stchseq
            
            #add-point:AFTER FIELD stchseq
{<point name="construct.a.page2.stchseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stchseq
         ON ACTION controlp INFIELD stchseq
            #add-point:ON ACTION controlp INFIELD stchseq
{<point name="construct.c.page2.stchseq" />}
            #END add-point
 
         #----<<stch002>>----
         #Ctrlp:construct.c.page2.stch002
         ON ACTION controlp INFIELD stch002
            #add-point:ON ACTION controlp INFIELD stch002
{<point name="construct.c.page2.stch002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stch002
            #add-point:BEFORE FIELD stch002
{<point name="construct.b.page2.stch002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stch002
            
            #add-point:AFTER FIELD stch002
{<point name="construct.a.page2.stch002" />}
            #END add-point
            
 
         #----<<stch003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stch003
            #add-point:BEFORE FIELD stch003
{<point name="construct.b.page2.stch003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stch003
            
            #add-point:AFTER FIELD stch003
{<point name="construct.a.page2.stch003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stch003
         ON ACTION controlp INFIELD stch003
            #add-point:ON ACTION controlp INFIELD stch003
{<point name="construct.c.page2.stch003" />}
            #END add-point
 
   
       
      END CONSTRUCT
 
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令)
{<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog
{<point name="cs.b_dialog"/>}
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
   END IF
 
 
 
 
   
   #add-point:cs段結束前
{<point name="cs.after_construct"/>}
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION

{</section>}

{<section id="astm601.filter" >}
#+ filter過濾功能
PRIVATE FUNCTION astm601_filter()
   #add-point:filter段define
{<point name="filter.define"/>}
   #end add-point   
 
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON stce001,stce002,stce004,stce009,stce021,stce022,stce023,stce006, 
          stce007,stce026,stce013,stce014,stce015,stce024,stce025,stce017,stce018,stce019,stce020,stce003, 
          stceunit
                          FROM s_browse[1].b_stce001,s_browse[1].b_stce002,s_browse[1].b_stce004, 
                              s_browse[1].b_stce009,s_browse[1].b_stce021,s_browse[1].b_stce022,s_browse[1].b_stce023, 
                              s_browse[1].b_stce006,s_browse[1].b_stce007,s_browse[1].b_stce026,s_browse[1].b_stce013, 
                              s_browse[1].b_stce014,s_browse[1].b_stce015,s_browse[1].b_stce024,s_browse[1].b_stce025, 
                              s_browse[1].b_stce017,s_browse[1].b_stce018,s_browse[1].b_stce019,s_browse[1].b_stce020, 
                              s_browse[1].b_stce003,s_browse[1].b_stceunit
 
         BEFORE CONSTRUCT
               DISPLAY astm601_filter_parser('stce001') TO s_browse[1].b_stce001
            DISPLAY '11' TO s_browse[1].b_stce005
            DISPLAY astm601_filter_parser('stce002') TO s_browse[1].b_stce002
            DISPLAY astm601_filter_parser('stce004') TO s_browse[1].b_stce004
            DISPLAY astm601_filter_parser('stce009') TO s_browse[1].b_stce009
            DISPLAY astm601_filter_parser('stce021') TO s_browse[1].b_stce021
            DISPLAY astm601_filter_parser('stce022') TO s_browse[1].b_stce022
            DISPLAY astm601_filter_parser('stce023') TO s_browse[1].b_stce023
            DISPLAY astm601_filter_parser('stce006') TO s_browse[1].b_stce006
            DISPLAY astm601_filter_parser('stce007') TO s_browse[1].b_stce007
            DISPLAY astm601_filter_parser('stce026') TO s_browse[1].b_stce026
            DISPLAY astm601_filter_parser('stce013') TO s_browse[1].b_stce013
            DISPLAY astm601_filter_parser('stce014') TO s_browse[1].b_stce014
            DISPLAY astm601_filter_parser('stce015') TO s_browse[1].b_stce015
            DISPLAY astm601_filter_parser('stce024') TO s_browse[1].b_stce024
            DISPLAY astm601_filter_parser('stce025') TO s_browse[1].b_stce025
            DISPLAY astm601_filter_parser('stce017') TO s_browse[1].b_stce017
            DISPLAY astm601_filter_parser('stce018') TO s_browse[1].b_stce018
            DISPLAY astm601_filter_parser('stce019') TO s_browse[1].b_stce019
            DISPLAY astm601_filter_parser('stce020') TO s_browse[1].b_stce020
            DISPLAY astm601_filter_parser('stce003') TO s_browse[1].b_stce003
            DISPLAY astm601_filter_parser('stceunit') TO s_browse[1].b_stceunit
      
                            #add-point:filter段cs_ctrl
{<point name="filter.cs_ctrl"/>}
                            #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs
{<point name="filter.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog
{<point name="filter.b_dialog"/>}
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL astm601_filter_show('stce001')
   CALL astm601_filter_show('stce005')
   CALL astm601_filter_show('stce002')
   CALL astm601_filter_show('stce004')
   CALL astm601_filter_show('stce009')
   CALL astm601_filter_show('stce021')
   CALL astm601_filter_show('stce022')
   CALL astm601_filter_show('stce023')
   CALL astm601_filter_show('stce006')
   CALL astm601_filter_show('stce007')
   CALL astm601_filter_show('stce026')
   CALL astm601_filter_show('stce013')
   CALL astm601_filter_show('stce014')
   CALL astm601_filter_show('stce015')
   CALL astm601_filter_show('stce024')
   CALL astm601_filter_show('stce025')
   CALL astm601_filter_show('stce017')
   CALL astm601_filter_show('stce018')
   CALL astm601_filter_show('stce019')
   CALL astm601_filter_show('stce020')
   CALL astm601_filter_show('stce003')
   CALL astm601_filter_show('stceunit')
 
END FUNCTION

{</section>}

{<section id="astm601.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION astm601_filter_parser(ps_field)
   {<Local define>}
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num5
   DEFINE li_tmp2    LIKE type_t.num5
   DEFINE ls_var     STRING
   {</Local define>}
   #add-point:filter段define
   {<point name="filter_parser.define"/>}
   #end add-point    
 
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION

{</section>}

{<section id="astm601.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION astm601_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
     
   LET ls_name = "formonly.b_", ps_field
   
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
   
   #顯示資料組合
   LET ls_condition = astm601_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
   
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
   
END FUNCTION

{</section>}

{<section id="astm601.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION astm601_query()
   {<Local define>}
   DEFINE ls_wc STRING
   {</Local define>}
   #add-point:query段define
{<point name="query.define"/>}
   #end add-point   
 
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_stcf_d.clear()
   CALL g_stcf2_d.clear()
 
 
   
   #add-point:query段other
{<point name="query.other"/>}
   #end add-point   
   
   DISPLAY ' ' TO FORMONLY.idx
   DISPLAY ' ' TO FORMONLY.cnt
   DISPLAY ' ' TO FORMONLY.b_index
   DISPLAY ' ' TO FORMONLY.b_count
   DISPLAY ' ' TO FORMONLY.h_index
   DISPLAY ' ' TO FORMONLY.h_count
   
   CALL astm601_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      LET g_wc = ls_wc
      CALL astm601_browser_fill("")
      CALL astm601_fetch("")
      RETURN
   END IF
   
   #搜尋後資料初始化
   LET g_detail_cnt = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx = 1
   LET g_detail_idx2 = 1
   LET l_ac = 1
   LET g_wc_filter = ""
   CALL FGL_SET_ARR_CURR(1)
      CALL astm601_filter_show('stce001')
   CALL astm601_filter_show('stce005')
   CALL astm601_filter_show('stce002')
   CALL astm601_filter_show('stce004')
   CALL astm601_filter_show('stce009')
   CALL astm601_filter_show('stce021')
   CALL astm601_filter_show('stce022')
   CALL astm601_filter_show('stce023')
   CALL astm601_filter_show('stce006')
   CALL astm601_filter_show('stce007')
   CALL astm601_filter_show('stce026')
   CALL astm601_filter_show('stce013')
   CALL astm601_filter_show('stce014')
   CALL astm601_filter_show('stce015')
   CALL astm601_filter_show('stce024')
   CALL astm601_filter_show('stce025')
   CALL astm601_filter_show('stce017')
   CALL astm601_filter_show('stce018')
   CALL astm601_filter_show('stce019')
   CALL astm601_filter_show('stce020')
   CALL astm601_filter_show('stce003')
   CALL astm601_filter_show('stceunit')
   LET g_error_show = 1
   CALL astm601_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "-100"
      LET g_errparam.extend = ""
      LET g_errparam.popup = TRUE
      CALL cl_err()

   ELSE
      CALL astm601_fetch("F") 
   END IF
 
END FUNCTION

{</section>}

{<section id="astm601.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION astm601_fetch(p_flag)
   {<Local define>}
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   {</Local define>}
   #add-point:fetch段define
{<point name="fetch.define"/>}
   #end add-point    
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
   
   CASE p_flag
      WHEN 'F' LET g_current_idx = 1
      WHEN 'L' LET g_current_idx = g_header_cnt        
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         
         LET g_no_ask = FALSE  
   END CASE 
   
   
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   #LET g_detail_idx = 1
   IF g_detail_cnt > 0 THEN
      #LET g_detail_idx = 1
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY ' ' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
   
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #超出範圍
   IF g_current_idx > g_browser.getLength() THEN
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_stce_m.stce001 = g_browser[g_current_idx].b_stce001
 
   
   #重讀DB,因TEMP有不被更新特性
    SELECT UNIQUE stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stcesite,stce027,stce021,stce022,stce023,stce006, 
        stce007,stce008,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce016,stce017,stce018,stce019,stce020,stcestus, 
        stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid,stcemoddt,stcecnfid,stcecnfdt
 INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004, 
     g_stce_m.stceunit,g_stce_m.stcesite,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007,g_stce_m.stce008, 
     g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015, g_stce_m.stce016,
     g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid, 
     g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt,g_stce_m.stcemodid, 
     g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt
 FROM stce_t
 WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = "stce_t"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      INITIALIZE g_stce_m.* TO NULL
      RETURN
   END IF
   
   #add-point:fetch段action控制
{<point name="fetch.action_control"/>}
   #end add-point  
   
   
   
   #add-point:fetch結束前
{<point name="fetch.after" />}
   #end add-point
   
   #LET g_data_owner =       
   #LET g_data_group =   
   
   #重新顯示   
   CALL astm601_show()
 
END FUNCTION

{</section>}

{<section id="astm601.insert" >}
#+ 資料新增
PRIVATE FUNCTION astm601_insert()
   #add-point:insert段define
{<point name="insert.define"/>}
   #end add-point    
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_stcf_d.clear()   
   CALL g_stcf2_d.clear()  
   CALL g_stcg_d.clear() 
   CALL g_stcw_d.clear() 
 
   INITIALIZE g_stce_m.* LIKE stce_t.*             #DEFAULT 設定
   
   LET g_stce001_t = NULL
 
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #此段落由子樣板a14產生    
      LET g_stce_m.stceownid = g_user
      LET g_stce_m.stceowndp = g_dept
      LET g_stce_m.stcecrtid = g_user
      LET g_stce_m.stcecrtdp = g_dept 
      LET g_stce_m.stcecrtdt = cl_get_current()
      LET g_stce_m.stcemodid = ""
      LET g_stce_m.stcemoddt = ""
      #LET g_stce_m.stcestus = ""
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_stce_m.stce005 = "11"

 
  
      #add-point:單頭預設值
{<point name="insert.default"/>}
      #end add-point 
     
      CALL astm601_input("a")
      
      #add-point:單頭輸入後
{<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_stce_m.* = g_stce_m_t.*
         CALL astm601_show()
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9001
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         CALL s_transaction_end('N','0')
         EXIT WHILE
      END IF
      
      CALL g_stcf_d.clear()
      CALL g_stcf2_d.clear()
 
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   LET g_state = "Y"
   
   LET g_stce001_t = g_stce_m.stce001
 
   
   LET g_wc = g_wc,  
              " OR ( stceent = '" ||g_enterprise|| "' AND",
              " stce001 = '", g_stce_m.stce001 CLIPPED, "' "
 
              , ") "
   
   CLOSE astm601_cl
   
END FUNCTION

{</section>}

{<section id="astm601.modify" >}
#+ 資料修改
PRIVATE FUNCTION astm601_modify()
   {<Local define>}
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:modify段define
{<point name="modify.define"/>}
   #end add-point    
   
   IF g_stce_m.stce001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
   
    SELECT UNIQUE stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stcesite,stce027,stce021,stce022,stce023,stce006, 
        stce007,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce016,stce017,stce018,stce019,stce020,stcestus, 
        stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid,stcemoddt,stcecnfid,stcecnfdt
 INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004, 
     g_stce_m.stceunit,g_stce_m.stcesite,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007, 
     g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015,g_stce_m.stce016,
     g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid, 
     g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt,g_stce_m.stcemodid, 
     g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt
 FROM stce_t
 WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
 
   ERROR ""
  
   LET g_stce001_t = g_stce_m.stce001
 
   CALL s_transaction_begin()
   
   OPEN astm601_cl USING g_enterprise,g_stce_m.stce001
 
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code =  STATUS
      LET g_errparam.extend = "OPEN astm601_cl:"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      CLOSE astm601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #鎖住將被更改或取消的資料
   FETCH astm601_cl INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009, 
       g_stce_m.stce009_desc,g_stce_m.stce004,g_stce_m.stce004_desc,g_stce_m.stceunit,g_stce_m.stceunit_desc, 
       g_stce_m.stce021,g_stce_m.stce021_desc,g_stce_m.stce022,g_stce_m.stce022_desc,g_stce_m.stce023,g_stce_m.stce023_desc, 
       g_stce_m.stce006,g_stce_m.stce006_desc,g_stce_m.stce007,g_stce_m.stce007_desc,g_stce_m.stce024, 
       g_stce_m.stce024_desc,g_stce_m.stce025,g_stce_m.stce025_desc,g_stce_m.stce026,g_stce_m.stce013, 
       g_stce_m.stce014,g_stce_m.stce014_desc,g_stce_m.stce015,g_stce_m.stce015_desc,g_stce_m.stce017, 
       g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid,g_stce_m.stceownid_desc, 
       g_stce_m.stceowndp,g_stce_m.stceowndp_desc,g_stce_m.stcecrtid,g_stce_m.stcecrtid_desc,g_stce_m.stcecrtdp, 
       g_stce_m.stcecrtdp_desc,g_stce_m.stcecrtdt,g_stce_m.stcemodid,g_stce_m.stcemodid_desc,g_stce_m.stcemoddt, 
       g_stce_m.stcecnfid,g_stce_m.stcecnfid_desc,g_stce_m.stcecnfdt
 
   #資料被他人LOCK, 或是sql執行時出現錯誤
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stce_m.stce001
      LET g_errparam.popup = FALSE
      CALL cl_err()

      CLOSE astm601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   
 
   CALL astm601_show()
   WHILE TRUE
      LET g_stce001_t = g_stce_m.stce001
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_stce_m.stcemodid = g_user 
LET g_stce_m.stcemoddt = cl_get_current()
 
      
      #add-point:modify段修改前
{<point name="modify.before_input"/>}
      #end add-point
      
      CALL astm601_input("u")     #欄位更改
 
      #add-point:modify段修改後
{<point name="modify.after_input"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_stce_m.* = g_stce_m_t.*
         CALL astm601_show()
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9001
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         CALL s_transaction_end('N','0')
         EXIT WHILE
      END IF
      
      #若單頭key欄位有變更
      IF g_stce_m.stce001 != g_stce001_t 
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前
{<point name="modify.body.b_fk_update" mark="Y"/>}
         #end add-point
         
         #更新單身key值
         UPDATE stcf_t SET stcf001 = g_stce_m.stce001
 
          WHERE stcfent = g_enterprise AND stcf001 = g_stce001_t
 
            
         #add-point:單身fk修改中
{<point name="modify.body.m_fk_update"/>}
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00009"
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後
{<point name="modify.body.a_fk_update"/>}
         #end add-point
         
         #更新單身key值
         #add-point:單身fk修改前
{<point name="modify.body.b_fk_update2" mark="Y"/>}
         #end add-point
         UPDATE stch_t
            SET stch001 = g_stce_m.stce001
 
          WHERE stchent = g_enterprise AND
                stch001 = g_stce001_t
 
         #add-point:單身fk修改中
{<point name="modify.body.m_fk_update2"/>}
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00009"
               LET g_errparam.extend = "stch_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stch_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後
{<point name="modify.body.a_fk_update2"/>}
         #end add-point
 
 
         
 
         
         #UPDATE 多語言table key值
         
         
 
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #修改歷程記錄
   IF NOT cl_log_modified_record(g_stce_m.stce001,g_site) THEN 
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE astm601_cl
   CALL s_transaction_end('Y','0')
 
   #流程通知預埋點-U
   CALL cl_flow_notify(g_stce_m.stce001,'U')
 
END FUNCTION   

{</section>}

{<section id="astm601.input" >}
#+ 資料輸入
PRIVATE FUNCTION astm601_input(p_cmd)
   {<Local define>}
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_ac_t                LIKE type_t.num5                #未取消的ARRAY CNT 
   DEFINE  l_n                   LIKE type_t.num5                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num5                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num5
   DEFINE  l_i                   LIKE type_t.num5
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num5
   DEFINE  li_reproduce_target   LIKE type_t.num5
   {</Local define>}
   #add-point:input段define
{<point name="input.define"/>}
   #end add-point  
 
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql
{<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT stcfseq,stcf002,'',stcf003,stcf004,stcf005,stcf006,stcf007,stcf008,'', 
       stcf009,'',stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcf019 FROM stcf_t  
       WHERE stcfent=? AND stcf001=? AND stcfseq=? FOR UPDATE"
   #add-point:input段define_sql
{<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE astm601_bcl CURSOR FROM g_forupd_sql
   
   #add-point:input段define_sql
{<point name="input.define_sql2" mark="Y"/>}
   #end add-point    
   LET g_forupd_sql = "SELECT stchseq,stch002,'',stch003 FROM stch_t WHERE stchent=? AND stch001=? AND  
       stchseq=? FOR UPDATE"
   #add-point:input段define_sql
{<point name="input.after_define_sql2"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE astm601_bcl2 CURSOR FROM g_forupd_sql
 
 
   
 
 
   #add-point:input段define_sql
{<point name="input.other_sql"/>}
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL astm601_set_entry(p_cmd)
   #add-point:set_entry後
{<point name="input.after_set_entry"/>}
   #end add-point
   CALL astm601_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009, 
       g_stce_m.stce004,g_stce_m.stceunit,g_stce_m.stcesite,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006, 
       g_stce_m.stce007,g_stce_m.stce024,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014, 
       g_stce_m.stce015,g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus 

   
   LET lb_reproduce = FALSE
   
   #add-point:資料輸入前
{<point name="input.before_input"/>}
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
   

{</section>}

{<section id="astm601.input.head" >}
      #單頭段
      INPUT BY NAME g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce012,  
          g_stce_m.stce004,g_stce_m.stceunit,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006, 
          g_stce_m.stce007,g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014, 
          g_stce_m.stce015,g_stce_m.stce016,g_stce_m.stce017,g_stce_m.stce018,g_stce_m.next_b,g_stce_m.stce019,g_stce_m.stce020,
          g_stce_m.ooff013,g_stce_m.stcestus  

         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #add-point:資料輸入前
{<point name="input.m.before_input"/>}
            #end add-point
 
         #---------------------------<  Master  >---------------------------
         #----<<stce005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce005
            #add-point:BEFORE FIELD stce005
{<point name="input.b.stce005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce005
            
            #add-point:AFTER FIELD stce005
{<point name="input.a.stce005" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce005
            #add-point:ON CHANGE stce005
{<point name="input.g.stce005" />}
            #END add-point
 
         #----<<stce001>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce001
            #add-point:BEFORE FIELD stce001
{<point name="input.b.stce001" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce001
            
            #add-point:AFTER FIELD stce001
{<point name="input.a.stce001" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce001
            #add-point:ON CHANGE stce001
{<point name="input.g.stce001" />}
            #END add-point
 
         #----<<stce002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce002
            #add-point:BEFORE FIELD stce002
{<point name="input.b.stce002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce002
            
            #add-point:AFTER FIELD stce002
{<point name="input.a.stce002" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce002
            #add-point:ON CHANGE stce002
{<point name="input.g.stce002" />}
            #END add-point
 
         #----<<stce003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce003
            #add-point:BEFORE FIELD stce003
{<point name="input.b.stce003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce003
            
            #add-point:AFTER FIELD stce003
{<point name="input.a.stce003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce003
            #add-point:ON CHANGE stce003
{<point name="input.g.stce003" />}
            #END add-point
 
         #----<<stce009>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce009
            
            #add-point:AFTER FIELD stce009
{<point name="input.a.stce009" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce009
            #add-point:BEFORE FIELD stce009
{<point name="input.b.stce009" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce009
            #add-point:ON CHANGE stce009
{<point name="input.g.stce009" />}
            #END add-point

         #----<<stce004>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce004
            
            #add-point:AFTER FIELD stce004
{<point name="input.a.stce004" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce004
            #add-point:BEFORE FIELD stce004
{<point name="input.b.stce004" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce004
            #add-point:ON CHANGE stce004
{<point name="input.g.stce004" />}
            #END add-point
 
         #----<<stceunit>>----
         #此段落由子樣板a02產生
         AFTER FIELD stceunit
            
            #add-point:AFTER FIELD stceunit
{<point name="input.a.stceunit" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stceunit
            #add-point:BEFORE FIELD stceunit
{<point name="input.b.stceunit" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stceunit
            #add-point:ON CHANGE stceunit
{<point name="input.g.stceunit" />}
            #END add-point
 
         #----<<stce021>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce021
            
            #add-point:AFTER FIELD stce021
{<point name="input.a.stce021" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce021
            #add-point:BEFORE FIELD stce021
{<point name="input.b.stce021" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce021
            #add-point:ON CHANGE stce021
{<point name="input.g.stce021" />}
            #END add-point
 
         #----<<stce022>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce022
            
            #add-point:AFTER FIELD stce022
{<point name="input.a.stan007" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce022
            #add-point:BEFORE FIELD stce022
{<point name="input.b.stan007" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce022
            #add-point:ON CHANGE stce022
{<point name="input.g.stan007" />}
            #END add-point
 
         #----<<stce023>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce023
            #add-point:BEFORE FIELD stce023
{<point name="input.b.stce023" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce023
            
            #add-point:AFTER FIELD stce023
{<point name="input.a.stce023" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce023
            #add-point:ON CHANGE stce023
{<point name="input.g.stce023" />}
            #END add-point
 
         #----<<stce006>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce006
            
            #add-point:AFTER FIELD stce006
{<point name="input.a.stce006" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce006
            #add-point:BEFORE FIELD stce006
{<point name="input.b.stce006" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce006
            #add-point:ON CHANGE stce006
{<point name="input.g.stce006" />}
            #END add-point
 
         #----<<stce007>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce007
            
            #add-point:AFTER FIELD stce007
{<point name="input.a.stce007" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce007
            #add-point:BEFORE FIELD stce007
{<point name="input.b.stce007" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce007
            #add-point:ON CHANGE stce007
{<point name="input.g.stce007" />}
            #END add-point
 
         #----<<stce024>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce024
            
            #add-point:AFTER FIELD stce024
{<point name="input.a.stce024" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce024
            #add-point:BEFORE FIELD stce024
{<point name="input.b.stce024" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce024
            #add-point:ON CHANGE stce024
{<point name="input.g.stce024" />}
            #END add-point
 
         #----<<stce025>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce025
            
            #add-point:AFTER FIELD stce025
{<point name="input.a.stce025" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce025
            #add-point:BEFORE FIELD stce025
{<point name="input.b.stce025" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce025
            #add-point:ON CHANGE stce025
{<point name="input.g.stce025" />}
            #END add-point
 
         #----<<stce026>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce026
            #add-point:BEFORE FIELD stce026
{<point name="input.b.stce026" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce026
            
            #add-point:AFTER FIELD stce026
{<point name="input.a.stce026" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce026
            #add-point:ON CHANGE stce026
{<point name="input.g.stce026" />}
            #END add-point
 
         #----<<stce013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce013
            #add-point:BEFORE FIELD stce013
{<point name="input.b.stce013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce013
            
            #add-point:AFTER FIELD stce013
{<point name="input.a.stce013" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce013
            #add-point:ON CHANGE stce013
{<point name="input.g.stce013" />}
            #END add-point
 
         #----<<stce014>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce014
            
            #add-point:AFTER FIELD stce014
{<point name="input.a.stce014" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce014
            #add-point:BEFORE FIELD stce014
{<point name="input.b.stce014" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce014
            #add-point:ON CHANGE stce014
{<point name="input.g.stce014" />}
            #END add-point
 
         #----<<stce015>>----
         #此段落由子樣板a02產生
         AFTER FIELD stce015
            
            #add-point:AFTER FIELD stce015
{<point name="input.a.stce015" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stce015
            #add-point:BEFORE FIELD stce015
{<point name="input.b.stce015" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stce015
            #add-point:ON CHANGE stce015
{<point name="input.g.stce015" />}
            #END add-point
 
 
         AFTER FIELD stce016
            LET g_stce_m.stce016_desc = ''
            DISPLAY BY NAME g_stce_m.stce016_desc
            IF NOT cl_null(g_stce_m.stce016) THEN
       
               INITIALIZE g_chkparam.* TO NULL

               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_stce_m.stce016
               LET g_chkparam.arg2 = g_stce_m.stce013

               #160318-00025#37  2016/04/19  by pengxin  add(S)
               LET g_errshow = TRUE #是否開窗 
               LET g_chkparam.err_str[1] = "aoo-00029:sub-01302|aooi125|",cl_get_progname("aooi125",g_lang,"2"),"|:EXEPROGaooi125"
               #160318-00025#37  2016/04/19  by pengxin  add(E)

               #呼叫檢查存在並帶值的library
               IF NOT cl_chk_exist("v_ooeg001") THEN
                  LET g_stce_m.stce016 = g_stce_m_t.stce016
                  CALL astm601_stce016_ref()
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF

            END IF
            CALL astm601_stce016_ref()
 
           
           
         #----<<stce017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce017
            #add-point:BEFORE FIELD stce017
{<point name="input.b.stce017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce017
            
            #add-point:AFTER FIELD stce017
{<point name="input.a.stce017" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce017
            #add-point:ON CHANGE stce017
{<point name="input.g.stce017" />}
            #END add-point
 
         #----<<stce018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce018
            #add-point:BEFORE FIELD stce018
{<point name="input.b.stce018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce018
            
            #add-point:AFTER FIELD stce018
{<point name="input.a.stce018" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce018
            #add-point:ON CHANGE stce018
{<point name="input.g.stce018" />}
            #END add-point
 
         BEFORE FIELD next_b
         
         
         
         AFTER FIELD next_b
           IF NOT cl_null(g_stce_m.next_b) THEN
              IF g_stce_m.next_b < g_stce_m.stce017 OR g_stce_m.next_b > g_stce_m.stce018 THEN
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.code = 'ast-00047'
                 LET g_errparam.extend = ''
                 LET g_errparam.popup = TRUE
                 CALL cl_err()

                 LET g_stce_m.next_b = g_stce_m_t.next_b  
                 NEXT FIELD next_b
              END IF
              
              #IF NOT cl_null(g_stce_m.stce001) AND NOT cl_null(g_stce_m.stce017) AND NOT cl_null(g_stce_m.stce018)  AND NOT cl_null(g_stce_m.stce006) AND NOT cl_null(g_stce_m.stcesite) AND NOT cl_null(g_stce_m.stceunit)
              #          AND (g_stce_m.next_b <> t_stce.next_b AND NOT cl_null(t_stce.next_b))   THEN
              #   SELECT COUNT(*) INTO l_n FROM stcw_t WHERE stcwent = g_enterprise AND stcw001 = g_stce_m.stce001 AND stcw005 = 'N'
              #   IF l_n > 0 THEN
              #      IF cl_ask_confirm('ast-00097') THEN
              #         IF NOT s_astm601_cal_period(g_stce_m.stce001,g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce006,g_stce_m.next_b,g_stce_m.stcesite,g_stce_m.stceunit) THEN
              #             INITIALIZE g_errparam TO NULL
              #             LET g_errparam.code = 'ast-00049'
              #             LET g_errparam.extend = ''
              #             LET g_errparam.popup = TRUE
              #             CALL cl_err()
              #
              #             LET g_stce_m.next_b = g_stce_m_t.next_b                   
              #         ELSE
              #             CALL astm601_b_fill()
              #         END IF
              #      ELSE
              #         LET g_stce_m.next_b = g_stce_m_t.next_b
              #         NEXT FIELD next_b
              #      END IF
              #   END IF                 
              #END IF
              #LET t_stce.next_b = g_stce_m.next_b         
           END IF
 
 
         #----<<stce019>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce019
            #add-point:BEFORE FIELD stce019
{<point name="input.b.stce019" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce019
            
            #add-point:AFTER FIELD stce019
{<point name="input.a.stce019" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce019
            #add-point:ON CHANGE stce019
{<point name="input.g.stce019" />}
            #END add-point
 
         #----<<stce020>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stce020
            #add-point:BEFORE FIELD stce020
{<point name="input.b.stce020" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stce020
            
            #add-point:AFTER FIELD stce020
{<point name="input.a.stce020" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stce020
            #add-point:ON CHANGE stce020
{<point name="input.g.stce020" />}
            #END add-point
 
         #----<<stcestus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcestus
            #add-point:BEFORE FIELD stcestus
{<point name="input.b.stcestus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcestus
            
            #add-point:AFTER FIELD stcestus
{<point name="input.a.stcestus" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcestus
            #add-point:ON CHANGE stcestus
{<point name="input.g.stcestus" />}
            #END add-point
 
         #----<<stceownid>>----
         #----<<stceowndp>>----
         #----<<stcecrtid>>----
         #----<<stcecrtdp>>----
         #----<<stcecrtdt>>----
         #----<<stcemodid>>----
         #----<<stcemoddt>>----
         #----<<stcecnfid>>----
         #----<<stcecnfdt>>----
 #欄位檢查
         #---------------------------<  Master  >---------------------------
         #----<<stce005>>----
         #Ctrlp:input.c.stce005
         ON ACTION controlp INFIELD stce005
            #add-point:ON ACTION controlp INFIELD stce005
{<point name="input.c.stce005" />}
            #END add-point
 
         #----<<stce001>>----
         #Ctrlp:input.c.stce001
         ON ACTION controlp INFIELD stce001
            #add-point:ON ACTION controlp INFIELD stce001
{<point name="input.c.stce001" />}
            #END add-point
 
         #----<<stce002>>----
         #Ctrlp:input.c.stce002
         ON ACTION controlp INFIELD stce002
            #add-point:ON ACTION controlp INFIELD stce002
{<point name="input.c.stce002" />}
            #END add-point
 
         #----<<stce003>>----
         #Ctrlp:input.c.stce003
         ON ACTION controlp INFIELD stce003
            #add-point:ON ACTION controlp INFIELD stce003
{<point name="input.c.stce003" />}
            #END add-point
 
         #----<<stce009>>----
         #Ctrlp:input.c.stce009
         ON ACTION controlp INFIELD stce009
            #add-point:ON ACTION controlp INFIELD stce009
{<point name="input.c.stce009" />}
            #END add-point
 
 
         #----<<stce004>>----
         #Ctrlp:input.c.stce004
         ON ACTION controlp INFIELD stce004
            #add-point:ON ACTION controlp INFIELD stce004
{<point name="input.c.stce004" />}
            #END add-point
 
         #----<<stceunit>>----
         #Ctrlp:input.c.stceunit
         ON ACTION controlp INFIELD stceunit
            #add-point:ON ACTION controlp INFIELD stceunit
{<point name="input.c.stceunit" />}
            #END add-point
 
         #----<<stce021>>----
         #Ctrlp:input.c.stce021
         ON ACTION controlp INFIELD stce021
            #add-point:ON ACTION controlp INFIELD stce021
{<point name="input.c.stce021" />}
            #END add-point
 
         #----<<stce022>>----
         #Ctrlp:input.c.stce022
         ON ACTION controlp INFIELD stce022
            #add-point:ON ACTION controlp INFIELD stce022
{<point name="input.c.stan007" />}
            #END add-point
 
         #----<<stce023>>----
         #Ctrlp:input.c.stce023
         ON ACTION controlp INFIELD stce023
            #add-point:ON ACTION controlp INFIELD stce023
{<point name="input.c.stce023" />}
            #END add-point
 
         #----<<stce006>>----
         #Ctrlp:input.c.stce006
         ON ACTION controlp INFIELD stce006
            #add-point:ON ACTION controlp INFIELD stce006
{<point name="input.c.stce006" />}
            #END add-point
 
         #----<<stce007>>----
         #Ctrlp:input.c.stce007
         ON ACTION controlp INFIELD stce007
            #add-point:ON ACTION controlp INFIELD stce007
{<point name="input.c.stce007" />}
            #END add-point
 
         #----<<stce024>>----
         #Ctrlp:input.c.stce024
         ON ACTION controlp INFIELD stce024
            #add-point:ON ACTION controlp INFIELD stce024
{<point name="input.c.stce024" />}
            #END add-point
 
         #----<<stce025>>----
         #Ctrlp:input.c.stce025
         ON ACTION controlp INFIELD stce025
            #add-point:ON ACTION controlp INFIELD stce025
{<point name="input.c.stce025" />}
            #END add-point
 
         #----<<stce026>>----
         #Ctrlp:input.c.stce026
         ON ACTION controlp INFIELD stce026
            #add-point:ON ACTION controlp INFIELD stce026
{<point name="input.c.stce026" />}
            #END add-point
 
         #----<<stce013>>----
         #Ctrlp:input.c.stce013
         ON ACTION controlp INFIELD stce013
            #add-point:ON ACTION controlp INFIELD stce013
{<point name="input.c.stce013" />}
            #END add-point
 
         #----<<stce014>>----
         #Ctrlp:input.c.stce014
         ON ACTION controlp INFIELD stce014
            #add-point:ON ACTION controlp INFIELD stce014
{<point name="input.c.stce014" />}
            #END add-point
 
         #----<<stce015>>----
         #Ctrlp:input.c.stce015
         ON ACTION controlp INFIELD stce015
            #add-point:ON ACTION controlp INFIELD stce015
{<point name="input.c.stce015" />}
            #END add-point
 
         #----<<stce017>>----
         #Ctrlp:input.c.stce017
         ON ACTION controlp INFIELD stce017
            #add-point:ON ACTION controlp INFIELD stce017
{<point name="input.c.stce017" />}
            #END add-point
 
         #----<<stce018>>----
         #Ctrlp:input.c.stce018
         ON ACTION controlp INFIELD stce018
            #add-point:ON ACTION controlp INFIELD stce018
{<point name="input.c.stce018" />}
            #END add-point
 
         #----<<stce019>>----
         #Ctrlp:input.c.stce019
         ON ACTION controlp INFIELD stce019
            #add-point:ON ACTION controlp INFIELD stce019
{<point name="input.c.stce019" />}
            #END add-point
 
         #----<<stce020>>----
         #Ctrlp:input.c.stce020
         ON ACTION controlp INFIELD stce020
            #add-point:ON ACTION controlp INFIELD stce020
{<point name="input.c.stce020" />}
            #END add-point
 
         #----<<stcestus>>----
         #Ctrlp:input.c.stcestus
         ON ACTION controlp INFIELD stcestus
            #add-point:ON ACTION controlp INFIELD stcestus
{<point name="input.c.stcestus" />}
            #END add-point
 
         #----<<stceownid>>----
         #----<<stceowndp>>----
         #----<<stcecrtid>>----
         #----<<stcecrtdp>>----
         #----<<stcecrtdt>>----
         #----<<stcemodid>>----
         #----<<stcemoddt>>----
         #----<<stcecnfid>>----
         #----<<stcecnfdt>>----
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            CALL cl_showmsg()      #錯誤訊息統整顯示
            DISPLAY BY NAME g_stce_m.stce001             
 
                            
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前
{<point name="input.head.b_insert" mark="Y"/>}
               #end add-point
               
               INSERT INTO stce_t (stceent,stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stcesite, 
                   stce027,stce021,stce022,stce023,stce006,stce007,stce008,stce024,stce028,stce025,stce026,stce013,stce014,stce015, stce016,
                   stce017,stce018,stce019,stce020,stcestus,stceownid,stceowndp,stcecrtid,stcecrtdp, 
                   stcecrtdt,stcemodid,stcemoddt,stcecnfid,stcecnfdt)
               VALUES (g_enterprise,g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003, 
                   g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004,g_stce_m.stceunit,g_site,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022, 
                   g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007,g_stce_m.stce008,g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025, 
                   g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015,g_stce_m.stce016,g_stce_m.stce017, 
                   g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid, 
                   g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt,g_stce_m.stcemodid, 
                   g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt) 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "g_stce_m"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
  
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭新增中
{<point name="input.head.m_insert"/>}
               #end add-point
               
               
               
               CALL s_transaction_end('Y','0') 
               
               #add-point:單頭新增後
{<point name="input.head.a_insert"/>}
               #end add-point
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL astm601_detail_reproduce()
               END IF
               
               LET p_cmd = 'u'
 
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前
{<point name="input.head.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE stce_t SET (stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stce027,stce021,stce022, 
                   stce023,stce006,stce007,stce008,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce016,stce017,stce018, 
                   stce019,stce020,stcestus,stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid, 
                   stcemoddt,stcecnfid,stcecnfdt) = (g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002, 
                   g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004,g_stce_m.stceunit,g_stce_m.stce027,g_stce_m.stce021, 
                   g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007,g_stce_m.stce008,g_stce_m.stce024,g_stce_m.stce028,
                   g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015, g_stce_m.stce016,
                   g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus, 
                   g_stce_m.stceownid,g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt, 
                   g_stce_m.stcemodid,g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt)
                WHERE stceent = g_enterprise AND stce001 = g_stce001_t
 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "stce_t"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
  
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭修改中
{<point name="input.head.m_update"/>}
               #end add-point
               
               
               
               CALL s_transaction_end('Y','0')
               
               #add-point:單頭修改後
{<point name="input.head.a_update"/>}
               #end add-point
            END IF
            
            LET g_stce001_t = g_stce_m.stce001
 
            #controlp
            
      END INPUT
   

{</section>}

{<section id="astm601.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_stcf_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stcf_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astm601_b_fill()
            LET g_rec_b = g_stcf_d.getLength()
            #add-point:資料輸入前
{<point name="input.d.before_input"/>}
            #end add-point
         
         BEFORE ROW
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astm601_cl USING g_enterprise,g_stce_m.stce001
 
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code =  STATUS
               LET g_errparam.extend = "OPEN astm601_cl:"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CLOSE astm601_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_stcf_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_stcf_d[l_ac].stcfseq IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_stcf_d_t.* = g_stcf_d[l_ac].*  #BACKUP
               CALL astm601_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
{<point name="input.body.after_set_entry_b"/>}
               #end add-point  
               CALL astm601_set_no_entry_b(l_cmd)
               IF NOT astm601_lock_b("stcf_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astm601_bcl INTO g_stcf_d[l_ac].stcfseq,g_stcf_d[l_ac].stcf002,g_stcf_d[l_ac].stcf002_desc, 
                      g_stcf_d[l_ac].stcf003,g_stcf_d[l_ac].stcf004,g_stcf_d[l_ac].stcf005,g_stcf_d[l_ac].stcf006, 
                      g_stcf_d[l_ac].stcf007,g_stcf_d[l_ac].stcf008,g_stcf_d[l_ac].stcf008_desc,g_stcf_d[l_ac].stcf009, 
                      g_stcf_d[l_ac].stcf009_desc,g_stcf_d[l_ac].stcf010,g_stcf_d[l_ac].stcf011,g_stcf_d[l_ac].stcf012, 
                      g_stcf_d[l_ac].stcf013,g_stcf_d[l_ac].stcf014,g_stcf_d[l_ac].stcf015,g_stcf_d[l_ac].stcf016, 
                      g_stcf_d[l_ac].stcf017,g_stcf_d[l_ac].stcf018,g_stcf_d[l_ac].stcf019
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = SQLCA.sqlcode
                     LET g_errparam.extend = g_stcf_d_t.stcfseq
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL astm601_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
{<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stcf_d[l_ac].* TO NULL 
                  LET g_stcf_d[l_ac].stcf012 = "1"
      LET g_stcf_d[l_ac].stcf015 = "1"
 
 
            LET g_stcf_d_t.* = g_stcf_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astm601_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
{<point name="input.body.insert.after_set_entry_b"/>}
            #end add-point
            CALL astm601_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_stcf_d[li_reproduce_target].* = g_stcf_d[li_reproduce].*
 
               LET g_stcf_d[li_reproduce_target].stcfseq = NULL
 
            END IF
            #公用欄位給值(單身)
            
            
            #add-point:modify段before insert
{<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增
{<point name="input.body.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stcf_t 
             WHERE stcfent = g_enterprise AND stcf001 = g_stce_m.stce001
 
               AND stcfseq = g_stcf_d[l_ac].stcfseq
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
{<point name="input.body.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys[2] = g_stcf_d[g_detail_idx].stcfseq
               CALL astm601_insert_b('stcf_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
{<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_stcf_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astm601_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert
{<point name="input.body.a_insert2"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_stcf_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_stcf_d.deleteElement(l_ac)
               NEXT FIELD stcfseq
            END IF
         
            IF g_stcf_d[l_ac].stcfseq IS NOT NULL
 
               THEN 
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code =  -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
{<point name="input.body.b_delete" mark="Y"/>}
               #end add-point 
               
               DELETE FROM stcf_t
                WHERE stcfent = g_enterprise AND stcf001 = g_stce_m.stce001 AND
 
                      stcfseq = g_stcf_d_t.stcfseq
 
                  
               #add-point:單身刪除中
{<point name="input.body.m_delete"/>}
               #end add-point 
               
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  #add-point:單身刪除後
{<point name="input.body.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE astm601_bcl
               LET l_count = g_stcf_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys[2] = g_stcf_d[g_detail_idx].stcfseq
 
              
         AFTER DELETE 
            #add-point:單身刪除後2
{<point name="input.body.after_delete"/>}
            #end add-point
                           CALL astm601_delete_b('stcf_t',gs_keys,"'1'")
 
         #---------------------<  Detail: page1  >---------------------
         #----<<stcfseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcfseq
            #add-point:BEFORE FIELD stcfseq
{<point name="input.b.page1.stcfseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcfseq
            
            #add-point:AFTER FIELD stcfseq
{<point name="input.a.page1.stcfseq" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcfseq
            #add-point:ON CHANGE stcfseq
{<point name="input.g.page1.stcfseq" />}
            #END add-point
 
         #----<<stcf002>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcf002
            
            #add-point:AFTER FIELD stcf002
{<point name="input.a.page1.stcf002" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf002
            #add-point:BEFORE FIELD stcf002
{<point name="input.b.page1.stcf002" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcf002
            #add-point:ON CHANGE stcf002
{<point name="input.g.page1.stcf002" />}
            #END add-point
 
         #----<<stcf003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf003
            #add-point:BEFORE FIELD stcf003
{<point name="input.b.page1.stcf003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf003
            
            #add-point:AFTER FIELD stcf003
{<point name="input.a.page1.stcf003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf003
            #add-point:ON CHANGE stcf003
{<point name="input.g.page1.stcf003" />}
            #END add-point
 
         #----<<stcf004>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf004
            #add-point:BEFORE FIELD stcf004
{<point name="input.b.page1.stcf004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf004
            
            #add-point:AFTER FIELD stcf004
{<point name="input.a.page1.stcf004" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf004
            #add-point:ON CHANGE stcf004
{<point name="input.g.page1.stcf004" />}
            #END add-point
 
         #----<<stcf005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf005
            #add-point:BEFORE FIELD stcf005
{<point name="input.b.page1.stcf005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf005
            
            #add-point:AFTER FIELD stcf005
{<point name="input.a.page1.stcf005" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf005
            #add-point:ON CHANGE stcf005
{<point name="input.g.page1.stcf005" />}
            #END add-point
 
         #----<<stcf006>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf006
            #add-point:BEFORE FIELD stcf006
{<point name="input.b.page1.stcf006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf006
            
            #add-point:AFTER FIELD stcf006
{<point name="input.a.page1.stcf006" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf006
            #add-point:ON CHANGE stcf006
{<point name="input.g.page1.stcf006" />}
            #END add-point
 
         #----<<stcf007>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf007
            #add-point:BEFORE FIELD stcf007
{<point name="input.b.page1.stcf007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf007
            
            #add-point:AFTER FIELD stcf007
{<point name="input.a.page1.stcf007" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf007
            #add-point:ON CHANGE stcf007
{<point name="input.g.page1.stcf007" />}
            #END add-point
 
         #----<<stcf008>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcf008
            
            #add-point:AFTER FIELD stcf008
{<point name="input.a.page1.stcf008" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf008
            #add-point:BEFORE FIELD stcf008
{<point name="input.b.page1.stcf008" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcf008
            #add-point:ON CHANGE stcf008
{<point name="input.g.page1.stcf008" />}
            #END add-point
 
         #----<<stcf009>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcf009
            
            #add-point:AFTER FIELD stcf009
{<point name="input.a.page1.stcf009" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcf009
            #add-point:BEFORE FIELD stcf009
{<point name="input.b.page1.stcf009" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcf009
            #add-point:ON CHANGE stcf009
{<point name="input.g.page1.stcf009" />}
            #END add-point
 
         #----<<stcf010>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf010
            #add-point:BEFORE FIELD stcf010
{<point name="input.b.page1.stcf010" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf010
            
            #add-point:AFTER FIELD stcf010
{<point name="input.a.page1.stcf010" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf010
            #add-point:ON CHANGE stcf010
{<point name="input.g.page1.stcf010" />}
            #END add-point
 
         #----<<stcf011>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf011
            #add-point:BEFORE FIELD stcf011
{<point name="input.b.page1.stcf011" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf011
            
            #add-point:AFTER FIELD stcf011
{<point name="input.a.page1.stcf011" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf011
            #add-point:ON CHANGE stcf011
{<point name="input.g.page1.stcf011" />}
            #END add-point
 
         #----<<stcf012>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf012
            #add-point:BEFORE FIELD stcf012
{<point name="input.b.page1.stcf012" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf012
            
            #add-point:AFTER FIELD stcf012
{<point name="input.a.page1.stcf012" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf012
            #add-point:ON CHANGE stcf012
{<point name="input.g.page1.stcf012" />}
            #END add-point
 
         #----<<stcf013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf013
            #add-point:BEFORE FIELD stcf013
{<point name="input.b.page1.stcf013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf013
            
            #add-point:AFTER FIELD stcf013
{<point name="input.a.page1.stcf013" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf013
            #add-point:ON CHANGE stcf013
{<point name="input.g.page1.stcf013" />}
            #END add-point
 
         #----<<stcf014>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf014
            #add-point:BEFORE FIELD stcf014
{<point name="input.b.page1.stcf014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf014
            
            #add-point:AFTER FIELD stcf014
{<point name="input.a.page1.stcf014" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf014
            #add-point:ON CHANGE stcf014
{<point name="input.g.page1.stcf014" />}
            #END add-point
 
         #----<<stcf015>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf015
            #add-point:BEFORE FIELD stcf015
{<point name="input.b.page1.stcf015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf015
            
            #add-point:AFTER FIELD stcf015
{<point name="input.a.page1.stcf015" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf015
            #add-point:ON CHANGE stcf015
{<point name="input.g.page1.stcf015" />}
            #END add-point
 
         #----<<stcf016>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf016
            #add-point:BEFORE FIELD stcf016
{<point name="input.b.page1.stcf016" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf016
            
            #add-point:AFTER FIELD stcf016
{<point name="input.a.page1.stcf016" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf016
            #add-point:ON CHANGE stcf016
{<point name="input.g.page1.stcf016" />}
            #END add-point
 
         #----<<stcf017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf017
            #add-point:BEFORE FIELD stcf017
{<point name="input.b.page1.stcf017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf017
            
            #add-point:AFTER FIELD stcf017
{<point name="input.a.page1.stcf017" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf017
            #add-point:ON CHANGE stcf017
{<point name="input.g.page1.stcf017" />}
            #END add-point
 
         #----<<stcf018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcf018
            #add-point:BEFORE FIELD stcf018
{<point name="input.b.page1.stcf018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcf018
            
            #add-point:AFTER FIELD stcf018
{<point name="input.a.page1.stcf018" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcf018
            #add-point:ON CHANGE stcf018
{<point name="input.g.page1.stcf018" />}
            #END add-point
 
 
         #---------------------<  Detail: page1  >---------------------
         #----<<stcfseq>>----
         #Ctrlp:input.c.page1.stcfseq
         ON ACTION controlp INFIELD stcfseq
            #add-point:ON ACTION controlp INFIELD stcfseq
{<point name="input.c.page1.stcfseq" />}
            #END add-point
 
         #----<<stcf002>>----
         #Ctrlp:input.c.page1.stcf002
         ON ACTION controlp INFIELD stcf002
            #add-point:ON ACTION controlp INFIELD stcf002
{<point name="input.c.page1.stcf002" />}
            #END add-point
 
         #----<<stcf003>>----
         #Ctrlp:input.c.page1.stcf003
         ON ACTION controlp INFIELD stcf003
            #add-point:ON ACTION controlp INFIELD stcf003
{<point name="input.c.page1.stcf003" />}
            #END add-point
 
         #----<<stcf004>>----
         #Ctrlp:input.c.page1.stcf004
         ON ACTION controlp INFIELD stcf004
            #add-point:ON ACTION controlp INFIELD stcf004
{<point name="input.c.page1.stcf004" />}
            #END add-point
 
         #----<<stcf005>>----
         #Ctrlp:input.c.page1.stcf005
         ON ACTION controlp INFIELD stcf005
            #add-point:ON ACTION controlp INFIELD stcf005
{<point name="input.c.page1.stcf005" />}
            #END add-point
 
         #----<<stcf006>>----
         #Ctrlp:input.c.page1.stcf006
         ON ACTION controlp INFIELD stcf006
            #add-point:ON ACTION controlp INFIELD stcf006
{<point name="input.c.page1.stcf006" />}
            #END add-point
 
         #----<<stcf007>>----
         #Ctrlp:input.c.page1.stcf007
         ON ACTION controlp INFIELD stcf007
            #add-point:ON ACTION controlp INFIELD stcf007
{<point name="input.c.page1.stcf007" />}
            #END add-point
 
         #----<<stcf008>>----
         #Ctrlp:input.c.page1.stcf008
         ON ACTION controlp INFIELD stcf008
            #add-point:ON ACTION controlp INFIELD stcf008
{<point name="input.c.page1.stcf008" />}
            #END add-point
 
         #----<<stcf009>>----
         #Ctrlp:input.c.page1.stcf009
         ON ACTION controlp INFIELD stcf009
            #add-point:ON ACTION controlp INFIELD stcf009
{<point name="input.c.page1.stcf009" />}
            #END add-point
 
         #----<<stcf010>>----
         #Ctrlp:input.c.page1.stcf010
         ON ACTION controlp INFIELD stcf010
            #add-point:ON ACTION controlp INFIELD stcf010
{<point name="input.c.page1.stcf010" />}
            #END add-point
 
         #----<<stcf011>>----
         #Ctrlp:input.c.page1.stcf011
         ON ACTION controlp INFIELD stcf011
            #add-point:ON ACTION controlp INFIELD stcf011
{<point name="input.c.page1.stcf011" />}
            #END add-point
 
         #----<<stcf012>>----
         #Ctrlp:input.c.page1.stcf012
         ON ACTION controlp INFIELD stcf012
            #add-point:ON ACTION controlp INFIELD stcf012
{<point name="input.c.page1.stcf012" />}
            #END add-point
 
         #----<<stcf013>>----
         #Ctrlp:input.c.page1.stcf013
         ON ACTION controlp INFIELD stcf013
            #add-point:ON ACTION controlp INFIELD stcf013
{<point name="input.c.page1.stcf013" />}
            #END add-point
 
         #----<<stcf014>>----
         #Ctrlp:input.c.page1.stcf014
         ON ACTION controlp INFIELD stcf014
            #add-point:ON ACTION controlp INFIELD stcf014
{<point name="input.c.page1.stcf014" />}
            #END add-point
 
         #----<<stcf015>>----
         #Ctrlp:input.c.page1.stcf015
         ON ACTION controlp INFIELD stcf015
            #add-point:ON ACTION controlp INFIELD stcf015
{<point name="input.c.page1.stcf015" />}
            #END add-point
 
         #----<<stcf016>>----
         #Ctrlp:input.c.page1.stcf016
         ON ACTION controlp INFIELD stcf016
            #add-point:ON ACTION controlp INFIELD stcf016
{<point name="input.c.page1.stcf016" />}
            #END add-point
 
         #----<<stcf017>>----
         #Ctrlp:input.c.page1.stcf017
         ON ACTION controlp INFIELD stcf017
            #add-point:ON ACTION controlp INFIELD stcf017
{<point name="input.c.page1.stcf017" />}
            #END add-point
 
         #----<<stcf018>>----
         #Ctrlp:input.c.page1.stcf018
         ON ACTION controlp INFIELD stcf018
            #add-point:ON ACTION controlp INFIELD stcf018
{<point name="input.c.page1.stcf018" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_stcf_d[l_ac].* = g_stcf_d_t.*
               CLOSE astm601_bcl
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = g_stcf_d[l_ac].stcfseq
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_stcf_d[l_ac].* = g_stcf_d_t.*
            ELSE
            
               #add-point:單身修改前
{<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               UPDATE stcf_t SET (stcf001,stcfseq,stcf002,stcf003,stcf004,stcf005,stcf006,stcf007,stcf008, 
                   stcf009,stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcf019,stcf020) = (g_stce_m.stce001, 
                   g_stcf_d[l_ac].stcfseq,g_stcf_d[l_ac].stcf002,g_stcf_d[l_ac].stcf003,g_stcf_d[l_ac].stcf004, 
                   g_stcf_d[l_ac].stcf005,g_stcf_d[l_ac].stcf006,g_stcf_d[l_ac].stcf007,g_stcf_d[l_ac].stcf008, 
                   g_stcf_d[l_ac].stcf009,g_stcf_d[l_ac].stcf010,g_stcf_d[l_ac].stcf011,g_stcf_d[l_ac].stcf012, 
                   g_stcf_d[l_ac].stcf013,g_stcf_d[l_ac].stcf014,g_stcf_d[l_ac].stcf015,g_stcf_d[l_ac].stcf016, 
                   g_stcf_d[l_ac].stcf017,g_stcf_d[l_ac].stcf018,g_stcf_d[l_ac].stcf019,g_stcf_d[l_ac].stcf020)
                WHERE stcfent = g_enterprise AND stcf001 = g_stce_m.stce001 
 
                  AND stcfseq = g_stcf_d_t.stcfseq #項次   
 
                  
               #add-point:單身修改中
{<point name="input.body.m_update"/>}
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "std-00009"
                     LET g_errparam.extend = "stcf_t"
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     CALL s_transaction_end('N','0')
                     LET g_stcf_d[l_ac].* = g_stcf_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                     LET g_stcf_d[l_ac].* = g_stcf_d_t.*                     
                     CALL s_transaction_end('N','0')
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys_bak[1] = g_stce001_t
               LET gs_keys[2] = g_stcf_d[g_detail_idx].stcfseq
               LET gs_keys_bak[2] = g_stcf_d_t.stcfseq
               CALL astm601_update_b('stcf_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                     
               END CASE
               
               #add-point:單身修改後
{<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row
{<point name="input.body.after_row"/>}
            #end add-point
            CALL astm601_unlock_b("stcf_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            
              
         AFTER INPUT
            #add-point:input段after input 
{<point name="input.body.after_input"/>}
            #end add-point 
 
         ON ACTION controlo    
            CALL FGL_SET_ARR_CURR(g_stcf_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_stcf_d.getLength()+1
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
      INPUT ARRAY g_stcf2_d FROM s_detail2.*
         ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_2)
         
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stcf2_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astm601_b_fill()
            LET g_rec_b = g_stcf2_d.getLength()
            #add-point:資料輸入前
{<point name="input.body2.before_input"/>}
            #end add-point
            
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stcf2_d[l_ac].* TO NULL 
                  LET g_stcf2_d[l_ac].stch003 = "Y"
 
 
            LET g_stcf2_d_t.* = g_stcf2_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astm601_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
{<point name="input.body2.insert.after_set_entry_b"/>}
            #end add-point
            CALL astm601_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_stcf2_d[li_reproduce_target].* = g_stcf2_d[li_reproduce].*
 
               LET g_stcf2_d[li_reproduce_target].stchseq = NULL
            END IF
            #公用欄位給值(單身2)
            
            
            #add-point:modify段before insert
{<point name="input.body2.before_insert"/>}
            #end add-point  
            
         BEFORE ROW     
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
              
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astm601_cl USING g_enterprise,g_stce_m.stce001
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code =  STATUS
               LET g_errparam.extend = "OPEN astm601_cl:"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CLOSE astm601_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_stcf2_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_stcf2_d[l_ac].stchseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_stcf2_d_t.* = g_stcf2_d[l_ac].*  #BACKUP
               CALL astm601_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
{<point name="input.body2.after_set_entry_b"/>}
               #end add-point  
               CALL astm601_set_no_entry_b(l_cmd)
               IF NOT astm601_lock_b("stch_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astm601_bcl2 INTO g_stcf2_d[l_ac].stchseq,g_stcf2_d[l_ac].stch002,g_stcf2_d[l_ac].stch002_desc, 
                      g_stcf2_d[l_ac].stch003
                   IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = SQLCA.sqlcode
                     LET g_errparam.extend = ''
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL astm601_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
{<point name="input.body2.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_stcf2_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_stcf2_d.deleteElement(l_ac)
               NEXT FIELD stchseq
            END IF
         
            IF g_stcf2_d[l_ac].stchseq IS NOT NULL
            THEN
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code =  -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF
               
               #add-point:單身2刪除前
{<point name="input.body2.b_delete" mark="Y"/>}
               #end add-point    
               
               DELETE FROM stch_t
                WHERE stchent = g_enterprise AND stch001 = g_stce_m.stce001 AND
                      stchseq = g_stcf2_d_t.stchseq
                  
               #add-point:單身2刪除中
{<point name="input.body2.m_delete"/>}
               #end add-point    
                  
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcf_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  #add-point:單身2刪除後
{<point name="input.body2.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE astm601_bcl
               LET l_count = g_stcf_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys[2] = g_stcf2_d[g_detail_idx].stchseq
 
            
         AFTER DELETE 
            #add-point:單身AFTER DELETE 
{<point name="input.body2.after_delete"/>}
            #end add-point
                           CALL astm601_delete_b('stch_t',gs_keys,"'2'")
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身2新增前
{<point name="input.body2.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stch_t 
             WHERE stchent = g_enterprise AND stch001 = g_stce_m.stce001
               AND stchseq = g_stcf2_d[l_ac].stchseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身2新增前
{<point name="input.body2.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys[2] = g_stcf2_d[g_detail_idx].stchseq
               CALL astm601_insert_b('stch_t',gs_keys,"'2'")
                           
               #add-point:單身新增後2
{<point name="input.body2.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_stcf_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stch_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astm601_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後
{<point name="input.body2.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_stcf2_d[l_ac].* = g_stcf2_d_t.*
               CLOSE astm601_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = ''
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_stcf2_d[l_ac].* = g_stcf2_d_t.*
            ELSE
               #add-point:單身page2修改前
{<point name="input.body2.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身2)
               
               
               UPDATE stch_t SET (stch001,stchseq,stch002,stch003) = (g_stce_m.stce001,g_stcf2_d[l_ac].stchseq, 
                   g_stcf2_d[l_ac].stch002,g_stcf2_d[l_ac].stch003) #自訂欄位頁簽
                WHERE stchent = g_enterprise AND stch001 = g_stce_m.stce001
                  AND stchseq = g_stcf2_d_t.stchseq #項次 
                  
               #add-point:單身page2修改中
{<point name="input.body2.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "std-00009"
                     LET g_errparam.extend = "stch_t"
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     CALL s_transaction_end('N','0')
                     LET g_stcf2_d[l_ac].* = g_stcf2_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stch_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
                     CALL s_transaction_end('N','0')
                     LET g_stcf2_d[l_ac].* = g_stcf2_d_t.*
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stce_m.stce001
               LET gs_keys_bak[1] = g_stce001_t
               LET gs_keys[2] = g_stcf2_d[g_detail_idx].stchseq
               LET gs_keys_bak[2] = g_stcf2_d_t.stchseq
               CALL astm601_update_b('stch_t',gs_keys,gs_keys_bak,"'2'")
                     #資料多語言用-增/改
                     
               END CASE
               #add-point:單身page2修改後
{<point name="input.body2.a_update"/>}
               #end add-point
            END IF
         
         #---------------------<  Detail: page2  >---------------------
         #----<<stchseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stchseq
            #add-point:BEFORE FIELD stchseq
{<point name="input.b.page2.stchseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stchseq
            
            #add-point:AFTER FIELD stchseq
{<point name="input.a.page2.stchseq" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stchseq
            #add-point:ON CHANGE stchseq
{<point name="input.g.page2.stchseq" />}
            #END add-point
 
         #----<<stch002>>----
         #此段落由子樣板a02產生
         AFTER FIELD stch002
            
            #add-point:AFTER FIELD stch002
{<point name="input.a.page2.stch002" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stch002
            #add-point:BEFORE FIELD stch002
{<point name="input.b.page2.stch002" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stch002
            #add-point:ON CHANGE stch002
{<point name="input.g.page2.stch002" />}
            #END add-point
 
         #----<<stch003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stch003
            #add-point:BEFORE FIELD stch003
{<point name="input.b.page2.stch003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stch003
            
            #add-point:AFTER FIELD stch003
{<point name="input.a.page2.stch003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stch003
            #add-point:ON CHANGE stch003
{<point name="input.g.page2.stch003" />}
            #END add-point
 
 
         #---------------------<  Detail: page2  >---------------------
         #----<<stchseq>>----
         #Ctrlp:input.c.page2.stchseq
         ON ACTION controlp INFIELD stchseq
            #add-point:ON ACTION controlp INFIELD stchseq
{<point name="input.c.page2.stchseq" />}
            #END add-point
 
         #----<<stch002>>----
         #Ctrlp:input.c.page2.stch002
         ON ACTION controlp INFIELD stch002
            #add-point:ON ACTION controlp INFIELD stch002
{<point name="input.c.page2.stch002" />}
            #END add-point
 
         #----<<stch003>>----
         #Ctrlp:input.c.page2.stch003
         ON ACTION controlp INFIELD stch003
            #add-point:ON ACTION controlp INFIELD stch003
{<point name="input.c.page2.stch003" />}
            #END add-point
 
 
 
         AFTER ROW
            #add-point:單身page2 after_row
{<point name="input.body2.after_row"/>}
            #end add-point
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_stcf2_d[l_ac].* = g_stcf2_d_t.*
               END IF
               CLOSE astm601_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astm601_unlock_b("stch_t","'2'")
            CALL s_transaction_end('Y','0')
 
         AFTER INPUT
            #add-point:input段after input 
{<point name="input.body2.after_input"/>}
            #end add-point   
    
         ON ACTION controlo
            CALL FGL_SET_ARR_CURR(g_stcf2_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_stcf2_d.getLength()+1
 
      END INPUT
 
 
      
 
      
 
      
 
      

{</section>}

{<section id="astm601.input.other" >}
      
      #add-point:自定義input
{<point name="input.more_input"/>}
      #end add-point
      
      BEFORE DIALOG 
         #add-point:input段before dialog
{<point name="input.before_dialog"/>}
         #end add-point    
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            NEXT FIELD stce001
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD stcfseq
               WHEN "s_detail2"
                  NEXT FIELD stchseq
 
 
            END CASE
         END IF
    
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         CALL cl_set_head_visible("","AUTO")
 
      ON ACTION accept
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
         
   END DIALOG
    
   #add-point:input段after input 
{<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION

{</section>}

{<section id="astm601.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION astm601_show()
   {<Local define>}
   DEFINE l_ac_t    LIKE type_t.num5
   {</Local define>}
   #add-point:show段define
{<point name="show.define"/>}
   #end add-point  
 
   #add-point:show段之前
{<point name="show.before"/>}
   #end add-point
   
   
   
   LET g_stce_m_t.* = g_stce_m.*      #保存單頭舊值
   
   IF g_bfill = "Y" THEN
      CALL astm601_b_fill() #單身填充
      CALL astm601_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #此段落由子樣板a12產生
      #LET g_stce_m.stceownid_desc = cl_get_username(g_stce_m.stceownid)
      #LET g_stce_m.stceowndp_desc = cl_get_deptname(g_stce_m.stceowndp)
      #LET g_stce_m.stcecrtid_desc = cl_get_username(g_stce_m.stcecrtid)
      #LET g_stce_m.stcecrtdp_desc = cl_get_deptname(g_stce_m.stcecrtdp)
      #LET g_stce_m.stcemodid_desc = cl_get_username(g_stce_m.stcemodid)
      #LET g_stce_m.stcecnfid_desc = cl_get_deptname(g_stce_m.stcecnfid)
      ##LET g_stce_m.stanpstid_desc = cl_get_deptname(g_stce_m.stanpstid)
      
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference
{<point name="show.head.reference"/>}
   #end add-point
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009, 
       g_stce_m.stce009_desc,g_stce_m.stce010,g_stce_m.stce010_desc,g_stce_m.stce011,g_stce_m.stce011_desc,g_stce_m.stce012,g_stce_m.stce012_desc,g_stce_m.stce004,g_stce_m.stce004_desc,g_stce_m.stceunit,g_stce_m.stceunit_desc, 
       g_stce_m.stce021,g_stce_m.stce021_desc,g_stce_m.stce022,g_stce_m.stce022_desc,g_stce_m.stce023,g_stce_m.stce023_desc, 
       g_stce_m.stce006,g_stce_m.stce006_desc,g_stce_m.stce007,g_stce_m.stce007_desc,g_stce_m.stce024, 
       g_stce_m.stce024_desc,g_stce_m.stce028,g_stce_m.stce028_desc,g_stce_m.stce025,g_stce_m.stce025_desc,g_stce_m.stce026,g_stce_m.stce013, 
       g_stce_m.stce014,g_stce_m.stce014_desc,g_stce_m.stce015,g_stce_m.stce015_desc,g_stce_m.stce016,g_stce_m.stce016_desc,g_stce_m.stce017, 
       g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid,g_stce_m.stceownid_desc, 
       g_stce_m.stceowndp,g_stce_m.stceowndp_desc,g_stce_m.stcecrtid,g_stce_m.stcecrtid_desc,g_stce_m.stcecrtdp, 
       g_stce_m.stcecrtdp_desc,g_stce_m.stcecrtdt,g_stce_m.stcemodid,g_stce_m.stcemodid_desc,g_stce_m.stcemoddt, 
       g_stce_m.stcecnfid,g_stce_m.stcecnfid_desc,g_stce_m.stcecnfdt
   
   #顯示狀態(stus)圖片
         #此段落由子樣板a21產生
      CASE g_stce_m.stcestus
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
 
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
 
 
         
      END CASE
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_stcf_d.getLength()
      #帶出公用欄位reference值
      
      #add-point:show段單身reference
{<point name="show.body.reference"/>}
      #end add-point
   END FOR
   
   FOR l_ac = 1 TO g_stcf2_d.getLength()
      #帶出公用欄位reference值
      
      #add-point:show段單身reference
{<point name="show.body2.reference"/>}
      #end add-point
   END FOR
 
 
   
    
   
   #add-point:show段other
{<point name="show.other"/>}
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL astm601_detail_show()
   
   #add-point:show段之後
{<point name="show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astm601.detail_show" >}
#+ 單身reference detail_show
PRIVATE FUNCTION astm601_detail_show()
   {<Local define>}
   DEFINE l_ac_t    LIKE type_t.num5
   {</Local define>}
   #add-point:detail_show段define
   {<point name="detail_show.define"/>}
   #end add-point  
 
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   LET l_ac_t = l_ac
 
   LET l_ac = l_ac_t
   
   #add-point:detail_show段之後
   {<point name="detail_show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astm601.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION astm601_reproduce()
   {<Local define>}
   DEFINE l_newno     LIKE stce_t.stce001 
   DEFINE l_oldno     LIKE stce_t.stce001 
 
   DEFINE l_master    RECORD LIKE stce_t.*
   DEFINE l_detail    RECORD LIKE stcf_t.*
   DEFINE l_detail2    RECORD LIKE stch_t.*
 
 
 
   DEFINE l_cnt       LIKE type_t.num5
   {</Local define>}
   #add-point:reproduce段define
   {<point name="reproduce.define"/>}
   #end add-point   
 
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   IF g_stce_m.stce001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
    
   LET g_stce001_t = g_stce_m.stce001
 
    
   LET g_stce_m.stce001 = ""
 
    
   CALL astm601_set_entry('a')
   CALL astm601_set_no_entry('a')
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #此段落由子樣板a14產生    
      LET g_stce_m.stceownid = g_user
      LET g_stce_m.stceowndp = g_dept
      LET g_stce_m.stcecrtid = g_user
      LET g_stce_m.stcecrtdp = g_dept 
      LET g_stce_m.stcecrtdt = cl_get_current()
      LET g_stce_m.stcemodid = ""
      LET g_stce_m.stcemoddt = ""
      #LET g_stce_m.stcestus = ""
 
 
   
   #add-point:複製輸入前
   {<point name="reproduce.head.b_input"/>}
   #end add-point
   
   CALL astm601_input("r")
   
   
   
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      RETURN
   END IF
 
   LET g_state = "Y"
   
   LET g_wc = g_wc,  
              " OR (",
              " stce001 = '", g_stce_m.stce001 CLIPPED, "' "
 
              , ") "
   
   #add-point:完成複製段落後
   {<point name="reproduce.after_reproduce" />}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astm601.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION astm601_detail_reproduce()
   {<Local define>}
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE stcf_t.*
   DEFINE l_detail2    RECORD LIKE stch_t.*
 
 
 
   {</Local define>}
   #add-point:delete段define
   {<point name="detail_reproduce.define"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE astm601_detail
   
   #add-point:單身複製前1
   {<point name="detail_reproduce.body.table1.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE astm601_detail AS ",
                "SELECT * FROM stcf_t "
   PREPARE repro_tbl FROM ls_sql
   EXECUTE repro_tbl
   FREE repro_tbl
                
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astm601_detail SELECT * FROM stcf_t 
                                         WHERE stcfent = g_enterprise AND stcf001 = g_stce001_t
 
   
   #將key修正為調整後   
   UPDATE astm601_detail 
      #更新key欄位
      SET stcf001 = g_stce_m.stce001
 
      #更新共用欄位
      
                                       
  
   #將資料塞回原table   
   INSERT INTO stcf_t SELECT * FROM astm601_detail
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = "reproduce"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN
   END IF
   
   #add-point:單身複製中1
   {<point name="detail_reproduce.body.table1.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astm601_detail
   
   #add-point:單身複製後1
   {<point name="detail_reproduce.body.table1.a_insert"/>}
   #end add-point
 
   #add-point:單身複製前
   {<point name="detail_reproduce.body.table2.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = 
      "CREATE GLOBAL TEMPORARY TABLE astm601_detail AS ",
      "SELECT * FROM stch_t "
   PREPARE repro_tbl2 FROM ls_sql
   EXECUTE repro_tbl2
   FREE repro_tbl2
      
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astm601_detail SELECT * FROM stch_t
                                         WHERE stchent = g_enterprise AND stch001 = g_stce001_t
 
 
   #將key修正為調整後   
   UPDATE astm601_detail SET stch001 = g_stce_m.stce001
 
  
   #將資料塞回原table   
   INSERT INTO stch_t SELECT * FROM astm601_detail
   
   #add-point:單身複製中
   {<point name="detail_reproduce.body.table2.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astm601_detail
   
   #add-point:單身複製後
   {<point name="detail_reproduce.body.table2.a_insert"/>}
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_stce001_t = g_stce_m.stce001
 
   
   DROP TABLE astm601_detail
   
END FUNCTION

{</section>}

{<section id="astm601.delete" >}
#+ 資料刪除
PRIVATE FUNCTION astm601_delete()
   {<Local define>}
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:delete段define
{<point name="delete.define"/>}
   #end add-point     
   
   IF g_stce_m.stce001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
 
    SELECT UNIQUE stce005,stce001,stce002,stce003,stce009,stce010,stce011,stce012,stce004,stceunit,stcesite,stce027,stce021,stce022,stce023,stce006, 
        stce007,stce024,stce028,stce025,stce026,stce013,stce014,stce015,stce017,stce018,stce019,stce020,stcestus, 
        stceownid,stceowndp,stcecrtid,stcecrtdp,stcecrtdt,stcemodid,stcemoddt,stcecnfid,stcecnfdt
 INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009,g_stce_m.stce010,g_stce_m.stce011,g_stce_m.stce012,g_stce_m.stce004, 
     g_stce_m.stceunit,g_stce_m.stcesite,g_stce_m.stce027,g_stce_m.stce021,g_stce_m.stce022,g_stce_m.stce023,g_stce_m.stce006,g_stce_m.stce007, 
     g_stce_m.stce024,g_stce_m.stce028,g_stce_m.stce025,g_stce_m.stce026,g_stce_m.stce013,g_stce_m.stce014,g_stce_m.stce015,g_stce_m.stce016, 
     g_stce_m.stce017,g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid, 
     g_stce_m.stceowndp,g_stce_m.stcecrtid,g_stce_m.stcecrtdp,g_stce_m.stcecrtdt,g_stce_m.stcemodid, 
     g_stce_m.stcemoddt,g_stce_m.stcecnfid,g_stce_m.stcecnfdt
 FROM stce_t
 WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
   
   
 
   CALL astm601_show()
   
   CALL s_transaction_begin()
 
   OPEN astm601_cl USING g_enterprise,g_stce_m.stce001
 
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code =  STATUS
      LET g_errparam.extend = "OPEN astm601_cl:"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      CLOSE astm601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   FETCH astm601_cl INTO g_stce_m.stce005,g_stce_m.stce001,g_stce_m.stce002,g_stce_m.stce003,g_stce_m.stce009, 
       g_stce_m.stce009_desc,g_stce_m.stce004,g_stce_m.stce004_desc,g_stce_m.stceunit,g_stce_m.stceunit_desc, 
       g_stce_m.stce021,g_stce_m.stce021_desc,g_stce_m.stce022,g_stce_m.stce022_desc,g_stce_m.stce023,g_stce_m.stce023_desc, 
       g_stce_m.stce006,g_stce_m.stce006_desc,g_stce_m.stce007,g_stce_m.stce007_desc,g_stce_m.stce024, 
       g_stce_m.stce024_desc,g_stce_m.stce025,g_stce_m.stce025_desc,g_stce_m.stce026,g_stce_m.stce013, 
       g_stce_m.stce014,g_stce_m.stce014_desc,g_stce_m.stce015,g_stce_m.stce015_desc,g_stce_m.stce017, 
       g_stce_m.stce018,g_stce_m.stce019,g_stce_m.stce020,g_stce_m.stcestus,g_stce_m.stceownid,g_stce_m.stceownid_desc, 
       g_stce_m.stceowndp,g_stce_m.stceowndp_desc,g_stce_m.stcecrtid,g_stce_m.stcecrtid_desc,g_stce_m.stcecrtdp, 
       g_stce_m.stcecrtdp_desc,g_stce_m.stcecrtdt,g_stce_m.stcemodid,g_stce_m.stcemodid_desc,g_stce_m.stcemoddt, 
       g_stce_m.stcecnfid,g_stce_m.stcecnfid_desc,g_stce_m.stcecnfdt              #鎖住將被更改或取消的資料 

   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stce_m.stce001
      LET g_errparam.popup = FALSE
      CALL cl_err()
          #資料被他人LOCK
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #IF NOT cl_ask_delete() THEN             #確認一下
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前
{<point name="delete.head.b_delete" mark="Y"/>}
      #end add-point   
      
      INITIALIZE g_doc.* TO NULL         
      LET g_doc.column1 = "stce001"       
      LET g_doc.value1 = g_stce_m.stce001     
      CALL cl_doc_remove() 
 
      #資料備份
      LET g_stce001_t = g_stce_m.stce001
 
 
      DELETE FROM stce_t
       WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
 
       
      #add-point:單頭刪除中
{<point name="delete.head.m_delete"/>}
      #end add-point
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stce_m.stce001
      LET g_errparam.popup = FALSE
      CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      
      #add-point:單頭刪除後
{<point name="delete.head.a_delete"/>}
      #end add-point
  
      #add-point:單身刪除前
{<point name="delete.body.b_delete" mark="Y"/>}
      #end add-point
      
      DELETE FROM stcf_t
       WHERE stcfent = g_enterprise AND stcf001 = g_stce_m.stce001
 
 
      #add-point:單身刪除中
{<point name="delete.body.m_delete"/>}
      #end add-point
         
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcf_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF    
 
      #add-point:單身刪除後
{<point name="delete.body.a_delete"/>}
      #end add-point
      
            
                                                               
      #add-point:單身刪除前
{<point name="delete.body.b_delete2" mark="Y"/>}
      #end add-point
      DELETE FROM stch_t
       WHERE stchent = g_enterprise AND
             stch001 = g_stce_m.stce001
      #add-point:單身刪除中
{<point name="delete.body.m_delete2"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stch_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF      
 
      #add-point:單身刪除後
{<point name="delete.body.a_delete2"/>}
      #end add-point
 
 
 
 
                                                               
      CLEAR FORM
      CALL g_stcf_d.clear() 
      CALL g_stcf2_d.clear()       
 
 
     
      CALL astm601_ui_browser_refresh()  
      CALL astm601_ui_headershow()  
      CALL astm601_ui_detailshow()
       
      IF g_browser_cnt > 0 THEN 
         CALL astm601_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
      ELSE
         LET g_wc = " 1=1"
         CALL astm601_browser_fill("F")
      END IF
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
      
 
 
 
   
   END IF
 
   CALL s_transaction_end('Y','0')
   
   CLOSE astm601_cl
 
   #流程通知預埋點-D
   CALL cl_flow_notify(g_stce_m.stce001,'D')
    
END FUNCTION

{</section>}

{<section id="astm601.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION astm601_b_fill()
   {<Local define>}
   DEFINE p_wc2      STRING
   {</Local define>}
   #add-point:b_fill段define
{<point name="b_fill.define"/>}
   #end add-point     
 
   CALL g_stcf_d.clear()    #g_stcf_d 單頭及單身 
   CALL g_stcf2_d.clear()
 
 
 
   #add-point:b_fill段sql_before
{<point name="b_fill.sql_before"/>}
   #end add-point
   
   #判斷是否填充
   IF astm601_fill_chk(1) THEN
   
      LET g_sql = "SELECT  UNIQUE stcfseq,stcf002,'',stcf021,stcf003,stcf004,stcf005,stcf006,stcf007,stcf008,  
          '',stcf009,'',stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcfsite,stcfunit FROM stcf_t", 
             
                  " INNER JOIN stce_t ON stce001 = stcf001 ",
 
                  #"",
                  
                  "",
                  " WHERE stcfent=? AND stcf001=?"
      #add-point:b_fill段sql_before
{<point name="b_fill.body.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table1) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
      END IF
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY stcf_t.stcfseq"
      
      #add-point:單身填充控制
{<point name="b_fill.sql"/>}
      #end add-point
      
      PREPARE astm601_pb FROM g_sql
      DECLARE b_fill_cs CURSOR FOR astm601_pb
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
      OPEN b_fill_cs USING g_enterprise,g_stce_m.stce001
 
                                               
      FOREACH b_fill_cs INTO g_stcf_d[l_ac].stcfseq,g_stcf_d[l_ac].stcf002,g_stcf_d[l_ac].stcf002_desc,g_stcf_d[l_ac].stcf021,  
          g_stcf_d[l_ac].stcf003,g_stcf_d[l_ac].stcf004,g_stcf_d[l_ac].stcf005,g_stcf_d[l_ac].stcf006, 
          g_stcf_d[l_ac].stcf007,g_stcf_d[l_ac].stcf008,g_stcf_d[l_ac].stcf008_desc,g_stcf_d[l_ac].stcf009, 
          g_stcf_d[l_ac].stcf009_desc,g_stcf_d[l_ac].stcf010,g_stcf_d[l_ac].stcf011,g_stcf_d[l_ac].stcf012, 
          g_stcf_d[l_ac].stcf013,g_stcf_d[l_ac].stcf014,g_stcf_d[l_ac].stcf015,g_stcf_d[l_ac].stcf016, 
          g_stcf_d[l_ac].stcf017,g_stcf_d[l_ac].stcf018,g_stcf_d[l_ac].stcf019,g_stcf_d[l_ac].stcf020,g_stcf_d[l_ac].stcfsite,g_stcf_d[l_ac].stcfunit
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
{<point name="b_fill.fill"/>}
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec AND g_error_show = 1 THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code =  9035
            LET g_errparam.extend =  ''
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
         
      END FOREACH
      LET g_error_show = 0
   
   END IF
   
   #判斷是否填充
   IF astm601_fill_chk(2) THEN
      LET g_sql = "SELECT  UNIQUE stchseq,stch002,'',stch003,stchsite,stchunit FROM stch_t",   
                  " INNER JOIN stce_t ON stce001 = stch001 ",
 
                  "",
                  
                  " WHERE stchent=? AND stch001=?"   
      #add-point:b_fill段sql_before
{<point name="b_fill.body2.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table2) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
      END IF
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY stch_t.stchseq"
      
      #add-point:單身填充控制
{<point name="b_fill.sql2"/>}
      #end add-point
      
      PREPARE astm601_pb2 FROM g_sql
      DECLARE b_fill_cs2 CURSOR FOR astm601_pb2
      
      LET l_ac = 1
      
      OPEN b_fill_cs2 USING g_enterprise,g_stce_m.stce001
 
                                               
      FOREACH b_fill_cs2 INTO g_stcf2_d[l_ac].stchseq,g_stcf2_d[l_ac].stch002,g_stcf2_d[l_ac].stch002_desc, 
          g_stcf2_d[l_ac].stch003,g_stcf2_d[l_ac].stchsite,g_stcf2_d[l_ac].stchunit
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
{<point name="b_fill2.fill"/>}
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code =  9035
            LET g_errparam.extend =  ''
            LET g_errparam.popup = FALSE
            CALL cl_err()

            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
 
 
   
   #add-point:browser_fill段其他table處理
{<point name="browser_fill.other_fill"/>}
   #end add-point
   
   CALL g_stcf_d.deleteElement(g_stcf_d.getLength())
   CALL g_stcf2_d.deleteElement(g_stcf2_d.getLength())
 
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE astm601_pb
   FREE astm601_pb2
 
 
   
END FUNCTION

{</section>}

{<section id="astm601.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION astm601_delete_b(ps_table,ps_keys_bak,ps_page)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:delete_b段define
   {<point name="delete_b.define"/>}
   #end add-point     
 
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete" mark="Y"/>}
      #end add-point    
      DELETE FROM stcf_t
       WHERE stcfent = g_enterprise AND
         stcf001 = ps_keys_bak[1] AND stcfseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = ""
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete"/>}
      #end add-point   
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete2" mark="Y"/>}
      #end add-point    
      DELETE FROM stch_t
       WHERE stchent = g_enterprise AND
         stch001 = ps_keys_bak[1] AND stchseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete2"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stch_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete2"/>}
      #end add-point    
   END IF
 
 
   
 
   
   #add-point:delete_b段other
   {<point name="delete_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astm601.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION astm601_insert_b(ps_table,ps_keys,ps_page)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   {</Local define>}
   #add-point:insert_b段define
{<point name="insert_b.define"/>}
   #end add-point     
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
{<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point 
      INSERT INTO stcf_t
                  (stcfent,
                   stcf001,
                   stcfseq
                   ,stcf002,stcf003,stcf004,stcf005,stcf006,stcf007,stcf008,stcf009,stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcf019,stcf020,stcfsite,stcfunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_stcf_d[g_detail_idx].stcf002,g_stcf_d[g_detail_idx].stcf003,g_stcf_d[g_detail_idx].stcf004, 
                       g_stcf_d[g_detail_idx].stcf005,g_stcf_d[g_detail_idx].stcf006,g_stcf_d[g_detail_idx].stcf007, 
                       g_stcf_d[g_detail_idx].stcf008,g_stcf_d[g_detail_idx].stcf009,g_stcf_d[g_detail_idx].stcf010, 
                       g_stcf_d[g_detail_idx].stcf011,g_stcf_d[g_detail_idx].stcf012,g_stcf_d[g_detail_idx].stcf013, 
                       g_stcf_d[g_detail_idx].stcf014,g_stcf_d[g_detail_idx].stcf015,g_stcf_d[g_detail_idx].stcf016, 
                       g_stcf_d[g_detail_idx].stcf017,g_stcf_d[g_detail_idx].stcf018,g_stcf_d[g_detail_idx].stcf019,g_stcf_d[g_detail_idx].stcf020,g_stcf_d[g_detail_idx].stcfsite,g_stcf_d[g_detail_idx].stcfunit)
      #add-point:insert_b段資料新增中
{<point name="insert_b.m_insert"/>}
      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcf_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:insert_b段資料新增後
{<point name="insert_b.after_insert"/>}
      #end add-point 
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
{<point name="insert_b.before_insert2" mark="Y"/>}
      #end add-point 
      INSERT INTO stch_t
                  (stchent,
                   stch001,
                   stchseq
                   ,stch002,stch003,stchsite,stchunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_stcf2_d[g_detail_idx].stch002,g_stcf2_d[g_detail_idx].stch003,g_stcf2_d[g_detail_idx].stchsite,g_stcf2_d[g_detail_idx].stchunit)
      #add-point:insert_b段資料新增中
{<point name="insert_b.m_insert2"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stch_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:insert_b段資料新增後
{<point name="insert_b.after_insert2"/>}
      #end add-point
   END IF
 
 
   
 
   
   #add-point:insert_b段other
{<point name="insert_b.other"/>}
   #end add-point     
   
END FUNCTION

{</section>}

{<section id="astm601.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION astm601_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   {<Local define>}
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:update_b段define
{<point name="update_b.define"/>}
   #end add-point     
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stcf_t" THEN
      #add-point:update_b段修改前
{<point name="update_b.before_update" mark="Y"/>}
      #end add-point     
      UPDATE stcf_t 
         SET (stcf001,
              stcfseq
              ,stcf002,stcf003,stcf004,stcf005,stcf006,stcf007,stcf008,stcf009,stcf010,stcf011,stcf012,stcf013,stcf014,stcf015,stcf016,stcf017,stcf018,stcf019) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_stcf_d[g_detail_idx].stcf002,g_stcf_d[g_detail_idx].stcf003,g_stcf_d[g_detail_idx].stcf004, 
                  g_stcf_d[g_detail_idx].stcf005,g_stcf_d[g_detail_idx].stcf006,g_stcf_d[g_detail_idx].stcf007, 
                  g_stcf_d[g_detail_idx].stcf008,g_stcf_d[g_detail_idx].stcf009,g_stcf_d[g_detail_idx].stcf010, 
                  g_stcf_d[g_detail_idx].stcf011,g_stcf_d[g_detail_idx].stcf012,g_stcf_d[g_detail_idx].stcf013, 
                  g_stcf_d[g_detail_idx].stcf014,g_stcf_d[g_detail_idx].stcf015,g_stcf_d[g_detail_idx].stcf016, 
                  g_stcf_d[g_detail_idx].stcf017,g_stcf_d[g_detail_idx].stcf018,g_stcf_d[g_detail_idx].stcf019) 
         WHERE stcfent = g_enterprise AND stcf001 = ps_keys_bak[1] AND stcfseq = ps_keys_bak[2]
      #add-point:update_b段修改中
{<point name="update_b.m_update"/>}
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = "std-00009"
            LET g_errparam.extend = "stcf_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "stcf_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()
  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
{<point name="update_b.after_update"/>}
      #end add-point  
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stch_t" THEN
      #add-point:update_b段修改前
{<point name="update_b.before_update2" mark="Y"/>}
      #end add-point     
      UPDATE stch_t 
         SET (stch001,
              stchseq
              ,stch002,stch003) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_stcf2_d[g_detail_idx].stch002,g_stcf2_d[g_detail_idx].stch003) 
         WHERE stchent = g_enterprise AND stch001 = ps_keys_bak[1] AND stchseq = ps_keys_bak[2]
      #add-point:update_b段修改中
{<point name="update_b.m_update2"/>}
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = "std-00009"
            LET g_errparam.extend = "stch_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "stch_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()
  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
{<point name="update_b.after_update2"/>}
      #end add-point  
   END IF
 
 
   
 
   
 
   
   #add-point:update_b段other
{<point name="update_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astm601.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION astm601_lock_b(ps_table,ps_page)
   {<Local define>}
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:lock_b段define
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #先刷新資料
   #CALL astm601_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "stcf_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astm601_bcl USING g_enterprise,
                                       g_stce_m.stce001,g_stcf_d[g_detail_idx].stcfseq
                                       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "astm601_bcl"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   
   END IF
                                    
   #鎖定整組table
   #LET ls_group = "'2',"
   #僅鎖定自身table
   LET ls_group = "stch_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astm601_bcl2 USING g_enterprise,
                                             g_stce_m.stce001,g_stcf2_d[g_detail_idx].stchseq
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "astm601_bcl2"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   END IF
 
 
   
 
   
   #add-point:lock_b段other
   {<point name="lock_b.other"/>}
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION

{</section>}

{<section id="astm601.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION astm601_unlock_b(ps_table,ps_page)
   {<Local define>}
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:unlock_b段define
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astm601_bcl
   END IF
   
   LET ls_group = "'2',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astm601_bcl2
   END IF
 
 
   
 
 
   #add-point:unlock_b段other
   {<point name="unlock_b.other"/>}
   #end add-point  
 
END FUNCTION

{</section>}

{<section id="astm601.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION astm601_set_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1  
   {</Local define>}
   #add-point:set_entry段define
   {<point name="set_entry.define"/>}
   #end add-point       
 
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("stce001",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後
   {<point name="set_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="astm601.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION astm601_set_no_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_no_entry段define
   {<point name="set_no_entry.define"/>}
   #end add-point     
 
   IF p_cmd = 'u' THEN
      CALL cl_set_comp_entry("stce001",FALSE)
      #add-point:set_no_entry段欄位控制
      {<point name="set_no_entry.field_control"/>}
      #end add-point 
   END IF
   
   #add-point:set_no_entry段欄位控制後
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="astm601.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION astm601_set_entry_b(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define"/>}
   #end add-point     
   #add-point:set_entry_b段
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point  
END FUNCTION

{</section>}

{<section id="astm601.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION astm601_set_no_entry_b(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define"/>}
   #end add-point    
   #add-point:set_no_entry_b段
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point     
END FUNCTION

{</section>}

{<section id="astm601.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION astm601_default_search()
   {<Local define>}
   DEFINE li_idx  LIKE type_t.num5
   DEFINE li_cnt  LIKE type_t.num5
   DEFINE ls_wc   STRING
   {</Local define>}
   #add-point:default_search段define
   {<point name="default_search.define"/>}
   #end add-point  
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[1]) THEN
      LET ls_wc = ls_wc, " stce001 = '", g_argv[1], "' AND "
   END IF
   
 
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
   ELSE
      IF cl_null(g_wc) THEN
         LET g_wc = " 1=1"
      END IF
   END IF
   
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point  
 
END FUNCTION

{</section>}

{<section id="astm601.state_change" >}
   #+ 此段落由子樣板a09產生
#+ 確認碼變更
PRIVATE FUNCTION astm601_statechange()
   {<Local define>}
   DEFINE lc_state LIKE type_t.chr5
   {</Local define>}
   #add-point:statechange段define
   {<point name="statechange.define"/>}
   #end add-point  
   
   #add-point:statechange段開始前
   {<point name="statechange.before"/>}
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_stce_m.stce001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         CASE g_stce_m.stcestus
            WHEN "N"
               HIDE OPTION "open"
            WHEN "X"
               HIDE OPTION "void"
 
            WHEN "Y"
               HIDE OPTION "valid"
 
 
            
         END CASE
     
      #add-point:menu前
      {<point name="statechange.before_menu"/>}
      #end add-point
      
      ON ACTION open
         LET lc_state = "N"
         #add-point:action控制
         {<point name="statechange.open"/>}
         #end add-point
         EXIT MENU
      ON ACTION void
         LET lc_state = "X"
         #add-point:action控制
         {<point name="statechange.void"/>}
         #end add-point
         EXIT MENU
 
      ON ACTION valid
         LET lc_state = "Y"
         #add-point:action控制
         {<point name="statechange.valid"/>}
         #end add-point
         EXIT MENU
 
 
      
      
      
      #add-point:stus控制
      {<point name="statechange.more_control"/>}
      #end add-point
      
   END MENU
   
   IF (lc_state <> "N" 
      AND lc_state <> "X"
 
      AND lc_state <> "Y"
 
 
      ) OR 
      cl_null(lc_state) THEN
      RETURN
   END IF
   
   #add-point:stus修改前
   {<point name="statechange.b_update"/>}
   #end add-point
      
   UPDATE stce_t SET stcestus = lc_state 
    WHERE stceent = g_enterprise AND stce001 = g_stce_m.stce001
 
  
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
 
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
 
 
         
      END CASE
      LET g_stce_m.stcestus = lc_state
      DISPLAY BY NAME g_stce_m.stcestus
   END IF
 
   #add-point:stus修改後
   {<point name="statechange.a_update"/>}
   #end add-point
 
   #add-point:statechange段結束前
   {<point name="statechange.after"/>}
   #end add-point  
 
END FUNCTION
 
 

{</section>}

{<section id="astm601.idx_chk" >}
#+ 單身筆數變更
PRIVATE FUNCTION astm601_idx_chk()
   #add-point:idx_chk段define
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_stcf_d.getLength() THEN
         LET g_detail_idx = g_stcf_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_stcf_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_stcf_d.getLength() TO FORMONLY.cnt
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx > g_stcf2_d.getLength() THEN
         LET g_detail_idx = g_stcf2_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_stcf2_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_stcf2_d.getLength() TO FORMONLY.cnt
   END IF
 
 
   
   #add-point:idx_chk段other
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astm601.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION astm601_b_fill2(pi_idx)
   {<Local define>}
   DEFINE pi_idx          LIKE type_t.num5
   DEFINE li_ac           LIKE type_t.num5
   DEFINE ls_chk          LIKE type_t.chr1
   {</Local define>}
   #add-point:b_fill2段define
   {<point name="b_fill2.define"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
 
      
   #add-point:單身填充後
   {<point name="b_fill2.after_fill" />}
   #end add-point
    
   LET l_ac = li_ac
   
   CALL astm601_detail_show()
   
END FUNCTION

{</section>}

{<section id="astm601.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION astm601_fill_chk(ps_idx)
   {<Local define>}
   DEFINE ps_idx        LIKE type_t.chr10
   {</Local define>}
   #add-point:fill_chk段define
{<point name="fill_chk.define"/>}
   #end add-point
   
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
      (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1')  AND
      (cl_null(g_wc2_table4) OR g_wc2_table4.trim() = '1=1') THEN
      #add-point:fill_chk段define
{<point name="fill_chk.other_chk"/>}
      #end add-point
      RETURN TRUE
   END IF
   
   #第一單身
   IF ps_idx = 1 AND
      ((NOT cl_null(g_wc2_table1) AND g_wc2_table1.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
   
   #根據wc判定是否需要填充
   IF ps_idx = 2 AND
      ((NOT cl_null(g_wc2_table2) AND g_wc2_table2.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
 
   #根據wc判定是否需要填充
   IF ps_idx = 4 AND
      ((NOT cl_null(g_wc2_table4) AND g_wc2_table4.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
 
   RETURN FALSE
 
END FUNCTION

{</section>}

{<section id="astm601.signature" >}
   

{</section>}

{<section id="astm601.set_pk_array" >}


{</section>}

{<section id="astm601.other_dialog" readonly="Y" >}
 

{</section>}

{<section id="astm601.other_function" readonly="Y" >}
   
{<point name="other.function"/>}

{</section>}

