#該程式已解開Section, 不再透過樣板產出!
{<section id="astt601.description" >}
#+ Version..: T100-ERP-1.00.00(版次:1) Build-000183
#+ 
#+ Filename...: astt601
#+ Description: 自營合約異動申請單
#+ Creator....: 01533(2013/10/21)
#+ Modifier...: 01533(2013/11/08)
#+ Buildtype..: 應用 t01 樣板自動產生
#+ 以上段落由子樣板a00產生

{</section>}

{<section id="astt601.global" >}
{<point name="global.memo" />}
    
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
{<Module define>}
 
#單頭 type 宣告
PRIVATE type type_g_stca_m        RECORD
       stca000 LIKE stca_t.stca000, 
   stcadocno LIKE stca_t.stcadocno, 
   stcadocdt LIKE stca_t.stcadocdt, 
   stca005 LIKE stca_t.stca005, 
   stca001 LIKE stca_t.stca001, 
   stca002 LIKE stca_t.stca002, 
   stca003 LIKE stca_t.stca003,  
   stca004 LIKE stca_t.stca004, 
   stca004_desc LIKE type_t.chr80, 
   stca009 LIKE stca_t.stca009, 
   stca009_desc LIKE type_t.chr80,
   stca010 LIKE stca_t.stca010,
   stca010_desc LIKE type_t.chr80,
   stca011 LIKE stca_t.stca011,
   stca011_desc LIKE type_t.chr80, 
   stca012 LIKE stca_t.stca012,
   stca012_desc LIKE type_t.chr80,
   stca008 LIKE stca_t.stca008,  
   stca027 LIKE stca_t.stca027,   
   stca021 LIKE stca_t.stca021, 
   stca021_desc LIKE type_t.chr80, 
   stca022 LIKE stca_t.stca022, 
   stca022_desc LIKE type_t.chr80, 
   stca023 LIKE stca_t.stca023, 
   stca023_desc LIKE type_t.chr80, 
   stca006 LIKE stca_t.stca006, 
   stca006_desc LIKE type_t.chr80, 
   stca007 LIKE stca_t.stca007, 
   stca007_desc LIKE type_t.chr80, 
   stca024 LIKE stca_t.stca024, 
   stca024_desc LIKE type_t.chr80,
   stca028 LIKE stca_t.stca028,
   stca028_desc LIKE type_t.chr80,   
   stca025 LIKE stca_t.stca025, 
   stca025_desc LIKE type_t.chr80,
   stca026 LIKE stca_t.stca025, 
   stca026_desc LIKE type_t.chr80,    
   stcaacti LIKE stca_t.stcaacti, 
   stca013 LIKE stca_t.stca013, 
   stca014 LIKE stca_t.stca014, 
   stca014_desc LIKE type_t.chr80, 
   stca015 LIKE stca_t.stca015, 
   stca015_desc LIKE type_t.chr80,
   stca016 LIKE stca_t.stca016, 
   stca016_desc LIKE type_t.chr80,    
   stca017 LIKE stca_t.stca017, 
   stca018 LIKE stca_t.stca018, 
   stca019 LIKE stca_t.stca019, 
   stca020 LIKE stca_t.stca020,
   next_b  LIKE type_t.dat,
   ooff013 LIKE type_t.chr1000,     
   stcasite LIKE stca_t.stcasite, 
   stcasite_desc LIKE type_t.chr80, 
   stcaunit LIKE stca_t.stcaunit, 
   stcastus LIKE stca_t.stcastus, 
   stcaownid LIKE stca_t.stcaownid, 
   stcaownid_desc LIKE type_t.chr80, 
   stcaowndp LIKE stca_t.stcaowndp, 
   stcaowndp_desc LIKE type_t.chr80, 
   stcacrtid LIKE stca_t.stcacrtid, 
   stcacrtid_desc LIKE type_t.chr80, 
   stcacrtdp LIKE stca_t.stcacrtdp, 
   stcacrtdp_desc LIKE type_t.chr80, 
   stcacrtdt DATETIME YEAR TO SECOND, 
   stcamodid LIKE stca_t.stcamodid, 
   stcamodid_desc LIKE type_t.chr80, 
   stcamoddt DATETIME YEAR TO SECOND, 
   stcacnfid LIKE stca_t.stcacnfid, 
   stcacnfid_desc LIKE type_t.chr80, 
   stcacnfdt DATETIME YEAR TO SECOND
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_stcb_d        RECORD
       stcbseq LIKE stcb_t.stcbseq, 
   stcb002 LIKE stcb_t.stcb002, 
   stcb002_desc LIKE type_t.chr500, 
   stcb021 LIKE stcb_t.stcb021,  #160513-00033#7
   stcb003 LIKE stcb_t.stcb003, 
   stcb004 LIKE stcb_t.stcb004, 
   stcb005 LIKE stcb_t.stcb005, 
   stcb006 LIKE stcb_t.stcb006, 
   stcb007 LIKE stcb_t.stcb007, 
   stcb008 LIKE stcb_t.stcb008, 
   stcb008_desc LIKE type_t.chr500, 
   stcb009 LIKE stcb_t.stcb009, 
   stcb009_desc LIKE type_t.chr500, 
   stcb010 LIKE stcb_t.stcb010, 
   stcb011 LIKE stcb_t.stcb011, 
   stcb012 LIKE stcb_t.stcb012, 
   stcb013 LIKE stcb_t.stcb013, 
   stcb014 LIKE stcb_t.stcb014, 
   stcb015 LIKE stcb_t.stcb015, 
   stcb016 LIKE stcb_t.stcb016, 
   stcb017 LIKE stcb_t.stcb017, 
   stcb018 LIKE stcb_t.stcb018, 
   stcb019 LIKE stcb_t.stcb019,
   stcb020 LIKE stcb_t.stcb020,
   stcbunit LIKE stcb_t.stcbunit, 
   stcbsite LIKE stcb_t.stcbsite
       END RECORD
PRIVATE TYPE type_g_stcb2_d RECORD
       stcdseq LIKE stcd_t.stcdseq, 
   stcd002 LIKE stcd_t.stcd002, 
   stcd002_desc LIKE type_t.chr500, 
   stcd003 LIKE stcd_t.stcd003, 
   stcdunit LIKE stcd_t.stcdunit, 
   stcdsite LIKE stcd_t.stcdsite
       END RECORD
 
 
 
#模組變數(Module Variables)
DEFINE g_stca_m          type_g_stca_m
DEFINE g_stca_m_t        type_g_stca_m
 
   DEFINE g_stcadocno_t LIKE stca_t.stcadocno
 
 
DEFINE g_stcb_d          DYNAMIC ARRAY OF type_g_stcb_d
DEFINE g_stcb_d_t        type_g_stcb_d
DEFINE g_stcb2_d   DYNAMIC ARRAY OF type_g_stcb2_d
DEFINE g_stcb2_d_t type_g_stcb2_d
 
 
 
DEFINE g_browser    DYNAMIC ARRAY OF RECORD    #資料瀏覽之欄位 
         b_statepic     LIKE type_t.chr50,
            b_stcadocno LIKE stca_t.stcadocno,
      b_stcadocdt LIKE stca_t.stcadocdt,
      b_stca000 LIKE stca_t.stca000,
      b_stca001 LIKE stca_t.stca001,
      b_stca005 LIKE stca_t.stca005,
      b_stca002 LIKE stca_t.stca002,
      b_stca004 LIKE stca_t.stca004,
      b_stca009 LIKE stca_t.stca009,
      b_stca021 LIKE stca_t.stca021,
      b_stca022 LIKE stca_t.stca022,
      b_stca023 LIKE stca_t.stca023,
      b_stca006 LIKE stca_t.stca006,
      b_stca007 LIKE stca_t.stca007,
      b_stca008 LIKE stca_t.stca008,
      b_stca013 LIKE stca_t.stca013,
      b_stca014 LIKE stca_t.stca014,
      b_stca015 LIKE stca_t.stca015,
      b_stca024 LIKE stca_t.stca024,
      b_stca025 LIKE stca_t.stca025,
      b_stca017 LIKE stca_t.stca017,
      b_stca018 LIKE stca_t.stca018,
      b_stca019 LIKE stca_t.stca019,
      b_stca020 LIKE stca_t.stca020,
      b_stca003 LIKE stca_t.stca003,
      b_stcasite LIKE stca_t.stcasite,
      b_stcaacti LIKE stca_t.stcaacti
         #,rank           LIKE type_t.num10
      END RECORD 
      
DEFINE g_browser_f  RECORD    #資料瀏覽之欄位 
         b_statepic     LIKE type_t.chr50,
            b_stcadocno LIKE stca_t.stcadocno,
      b_stcadocdt LIKE stca_t.stcadocdt,
      b_stca000 LIKE stca_t.stca000,
      b_stca001 LIKE stca_t.stca001,
      b_stca005 LIKE stca_t.stca005,
      b_stca002 LIKE stca_t.stca002,
      b_stca004 LIKE stca_t.stca004,
      b_stca009 LIKE stca_t.stca009,
      b_stca021 LIKE stca_t.stca021,
      b_stca022 LIKE stca_t.stca022,
      b_stca023 LIKE stca_t.stca023,
      b_stca006 LIKE stca_t.stca006,
      b_stca007 LIKE stca_t.stca007,
      b_stca008 LIKE stca_t.stca008,
      b_stca013 LIKE stca_t.stca013,
      b_stca014 LIKE stca_t.stca014,
      b_stca015 LIKE stca_t.stca015,
      b_stca024 LIKE stca_t.stca024,
      b_stca025 LIKE stca_t.stca025,
      b_stca017 LIKE stca_t.stca017,
      b_stca018 LIKE stca_t.stca018,
      b_stca019 LIKE stca_t.stca019,
      b_stca020 LIKE stca_t.stca020,
      b_stca003 LIKE stca_t.stca003,
      b_stcasite LIKE stca_t.stcasite,
      b_stcaacti LIKE stca_t.stcaacti
         #,rank           LIKE type_t.num10
      END RECORD 
      
#無單頭append欄位定義
#無單身append欄位定義
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
DEFINE g_wc2_table2   STRING
 
 
 
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num5           
DEFINE l_ac                  LIKE type_t.num5    
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog
    
DEFINE g_pagestart           LIKE type_t.num5           
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_page_action         STRING                        #page action
DEFINE g_header_hidden       LIKE type_t.num5              #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5              #隱藏工作Panel
DEFINE g_page                STRING                        #第幾頁
DEFINE g_state               STRING       
 
DEFINE g_detail_cnt          LIKE type_t.num5              #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num5              #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num5              #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num5              #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num5              #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num5              #Browser目前所在筆數(暫存用)
 
DEFINE g_searchcol           STRING                        #查詢欄位代碼
DEFINE g_searchstr           STRING                        #查詢欄位字串
DEFINE g_order               STRING                        #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num5              #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                       #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num5              #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5              #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
  
{</Module define>}
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point

{</section>}

{<section id="astt601.main" >}
#test
#+ 此段落由子樣板a26產生
#OPTIONS SHORT CIRCUIT
#+ 作業開始 
MAIN
   #add-point:main段define
{<point name="main.define"/>}
   #end add-point   
 
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("ast","")
 
   #add-point:作業初始化
{<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define
{<point name="main.define_sql" />}
   #end add-point
   LET g_forupd_sql = "SELECT stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003, stca004, 
       '',stca009,'',stca021,'',stca022,'',stca023,'',stca006,'',stca007,'',stca024,'',stca025,'',stca008, 
       stcaacti,stca013,stca014,'',stca015,'',stca017,stca018,stca019,stca020,stcasite,'',stcaunit,stcastus, 
       stcaownid,'',stcaowndp,'',stcacrtid,'',stcacrtdp,'',stcacrtdt,stcamodid,'',stcamoddt,stcacnfid, 
       '',stcacnfdt FROM stca_t WHERE stcaent= ? AND stcadocno=? FOR UPDATE"
   #add-point:SQL_define
{<point name="main.after_define_sql"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   DECLARE astt601_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   IF g_bgjob = "Y" THEN
 
      #add-point:Service Call
{<point name="main.servicecall" />}
      #end add-point
 
   ELSE
      
      #畫面開啟 (identifier)
      OPEN WINDOW w_astt601 WITH FORM cl_ap_formpath("ast",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL astt601_init()   
 
      #進入選單 Menu (="N")
      CALL astt601_ui_dialog() 
	  
      #add-point:畫面關閉前
{<point name="main.before_close" />}
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_astt601
      
   END IF 
   
   CLOSE astt601_cl
   
   
 
   #add-point:作業離開前
{<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
   
END MAIN
 
 

{</section>}

{<section id="astt601.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION astt601_init()
   #add-point:init段define
{<point name="init.define"/>}
   #end add-point    
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1

   CALL cl_set_combo_scc_part('stcastus','13','N,X,Y,A,D,R,W')
 
      CALL cl_set_combo_scc('stca000','32') 
   CALL cl_set_combo_scc('stca005','6013') 
   CALL cl_set_combo_scc('stcb004','6006') 
   CALL cl_set_combo_scc('stcb005','6007') 
   CALL cl_set_combo_scc('stcb006','6008') 
   CALL cl_set_combo_scc('stcb007','6009') 
   CALL cl_set_combo_scc('stcb012','6010') 
   CALL cl_set_combo_scc('stcb015','6011') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
 
   #add-point:畫面資料初始化
{<point name="init.init"/>}
   #end add-point
   
   CALL astt601_default_search()
    
END FUNCTION

{</section>}

{<section id="astt601.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION astt601_ui_dialog()
   {<Local define>}
   DEFINE li_idx  LIKE type_t.num5
   {</Local define>}
   #add-point:ui_dialog段define
{<point name="ui_dialog.define"/>}
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   CALL gfrm_curr.setElementImage("logo","logo/applogo.png") 
   IF g_wc.trim() <> "1=1" THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #add-point:ui_dialog段before dialog 
{<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE 
   
      CALL astt601_browser_fill("")
      CALL lib_cl_dlg.cl_dlg_before_display()
      CALL cl_notice()
            
      #判斷前一個動作是否為新增, 若是的話切換到新增的筆數
      IF g_state = "Y" THEN
         FOR li_idx = 1 TO g_browser.getLength()
            IF g_browser[li_idx].b_stcadocno = g_stcadocno_t
 
               THEN
               LET g_current_row = li_idx
               LET g_current_idx = li_idx
               EXIT FOR
            END IF
         END FOR
         LET g_state = ""
      END IF
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
         #INPUT g_searchstr,g_searchcol FROM formonly.searchstr,formonly.cbo_searchcol
         #
         #   BEFORE INPUT
         #   
         #END INPUT
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
 
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
 
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL astt601_fetch('') # reload data
               LET l_ac = 1
               CALL astt601_ui_detailshow() #Setting the current row 
      
               CALL astt601_idx_chk()
               #NEXT FIELD stcbseq
         
         END DISPLAY
        
         DISPLAY ARRAY g_stcb_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               CALL astt601_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               
               #add-point:page1, before row動作
{<point name="ui_dialog.page1.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               CALL FGL_SET_ARR_CURR(g_detail_idx)
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               CALL astt601_idx_chk()
               #add-point:page1自定義行為
{<point name="ui_dialog.page1.before_display"/>}
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
 
 
         ON ACTION detail_qrystr
 
            LET g_action_choice="detail_qrystr"
            IF cl_auth_chk_act("detail_qrystr") THEN 
               MENU "" ATTRIBUTE(STYLE="popup")
 
                  ON ACTION asti203
 
                     LET g_action_choice="asti203"
                     IF cl_auth_chk_act("asti203") THEN 
                        #add-point:ON ACTION asti203
{<point name="menu.detail_show.page1_sub.asti203" />}
                        #END add-point
                        
                     END IF
 
 
                  ON ACTION asti205
 
                     LET g_action_choice="asti205"
                     IF cl_auth_chk_act("asti205") THEN 
                        #add-point:ON ACTION asti205
{<point name="menu.detail_show.page1_sub.asti202" />}
                        #END add-point
                        
                     END IF
 
               END MENU
               #add-point:ON ACTION detail_qrystr
{<point name="menu.detail_show.page1.detail_qrystr" />}
               #END add-point
               EXIT DIALOG
            END IF
 
               
            #add-point:page1自定義行為
{<point name="ui_dialog.page1.action"/>}
            #end add-point
               
         END DISPLAY
        
         DISPLAY ARRAY g_stcb2_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               CALL astt601_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx = l_ac
               
               #add-point:page2, before row動作
{<point name="ui_dialog.body2.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               CALL FGL_SET_ARR_CURR(g_detail_idx)
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_current_page = 2
               CALL astt601_idx_chk()
               #add-point:page2自定義行為
{<point name="ui_dialog.body2.before_display"/>}
               #end add-point
      
            #自訂ACTION(detail_show,page_2)
            
         
            #add-point:page2自定義行為
{<point name="ui_dialog.body2.action"/>}
            #end add-point
         
         END DISPLAY
 
 
         
         #add-point:ui_dialog段自定義display array
{<point name="ui_dialog.more_displayarray"/>}
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_page = "first"
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            LET g_current_row = g_current_idx #目前指標
            IF g_current_idx = 0 THEN
               LET g_current_idx = 1
            END IF
            LET g_current_sw = TRUE
            
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL astt601_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL astt601_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL astt601_idx_chk()
            
            #add-point:ui_dialog段before_dialog2
{<point name="ui_dialog.before_dialog2"/>}
            #end add-point
            
            #NEXT FIELD stcbseq
        
         ON ACTION statechange
            CALL astt601_statechange()
            LET g_action_choice = "statechange"
            EXIT DIALOG
         #簽核狀況
         ON ACTION bpm_status
            #查詢簽核狀況, 統一建立HyperLink
            CALL cl_bpm_status()
            #add-point:ON ACTION bpm_status
         #END add-point
         
          
         #ACTION表單列
         ON ACTION filter
            CALL astt601_filter()
            EXIT DIALOG
         
         ON ACTION first
            CALL astt601_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt601_idx_chk()
            
         ON ACTION previous
            CALL astt601_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt601_idx_chk()
            
         ON ACTION jump
            CALL astt601_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt601_idx_chk()
            
         ON ACTION next
            CALL astt601_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt601_idx_chk()
            
         ON ACTION last
            CALL astt601_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt601_idx_chk()
            
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
      
         ON ACTION mainhidden       #主頁摺疊
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            
         ON ACTION worksheethidden   #瀏覽頁折疊
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
       
         ON ACTION controls      #單頭摺疊，可利用hot key "Ctrl-s"開啟/關閉單頭
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("worksheet_detail",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("worksheet_detail",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
 
         ON ACTION insert
 
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN 
               CALL astt601_insert()
               #add-point:ON ACTION insert
{<point name="menu.insert" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION query
 
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN 
               CALL astt601_query()
               #add-point:ON ACTION query
{<point name="menu.query" />}
               #END add-point
            END IF
 
 
         ON ACTION output
 
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN 
               #add-point:ON ACTION output
{<point name="menu.output" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION delete
 
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN 
               CALL astt601_delete()
               #add-point:ON ACTION delete
{<point name="menu.delete" />}
               #END add-point
            END IF
 
 
         ON ACTION modify
 
            LET g_aw = ''
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN 
               CALL astt601_modify()
               #add-point:ON ACTION modify
{<point name="menu.modify" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION modify_detail
 
            LET g_aw = g_curr_diag.getCurrentItem()
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN 
               CALL astt601_modify()
               #add-point:ON ACTION modify_detail
{<point name="menu.modify_detail" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION reproduce
 
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN 
               CALL astt601_reproduce()
               #add-point:ON ACTION reproduce
{<point name="menu.reproduce" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stca001
 
            LET g_action_choice="prog_stca001"
            IF cl_auth_chk_act("prog_stca001") THEN 
               CALL cl_cmdrun_wait("astm601")
               #add-point:ON ACTION prog_stca001
{<point name="menu.prog_stca001" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stca004
 
            LET g_action_choice="prog_stca004"
            IF cl_auth_chk_act("prog_stca004") THEN 
               CALL cl_cmdrun_wait("astm201")
               #add-point:ON ACTION prog_stca004
{<point name="menu.prog_stca004" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stca009
 
            LET g_action_choice="prog_stca009"
            IF cl_auth_chk_act("prog_stca009") THEN 
               CALL cl_cmdrun_wait("adbm200")
               #add-point:ON ACTION prog_stca009
{<point name="menu.prog_stca009" />}
               #END add-point
               EXIT DIALOG
            END IF
 
         ON ACTION prog_stca010
 
            LET g_action_choice="prog_stca010"
            IF cl_auth_chk_act("prog_stca010") THEN 
               CALL cl_cmdrun_wait("adbm201")
               #add-point:ON ACTION prog_stca009
                              
               #END add-point
               EXIT DIALOG
            END IF
 
         ON ACTION prog_stca021
 
            LET g_action_choice="prog_stca021"
            IF cl_auth_chk_act("prog_stca021") THEN 
               CALL cl_cmdrun_wait("aooi140")
               #add-point:ON ACTION prog_stca021
{<point name="menu.prog_stca021" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stca022
 
            LET g_action_choice="prog_stca022"
            IF cl_auth_chk_act("prog_stca022") THEN 
               CALL cl_cmdrun_wait("aooi610")
               #add-point:ON ACTION prog_stca022
{<point name="menu.prog_stca022" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         ON ACTION prog_stca006
 
            LET g_action_choice="prog_stca006"
            IF cl_auth_chk_act("prog_stca006") THEN 
               CALL cl_cmdrun_wait("asti201")
               #add-point:ON ACTION prog_stca006
{<point name="menu.prog_stca006" />}
               #END add-point
               EXIT DIALOG
            END IF
 
         
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
            
      END DIALOG
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION

{</section>}

{<section id="astt601.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION astt601_browser_fill(ps_page_action)
   {<Local define>}
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   DEFINE l_searchcol       STRING
   {</Local define>}
   #add-point:browser_fill段define
{<point name="browser_fill.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stca_m.* TO NULL
   CALL g_stcb_d.clear()        
   CALL g_stcb2_d.clear() 
 
 
   CALL g_browser.clear()
   
   #搜尋用
   IF cl_null(g_searchcol) OR g_searchcol = '0' THEN
      LET l_searchcol = "stcadocno"
 
   ELSE
      LET l_searchcol = g_searchcol
   END IF
   
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
   IF cl_null(l_wc) THEN  #p_wc 查詢條件
      RETURN
   END IF
   
   #add-point:browser_fill,foreach前
{<point name="browser_fill.before_foreach"/>}
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE stcadocno ",
 
                        " FROM stca_t ",
                              " ",
                              " LEFT JOIN stcb_t ON stcbent = stcaent AND stcadocno = stcbdocno ",
                              " LEFT JOIN stcd_t ON stcdent = stcaent AND stcadocno = stcddocno", 
 
 
 
                              " ", 
                              " ", 
                       " WHERE stcaent = '" ||g_enterprise|| "' AND stcbent = '" ||g_enterprise|| "' AND ",l_wc, " AND ", l_wc2
 
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE stcadocno ",
 
                        " FROM stca_t ", 
                              " ",
                              " ",
                        "WHERE stcaent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED
 
   END IF
   
   LET g_sql = " SELECT COUNT(*) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前
{<point name="browser_fill.before_count"/>}
   #end add-point
   
   PREPARE header_cnt_pre FROM g_sql
   EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
   FREE header_cnt_pre
 
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
   
   #LET g_page_action = ps_page_action          # Keep Action
   
   IF ps_page_action = "F" OR
      ps_page_action = "P" OR
      ps_page_action = "N" OR
      ps_page_action = "L" THEN
      LET g_page_action = ps_page_action
   END IF
   
   CASE ps_page_action
      WHEN "F" 
         LET g_pagestart = 1
          
      WHEN "P"  
         LET g_pagestart = g_pagestart - g_max_browse
         IF g_pagestart < 1 THEN
            LET g_pagestart = 1
         END IF
          
      WHEN "N"  
         LET g_pagestart = g_pagestart + g_max_browse
         IF g_pagestart > g_browser_cnt THEN
            LET g_pagestart = g_browser_cnt - (g_browser_cnt mod g_max_browse) + 1
            WHILE g_pagestart > g_browser_cnt 
               LET g_pagestart = g_pagestart - g_max_browse
            END WHILE
         END IF
      
      WHEN "L"  
         LET g_pagestart = g_browser_cnt - (g_browser_cnt mod g_max_browse) + 1
         WHILE g_pagestart > g_browser_cnt 
            LET g_pagestart = g_pagestart - g_max_browse
         END WHILE
         
      WHEN '/'
         LET g_pagestart = g_jump
         IF g_pagestart > g_browser_cnt THEN
            LET g_pagestart = 1
         END IF
         
   END CASE
  
   #單身有輸入查詢條件且非null
   IF g_wc2 <> " 1=1" AND NOT cl_null(g_wc2) THEN 
      #依照stcadocno,stcadocdt,stca000,stca001,stca005,stca002,stca004,stca009,stca021,stca022,stca023,stca006,stca007,stca008,stca013,stca014,stca015,stca024,stca025,stca017,stca018,stca019,stca020,stca003,stcasite,stcaacti Browser欄位定義(取代原本bs_sql功能)
      LET l_sql_rank = "SELECT DISTINCT stcastus,stcadocno,stcadocdt,stca000,stca001,stca005,stca002, 
          stca004,stca009,stca021,stca022,stca023,stca006,stca007,stca008,stca013,stca014,stca015,stca024, 
          stca025,stca017,stca018,stca019,stca020,stca003,stcasite,stcaacti,DENSE_RANK() OVER(ORDER BY stcadocno ", 
          g_order,") AS RANK ",
                        " FROM stca_t ",
                              " ",
                              " LEFT JOIN stcb_t ON stcbent = stcaent AND stcadocno = stcbdocno ",
                              " LEFT JOIN stcd_t ON stcdent = stcaent AND stcadocno = stcddocno",
 
 
 
                              " ",
                              " ",
                       " ",
                       " WHERE stcaent = '" ||g_enterprise|| "' AND ",g_wc," AND ",g_wc2
   ELSE
      #單身無輸入資料
      LET l_sql_rank = "SELECT DISTINCT stcastus,stcadocno,stcadocdt,stca000,stca001,stca005,stca002, 
          stca004,stca009,stca021,stca022,stca023,stca006,stca007,stca008,stca013,stca014,stca015,stca024, 
          stca025,stca017,stca018,stca019,stca020,stca003,stcasite,stcaacti,DENSE_RANK() OVER(ORDER BY stcadocno ", 
          g_order,") AS RANK ",
                       " FROM stca_t ",
                            "  ",
                            "  ",
                       " WHERE stcaent = '" ||g_enterprise|| "' AND ", g_wc
   END IF
   
   #定義翻頁CURSOR
   LET g_sql= "SELECT stcastus,stcadocno,stcadocdt,stca000,stca001,stca005,stca002,stca004,stca009,stca021, 
       stca022,stca023,stca006,stca007,stca008,stca013,stca014,stca015,stca024,stca025,stca017,stca018, 
       stca019,stca020,stca003,stcasite,stcaacti FROM (",l_sql_rank,") WHERE ",
              " RANK >= ",1," AND RANK<",1+g_max_browse,
              " ORDER BY ",l_searchcol," ",g_order
               
   #add-point:browser_fill,before_prepare
{<point name="browser_fill.before_prepare"/>}
   #end add-point
               
   PREPARE browse_pre FROM g_sql
   DECLARE browse_cur CURSOR FOR browse_pre
   
   #add-point:browser_fill,open
{<point name="browser_fill.open"/>}
   #end add-point
 
   CALL g_browser.clear()
   LET g_cnt = 1
   FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_stcadocno,g_browser[g_cnt].b_stcadocdt, 
       g_browser[g_cnt].b_stca000,g_browser[g_cnt].b_stca001,g_browser[g_cnt].b_stca005,g_browser[g_cnt].b_stca002, 
       g_browser[g_cnt].b_stca004,g_browser[g_cnt].b_stca009,g_browser[g_cnt].b_stca021,g_browser[g_cnt].b_stca022, 
       g_browser[g_cnt].b_stca023,g_browser[g_cnt].b_stca006,g_browser[g_cnt].b_stca007,g_browser[g_cnt].b_stca008, 
       g_browser[g_cnt].b_stca013,g_browser[g_cnt].b_stca014,g_browser[g_cnt].b_stca015,g_browser[g_cnt].b_stca024, 
       g_browser[g_cnt].b_stca025,g_browser[g_cnt].b_stca017,g_browser[g_cnt].b_stca018,g_browser[g_cnt].b_stca019, 
       g_browser[g_cnt].b_stca020,g_browser[g_cnt].b_stca003,g_browser[g_cnt].b_stcasite,g_browser[g_cnt].b_stcaacti 

      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'foreach:'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         EXIT FOREACH
      END IF
  
      
  
      #add-point:browser_fill段reference
{<point name="browser_fill.reference"/>}
      #end add-point
  
            #此段落由子樣板a24產生
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/open.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/invalid.png"
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/confirmed.png"
         WHEN "A"
            LET g_browser[g_cnt].b_statepic = "stus/16/approved.png"
         WHEN "D"
            LET g_browser[g_cnt].b_statepic = "stus/16/withdraw.png"
         WHEN "R"
            LET g_browser[g_cnt].b_statepic = "stus/16/rejection.png"
         WHEN "W"
            LET g_browser[g_cnt].b_statepic = "stus/16/signing.png"
      END CASE
 
 
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_rec THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9035
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         EXIT FOREACH
      END IF
      
   END FOREACH
 
   CALL g_browser.deleteElement(g_cnt)
   LET g_header_cnt = g_browser.getLength()
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
   
   FREE browse_pre
   
   #add-point:browser_fill段結束前
{<point name="browser_fill.after"/>}
   #end add-point
   
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,delete,reproduce", FALSE)
   ELSE
      CALL cl_set_act_visible("statechange,modify,delete,reproduce", TRUE)
   END IF
   
END FUNCTION

{</section>}

{<section id="astt601.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION astt601_ui_headershow()
   #add-point:ui_headershow段define
{<point name="ui_headershow.define"/>}
   #end add-point    
   
   LET g_stca_m.stcadocno = g_browser[g_current_idx].b_stcadocno   
 
    SELECT UNIQUE stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003,stca004,stca009,stca010,stca011,stca012,stca027,stca021, 
        stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti,stca013,stca014,stca015,stca016,stca017, 
        stca018,stca019,stca020,stcasite,stcaunit,stcastus,stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt, 
        stcamodid,stcamoddt,stcacnfid,stcacnfdt
 INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001,g_stca_m.stca002, 
     g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,g_stca_m.stca021,g_stca_m.stca022,g_stca_m.stca023, 
     g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,g_stca_m.stca008,g_stca_m.stcaacti, 
     g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019, 
     g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaowndp, 
     g_stca_m.stcacrtid,g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamoddt, 
     g_stca_m.stcacnfid,g_stca_m.stcacnfdt
 FROM stca_t
 WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
   CALL astt601_show()
   
END FUNCTION

{</section>}

{<section id="astt601.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION astt601_ui_detailshow()
   #add-point:ui_detailshow段define
   {<point name="ui_detailshow.define"/>}
   #end add-point    
   
   #add-point:ui_detailshow段before
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
      CALL g_curr_diag.setCurrentRow("s_detail2",g_detail_idx)
 
 
   END IF
   
   #add-point:ui_detailshow段after
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION

{</section>}

{<section id="astt601.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION astt601_ui_browser_refresh()
   {<Local define>}
   DEFINE l_i  LIKE type_t.num10
   {</Local define>}
   #add-point:ui_browser_refresh段define
   {<point name="ui_browser_refresh.define"/>}
   #end add-point    
   
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_stcadocno = g_stca_m.stcadocno 
 
         THEN  
         CALL g_browser.deleteElement(l_i)
         LET g_header_cnt = g_header_cnt - 1
      END IF
   END FOR
 
   LET g_browser_cnt = g_browser_cnt - 1
   IF g_current_row > g_browser_cnt THEN        #確定browse 筆數指在同一筆
      LET g_current_row = g_browser_cnt
   END IF
 
   #DISPLAY g_browser_cnt TO FORMONLY.b_count    #總筆數的顯示
   
END FUNCTION

{</section>}

{<section id="astt601.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION astt601_construct()
 
   {<Local define>}
   DEFINE lc_qbe_sn   LIKE type_t.num10
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   {</Local define>}
   #add-point:cs段define
{<point name="cs.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stca_m.* TO NULL
   CALL g_stcb_d.clear()        
   CALL g_stcb2_d.clear() 
   CALL g_stcv_d.clear()
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
   INITIALIZE g_wc2_table2 TO NULL
 
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前
{<point name="cs.before_construct"/>}
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003, 
          stca004,stca009,stca010,stca011,stca012,stca027,stca021,stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti,stca013, 
          stca014,stca015,stca016,stca017,stca018,stca019,stca020,stcasite,stcaunit,stcastus,stcaownid,stcaowndp, 
          stcacrtid,stcacrtdp,stcacrtdt,stcamodid,stcamoddt,stcacnfid,stcacnfdt
 
         BEFORE CONSTRUCT
#saki            CALL cl_qbe_init()
            #add-point:cs段before_construct
{<point name="cs.head.before_construct"/>}
            #end add-point 
            
         #公用欄位開窗相關處理
         #此段落由子樣板a11產生
         ##----<<stcaownid>>----
         #ON ACTION controlp INFIELD stcaownid
         #   CALL q_common('stca_t','stcaownid',TRUE,FALSE,g_stca_m.stcaownid) RETURNING ls_return
         #   DISPLAY ls_return TO stcaownid
         #   NEXT FIELD stcaownid  
         #
         ##----<<stcaowndp>>----
         #ON ACTION controlp INFIELD stcaowndp
         #   CALL q_common('stca_t','stcaowndp',TRUE,FALSE,g_stca_m.stcaowndp) RETURNING ls_return
         #   DISPLAY ls_return TO stcaowndp
         #   NEXT FIELD stcaowndp
         #
         ##----<<stcacrtid>>----
         #ON ACTION controlp INFIELD stcacrtid
         #   CALL q_common('stca_t','stcacrtid',TRUE,FALSE,g_stca_m.stcacrtid) RETURNING ls_return
         #   DISPLAY ls_return TO stcacrtid
         #   NEXT FIELD stcacrtid
         #
         ##----<<stcacrtdp>>----
         #ON ACTION controlp INFIELD stcacrtdp
         #   CALL q_common('stca_t','stcacrtdp',TRUE,FALSE,g_stca_m.stcacrtdp) RETURNING ls_return
         #   DISPLAY ls_return TO stcacrtdp
         #   NEXT FIELD stcacrtdp
         #
         ##----<<stcamodid>>----
         #ON ACTION controlp INFIELD stcamodid
         #   CALL q_common('stca_t','stcamodid',TRUE,FALSE,g_stca_m.stcamodid) RETURNING ls_return
         #   DISPLAY ls_return TO stcamodid
         #   NEXT FIELD stcamodid
         #
         ##----<<stcacnfid>>----
         #ON ACTION controlp INFIELD stcacnfid
         #   CALL q_common('stca_t','stcacnfid',TRUE,FALSE,g_stca_m.stcacnfid) RETURNING ls_return
         #   DISPLAY ls_return TO stcacnfid
         #   NEXT FIELD stcacnfid
         #
         ##----<<stajpstid>>----
         ##ON ACTION controlp INFIELD stajpstid
         ##   CALL q_common('stca_t','stajpstid',TRUE,FALSE,g_stca_m.stajpstid) RETURNING ls_return
         ##   DISPLAY ls_return TO stajpstid
         ##   NEXT FIELD stajpstid
         
         ##----<<stcacrtdt>>----
         AFTER FIELD stcacrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stcamoddt>>----
         AFTER FIELD stcamoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stcacnfdt>>----
         AFTER FIELD stcacnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stajpstdt>>----
         #AFTER FIELD stajpstdt
         #   CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
         #   IF NOT cl_null(ls_result) THEN
         #      IF NOT cl_chk_date_symbol(ls_result) THEN
         #         LET ls_result = cl_add_date_extra_cond(ls_result)
         #      END IF
         #   END IF
         #   CALL FGL_DIALOG_SETBUFFER(ls_result)
 
 
            
         #一般欄位開窗相關處理    
         #---------------------------<  Master  >---------------------------
         #----<<stca000>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca000
            #add-point:BEFORE FIELD stca000
{<point name="construct.b.stca000" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca000
            
            #add-point:AFTER FIELD stca000
{<point name="construct.a.stca000" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca000
         ON ACTION controlp INFIELD stca000
            #add-point:ON ACTION controlp INFIELD stca000
{<point name="construct.c.stca000" />}
            #END add-point
 
         #----<<stcadocno>>----
         #Ctrlp:construct.c.stcadocno
         ON ACTION controlp INFIELD stcadocno
            #add-point:ON ACTION controlp INFIELD stcadocno
{<point name="construct.c.stcadocno" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcadocno
            #add-point:BEFORE FIELD stcadocno
{<point name="construct.b.stcadocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcadocno
            
            #add-point:AFTER FIELD stcadocno
{<point name="construct.a.stcadocno" />}
            #END add-point
            
 
         #----<<stcadocdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcadocdt
            #add-point:BEFORE FIELD stcadocdt
{<point name="construct.b.stcadocdt" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcadocdt
            
            #add-point:AFTER FIELD stcadocdt
{<point name="construct.a.stcadocdt" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stcadocdt
         ON ACTION controlp INFIELD stcadocdt
            #add-point:ON ACTION controlp INFIELD stcadocdt
{<point name="construct.c.stcadocdt" />}
            #END add-point
 
         #----<<stca005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca005
            #add-point:BEFORE FIELD stca005
{<point name="construct.b.stca005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca005
            
            #add-point:AFTER FIELD stca005
{<point name="construct.a.stca005" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca005
         ON ACTION controlp INFIELD stca005
            #add-point:ON ACTION controlp INFIELD stca005
{<point name="construct.c.stca005" />}
            #END add-point
 
         #----<<stca001>>----
         #Ctrlp:construct.c.stca001
         ON ACTION controlp INFIELD stca001
            #add-point:ON ACTION controlp INFIELD stca001
{<point name="construct.c.stca001" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca001
            #add-point:BEFORE FIELD stca001
{<point name="construct.b.stca001" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca001
            
            #add-point:AFTER FIELD stca001
{<point name="construct.a.stca001" />}
            #END add-point
            
 
         #----<<stca002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca002
            #add-point:BEFORE FIELD stca002
{<point name="construct.b.stca002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca002
            
            #add-point:AFTER FIELD stca002
{<point name="construct.a.stca002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca002
         ON ACTION controlp INFIELD stca002
            #add-point:ON ACTION controlp INFIELD stca002
{<point name="construct.c.stca002" />}
            #END add-point
 
         #----<<stca003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca003
            #add-point:BEFORE FIELD stca003
{<point name="construct.b.stca003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca003
            
            #add-point:AFTER FIELD stca003
{<point name="construct.a.stca003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca003
         ON ACTION controlp INFIELD stca003
            #add-point:ON ACTION controlp INFIELD stca003
{<point name="construct.c.stca003" />}
            #END add-point      
{<point name="construct.b.stanstus" />}
       
{<point name="construct.a.stanstus" />}

{<point name="construct.c.stanstus" />}

 
         #----<<stca004>>----
         #Ctrlp:construct.c.stca004
         ON ACTION controlp INFIELD stca004
            #add-point:ON ACTION controlp INFIELD stca004
{<point name="construct.c.stca004" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca004
            #add-point:BEFORE FIELD stca004
{<point name="construct.b.stca004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca004
            
            #add-point:AFTER FIELD stca004
{<point name="construct.a.stca004" />}
            #END add-point
            
 
         #----<<stca009>>----
         #Ctrlp:construct.c.stca009
         ON ACTION controlp INFIELD stca009
            #add-point:ON ACTION controlp INFIELD stca009
{<point name="construct.c.stca009" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca009
            #add-point:BEFORE FIELD stca009
{<point name="construct.b.stca009" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca009
            
            #add-point:AFTER FIELD stca009
{<point name="construct.a.stca009" />}
            #END add-point
            
 
         #----<<stca021>>----
         #Ctrlp:construct.c.stca021
         ON ACTION controlp INFIELD stca021
            #add-point:ON ACTION controlp INFIELD stca021
{<point name="construct.c.stca021" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca021
            #add-point:BEFORE FIELD stca021
{<point name="construct.b.stca021" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca021
            
            #add-point:AFTER FIELD stca021
{<point name="construct.a.stca021" />}
            #END add-point
            
 
         #----<<stca022>>----
         #Ctrlp:construct.c.stca022
         ON ACTION controlp INFIELD stca022
            #add-point:ON ACTION controlp INFIELD stca022
{<point name="construct.c.stca022" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca022
            #add-point:BEFORE FIELD stca022
{<point name="construct.b.stca022" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca022
            
            #add-point:AFTER FIELD stca022
{<point name="construct.a.stca022" />}
            #END add-point
            
 
         #----<<stca023>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca023
            #add-point:BEFORE FIELD stca023
{<point name="construct.b.stca023" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca023
            
            #add-point:AFTER FIELD stca023
{<point name="construct.a.stca023" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca023
         ON ACTION controlp INFIELD stca023
            #add-point:ON ACTION controlp INFIELD stca023
{<point name="construct.c.stca023" />}
            #END add-point
 
         #----<<stca006>>----
         #Ctrlp:construct.c.stca006
         ON ACTION controlp INFIELD stca006
            #add-point:ON ACTION controlp INFIELD stca006
{<point name="construct.c.stca006" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca006
            #add-point:BEFORE FIELD stca006
{<point name="construct.b.stca006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca006
            
            #add-point:AFTER FIELD stca006
{<point name="construct.a.stca006" />}
            #END add-point
            
 
         #----<<stca007>>----
         #Ctrlp:construct.c.stca007
         ON ACTION controlp INFIELD stca007
            #add-point:ON ACTION controlp INFIELD stca007
{<point name="construct.c.stca007" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca007
            #add-point:BEFORE FIELD stca007
{<point name="construct.b.stca007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca007
            
            #add-point:AFTER FIELD stca007
{<point name="construct.a.stca007" />}
            #END add-point
            
 
         #----<<stca024>>----
         #Ctrlp:construct.c.stca024
         ON ACTION controlp INFIELD stca024
            #add-point:ON ACTION controlp INFIELD stca024
{<point name="construct.c.stca024" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca024
            #add-point:BEFORE FIELD stca024
{<point name="construct.b.stca024" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca024
            
            #add-point:AFTER FIELD stca024
{<point name="construct.a.stca024" />}
            #END add-point
            
 
         #----<<stca025>>----
         #Ctrlp:construct.c.stca025
         ON ACTION controlp INFIELD stca025
            #add-point:ON ACTION controlp INFIELD stca025
{<point name="construct.c.stca025" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca025
            #add-point:BEFORE FIELD stca025
{<point name="construct.b.stca025" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca025
            
            #add-point:AFTER FIELD stca025
{<point name="construct.a.stca025" />}
            #END add-point
            
 
         #----<<stca008>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca008
            #add-point:BEFORE FIELD stca008
{<point name="construct.b.stca008" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca008
            
            #add-point:AFTER FIELD stca008
{<point name="construct.a.stca008" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca008
         ON ACTION controlp INFIELD stca008
            #add-point:ON ACTION controlp INFIELD stca008
{<point name="construct.c.stca008" />}
            #END add-point
 
         #----<<stcaacti>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcaacti
            #add-point:BEFORE FIELD stcaacti
{<point name="construct.b.stcaacti" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaacti
            
            #add-point:AFTER FIELD stcaacti
{<point name="construct.a.stcaacti" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stcaacti
         ON ACTION controlp INFIELD stcaacti
            #add-point:ON ACTION controlp INFIELD stcaacti
{<point name="construct.c.stcaacti" />}
            #END add-point
 
         #----<<stca013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca013
            #add-point:BEFORE FIELD stca013
{<point name="construct.b.stca013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca013
            
            #add-point:AFTER FIELD stca013
{<point name="construct.a.stca013" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca013
         ON ACTION controlp INFIELD stca013
            #add-point:ON ACTION controlp INFIELD stca013
{<point name="construct.c.stca013" />}
            #END add-point
 
         #----<<stca014>>----
         #Ctrlp:construct.c.stca014
         ON ACTION controlp INFIELD stca014
            #add-point:ON ACTION controlp INFIELD stca014
{<point name="construct.c.stca014" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca014
            #add-point:BEFORE FIELD stca014
{<point name="construct.b.stca014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca014
            
            #add-point:AFTER FIELD stca014
{<point name="construct.a.stca014" />}
            #END add-point
            
 
         #----<<stca015>>----
         #Ctrlp:construct.c.stca015
         ON ACTION controlp INFIELD stca015
            #add-point:ON ACTION controlp INFIELD stca015
{<point name="construct.c.stca015" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca015
            #add-point:BEFORE FIELD stca015
{<point name="construct.b.stca015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca015
            
            #add-point:AFTER FIELD stca015
{<point name="construct.a.stca015" />}
            #END add-point
            
 
         #----<<stca017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca017
            #add-point:BEFORE FIELD stca017
{<point name="construct.b.stca017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca017
            
            #add-point:AFTER FIELD stca017
{<point name="construct.a.stca017" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca017
         ON ACTION controlp INFIELD stca017
            #add-point:ON ACTION controlp INFIELD stca017
{<point name="construct.c.stca017" />}
            #END add-point
 
         #----<<stca018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca018
            #add-point:BEFORE FIELD stca018
{<point name="construct.b.stca018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca018
            
            #add-point:AFTER FIELD stca018
{<point name="construct.a.stca018" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca018
         ON ACTION controlp INFIELD stca018
            #add-point:ON ACTION controlp INFIELD stca018
{<point name="construct.c.stca018" />}
            #END add-point
 
         #----<<stca019>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca019
            #add-point:BEFORE FIELD stca019
{<point name="construct.b.stca019" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca019
            
            #add-point:AFTER FIELD stca019
{<point name="construct.a.stca019" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca019
         ON ACTION controlp INFIELD stca019
            #add-point:ON ACTION controlp INFIELD stca019
{<point name="construct.c.stca019" />}
            #END add-point
 
         #----<<stca020>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca020
            #add-point:BEFORE FIELD stca020
{<point name="construct.b.stca020" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca020
            
            #add-point:AFTER FIELD stca020
{<point name="construct.a.stca020" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stca020
         ON ACTION controlp INFIELD stca020
            #add-point:ON ACTION controlp INFIELD stca020
{<point name="construct.c.stca020" />}
            #END add-point
 
         #----<<stcasite>>----
         #Ctrlp:construct.c.stcasite
         ON ACTION controlp INFIELD stcasite
            #add-point:ON ACTION controlp INFIELD stcasite
{<point name="construct.c.stcasite" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcasite
            #add-point:BEFORE FIELD stcasite
{<point name="construct.b.stcasite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcasite
            
            #add-point:AFTER FIELD stcasite
{<point name="construct.a.stcasite" />}
            #END add-point
            
 
         #----<<stcaunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcaunit
            #add-point:BEFORE FIELD stcaunit
{<point name="construct.b.stcaunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaunit
            
            #add-point:AFTER FIELD stcaunit
{<point name="construct.a.stcaunit" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stcaunit
         ON ACTION controlp INFIELD stcaunit
            #add-point:ON ACTION controlp INFIELD stcaunit
{<point name="construct.c.stcaunit" />}
            #END add-point
 
         #----<<stcastus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcastus
            #add-point:BEFORE FIELD stcastus
{<point name="construct.b.stcastus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcastus
            
            #add-point:AFTER FIELD stcastus
{<point name="construct.a.stcastus" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stcastus
         ON ACTION controlp INFIELD stcastus
            #add-point:ON ACTION controlp INFIELD stcastus
{<point name="construct.c.stcastus" />}
            #END add-point
 
         #----<<stcaownid>>----
         #Ctrlp:construct.c.stcaownid
         ON ACTION controlp INFIELD stcaownid
            #add-point:ON ACTION controlp INFIELD stcaownid
{<point name="construct.c.stcaownid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcaownid
            #add-point:BEFORE FIELD stcaownid
{<point name="construct.b.stcaownid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaownid
            
            #add-point:AFTER FIELD stcaownid
{<point name="construct.a.stcaownid" />}
            #END add-point
            
 
         #----<<stcaowndp>>----
         #Ctrlp:construct.c.stcaowndp
         ON ACTION controlp INFIELD stcaowndp
            #add-point:ON ACTION controlp INFIELD stcaowndp
{<point name="construct.c.stcaowndp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcaowndp
            #add-point:BEFORE FIELD stcaowndp
{<point name="construct.b.stcaowndp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaowndp
            
            #add-point:AFTER FIELD stcaowndp
{<point name="construct.a.stcaowndp" />}
            #END add-point
            
 
         #----<<stcacrtid>>----
         #Ctrlp:construct.c.stcacrtid
         ON ACTION controlp INFIELD stcacrtid
            #add-point:ON ACTION controlp INFIELD stcacrtid
{<point name="construct.c.stcacrtid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcacrtid
            #add-point:BEFORE FIELD stcacrtid
{<point name="construct.b.stcacrtid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcacrtid
            
            #add-point:AFTER FIELD stcacrtid
{<point name="construct.a.stcacrtid" />}
            #END add-point
            
 
         #----<<stcacrtdp>>----
         #Ctrlp:construct.c.stcacrtdp
         ON ACTION controlp INFIELD stcacrtdp
            #add-point:ON ACTION controlp INFIELD stcacrtdp
{<point name="construct.c.stcacrtdp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcacrtdp
            #add-point:BEFORE FIELD stcacrtdp
{<point name="construct.b.stcacrtdp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcacrtdp
            
            #add-point:AFTER FIELD stcacrtdp
{<point name="construct.a.stcacrtdp" />}
            #END add-point
            
 
         #----<<stcacrtdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcacrtdt
            #add-point:BEFORE FIELD stcacrtdt
{<point name="construct.b.stcacrtdt" />}
            #END add-point
 
         #----<<stcamodid>>----
         #Ctrlp:construct.c.stcamodid
         ON ACTION controlp INFIELD stcamodid
            #add-point:ON ACTION controlp INFIELD stcamodid
{<point name="construct.c.stcamodid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcamodid
            #add-point:BEFORE FIELD stcamodid
{<point name="construct.b.stcamodid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcamodid
            
            #add-point:AFTER FIELD stcamodid
{<point name="construct.a.stcamodid" />}
            #END add-point
            
 
         #----<<stcamoddt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcamoddt
            #add-point:BEFORE FIELD stcamoddt
{<point name="construct.b.stcamoddt" />}
            #END add-point
 
         #----<<stcacnfid>>----
         #Ctrlp:construct.c.stcacnfid
         ON ACTION controlp INFIELD stcacnfid
            #add-point:ON ACTION controlp INFIELD stcacnfid
{<point name="construct.c.stcacnfdt" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcacnfid
            #add-point:BEFORE FIELD stcacnfid
{<point name="construct.b.stcacnfdt" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcacnfid
            
            #add-point:AFTER FIELD stcacnfid
{<point name="construct.a.stcacnfdt" />}
            #END add-point
            
 
         #----<<stcacnfdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcacnfdt
            #add-point:BEFORE FIELD stcacnfid
{<point name="construct.b.stcacnfid" />}
            #END add-point
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON stcbseq,stcb002,stcb003,stcb004,stcb005,stcb006,stcb007,stcb008,stcb009, 
          stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018,stcb019,stcb020,stcbunit,stcbsite
           FROM s_detail1[1].stcbseq,s_detail1[1].stcb002,s_detail1[1].stcb003,s_detail1[1].stcb004, 
               s_detail1[1].stcb005,s_detail1[1].stcb006,s_detail1[1].stcb007,s_detail1[1].stcb008,s_detail1[1].stcb009, 
               s_detail1[1].stcb010,s_detail1[1].stcb011,s_detail1[1].stcb012,s_detail1[1].stcb013,s_detail1[1].stcb014, 
               s_detail1[1].stcb015,s_detail1[1].stcb016,s_detail1[1].stcb017,s_detail1[1].stcb018,s_detail1[1].stcb019,s_detail1[1].stcb020,s_detail1[1].stcbunit, 
               s_detail1[1].stcbsite
                      
         BEFORE CONSTRUCT
#saki            CALL cl_qbe_display_condition(lc_qbe_sn)
            #add-point:cs段before_construct
{<point name="cs.body.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
       #---------------------<  Detail: page1  >---------------------
         #----<<stcbseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbseq
            #add-point:BEFORE FIELD stcbseq
{<point name="construct.b.page1.stcbseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbseq
            
            #add-point:AFTER FIELD stcbseq
{<point name="construct.a.page1.stcbseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcbseq
         ON ACTION controlp INFIELD stcbseq
            #add-point:ON ACTION controlp INFIELD stcbseq
{<point name="construct.c.page1.stcbseq" />}
            #END add-point
 
         #----<<stcb002>>----
         #Ctrlp:construct.c.page1.stcb002
         ON ACTION controlp INFIELD stcb002
            #add-point:ON ACTION controlp INFIELD stcb002
{<point name="construct.c.page1.stcb002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb002
            #add-point:BEFORE FIELD stcb002
{<point name="construct.b.page1.stcb002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb002
            
            #add-point:AFTER FIELD stcb002
{<point name="construct.a.page1.stcb002" />}
            #END add-point
            
 
         #----<<stcb003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb003
            #add-point:BEFORE FIELD stcb003
{<point name="construct.b.page1.stcb003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb003
            
            #add-point:AFTER FIELD stcb003
{<point name="construct.a.page1.stcb003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb003
         ON ACTION controlp INFIELD stcb003
            #add-point:ON ACTION controlp INFIELD stcb003
{<point name="construct.c.page1.stcb003" />}
            #END add-point
 
         #----<<stcb004>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb004
            #add-point:BEFORE FIELD stcb004
{<point name="construct.b.page1.stcb004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb004
            
            #add-point:AFTER FIELD stcb004
{<point name="construct.a.page1.stcb004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb004
         ON ACTION controlp INFIELD stcb004
            #add-point:ON ACTION controlp INFIELD stcb004
{<point name="construct.c.page1.stcb004" />}
            #END add-point
 
         #----<<stcb005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb005
            #add-point:BEFORE FIELD stcb005
{<point name="construct.b.page1.stcb005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb005
            
            #add-point:AFTER FIELD stcb005
{<point name="construct.a.page1.stcb005" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb005
         ON ACTION controlp INFIELD stcb005
            #add-point:ON ACTION controlp INFIELD stcb005
{<point name="construct.c.page1.stcb005" />}
            #END add-point
 
         #----<<stcb006>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb006
            #add-point:BEFORE FIELD stcb006
{<point name="construct.b.page1.stcb006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb006
            
            #add-point:AFTER FIELD stcb006
{<point name="construct.a.page1.stcb006" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb006
         ON ACTION controlp INFIELD stcb006
            #add-point:ON ACTION controlp INFIELD stcb006
{<point name="construct.c.page1.stcb006" />}
            #END add-point
 
         #----<<stcb007>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb007
            #add-point:BEFORE FIELD stcb007
{<point name="construct.b.page1.stcb007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb007
            
            #add-point:AFTER FIELD stcb007
{<point name="construct.a.page1.stcb007" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb007
         ON ACTION controlp INFIELD stcb007
            #add-point:ON ACTION controlp INFIELD stcb007
{<point name="construct.c.page1.stcb007" />}
            #END add-point
 
         #----<<stcb008>>----
         #Ctrlp:construct.c.page1.stcb008
         ON ACTION controlp INFIELD stcb008
            #add-point:ON ACTION controlp INFIELD stcb008
{<point name="construct.c.page1.stcb008" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb008
            #add-point:BEFORE FIELD stcb008
{<point name="construct.b.page1.stcb008" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb008
            
            #add-point:AFTER FIELD stcb008
{<point name="construct.a.page1.stcb008" />}
            #END add-point
            
 
         #----<<stcb009>>----
         #Ctrlp:construct.c.page1.stcb009
         ON ACTION controlp INFIELD stcb009
            #add-point:ON ACTION controlp INFIELD stcb009
{<point name="construct.c.page1.stcb009" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb009
            #add-point:BEFORE FIELD stcb009
{<point name="construct.b.page1.stcb009" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb009
            
            #add-point:AFTER FIELD stcb009
{<point name="construct.a.page1.stcb009" />}
            #END add-point
            
 
         #----<<stcb010>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb010
            #add-point:BEFORE FIELD stcb010
{<point name="construct.b.page1.stcb010" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb010
            
            #add-point:AFTER FIELD stcb010
{<point name="construct.a.page1.stcb010" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb010
         ON ACTION controlp INFIELD stcb010
            #add-point:ON ACTION controlp INFIELD stcb010
{<point name="construct.c.page1.stcb010" />}
            #END add-point
 
         #----<<stcb011>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb011
            #add-point:BEFORE FIELD stcb011
{<point name="construct.b.page1.stcb011" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb011
            
            #add-point:AFTER FIELD stcb011
{<point name="construct.a.page1.stcb011" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb011
         ON ACTION controlp INFIELD stcb011
            #add-point:ON ACTION controlp INFIELD stcb011
{<point name="construct.c.page1.stcb011" />}
            #END add-point
 
         #----<<stcb012>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb012
            #add-point:BEFORE FIELD stcb012
{<point name="construct.b.page1.stcb012" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb012
            
            #add-point:AFTER FIELD stcb012
{<point name="construct.a.page1.stcb012" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb012
         ON ACTION controlp INFIELD stcb012
            #add-point:ON ACTION controlp INFIELD stcb012
{<point name="construct.c.page1.stcb012" />}
            #END add-point
 
         #----<<stcb013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb013
            #add-point:BEFORE FIELD stcb013
{<point name="construct.b.page1.stcb013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb013
            
            #add-point:AFTER FIELD stcb013
{<point name="construct.a.page1.stcb013" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb013
         ON ACTION controlp INFIELD stcb013
            #add-point:ON ACTION controlp INFIELD stcb013
{<point name="construct.c.page1.stcb013" />}
            #END add-point
 
         #----<<stcb014>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb014
            #add-point:BEFORE FIELD stcb014
{<point name="construct.b.page1.stcb014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb014
            
            #add-point:AFTER FIELD stcb014
{<point name="construct.a.page1.stcb014" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb014
         ON ACTION controlp INFIELD stcb014
            #add-point:ON ACTION controlp INFIELD stcb014
{<point name="construct.c.page1.stcb014" />}
            #END add-point
 
         #----<<stcb015>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb015
            #add-point:BEFORE FIELD stcb015
{<point name="construct.b.page1.stcb015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb015
            
            #add-point:AFTER FIELD stcb015
{<point name="construct.a.page1.stcb015" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb015
         ON ACTION controlp INFIELD stcb015
            #add-point:ON ACTION controlp INFIELD stcb015
{<point name="construct.c.page1.stcb015" />}
            #END add-point
 
         #----<<stcb016>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb016
            #add-point:BEFORE FIELD stcb016
{<point name="construct.b.page1.stcb016" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb016
            
            #add-point:AFTER FIELD stcb016
{<point name="construct.a.page1.stcb016" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb016
         ON ACTION controlp INFIELD stcb016
            #add-point:ON ACTION controlp INFIELD stcb016
{<point name="construct.c.page1.stcb016" />}
            #END add-point
 
         #----<<stcb017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb017
            #add-point:BEFORE FIELD stcb017
{<point name="construct.b.page1.stcb017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb017
            
            #add-point:AFTER FIELD stcb017
{<point name="construct.a.page1.stcb017" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb017
         ON ACTION controlp INFIELD stcb017
            #add-point:ON ACTION controlp INFIELD stcb017
{<point name="construct.c.page1.stcb017" />}
            #END add-point
 
         #----<<stcb018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb018
            #add-point:BEFORE FIELD stcb018
{<point name="construct.b.page1.stcb018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb018
            
            #add-point:AFTER FIELD stcb018
{<point name="construct.a.page1.stcb018" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcb018
         ON ACTION controlp INFIELD stcb018
            #add-point:ON ACTION controlp INFIELD stcb018
{<point name="construct.c.page1.stcb018" />}
            #END add-point
 
         #----<<stcbunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbunit
            #add-point:BEFORE FIELD stcbunit
{<point name="construct.b.page1.stcbunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbunit
            
            #add-point:AFTER FIELD stcbunit
{<point name="construct.a.page1.stcbunit" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcbunit
         ON ACTION controlp INFIELD stcbunit
            #add-point:ON ACTION controlp INFIELD stcbunit
{<point name="construct.c.page1.stcbunit" />}
            #END add-point
 
         #----<<stcbsite>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbsite
            #add-point:BEFORE FIELD stcbsite
{<point name="construct.b.page1.stcbsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbsite
            
            #add-point:AFTER FIELD stcbsite
{<point name="construct.a.page1.stcbsite" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stcbsite
         ON ACTION controlp INFIELD stcbsite
            #add-point:ON ACTION controlp INFIELD stcbsite
{<point name="construct.c.page1.stcbsite" />}
            #END add-point
 
   
       
      END CONSTRUCT
      
      CONSTRUCT g_wc2_table2 ON stcdseq,stcd002,stcd003,stcdunit,stcdsite
           FROM s_detail2[1].stcdseq,s_detail2[1].stcd002,s_detail2[1].stcd003,s_detail2[1].stcdunit, 
               s_detail2[1].stcdsite
                      
         BEFORE CONSTRUCT
#saki            CALL cl_qbe_display_condition(lc_qbe_sn)
            #add-point:cs段before_construct
{<point name="cs.body2.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       
       
       #單身一般欄位開窗相關處理       
       #---------------------<  Detail: page2  >---------------------
         #----<<stcdseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdseq
            #add-point:BEFORE FIELD stcdseq
{<point name="construct.b.page2.stcdseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdseq
            
            #add-point:AFTER FIELD stcdseq
{<point name="construct.a.page2.stcdseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stcdseq
         ON ACTION controlp INFIELD stcdseq
            #add-point:ON ACTION controlp INFIELD stcdseq
{<point name="construct.c.page2.stcdseq" />}
            #END add-point
 
         #----<<stcd002>>----
         #Ctrlp:construct.c.page2.stcd002
         ON ACTION controlp INFIELD stcd002
            #add-point:ON ACTION controlp INFIELD stcd002
{<point name="construct.c.page2.stcd002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcd002
            #add-point:BEFORE FIELD stcd002
{<point name="construct.b.page2.stcd002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcd002
            
            #add-point:AFTER FIELD stcd002
{<point name="construct.a.page2.stcd002" />}
            #END add-point
            
 
         #----<<stcd003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcd003
            #add-point:BEFORE FIELD stcd003
{<point name="construct.b.page2.stcd003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcd003
            
            #add-point:AFTER FIELD stcd003
{<point name="construct.a.page2.stcd003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stcd003
         ON ACTION controlp INFIELD stcd003
            #add-point:ON ACTION controlp INFIELD stcd003
{<point name="construct.c.page2.stcd003" />}
            #END add-point
 
         #----<<stcdunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdunit
            #add-point:BEFORE FIELD stcdunit
{<point name="construct.b.page2.stcdunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdunit
            
            #add-point:AFTER FIELD stcdunit
{<point name="construct.a.page2.stcdunit" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stcdunit
         ON ACTION controlp INFIELD stcdunit
            #add-point:ON ACTION controlp INFIELD stcdunit
{<point name="construct.c.page2.stcdunit" />}
            #END add-point
 
         #----<<stcdsite>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdsite
            #add-point:BEFORE FIELD stcdsite
{<point name="construct.b.page2.stcdsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdsite
            
            #add-point:AFTER FIELD stcdsite
{<point name="construct.a.page2.stcdsite" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.stcdsite
         ON ACTION controlp INFIELD stcdsite
            #add-point:ON ACTION controlp INFIELD stcdsite
{<point name="construct.c.page2.stcdsite" />}
            #END add-point
 
   
       
      END CONSTRUCT
 
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令)
{<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         #add-point:cs段b_dialog
{<point name="cs.b_dialog"/>}
         #end add-point  
 
      ON ACTION qbe_select     #條件查詢
#saki         CALL cl_qbe_list() RETURNING lc_qbe_sn
#saki         CALL cl_qbe_display_condition(lc_qbe_sn)
 
      ON ACTION qbe_save       #條件儲存
#saki         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
   END IF
 
 
 
 
   
   #add-point:cs段結束前
{<point name="cs.after_construct"/>}
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION

{</section>}

{<section id="astt601.filter" >}
#+ filter過濾功能
PRIVATE FUNCTION astt601_filter()
   #add-point:filter段define
{<point name="filter.define"/>}
   #end add-point   
 
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON stcadocno,stcadocdt,stca000,stca001,stca002,stca004,stca009,stca021, 
          stca022,stca023,stca006,stca007,stca008,stca013,stca014,stca015,stca024,stca025,stca017,stca018, 
          stca019,stca020,stca003,stcasite,stcaacti
                          FROM s_browse[1].b_stcadocno,s_browse[1].b_stcadocdt,s_browse[1].b_stca000, 
                              s_browse[1].b_stca001,s_browse[1].b_stca002,s_browse[1].b_stca004, 
                              s_browse[1].b_stca009,s_browse[1].b_stca021,s_browse[1].b_stca022,s_browse[1].b_stca023, 
                              s_browse[1].b_stca006,s_browse[1].b_stca007,s_browse[1].b_stca008,s_browse[1].b_stca013, 
                              s_browse[1].b_stca014,s_browse[1].b_stca015,s_browse[1].b_stca024,s_browse[1].b_stca025, 
                              s_browse[1].b_stca017,s_browse[1].b_stca018,s_browse[1].b_stca019,s_browse[1].b_stca020, 
                              s_browse[1].b_stca003,s_browse[1].b_stcasite,s_browse[1].b_stcaacti
 
         BEFORE CONSTRUCT
               DISPLAY astt601_filter_parser('stcadocno') TO s_browse[1].b_stcadocno
            DISPLAY astt601_filter_parser('stcadocdt') TO s_browse[1].b_stcadocdt
            DISPLAY astt601_filter_parser('stca000') TO s_browse[1].b_stca000
            DISPLAY astt601_filter_parser('stca001') TO s_browse[1].b_stca001
            DISPLAY '11' TO s_browse[1].b_stca005
            DISPLAY astt601_filter_parser('stca002') TO s_browse[1].b_stca002
            DISPLAY astt601_filter_parser('stca004') TO s_browse[1].b_stca004
            DISPLAY astt601_filter_parser('stca009') TO s_browse[1].b_stca009
            DISPLAY astt601_filter_parser('stca021') TO s_browse[1].b_stca021
            DISPLAY astt601_filter_parser('stca022') TO s_browse[1].b_stca022
            DISPLAY astt601_filter_parser('stca023') TO s_browse[1].b_stca023
            DISPLAY astt601_filter_parser('stca006') TO s_browse[1].b_stca006
            DISPLAY astt601_filter_parser('stca007') TO s_browse[1].b_stca007
            DISPLAY astt601_filter_parser('stca008') TO s_browse[1].b_stca008
            DISPLAY astt601_filter_parser('stca013') TO s_browse[1].b_stca013
            DISPLAY astt601_filter_parser('stca014') TO s_browse[1].b_stca014
            DISPLAY astt601_filter_parser('stca015') TO s_browse[1].b_stca015
            DISPLAY astt601_filter_parser('stca024') TO s_browse[1].b_stca024
            DISPLAY astt601_filter_parser('stca025') TO s_browse[1].b_stca025
            DISPLAY astt601_filter_parser('stca017') TO s_browse[1].b_stca017
            DISPLAY astt601_filter_parser('stca018') TO s_browse[1].b_stca018
            DISPLAY astt601_filter_parser('stca019') TO s_browse[1].b_stca019
            DISPLAY astt601_filter_parser('stca020') TO s_browse[1].b_stca020
            DISPLAY astt601_filter_parser('stca003') TO s_browse[1].b_stca003
            DISPLAY astt601_filter_parser('stcasite') TO s_browse[1].b_stcasite
            DISPLAY astt601_filter_parser('stcaacti') TO s_browse[1].b_stcaacti
      
                            #add-point:filter段cs_ctrl
{<point name="filter.cs_ctrl"/>}
                            #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs
{<point name="filter.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog
{<point name="filter.b_dialog"/>}
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL astt601_filter_show('stcadocno')
   CALL astt601_filter_show('stcadocdt')
   CALL astt601_filter_show('stca000')
   CALL astt601_filter_show('stca001')
   CALL astt601_filter_show('stca005')
   CALL astt601_filter_show('stca002')
   CALL astt601_filter_show('stca004')
   CALL astt601_filter_show('stca009')
   CALL astt601_filter_show('stca021')
   CALL astt601_filter_show('stca022')
   CALL astt601_filter_show('stca023')
   CALL astt601_filter_show('stca006')
   CALL astt601_filter_show('stca007')
   CALL astt601_filter_show('stca008')
   CALL astt601_filter_show('stca013')
   CALL astt601_filter_show('stca014')
   CALL astt601_filter_show('stca015')
   CALL astt601_filter_show('stca024')
   CALL astt601_filter_show('stca025')
   CALL astt601_filter_show('stca017')
   CALL astt601_filter_show('stca018')
   CALL astt601_filter_show('stca019')
   CALL astt601_filter_show('stca020')
   CALL astt601_filter_show('stca003')
   CALL astt601_filter_show('stcasite')
   CALL astt601_filter_show('stcaacti')
 
END FUNCTION

{</section>}

{<section id="astt601.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION astt601_filter_parser(ps_field)
   {<Local define>}
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num5
   DEFINE li_tmp2    LIKE type_t.num5
   DEFINE ls_var     STRING
   {</Local define>}
   #add-point:filter段define
   {<point name="filter_parser.define"/>}
   #end add-point    
 
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION

{</section>}

{<section id="astt601.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION astt601_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
     
   LET ls_name = "formonly.b_", ps_field
   
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
   
   #顯示資料組合
   LET ls_condition = astt601_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
   
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
   
END FUNCTION

{</section>}

{<section id="astt601.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION astt601_query()
   {<Local define>}
   DEFINE ls_wc STRING
   {</Local define>}
   #add-point:query段define
   {<point name="query.define"/>}
   #end add-point   
 
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_stcb_d.clear()
   CALL g_stcb2_d.clear()
 
 
   
   #add-point:query段other
   {<point name="query.other"/>}
   #end add-point   
   
   DISPLAY ' ' TO FORMONLY.idx
   DISPLAY ' ' TO FORMONLY.cnt
   DISPLAY ' ' TO FORMONLY.b_index
   DISPLAY ' ' TO FORMONLY.b_count
   DISPLAY ' ' TO FORMONLY.h_index
   DISPLAY ' ' TO FORMONLY.h_count
   
   CALL astt601_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      LET g_wc = ls_wc
      CALL astt601_browser_fill("")
      CALL astt601_fetch("")
      RETURN
   END IF
   
   #搜尋後資料初始化
   LET g_detail_cnt = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx = 1
   LET g_detail_idx2 = 1
   LET l_ac = 1
   LET g_wc_filter = ""
   CALL FGL_SET_ARR_CURR(1)
      CALL astt601_filter_show('stcadocno')
   CALL astt601_filter_show('stcadocdt')
   CALL astt601_filter_show('stca000')
   CALL astt601_filter_show('stca001')
   CALL astt601_filter_show('stca005')
   CALL astt601_filter_show('stca002')
   CALL astt601_filter_show('stca004')
   CALL astt601_filter_show('stca009')
   CALL astt601_filter_show('stca021')
   CALL astt601_filter_show('stca022')
   CALL astt601_filter_show('stca023')
   CALL astt601_filter_show('stca006')
   CALL astt601_filter_show('stca007')
   CALL astt601_filter_show('stca008')
   CALL astt601_filter_show('stca013')
   CALL astt601_filter_show('stca014')
   CALL astt601_filter_show('stca015')
   CALL astt601_filter_show('stca024')
   CALL astt601_filter_show('stca025')
   CALL astt601_filter_show('stca017')
   CALL astt601_filter_show('stca018')
   CALL astt601_filter_show('stca019')
   CALL astt601_filter_show('stca020')
   CALL astt601_filter_show('stca003')
   CALL astt601_filter_show('stcasite')
   CALL astt601_filter_show('stcaacti')
   LET g_error_show = 1
   CALL astt601_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "-100"
      LET g_errparam.extend = ""
      LET g_errparam.popup = TRUE
      CALL cl_err()

   ELSE
      CALL astt601_fetch("F") 
   END IF
 
END FUNCTION

{</section>}

{<section id="astt601.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION astt601_fetch(p_flag)
   {<Local define>}
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   {</Local define>}
   #add-point:fetch段define
{<point name="fetch.define"/>}
   #end add-point    
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
   
   CASE p_flag
      WHEN 'F' LET g_current_idx = 1
      WHEN 'L' LET g_current_idx = g_header_cnt        
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         
         LET g_no_ask = FALSE  
   END CASE 
   
   
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   #LET g_detail_idx = 1
   IF g_detail_cnt > 0 THEN
      #LET g_detail_idx = 1
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY ' ' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
   
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #超出範圍
   IF g_current_idx > g_browser.getLength() THEN
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_stca_m.stcadocno = g_browser[g_current_idx].b_stcadocno
 
   
   #重讀DB,因TEMP有不被更新特性
    SELECT UNIQUE stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003,stca004,stca009,stca010,stca011,stca012,stca027,stca021, 
        stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti,stca013,stca014,stca015,stca016,stca017, 
        stca018,stca019,stca020,stcasite,stcaunit,stcastus,stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt, 
        stcamodid,stcamoddt,stcacnfid,stcacnfdt
 INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001,g_stca_m.stca002, 
     g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,g_stca_m.stca021,g_stca_m.stca022,g_stca_m.stca023, 
     g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,g_stca_m.stca008,g_stca_m.stcaacti, 
     g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019, 
     g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaowndp, 
     g_stca_m.stcacrtid,g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamoddt, 
     g_stca_m.stcacnfid,g_stca_m.stcacnfdt
 FROM stca_t
 WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = "stca_t"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      INITIALIZE g_stca_m.* TO NULL
      RETURN
   END IF
   
   #add-point:fetch段action控制
{<point name="fetch.action_control"/>}
   #end add-point  
   
   
   
   #add-point:fetch結束前
{<point name="fetch.after" />}
   #end add-point
   
   #LET g_data_owner =       
   #LET g_data_group =   
   
   #重新顯示   
   CALL astt601_show()
 
END FUNCTION

{</section>}

{<section id="astt601.insert" >}
#+ 資料新增
PRIVATE FUNCTION astt601_insert()
   #add-point:insert段define
{<point name="insert.define"/>}
   #end add-point    
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_stcb_d.clear()   
   CALL g_stcb2_d.clear()  
   CALL g_stcc_d.clear() 
   CALL g_stcv_d.clear() 
 
 
   INITIALIZE g_stca_m.* LIKE stca_t.*             #DEFAULT 設定
   
   LET g_stcadocno_t = NULL
 
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #此段落由子樣板a14產生    
      LET g_stca_m.stcaownid = g_user
      LET g_stca_m.stcaowndp = g_dept
      LET g_stca_m.stcacrtid = g_user
      LET g_stca_m.stcacrtdp = g_dept 
      LET g_stca_m.stcacrtdt = cl_get_current()
      LET g_stca_m.stcamodid = ""
      LET g_stca_m.stcamoddt = ""
      #LET g_stca_m.stcastus = ""
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_stca_m.stca000 = "I"
      LET g_stca_m.stca005 = "11"
 
  
      #add-point:單頭預設值
{<point name="insert.default"/>}
      #end add-point 
     
      CALL astt601_input("a")
      
      #add-point:單頭輸入後
{<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_stca_m.* = g_stca_m_t.*
         CALL astt601_show()
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9001
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         CALL s_transaction_end('N','0')
         EXIT WHILE
      END IF
      
      CALL g_stcb_d.clear()
      CALL g_stcb2_d.clear()
      CALL g_stcv_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   LET g_state = "Y"
   
   LET g_stcadocno_t = g_stca_m.stcadocno
 
   
   LET g_wc = g_wc,  
              " OR ( stcaent = '" ||g_enterprise|| "' AND",
              " stcadocno = '", g_stca_m.stcadocno CLIPPED, "' "
 
              , ") "
   
   CLOSE astt601_cl
   
END FUNCTION

{</section>}

{<section id="astt601.modify" >}
#+ 資料修改
PRIVATE FUNCTION astt601_modify()
   {<Local define>}
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:modify段define
{<point name="modify.define"/>}
   #end add-point    
   
   IF g_stca_m.stcadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
   
    SELECT UNIQUE stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003,stca004,stca009,stca010,stca011,stca012,stca027,stca021, 
        stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti,stca013,stca014,stca015,stca016,stca017, 
        stca018,stca019,stca020,stcasite,stcaunit,stcastus,stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt, 
        stcamodid,stcamoddt,stcacnfid,stcacnfdt
 INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001,g_stca_m.stca002, 
     g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,g_stca_m.stca021,g_stca_m.stca022,g_stca_m.stca023, 
     g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,g_stca_m.stca008,g_stca_m.stcaacti, 
     g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019, 
     g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaowndp, 
     g_stca_m.stcacrtid,g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamoddt, 
     g_stca_m.stcacnfid,g_stca_m.stcacnfdt
 FROM stca_t
 WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
 
   ERROR ""
  
   LET g_stcadocno_t = g_stca_m.stcadocno
 
   CALL s_transaction_begin()
   
   OPEN astt601_cl USING g_enterprise,g_stca_m.stcadocno
 
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code =  STATUS
      LET g_errparam.extend = "OPEN astt601_cl:"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      CLOSE astt601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #鎖住將被更改或取消的資料
   FETCH astt601_cl INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001, 
       g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca004_desc,g_stca_m.stca009, 
       g_stca_m.stca009_desc,g_stca_m.stca021,g_stca_m.stca021_desc,g_stca_m.stca022,g_stca_m.stca022_desc, 
       g_stca_m.stca023,g_stca_m.stca023_desc,g_stca_m.stca006,g_stca_m.stca006_desc,g_stca_m.stca007,g_stca_m.stca007_desc, 
       g_stca_m.stca024,g_stca_m.stca024_desc,g_stca_m.stca025,g_stca_m.stca025_desc,g_stca_m.stca008, 
       g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca014_desc,g_stca_m.stca015,g_stca_m.stca015_desc, 
       g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcasite_desc, 
       g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaownid_desc,g_stca_m.stcaowndp, 
       g_stca_m.stcaowndp_desc,g_stca_m.stcacrtid,g_stca_m.stcacrtid_desc,g_stca_m.stcacrtdp,g_stca_m.stcacrtdp_desc, 
       g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamodid_desc,g_stca_m.stcamoddt,g_stca_m.stcacnfid, 
       g_stca_m.stcacnfid_desc,g_stca_m.stcacnfdt
 
   #資料被他人LOCK, 或是sql執行時出現錯誤
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stca_m.stcadocno
      LET g_errparam.popup = FALSE
      CALL cl_err()

      CLOSE astt601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   
 
   CALL astt601_show()
   WHILE TRUE
      LET g_stcadocno_t = g_stca_m.stcadocno
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_stca_m.stcamodid = g_user 
LET g_stca_m.stcamoddt = cl_get_current()
 
      
      #add-point:modify段修改前
{<point name="modify.before_input"/>}
      #end add-point
      
      CALL astt601_input("u")     #欄位更改
 
      #add-point:modify段修改後
{<point name="modify.after_input"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_stca_m.* = g_stca_m_t.*
         CALL astt601_show()        
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 9001
         LET g_errparam.extend = ''
         LET g_errparam.popup = FALSE
         CALL cl_err()

         CALL s_transaction_end('N','0')
         EXIT WHILE
      END IF
      
      #若單頭key欄位有變更
      IF g_stca_m.stcadocno != g_stcadocno_t 
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前
{<point name="modify.body.b_fk_update" mark="Y"/>}
         #end add-point
         
         #更新單身key值
         UPDATE stcb_t SET stcbdocno = g_stca_m.stcadocno
 
          WHERE stcbent = g_enterprise AND stcbdocno = g_stcadocno_t
 
            
         #add-point:單身fk修改中
{<point name="modify.body.m_fk_update"/>}
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00009"
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後
{<point name="modify.body.a_fk_update"/>}
         #end add-point
         
         #更新單身key值
         #add-point:單身fk修改前
{<point name="modify.body.b_fk_update2" mark="Y"/>}
         #end add-point
         UPDATE stcd_t
            SET stcddocno = g_stca_m.stcadocno
 
          WHERE stcdent = g_enterprise AND
                stcddocno = g_stcadocno_t
 
         #add-point:單身fk修改中
{<point name="modify.body.m_fk_update2"/>}
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00009"
               LET g_errparam.extend = "stcd_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcd_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後
{<point name="modify.body.a_fk_update2"/>}
         #end add-point
 
 
         
 
         
         #UPDATE 多語言table key值
         
         
 
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #修改歷程記錄
   IF NOT cl_log_modified_record(g_stca_m.stcadocno,g_site) THEN 
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE astt601_cl
   CALL s_transaction_end('Y','0')
 
   #流程通知預埋點-U
   CALL cl_flow_notify(g_stca_m.stcadocno,'U')
 
END FUNCTION   

{</section>}

{<section id="astt601.input" >}
#+ 資料輸入
PRIVATE FUNCTION astt601_input(p_cmd)
   {<Local define>}
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_ac_t                LIKE type_t.num5                #未取消的ARRAY CNT 
   DEFINE  l_n                   LIKE type_t.num5                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num5                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num5
   DEFINE  l_i                   LIKE type_t.num5
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num5
   DEFINE  li_reproduce_target   LIKE type_t.num5
   {</Local define>}
   #add-point:input段define
{<point name="input.define"/>}
   #end add-point  
 
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql
{<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT stcbseq,stcb002,'',stcb021,stcb003,stcb004,stcb005,stcb006,stcb007,stcb008,'', 
       stcb009,'',stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018,stcbunit,stcbsite  
       FROM stcb_t WHERE stcbent=? AND stcbdocno=? AND stcbseq=? FOR UPDATE"
   #add-point:input段define_sql
{<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE astt601_bcl CURSOR FROM g_forupd_sql
   
   #add-point:input段define_sql
{<point name="input.define_sql2" mark="Y"/>}
   #end add-point    
   LET g_forupd_sql = "SELECT stcdseq,stcd002,'',stcd003,stcdunit,stcdsite FROM stcd_t WHERE stcdent=?  
       AND stcddocno=? AND stcdseq=? FOR UPDATE"
   #add-point:input段define_sql
{<point name="input.after_define_sql2"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE astt601_bcl2 CURSOR FROM g_forupd_sql
 
 
   
 
 
   #add-point:input段define_sql
{<point name="input.other_sql"/>}
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL astt601_set_entry(p_cmd)
   #add-point:set_entry後
{<point name="input.after_set_entry"/>}
   #end add-point
   CALL astt601_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001, 
       g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca021, 
       g_stca_m.stca022,g_stca_m.stca023,g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca025, 
       g_stca_m.stca008,g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca017, 
       g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus 

   
   LET lb_reproduce = FALSE
   
   #add-point:資料輸入前
{<point name="input.before_input"/>}
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
   

{</section>}

{<section id="astt601.input.head" >}
      #單頭段
      INPUT BY NAME g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001, 
          g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,
          g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,g_stca_m.stca021, 
          g_stca_m.stca022,g_stca_m.stca023,g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026, 
          g_stca_m.stca008,g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017, 
          g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.next_b,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.ooff013,g_stca_m.stcastus  

         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #add-point:資料輸入前
{<point name="input.m.before_input"/>}
            #end add-point
 
         #---------------------------<  Master  >---------------------------
         #----<<stca000>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca000
            #add-point:BEFORE FIELD stca000
{<point name="input.b.stca000" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca000
            
            #add-point:AFTER FIELD stca000
{<point name="input.a.stca000" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca000
            #add-point:ON CHANGE stca000
{<point name="input.g.stca000" />}
            #END add-point
 
         #----<<stcadocno>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcadocno
            #add-point:BEFORE FIELD stcadocno
{<point name="input.b.stcadocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcadocno
            
            #add-point:AFTER FIELD stcadocno
{<point name="input.a.stcadocno" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcadocno
            #add-point:ON CHANGE stcadocno
{<point name="input.g.stcadocno" />}
            #END add-point
 
         #----<<stcadocdt>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcadocdt
            #add-point:BEFORE FIELD stcadocdt
{<point name="input.b.stcadocdt" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcadocdt
            
            #add-point:AFTER FIELD stcadocdt
{<point name="input.a.stcadocdt" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcadocdt
            #add-point:ON CHANGE stcadocdt
{<point name="input.g.stcadocdt" />}
            #END add-point
 
         #----<<stca005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca005
            #add-point:BEFORE FIELD stca005
{<point name="input.b.stca005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca005
            
            #add-point:AFTER FIELD stca005
{<point name="input.a.stca005" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca005
            #add-point:ON CHANGE stca005
{<point name="input.g.stca005" />}
            #END add-point
 
         #----<<stca001>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca001
            #add-point:BEFORE FIELD stca001
{<point name="input.b.stca001" />}
            #END add-point
   
         #此段落由子樣板a02產生
         AFTER FIELD stca001
            
            #add-point:AFTER FIELD stca001
{<point name="input.a.stca001" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca001
            #add-point:ON CHANGE stca001
{<point name="input.g.stca001" />}
            #END add-point
 
         #----<<stca002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca002
            #add-point:BEFORE FIELD stca002
{<point name="input.b.stca002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca002
            
            #add-point:AFTER FIELD stca002
{<point name="input.a.stca002" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca002
            #add-point:ON CHANGE stca002
{<point name="input.g.stca002" />}
            #END add-point
 
         #----<<stca003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca003
            #add-point:BEFORE FIELD stca003
{<point name="input.b.stca003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca003
            
            #add-point:AFTER FIELD stca003
{<point name="input.a.stca003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca003
            #add-point:ON CHANGE stca003
{<point name="input.g.stca003" />}
            #END add-point     
{<point name="input.b.stanstus" />}
         
{<point name="input.a.stanstus" />}
     
 
{<point name="input.g.stanstus" />}

 
         #----<<stca004>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca004
            
            #add-point:AFTER FIELD stca004
{<point name="input.a.stca004" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca004
            #add-point:BEFORE FIELD stca004
{<point name="input.b.stca004" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca004
            #add-point:ON CHANGE stca004
{<point name="input.g.stca004" />}
            #END add-point
 
         #----<<stca009>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca009
            
            #add-point:AFTER FIELD stca009
{<point name="input.a.stca009" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca009
            #add-point:BEFORE FIELD stca009
{<point name="input.b.stca009" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca009
            #add-point:ON CHANGE stca009
{<point name="input.g.stca009" />}
            #END add-point
 
         #----<<stca021>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca021
            
            #add-point:AFTER FIELD stca021
{<point name="input.a.stca021" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca021
            #add-point:BEFORE FIELD stca021
{<point name="input.b.stca021" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca021
            #add-point:ON CHANGE stca021
{<point name="input.g.stca021" />}
            #END add-point
 
         #----<<stca022>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca022
            
            #add-point:AFTER FIELD stca022
{<point name="input.a.stca022" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca022
            #add-point:BEFORE FIELD stca022
{<point name="input.b.stca022" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca022
            #add-point:ON CHANGE stca022
{<point name="input.g.stca022" />}
            #END add-point
 
         #----<<stca023>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca023
            #add-point:BEFORE FIELD stca023
{<point name="input.b.stca023" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca023
            
            #add-point:AFTER FIELD stca023
{<point name="input.a.stca023" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca023
            #add-point:ON CHANGE stca023
{<point name="input.g.stca023" />}
            #END add-point
 
         #----<<stca006>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca006
            
            #add-point:AFTER FIELD stca006
{<point name="input.a.stca006" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca006
            #add-point:BEFORE FIELD stca006
{<point name="input.b.stca006" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca006
            #add-point:ON CHANGE stca006
{<point name="input.g.stca006" />}
            #END add-point
 
         #----<<stca007>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca007
            
            #add-point:AFTER FIELD stca007
{<point name="input.a.stca007" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca007
            #add-point:BEFORE FIELD stca007
{<point name="input.b.stca007" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca007
            #add-point:ON CHANGE stca007
{<point name="input.g.stca007" />}
            #END add-point
 
         #----<<stca024>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca024
            
            #add-point:AFTER FIELD stca024
{<point name="input.a.stca024" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca024
            #add-point:BEFORE FIELD stca024
{<point name="input.b.stca024" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca024
            #add-point:ON CHANGE stca024
{<point name="input.g.stca024" />}
            #END add-point
 
         #----<<stca025>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca025
            
            #add-point:AFTER FIELD stca025
{<point name="input.a.stca025" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca025
            #add-point:BEFORE FIELD stca025
{<point name="input.b.stca025" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca025
            #add-point:ON CHANGE stca025
{<point name="input.g.stca025" />}
            #END add-point
 
         #----<<stca008>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca008
            #add-point:BEFORE FIELD stca008
{<point name="input.b.stca008" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca008
            
            #add-point:AFTER FIELD stca008
{<point name="input.a.stca008" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca008
            #add-point:ON CHANGE stca008
{<point name="input.g.stca008" />}
            #END add-point
 
         #----<<stcaacti>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcaacti
            #add-point:BEFORE FIELD stcaacti
{<point name="input.b.stcaacti" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaacti
            
            #add-point:AFTER FIELD stcaacti
{<point name="input.a.stcaacti" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcaacti
            #add-point:ON CHANGE stcaacti
{<point name="input.g.stcaacti" />}
            #END add-point
 
         #----<<stca013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca013
            #add-point:BEFORE FIELD stca013
{<point name="input.b.stca013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca013
            
            #add-point:AFTER FIELD stca013
{<point name="input.a.stca013" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca013
            #add-point:ON CHANGE stca013
{<point name="input.g.stca013" />}
            #END add-point
 
         #----<<stca014>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca014
            
            #add-point:AFTER FIELD stca014
{<point name="input.a.stca014" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca014
            #add-point:BEFORE FIELD stca014
{<point name="input.b.stca014" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca014
            #add-point:ON CHANGE stca014
{<point name="input.g.stca014" />}
            #END add-point
 
         #----<<stca015>>----
         #此段落由子樣板a02產生
         AFTER FIELD stca015
            
            #add-point:AFTER FIELD stca015
{<point name="input.a.stca015" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stca015
            #add-point:BEFORE FIELD stca015
{<point name="input.b.stca015" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stca015
            #add-point:ON CHANGE stca015
{<point name="input.g.stca015" />}
            #END add-point
 
         #----<<stca017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca017
            #add-point:BEFORE FIELD stca017
{<point name="input.b.stca017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca017
            
            #add-point:AFTER FIELD stca017
{<point name="input.a.stca017" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca017
            #add-point:ON CHANGE stca017
{<point name="input.g.stca017" />}
            #END add-point
 
         #----<<stca018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca018
            #add-point:BEFORE FIELD stca018
{<point name="input.b.stca018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca018
            
            #add-point:AFTER FIELD stca018
{<point name="input.a.stca018" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca018
            #add-point:ON CHANGE stca018
{<point name="input.g.stca018" />}
            #END add-point
 
         #----<<stca019>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca019
            #add-point:BEFORE FIELD stca019
{<point name="input.b.stca019" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca019
            
            #add-point:AFTER FIELD stca019
{<point name="input.a.stca019" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca019
            #add-point:ON CHANGE stca019
{<point name="input.g.stca019" />}
            #END add-point
 
         #----<<stca020>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stca020
            #add-point:BEFORE FIELD stca020
{<point name="input.b.stca020" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stca020
            
            #add-point:AFTER FIELD stca020
{<point name="input.a.stca020" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stca020
            #add-point:ON CHANGE stca020
{<point name="input.g.stca020" />}
            #END add-point
 
         #----<<stcasite>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcasite
            
            #add-point:AFTER FIELD stcasite
{<point name="input.a.stcasite" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcasite
            #add-point:BEFORE FIELD stcasite
{<point name="input.b.stcasite" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcasite
            #add-point:ON CHANGE stcasite
{<point name="input.g.stcasite" />}
            #END add-point
 
         #----<<stcaunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcaunit
            #add-point:BEFORE FIELD stcaunit
{<point name="input.b.stcaunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcaunit
            
            #add-point:AFTER FIELD stcaunit
{<point name="input.a.stcaunit" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcaunit
            #add-point:ON CHANGE stcaunit
{<point name="input.g.stcaunit" />}
            #END add-point
 
         #----<<stcastus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcastus
            #add-point:BEFORE FIELD stcastus
{<point name="input.b.stcastus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcastus
            
            #add-point:AFTER FIELD stcastus
{<point name="input.a.stcastus" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcastus
            #add-point:ON CHANGE stcastus
{<point name="input.g.stcastus" />}
            #END add-point
 
         #----<<stcaownid>>----
         #----<<stcaowndp>>----
         #----<<stcacrtid>>----
         #----<<stcacrtdp>>----
         #----<<stcacrtdt>>----
         #----<<stcamodid>>----
         #----<<stcamoddt>>----
         #----<<stcacnfid>>----
         #----<<stcacnfdt>>----
 #欄位檢查
         #---------------------------<  Master  >---------------------------
         #----<<stca000>>----
         #Ctrlp:input.c.stca000
         ON ACTION controlp INFIELD stca000
            #add-point:ON ACTION controlp INFIELD stca000
{<point name="input.c.stca000" />}
            #END add-point
 
         #----<<stcadocno>>----
         #Ctrlp:input.c.stcadocno
         ON ACTION controlp INFIELD stcadocno
            #add-point:ON ACTION controlp INFIELD stcadocno
{<point name="input.c.stcadocno" />}
            #END add-point
 
         #----<<stcadocdt>>----
         #Ctrlp:input.c.stcadocdt
         ON ACTION controlp INFIELD stcadocdt
            #add-point:ON ACTION controlp INFIELD stcadocdt
{<point name="input.c.stcadocdt" />}
            #END add-point
 
         #----<<stca005>>----
         #Ctrlp:input.c.stca005
         ON ACTION controlp INFIELD stca005
            #add-point:ON ACTION controlp INFIELD stca005
{<point name="input.c.stca005" />}
            #END add-point
 
         #----<<stca001>>----
         #Ctrlp:input.c.stca001
         ON ACTION controlp INFIELD stca001
            #add-point:ON ACTION controlp INFIELD stca001
{<point name="input.c.stca001" />}
            #END add-point
 
         #----<<stca002>>----
         #Ctrlp:input.c.stca002
         ON ACTION controlp INFIELD stca002
            #add-point:ON ACTION controlp INFIELD stca002
{<point name="input.c.stca002" />}
            #END add-point
 
         #----<<stca003>>----
         #Ctrlp:input.c.stca003
         ON ACTION controlp INFIELD stca003
            #add-point:ON ACTION controlp INFIELD stca003
{<point name="input.c.stca003" />}
            #END add-point
 
        
{<point name="input.c.stanstus" />}

 
         #----<<stca004>>----
         #Ctrlp:input.c.stca004
         ON ACTION controlp INFIELD stca004
            #add-point:ON ACTION controlp INFIELD stca004
{<point name="input.c.stca004" />}
            #END add-point
 
         #----<<stca009>>----
         #Ctrlp:input.c.stca009
         ON ACTION controlp INFIELD stca009
            #add-point:ON ACTION controlp INFIELD stca009
{<point name="input.c.stca009" />}
            #END add-point
 
         #----<<stca021>>----
         #Ctrlp:input.c.stca021
         ON ACTION controlp INFIELD stca021
            #add-point:ON ACTION controlp INFIELD stca021
{<point name="input.c.stca021" />}
            #END add-point
 
         #----<<stca022>>----
         #Ctrlp:input.c.stca022
         ON ACTION controlp INFIELD stca022
            #add-point:ON ACTION controlp INFIELD stca022
{<point name="input.c.stca022" />}
            #END add-point
 
         #----<<stca023>>----
         #Ctrlp:input.c.stca023
         ON ACTION controlp INFIELD stca023
            #add-point:ON ACTION controlp INFIELD stca023
{<point name="input.c.stca023" />}
            #END add-point
 
         #----<<stca006>>----
         #Ctrlp:input.c.stca006
         ON ACTION controlp INFIELD stca006
            #add-point:ON ACTION controlp INFIELD stca006
{<point name="input.c.stca006" />}
            #END add-point
 
         #----<<stca007>>----
         #Ctrlp:input.c.stca007
         ON ACTION controlp INFIELD stca007
            #add-point:ON ACTION controlp INFIELD stca007
{<point name="input.c.stca007" />}
            #END add-point
 
         #----<<stca024>>----
         #Ctrlp:input.c.stca024
         ON ACTION controlp INFIELD stca024
            #add-point:ON ACTION controlp INFIELD stca024
{<point name="input.c.stca024" />}
            #END add-point
 
         #----<<stca025>>----
         #Ctrlp:input.c.stca025
         ON ACTION controlp INFIELD stca025
            #add-point:ON ACTION controlp INFIELD stca025
{<point name="input.c.stca025" />}
            #END add-point
 
         #----<<stca008>>----
         #Ctrlp:input.c.stca008
         ON ACTION controlp INFIELD stca008
            #add-point:ON ACTION controlp INFIELD stca008
{<point name="input.c.stca008" />}
            #END add-point
 
         #----<<stcaacti>>----
         #Ctrlp:input.c.stcaacti
         ON ACTION controlp INFIELD stcaacti
            #add-point:ON ACTION controlp INFIELD stcaacti
{<point name="input.c.stcaacti" />}
            #END add-point
 
         #----<<stca013>>----
         #Ctrlp:input.c.stca013
         ON ACTION controlp INFIELD stca013
            #add-point:ON ACTION controlp INFIELD stca013
{<point name="input.c.stca013" />}
            #END add-point
 
         #----<<stca014>>----
         #Ctrlp:input.c.stca014
         ON ACTION controlp INFIELD stca014
            #add-point:ON ACTION controlp INFIELD stca014
{<point name="input.c.stca014" />}
            #END add-point
 
         #----<<stca015>>----
         #Ctrlp:input.c.stca015
         ON ACTION controlp INFIELD stca015
            #add-point:ON ACTION controlp INFIELD stca015
{<point name="input.c.stca015" />}
            #END add-point
 
         #----<<stca017>>----
         #Ctrlp:input.c.stca017
         ON ACTION controlp INFIELD stca017
            #add-point:ON ACTION controlp INFIELD stca017
{<point name="input.c.stca017" />}
            #END add-point
 
         #----<<stca018>>----
         #Ctrlp:input.c.stca018
         ON ACTION controlp INFIELD stca018
            #add-point:ON ACTION controlp INFIELD stca018
{<point name="input.c.stca018" />}
            #END add-point
 
         #----<<stca019>>----
         #Ctrlp:input.c.stca019
         ON ACTION controlp INFIELD stca019
            #add-point:ON ACTION controlp INFIELD stca019
{<point name="input.c.stca019" />}
            #END add-point
 
         #----<<stca020>>----
         #Ctrlp:input.c.stca020
         ON ACTION controlp INFIELD stca020
            #add-point:ON ACTION controlp INFIELD stca020
{<point name="input.c.stca020" />}
            #END add-point
 
         #----<<stcasite>>----
         #Ctrlp:input.c.stcasite
         ON ACTION controlp INFIELD stcasite
            #add-point:ON ACTION controlp INFIELD stcasite
{<point name="input.c.stcasite" />}
            #END add-point
 
         #----<<stcaunit>>----
         #Ctrlp:input.c.stcaunit
         ON ACTION controlp INFIELD stcaunit
            #add-point:ON ACTION controlp INFIELD stcaunit
{<point name="input.c.stcaunit" />}
            #END add-point
 
         #----<<stcastus>>----
         #Ctrlp:input.c.stcastus
         ON ACTION controlp INFIELD stcastus
            #add-point:ON ACTION controlp INFIELD stcastus
{<point name="input.c.stcastus" />}
            #END add-point
 
         #----<<stcaownid>>----
         #----<<stcaowndp>>----
         #----<<stcacrtid>>----
         #----<<stcacrtdp>>----
         #----<<stcacrtdt>>----
         #----<<stcamodid>>----
         #----<<stcamoddt>>----
         #----<<stcacnfid>>----
         #----<<stcacnfdt>>----
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            CALL cl_showmsg()      #錯誤訊息統整顯示
            DISPLAY BY NAME g_stca_m.stcadocno             
 
                            
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前
{<point name="input.head.b_insert" mark="Y"/>}
               #end add-point
               
               INSERT INTO stca_t (stcaent,stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003, 
                   stca004,stca009,stca010,stca011,stca012,stca027,stca021,stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti, 
                   stca013,stca014,stca015,stca016,stca017,stca018,stca019,stca020,stcasite,stcaunit,stcastus, 
                   stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt,stcamodid,stcamoddt,stcacnfid,stcacnfdt) 

               VALUES (g_enterprise,g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005, 
                   g_stca_m.stca001,g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,
                   g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,
                   g_stca_m.stca021,g_stca_m.stca022,g_stca_m.stca023,g_stca_m.stca006,g_stca_m.stca007, 
                   g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,g_stca_m.stca008,g_stca_m.stcaacti,g_stca_m.stca013, 
                   g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019, 
                   g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid, 
                   g_stca_m.stcaowndp,g_stca_m.stcacrtid,g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid, 
                   g_stca_m.stcamoddt,g_stca_m.stcacnfid,g_stca_m.stcacnfdt) 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "g_stca_m"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
  
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭新增中
{<point name="input.head.m_insert"/>}
               #end add-point
               
               
               
               CALL s_transaction_end('Y','0') 
               
               #add-point:單頭新增後
{<point name="input.head.a_insert"/>}
               #end add-point
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL astt601_detail_reproduce()
               END IF
               
               LET p_cmd = 'u'
 
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前
{<point name="input.head.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE stca_t SET (stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003,stca004, 
                   stca009,stca010,stca011,stca012,stca027,stca021,stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti, 
                   stca013,stca014,stca015,stca016,stca017,stca018,stca019,stca020,stcasite,stcaunit,stcastus, 
                   stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt,stcamodid,stcamoddt,stcacnfid,stcacnfdt) = (g_stca_m.stca000, 
                   g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001,g_stca_m.stca002, 
                   g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,
                   g_stca_m.stca027,g_stca_m.stca021,g_stca_m.stca022, 
                   g_stca_m.stca023,g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,  
                   g_stca_m.stca008,g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016, 
                   g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.stcasite, 
                   g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaowndp,g_stca_m.stcacrtid, 
                   g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamoddt,g_stca_m.stcacnfid, 
                   g_stca_m.stcacnfdt)
                WHERE stcaent = g_enterprise AND stcadocno = g_stcadocno_t
 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "stca_t"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
  
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭修改中
{<point name="input.head.m_update"/>}
               #end add-point
               
               
               
               CALL s_transaction_end('Y','0')
               
               #add-point:單頭修改後
{<point name="input.head.a_update"/>}
               #end add-point
            END IF
            
            LET g_stcadocno_t = g_stca_m.stcadocno
 
            #controlp
            
      END INPUT
   

{</section>}

{<section id="astt601.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_stcb_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stcb_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astt601_b_fill()
            LET g_rec_b = g_stcb_d.getLength()
            #add-point:資料輸入前
{<point name="input.d.before_input"/>}
            #end add-point
         
         BEFORE ROW
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt601_cl USING g_enterprise,g_stca_m.stcadocno
 
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code =  STATUS
               LET g_errparam.extend = "OPEN astt601_cl:"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CLOSE astt601_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_stcb_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_stcb_d[l_ac].stcbseq IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_stcb_d_t.* = g_stcb_d[l_ac].*  #BACKUP
               CALL astt601_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
{<point name="input.body.after_set_entry_b"/>}
               #end add-point  
               CALL astt601_set_no_entry_b(l_cmd)
               IF NOT astt601_lock_b("stcb_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt601_bcl INTO g_stcb_d[l_ac].stcbseq,g_stcb_d[l_ac].stcb002,g_stcb_d[l_ac].stcb002_desc,g_stcb_d[l_ac].stcb021,   #160513-00033#7
                      g_stcb_d[l_ac].stcb003,g_stcb_d[l_ac].stcb004,g_stcb_d[l_ac].stcb005,g_stcb_d[l_ac].stcb006, 
                      g_stcb_d[l_ac].stcb007,g_stcb_d[l_ac].stcb008,g_stcb_d[l_ac].stcb008_desc,g_stcb_d[l_ac].stcb009, 
                      g_stcb_d[l_ac].stcb009_desc,g_stcb_d[l_ac].stcb010,g_stcb_d[l_ac].stcb011,g_stcb_d[l_ac].stcb012, 
                      g_stcb_d[l_ac].stcb013,g_stcb_d[l_ac].stcb014,g_stcb_d[l_ac].stcb015,g_stcb_d[l_ac].stcb016, 
                      g_stcb_d[l_ac].stcb017,g_stcb_d[l_ac].stcb018,g_stcb_d[l_ac].stcbunit,g_stcb_d[l_ac].stcbsite 

                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = SQLCA.sqlcode
                     LET g_errparam.extend = g_stcb_d_t.stcbseq
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL astt601_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
{<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stcb_d[l_ac].* TO NULL 
                  LET g_stcb_d[l_ac].stcb012 = "1"
      LET g_stcb_d[l_ac].stcb015 = "1"
 
 
            LET g_stcb_d_t.* = g_stcb_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt601_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
{<point name="input.body.insert.after_set_entry_b"/>}
            #end add-point
            CALL astt601_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_stcb_d[li_reproduce_target].* = g_stcb_d[li_reproduce].*
 
               LET g_stcb_d[li_reproduce_target].stcbseq = NULL
 
            END IF
            #公用欄位給值(單身)
            
            
            #add-point:modify段before insert
{<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增
{<point name="input.body.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stcb_t 
             WHERE stcbent = g_enterprise AND stcbdocno = g_stca_m.stcadocno
 
               AND stcbseq = g_stcb_d[l_ac].stcbseq
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
{<point name="input.body.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys[2] = g_stcb_d[g_detail_idx].stcbseq
               CALL astt601_insert_b('stcb_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
{<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_stcb_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt601_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert
{<point name="input.body.a_insert2"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_stcb_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_stcb_d.deleteElement(l_ac)
               NEXT FIELD stcbseq
            END IF
         
            IF g_stcb_d[l_ac].stcbseq IS NOT NULL
 
               THEN 
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code =  -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
{<point name="input.body.b_delete" mark="Y"/>}
               #end add-point 
               
               DELETE FROM stcb_t
                WHERE stcbent = g_enterprise AND stcbdocno = g_stca_m.stcadocno AND
 
                      stcbseq = g_stcb_d_t.stcbseq
 
                  
               #add-point:單身刪除中
{<point name="input.body.m_delete"/>}
               #end add-point 
               
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  #add-point:單身刪除後
{<point name="input.body.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE astt601_bcl
               LET l_count = g_stcb_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys[2] = g_stcb_d[g_detail_idx].stcbseq
 
              
         AFTER DELETE 
            #add-point:單身刪除後2
{<point name="input.body.after_delete"/>}
            #end add-point
                           CALL astt601_delete_b('stcb_t',gs_keys,"'1'")
 
         #---------------------<  Detail: page1  >---------------------
         #----<<stcbseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbseq
            #add-point:BEFORE FIELD stcbseq
{<point name="input.b.page1.stcbseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbseq
            
            #add-point:AFTER FIELD stcbseq
{<point name="input.a.page1.stcbseq" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcbseq
            #add-point:ON CHANGE stcbseq
{<point name="input.g.page1.stcbseq" />}
            #END add-point
 
         #----<<stcb002>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcb002
            
            #add-point:AFTER FIELD stcb002
{<point name="input.a.page1.stcb002" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb002
            #add-point:BEFORE FIELD stcb002
{<point name="input.b.page1.stcb002" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcb002
            #add-point:ON CHANGE stcb002
{<point name="input.g.page1.stcb002" />}
            #END add-point
         #160513-00033#7--(S)
         #當此欄位異動時,將價款類別,費用週期,費用週期方式,條件基準,計算基準,條件/固定金額,費用比率,保底金額,保低扣率的值清空
         #計算類型,保底否與分量扣點給固定值1         
         ON CHANGE stcb021
            LET g_stcb_d[l_ac].stcb004 = ''  #價款類別
            LET g_stcb_d[l_ac].stcb006 = ''  #費用週期
            LET g_stcb_d[l_ac].stcb007 = ''  #費用週期方式
            LET g_stcb_d[l_ac].stcb008 = ''  #條件基準
            LET g_stcb_d[l_ac].stcb008_desc = '' 
            LET g_stcb_d[l_ac].stcb009 = ''  #計算基準
            LET g_stcb_d[l_ac].stcb009_desc = '' 
            LET g_stcb_d[l_ac].stcb010 = ''  #條件/固定金額
            LET g_stcb_d[l_ac].stcb011 = ''  #費用比率            
            LET g_stcb_d[l_ac].stcb013 = ''  #保底金額
            LET g_stcb_d[l_ac].stcb014 = ''  #保低扣率的值
            LET g_stcb_d[l_ac].stcb005 = '1' #計算類型            
            LET g_stcb_d[l_ac].stcb012 = '1' #保底否
            LET g_stcb_d[l_ac].stcb015 = '1' #分量扣點
            
            CALL astt601_set_entry_b(l_cmd)
            CALL astt601_set_no_required_b(l_cmd)
            CALL astt601_set_required_b(l_cmd)
            CALL astt601_set_no_entry_b(l_cmd)
         #160513-00033#7--(E)
         #----<<stcb003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb003
            #add-point:BEFORE FIELD stcb003
{<point name="input.b.page1.stcb003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb003
            
            #add-point:AFTER FIELD stcb003
{<point name="input.a.page1.stcb003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb003
            #add-point:ON CHANGE stcb003
{<point name="input.g.page1.stcb003" />}
            #END add-point
 
         #----<<stcb004>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb004
            #add-point:BEFORE FIELD stcb004
{<point name="input.b.page1.stcb004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb004
            
            #add-point:AFTER FIELD stcb004
{<point name="input.a.page1.stcb004" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb004
            #add-point:ON CHANGE stcb004
{<point name="input.g.page1.stcb004" />}
            #END add-point
 
         #----<<stcb005>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb005
            #add-point:BEFORE FIELD stcb005
{<point name="input.b.page1.stcb005" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb005
            
            #add-point:AFTER FIELD stcb005
{<point name="input.a.page1.stcb005" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb005
            #add-point:ON CHANGE stcb005
{<point name="input.g.page1.stcb005" />}
            #END add-point
 
         #----<<stcb006>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb006
            #add-point:BEFORE FIELD stcb006
{<point name="input.b.page1.stcb006" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb006
            
            #add-point:AFTER FIELD stcb006
{<point name="input.a.page1.stcb006" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb006
            #add-point:ON CHANGE stcb006
{<point name="input.g.page1.stcb006" />}
            #END add-point
 
         #----<<stcb007>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb007
            #add-point:BEFORE FIELD stcb007
{<point name="input.b.page1.stcb007" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb007
            
            #add-point:AFTER FIELD stcb007
{<point name="input.a.page1.stcb007" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb007
            #add-point:ON CHANGE stcb007
{<point name="input.g.page1.stcb007" />}
            #END add-point
 
         #----<<stcb008>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcb008
            
            #add-point:AFTER FIELD stcb008
{<point name="input.a.page1.stcb008" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb008
            #add-point:BEFORE FIELD stcb008
{<point name="input.b.page1.stcb008" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcb008
            #add-point:ON CHANGE stcb008
{<point name="input.g.page1.stcb008" />}
            #END add-point
 
         #----<<stcb009>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcb009
            
            #add-point:AFTER FIELD stcb009
{<point name="input.a.page1.stcb009" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcb009
            #add-point:BEFORE FIELD stcb009
{<point name="input.b.page1.stcb009" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcb009
            #add-point:ON CHANGE stcb009
{<point name="input.g.page1.stcb009" />}
            #END add-point
 
         #----<<stcb010>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb010
            #add-point:BEFORE FIELD stcb010
{<point name="input.b.page1.stcb010" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb010
            
            #add-point:AFTER FIELD stcb010
{<point name="input.a.page1.stcb010" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb010
            #add-point:ON CHANGE stcb010
{<point name="input.g.page1.stcb010" />}
            #END add-point
 
         #----<<stcb011>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb011
            #add-point:BEFORE FIELD stcb011
{<point name="input.b.page1.stcb011" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb011
            
            #add-point:AFTER FIELD stcb011
{<point name="input.a.page1.stcb011" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb011
            #add-point:ON CHANGE stcb011
{<point name="input.g.page1.stcb011" />}
            #END add-point
 
         #----<<stcb012>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb012
            #add-point:BEFORE FIELD stcb012
{<point name="input.b.page1.stcb012" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb012
            
            #add-point:AFTER FIELD stcb012
{<point name="input.a.page1.stcb012" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb012
            #add-point:ON CHANGE stcb012
{<point name="input.g.page1.stcb012" />}
            #END add-point
 
         #----<<stcb013>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb013
            #add-point:BEFORE FIELD stcb013
{<point name="input.b.page1.stcb013" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb013
            
            #add-point:AFTER FIELD stcb013
{<point name="input.a.page1.stcb013" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb013
            #add-point:ON CHANGE stcb013
{<point name="input.g.page1.stcb013" />}
            #END add-point
 
         #----<<stcb014>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb014
            #add-point:BEFORE FIELD stcb014
{<point name="input.b.page1.stcb014" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb014
            
            #add-point:AFTER FIELD stcb014
{<point name="input.a.page1.stcb014" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb014
            #add-point:ON CHANGE stcb014
{<point name="input.g.page1.stcb014" />}
            #END add-point
 
         #----<<stcb015>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb015
            #add-point:BEFORE FIELD stcb015
{<point name="input.b.page1.stcb015" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb015
            
            #add-point:AFTER FIELD stcb015
{<point name="input.a.page1.stcb015" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb015
            #add-point:ON CHANGE stcb015
{<point name="input.g.page1.stcb015" />}
            #END add-point
 
         #----<<stcb016>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb016
            #add-point:BEFORE FIELD stcb016
{<point name="input.b.page1.stcb016" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb016
            
            #add-point:AFTER FIELD stcb016
{<point name="input.a.page1.stcb016" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb016
            #add-point:ON CHANGE stcb016
{<point name="input.g.page1.stcb016" />}
            #END add-point
 
         #----<<stcb017>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb017
            #add-point:BEFORE FIELD stcb017
{<point name="input.b.page1.stcb017" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb017
            
            #add-point:AFTER FIELD stcb017
{<point name="input.a.page1.stcb017" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb017
            #add-point:ON CHANGE stcb017
{<point name="input.g.page1.stcb017" />}
            #END add-point
 
         #----<<stcb018>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcb018
            #add-point:BEFORE FIELD stcb018
{<point name="input.b.page1.stcb018" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcb018
            
            #add-point:AFTER FIELD stcb018
{<point name="input.a.page1.stcb018" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcb018
            #add-point:ON CHANGE stcb018
{<point name="input.g.page1.stcb018" />}
            #END add-point
 
         #----<<stcbunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbunit
            #add-point:BEFORE FIELD stcbunit
{<point name="input.b.page1.stcbunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbunit
            
            #add-point:AFTER FIELD stcbunit
{<point name="input.a.page1.stcbunit" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcbunit
            #add-point:ON CHANGE stcbunit
{<point name="input.g.page1.stcbunit" />}
            #END add-point
 
         #----<<stcbsite>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcbsite
            #add-point:BEFORE FIELD stcbsite
{<point name="input.b.page1.stcbsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcbsite
            
            #add-point:AFTER FIELD stcbsite
{<point name="input.a.page1.stcbsite" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcbsite
            #add-point:ON CHANGE stcbsite
{<point name="input.g.page1.stcbsite" />}
            #END add-point
 
 
         #---------------------<  Detail: page1  >---------------------
         #----<<stcbseq>>----
         #Ctrlp:input.c.page1.stcbseq
         ON ACTION controlp INFIELD stcbseq
            #add-point:ON ACTION controlp INFIELD stcbseq
{<point name="input.c.page1.stcbseq" />}
            #END add-point
 
         #----<<stcb002>>----
         #Ctrlp:input.c.page1.stcb002
         ON ACTION controlp INFIELD stcb002
            #add-point:ON ACTION controlp INFIELD stcb002
{<point name="input.c.page1.stcb002" />}
            #END add-point
 
         #----<<stcb003>>----
         #Ctrlp:input.c.page1.stcb003
         ON ACTION controlp INFIELD stcb003
            #add-point:ON ACTION controlp INFIELD stcb003
{<point name="input.c.page1.stcb003" />}
            #END add-point
 
         #----<<stcb004>>----
         #Ctrlp:input.c.page1.stcb004
         ON ACTION controlp INFIELD stcb004
            #add-point:ON ACTION controlp INFIELD stcb004
{<point name="input.c.page1.stcb004" />}
            #END add-point
 
         #----<<stcb005>>----
         #Ctrlp:input.c.page1.stcb005
         ON ACTION controlp INFIELD stcb005
            #add-point:ON ACTION controlp INFIELD stcb005
{<point name="input.c.page1.stcb005" />}
            #END add-point
 
         #----<<stcb006>>----
         #Ctrlp:input.c.page1.stcb006
         ON ACTION controlp INFIELD stcb006
            #add-point:ON ACTION controlp INFIELD stcb006
{<point name="input.c.page1.stcb006" />}
            #END add-point
 
         #----<<stcb007>>----
         #Ctrlp:input.c.page1.stcb007
         ON ACTION controlp INFIELD stcb007
            #add-point:ON ACTION controlp INFIELD stcb007
{<point name="input.c.page1.stcb007" />}
            #END add-point
 
         #----<<stcb008>>----
         #Ctrlp:input.c.page1.stcb008
         ON ACTION controlp INFIELD stcb008
            #add-point:ON ACTION controlp INFIELD stcb008
{<point name="input.c.page1.stcb008" />}
            #END add-point
 
         #----<<stcb009>>----
         #Ctrlp:input.c.page1.stcb009
         ON ACTION controlp INFIELD stcb009
            #add-point:ON ACTION controlp INFIELD stcb009
{<point name="input.c.page1.stcb009" />}
            #END add-point
 
         #----<<stcb010>>----
         #Ctrlp:input.c.page1.stcb010
         ON ACTION controlp INFIELD stcb010
            #add-point:ON ACTION controlp INFIELD stcb010
{<point name="input.c.page1.stcb010" />}
            #END add-point
 
         #----<<stcb011>>----
         #Ctrlp:input.c.page1.stcb011
         ON ACTION controlp INFIELD stcb011
            #add-point:ON ACTION controlp INFIELD stcb011
{<point name="input.c.page1.stcb011" />}
            #END add-point
 
         #----<<stcb012>>----
         #Ctrlp:input.c.page1.stcb012
         ON ACTION controlp INFIELD stcb012
            #add-point:ON ACTION controlp INFIELD stcb012
{<point name="input.c.page1.stcb012" />}
            #END add-point
 
         #----<<stcb013>>----
         #Ctrlp:input.c.page1.stcb013
         ON ACTION controlp INFIELD stcb013
            #add-point:ON ACTION controlp INFIELD stcb013
{<point name="input.c.page1.stcb013" />}
            #END add-point
 
         #----<<stcb014>>----
         #Ctrlp:input.c.page1.stcb014
         ON ACTION controlp INFIELD stcb014
            #add-point:ON ACTION controlp INFIELD stcb014
{<point name="input.c.page1.stcb014" />}
            #END add-point
 
         #----<<stcb015>>----
         #Ctrlp:input.c.page1.stcb015
         ON ACTION controlp INFIELD stcb015
            #add-point:ON ACTION controlp INFIELD stcb015
{<point name="input.c.page1.stcb015" />}
            #END add-point
 
         #----<<stcb016>>----
         #Ctrlp:input.c.page1.stcb016
         ON ACTION controlp INFIELD stcb016
            #add-point:ON ACTION controlp INFIELD stcb016
{<point name="input.c.page1.stcb016" />}
            #END add-point
 
         #----<<stcb017>>----
         #Ctrlp:input.c.page1.stcb017
         ON ACTION controlp INFIELD stcb017
            #add-point:ON ACTION controlp INFIELD stcb017
{<point name="input.c.page1.stcb017" />}
            #END add-point
 
         #----<<stcb018>>----
         #Ctrlp:input.c.page1.stcb018
         ON ACTION controlp INFIELD stcb018
            #add-point:ON ACTION controlp INFIELD stcb018
{<point name="input.c.page1.stcb018" />}
            #END add-point
 
         #----<<stcbunit>>----
         #Ctrlp:input.c.page1.stcbunit
         ON ACTION controlp INFIELD stcbunit
            #add-point:ON ACTION controlp INFIELD stcbunit
{<point name="input.c.page1.stcbunit" />}
            #END add-point
 
         #----<<stcbsite>>----
         #Ctrlp:input.c.page1.stcbsite
         ON ACTION controlp INFIELD stcbsite
            #add-point:ON ACTION controlp INFIELD stcbsite
{<point name="input.c.page1.stcbsite" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_stcb_d[l_ac].* = g_stcb_d_t.*
               CLOSE astt601_bcl
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = g_stcb_d[l_ac].stcbseq
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_stcb_d[l_ac].* = g_stcb_d_t.*
            ELSE
            
               #add-point:單身修改前
{<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               UPDATE stcb_t SET (stcbdocno,stcbseq,stcb002,stcb003,stcb004,stcb005,stcb006,stcb007, 
                   stcb008,stcb009,stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018, 
                   stcb019,stcb020,
                   stcbunit,stcbsite,stcb021) = (g_stca_m.stcadocno,g_stcb_d[l_ac].stcbseq,g_stcb_d[l_ac].stcb002, 
                   g_stcb_d[l_ac].stcb003,g_stcb_d[l_ac].stcb004,g_stcb_d[l_ac].stcb005,g_stcb_d[l_ac].stcb006, 
                   g_stcb_d[l_ac].stcb007,g_stcb_d[l_ac].stcb008,g_stcb_d[l_ac].stcb009,g_stcb_d[l_ac].stcb010, 
                   g_stcb_d[l_ac].stcb011,g_stcb_d[l_ac].stcb012,g_stcb_d[l_ac].stcb013,g_stcb_d[l_ac].stcb014, 
                   g_stcb_d[l_ac].stcb015,g_stcb_d[l_ac].stcb016,g_stcb_d[l_ac].stcb017,g_stcb_d[l_ac].stcb018, 
                   g_stcb_d[l_ac].stcb019,g_stcb_d[l_ac].stcb020,
                   g_stcb_d[l_ac].stcbunit,g_stcb_d[l_ac].stcbsite,g_stcb_d[l_ac].stcb021)
                WHERE stcbent = g_enterprise AND stcbdocno = g_stca_m.stcadocno 
 
                  AND stcbseq = g_stcb_d_t.stcbseq #項次   
 
                  
               #add-point:單身修改中
{<point name="input.body.m_update"/>}
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "std-00009"
                     LET g_errparam.extend = "stcb_t"
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     CALL s_transaction_end('N','0')
                     LET g_stcb_d[l_ac].* = g_stcb_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                     LET g_stcb_d[l_ac].* = g_stcb_d_t.*                     
                     CALL s_transaction_end('N','0')
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys_bak[1] = g_stcadocno_t
               LET gs_keys[2] = g_stcb_d[g_detail_idx].stcbseq
               LET gs_keys_bak[2] = g_stcb_d_t.stcbseq
               CALL astt601_update_b('stcb_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                     
               END CASE
               
               #add-point:單身修改後
{<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row
{<point name="input.body.after_row"/>}
            #end add-point
            CALL astt601_unlock_b("stcb_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            
              
         AFTER INPUT
            #add-point:input段after input 
{<point name="input.body.after_input"/>}
            #end add-point 
 
         ON ACTION controlo    
            CALL FGL_SET_ARR_CURR(g_stcb_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_stcb_d.getLength()+1
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
      INPUT ARRAY g_stcb2_d FROM s_detail2.*
         ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_2)
         
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stcb2_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astt601_b_fill()
            LET g_rec_b = g_stcb2_d.getLength()
            #add-point:資料輸入前
{<point name="input.body2.before_input"/>}
            #end add-point
            
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stcb2_d[l_ac].* TO NULL 
                  LET g_stcb2_d[l_ac].stcd003 = "Y"
 
 
            LET g_stcb2_d_t.* = g_stcb2_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt601_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
{<point name="input.body2.insert.after_set_entry_b"/>}
            #end add-point
            CALL astt601_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_stcb2_d[li_reproduce_target].* = g_stcb2_d[li_reproduce].*
 
               LET g_stcb2_d[li_reproduce_target].stcdseq = NULL
            END IF
            #公用欄位給值(單身2)
            
            
            #add-point:modify段before insert
{<point name="input.body2.before_insert"/>}
            #end add-point  
            
         BEFORE ROW     
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
              
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt601_cl USING g_enterprise,g_stca_m.stcadocno
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code =  STATUS
               LET g_errparam.extend = "OPEN astt601_cl:"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CLOSE astt601_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_stcb2_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_stcb2_d[l_ac].stcdseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_stcb2_d_t.* = g_stcb2_d[l_ac].*  #BACKUP
               CALL astt601_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
{<point name="input.body2.after_set_entry_b"/>}
               #end add-point  
               CALL astt601_set_no_entry_b(l_cmd)
               IF NOT astt601_lock_b("stcd_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt601_bcl2 INTO g_stcb2_d[l_ac].stcdseq,g_stcb2_d[l_ac].stcd002,g_stcb2_d[l_ac].stcd002_desc, 
                      g_stcb2_d[l_ac].stcd003,g_stcb2_d[l_ac].stcdunit,g_stcb2_d[l_ac].stcdsite
                   IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = SQLCA.sqlcode
                     LET g_errparam.extend = ''
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL astt601_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
{<point name="input.body2.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_stcb2_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_stcb2_d.deleteElement(l_ac)
               NEXT FIELD stcdseq
            END IF
         
            IF g_stcb2_d[l_ac].stcdseq IS NOT NULL
            THEN
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code =  -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF
               
               #add-point:單身2刪除前
{<point name="input.body2.b_delete" mark="Y"/>}
               #end add-point    
               
               DELETE FROM stcd_t
                WHERE stcdent = g_enterprise AND stcddocno = g_stca_m.stcadocno AND
                      stcdseq = g_stcb2_d_t.stcdseq
                  
               #add-point:單身2刪除中
{<point name="input.body2.m_delete"/>}
               #end add-point    
                  
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcb_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  #add-point:單身2刪除後
{<point name="input.body2.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE astt601_bcl
               LET l_count = g_stcb_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys[2] = g_stcb2_d[g_detail_idx].stcdseq
 
            
         AFTER DELETE 
            #add-point:單身AFTER DELETE 
{<point name="input.body2.after_delete"/>}
            #end add-point
                           CALL astt601_delete_b('stcd_t',gs_keys,"'2'")
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身2新增前
{<point name="input.body2.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stcd_t 
             WHERE stcdent = g_enterprise AND stcddocno = g_stca_m.stcadocno
               AND stcdseq = g_stcb2_d[l_ac].stcdseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身2新增前
{<point name="input.body2.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys[2] = g_stcb2_d[g_detail_idx].stcdseq
               CALL astt601_insert_b('stcd_t',gs_keys,"'2'")
                           
               #add-point:單身新增後2
{<point name="input.body2.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_stcb_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcd_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt601_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後
{<point name="input.body2.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_stcb2_d[l_ac].* = g_stcb2_d_t.*
               CLOSE astt601_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = ''
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_stcb2_d[l_ac].* = g_stcb2_d_t.*
            ELSE
               #add-point:單身page2修改前
{<point name="input.body2.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身2)
               
               
               UPDATE stcd_t SET (stcddocno,stcdseq,stcd002,stcd003,stcdunit,stcdsite) = (g_stca_m.stcadocno, 
                   g_stcb2_d[l_ac].stcdseq,g_stcb2_d[l_ac].stcd002,g_stcb2_d[l_ac].stcd003,g_stcb2_d[l_ac].stcdunit, 
                   g_stcb2_d[l_ac].stcdsite) #自訂欄位頁簽
                WHERE stcdent = g_enterprise AND stcddocno = g_stca_m.stcadocno
                  AND stcdseq = g_stcb2_d_t.stcdseq #項次 
                  
               #add-point:單身page2修改中
{<point name="input.body2.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "std-00009"
                     LET g_errparam.extend = "stcd_t"
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     CALL s_transaction_end('N','0')
                     LET g_stcb2_d[l_ac].* = g_stcb2_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stcd_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
                     CALL s_transaction_end('N','0')
                     LET g_stcb2_d[l_ac].* = g_stcb2_d_t.*
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stca_m.stcadocno
               LET gs_keys_bak[1] = g_stcadocno_t
               LET gs_keys[2] = g_stcb2_d[g_detail_idx].stcdseq
               LET gs_keys_bak[2] = g_stcb2_d_t.stcdseq
               CALL astt601_update_b('stcd_t',gs_keys,gs_keys_bak,"'2'")
                     #資料多語言用-增/改
                     
               END CASE
               #add-point:單身page2修改後
{<point name="input.body2.a_update"/>}
               #end add-point
            END IF
         
         #---------------------<  Detail: page2  >---------------------
         #----<<stcdseq>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdseq
            #add-point:BEFORE FIELD stcdseq
{<point name="input.b.page2.stcdseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdseq
            
            #add-point:AFTER FIELD stcdseq
{<point name="input.a.page2.stcdseq" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcdseq
            #add-point:ON CHANGE stcdseq
{<point name="input.g.page2.stcdseq" />}
            #END add-point
 
         #----<<stcd002>>----
         #此段落由子樣板a02產生
         AFTER FIELD stcd002
            
            #add-point:AFTER FIELD stcd002
{<point name="input.a.page2.stcd002" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD stcd002
            #add-point:BEFORE FIELD stcd002
{<point name="input.b.page2.stcd002" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE stcd002
            #add-point:ON CHANGE stcd002
{<point name="input.g.page2.stcd002" />}
            #END add-point
 
         #----<<stcd003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcd003
            #add-point:BEFORE FIELD stcd003
{<point name="input.b.page2.stcd003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcd003
            
            #add-point:AFTER FIELD stcd003
{<point name="input.a.page2.stcd003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcd003
            #add-point:ON CHANGE stcd003
{<point name="input.g.page2.stcd003" />}
            #END add-point
 
         #----<<stcdunit>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdunit
            #add-point:BEFORE FIELD stcdunit
{<point name="input.b.page2.stcdunit" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdunit
            
            #add-point:AFTER FIELD stcdunit
{<point name="input.a.page2.stcdunit" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcdunit
            #add-point:ON CHANGE stcdunit
{<point name="input.g.page2.stcdunit" />}
            #END add-point
 
         #----<<stcdsite>>----
         #此段落由子樣板a01產生
         BEFORE FIELD stcdsite
            #add-point:BEFORE FIELD stcdsite
{<point name="input.b.page2.stcdsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD stcdsite
            
            #add-point:AFTER FIELD stcdsite
{<point name="input.a.page2.stcdsite" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE stcdsite
            #add-point:ON CHANGE stcdsite
{<point name="input.g.page2.stcdsite" />}
            #END add-point
 
 
         #---------------------<  Detail: page2  >---------------------
         #----<<stcdseq>>----
         #Ctrlp:input.c.page2.stcdseq
         ON ACTION controlp INFIELD stcdseq
            #add-point:ON ACTION controlp INFIELD stcdseq
{<point name="input.c.page2.stcdseq" />}
            #END add-point
 
         #----<<stcd002>>----
         #Ctrlp:input.c.page2.stcd002
         ON ACTION controlp INFIELD stcd002
            #add-point:ON ACTION controlp INFIELD stcd002
{<point name="input.c.page2.stcd002" />}
            #END add-point
 
         #----<<stcd003>>----
         #Ctrlp:input.c.page2.stcd003
         ON ACTION controlp INFIELD stcd003
            #add-point:ON ACTION controlp INFIELD stcd003
{<point name="input.c.page2.stcd003" />}
            #END add-point
 
         #----<<stcdunit>>----
         #Ctrlp:input.c.page2.stcdunit
         ON ACTION controlp INFIELD stcdunit
            #add-point:ON ACTION controlp INFIELD stcdunit
{<point name="input.c.page2.stcdunit" />}
            #END add-point
 
         #----<<stcdsite>>----
         #Ctrlp:input.c.page2.stcdsite
         ON ACTION controlp INFIELD stcdsite
            #add-point:ON ACTION controlp INFIELD stcdsite
{<point name="input.c.page2.stcdsite" />}
            #END add-point
 
 
 
         AFTER ROW
            #add-point:單身page2 after_row
{<point name="input.body2.after_row"/>}
            #end add-point
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_stcb2_d[l_ac].* = g_stcb2_d_t.*
               END IF
               CLOSE astt601_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt601_unlock_b("stcd_t","'2'")
            CALL s_transaction_end('Y','0')
 
         AFTER INPUT
            #add-point:input段after input 
{<point name="input.body2.after_input"/>}
            #end add-point   
    
         ON ACTION controlo
            CALL FGL_SET_ARR_CURR(g_stcb2_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_stcb2_d.getLength()+1
 
      END INPUT
 
 
      
 
      
 
      
 
      

{</section>}

{<section id="astt601.input.other" >}
      
      #add-point:自定義input
{<point name="input.more_input"/>}
      #end add-point
      
      BEFORE DIALOG 
         #add-point:input段before dialog
{<point name="input.before_dialog"/>}
         #end add-point    
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            NEXT FIELD stcasite #sakura add
            NEXT FIELD stcadocno
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD stcbseq
               WHEN "s_detail2"
                  NEXT FIELD stcdseq
 
 
            END CASE
         END IF
    
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         CALL cl_set_head_visible("","AUTO")
 
      ON ACTION accept
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
         
   END DIALOG
    
   #add-point:input段after input 
{<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION

{</section>}

{<section id="astt601.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION astt601_show()
   {<Local define>}
   DEFINE l_ac_t    LIKE type_t.num5
   {</Local define>}
   #add-point:show段define
{<point name="show.define"/>}
   #end add-point  
 
   #add-point:show段之前
{<point name="show.before"/>}
   #end add-point
   
   
   
   LET g_stca_m_t.* = g_stca_m.*      #保存單頭舊值
   
   IF g_bfill = "Y" THEN
      CALL astt601_b_fill() #單身填充
      CALL astt601_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #此段落由子樣板a12產生
      #LET g_stca_m.stcaownid_desc = cl_get_username(g_stca_m.stcaownid)
      #LET g_stca_m.stcaowndp_desc = cl_get_deptname(g_stca_m.stcaowndp)
      #LET g_stca_m.stcacrtid_desc = cl_get_username(g_stca_m.stcacrtid)
      #LET g_stca_m.stcacrtdp_desc = cl_get_deptname(g_stca_m.stcacrtdp)
      #LET g_stca_m.stcamodid_desc = cl_get_username(g_stca_m.stcamodid)
      #LET g_stca_m.stcacnfid_desc = cl_get_deptname(g_stca_m.stcacnfid)

      
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference
{<point name="show.head.reference"/>}
   #end add-point
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001, 
       g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca004_desc,g_stca_m.stca009, 
       g_stca_m.stca009_desc,g_stca_m.stca010,g_stca_m.stca010_desc,g_stca_m.stca011,g_stca_m.stca011_desc,
       g_stca_m.stca012,g_stca_m.stca012_desc,g_stca_m.stca021,g_stca_m.stca021_desc,g_stca_m.stca022,g_stca_m.stca022_desc, 
       g_stca_m.stca023,g_stca_m.stca006,g_stca_m.stca006_desc,g_stca_m.stca007,g_stca_m.stca007_desc, 
       g_stca_m.stca024,g_stca_m.stca024_desc,g_stca_m.stca028,g_stca_m.stca028_desc,g_stca_m.stca025,g_stca_m.stca025_desc,g_stca_m.stca026,g_stca_m.stca026_desc,g_stca_m.stca008, 
       g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca014_desc,g_stca_m.stca015,g_stca_m.stca015_desc,g_stca_m.stca016,g_stca_m.stca016_desc, 
       g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcasite_desc, 
       g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaownid_desc,g_stca_m.stcaowndp, 
       g_stca_m.stcaowndp_desc,g_stca_m.stcacrtid,g_stca_m.stcacrtid_desc,g_stca_m.stcacrtdp,g_stca_m.stcacrtdp_desc, 
       g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamodid_desc,g_stca_m.stcamoddt,g_stca_m.stcacnfid, 
       g_stca_m.stcacnfid_desc,g_stca_m.stcacnfdt
   
   #顯示狀態(stus)圖片
         #此段落由子樣板a21產生
      CASE g_stca_m.stcastus
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
 
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange","stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange","stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange","stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange","stus/32/signing.png")
 
         
      END CASE
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_stcb_d.getLength()
      #帶出公用欄位reference值
      
      #add-point:show段單身reference
{<point name="show.body.reference"/>}
      #end add-point
   END FOR
   
   FOR l_ac = 1 TO g_stcb2_d.getLength()
      #帶出公用欄位reference值
      
      #add-point:show段單身reference
{<point name="show.body2.reference"/>}
      #end add-point
   END FOR
 
 
   
    
   
   #add-point:show段other
{<point name="show.other"/>}
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL astt601_detail_show()
   
   #add-point:show段之後
{<point name="show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astt601.detail_show" >}
#+ 單身reference detail_show
PRIVATE FUNCTION astt601_detail_show()
   {<Local define>}
   DEFINE l_ac_t    LIKE type_t.num5
   {</Local define>}
   #add-point:detail_show段define
   {<point name="detail_show.define"/>}
   #end add-point  
 
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   LET l_ac_t = l_ac
 
   LET l_ac = l_ac_t
   
   #add-point:detail_show段之後
   {<point name="detail_show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astt601.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION astt601_reproduce()
   {<Local define>}
   DEFINE l_newno     LIKE stca_t.stcadocno 
   DEFINE l_oldno     LIKE stca_t.stcadocno 
 
   DEFINE l_master    RECORD LIKE stca_t.*
   DEFINE l_detail    RECORD LIKE stcb_t.*
   DEFINE l_detail2    RECORD LIKE stcd_t.*
 
 
 
   DEFINE l_cnt       LIKE type_t.num5
   {</Local define>}
   #add-point:reproduce段define
   {<point name="reproduce.define"/>}
   #end add-point   
 
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   IF g_stca_m.stcadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
    
   LET g_stcadocno_t = g_stca_m.stcadocno
 
    
   LET g_stca_m.stcadocno = ""
 
    
   CALL astt601_set_entry('a')
   CALL astt601_set_no_entry('a')
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #此段落由子樣板a14產生    
      LET g_stca_m.stcaownid = g_user
      LET g_stca_m.stcaowndp = g_dept
      LET g_stca_m.stcacrtid = g_user
      LET g_stca_m.stcacrtdp = g_dept 
      LET g_stca_m.stcacrtdt = cl_get_current()
      LET g_stca_m.stcamodid = ""
      LET g_stca_m.stcamoddt = ""
      #LET g_stca_m.stcastus = ""
 
 
   
   #add-point:複製輸入前
   {<point name="reproduce.head.b_input"/>}
   #end add-point
   
   CALL astt601_input("r")
   
   
   
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      RETURN
   END IF
 
   LET g_state = "Y"
   
   LET g_wc = g_wc,  
              " OR (",
              " stcadocno = '", g_stca_m.stcadocno CLIPPED, "' "
 
              , ") "
   
   #add-point:完成複製段落後
   {<point name="reproduce.after_reproduce" />}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="astt601.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION astt601_detail_reproduce()
   {<Local define>}
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE stcb_t.*
   DEFINE l_detail2    RECORD LIKE stcd_t.*
 
 
 
   {</Local define>}
   #add-point:delete段define
   {<point name="detail_reproduce.define"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE astt601_detail
   
   #add-point:單身複製前1
   {<point name="detail_reproduce.body.table1.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE astt601_detail AS ",
                "SELECT * FROM stcb_t "
   PREPARE repro_tbl FROM ls_sql
   EXECUTE repro_tbl
   FREE repro_tbl
                
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astt601_detail SELECT * FROM stcb_t 
                                         WHERE stcbent = g_enterprise AND stcbdocno = g_stcadocno_t
 
   
   #將key修正為調整後   
   UPDATE astt601_detail 
      #更新key欄位
      SET stcbdocno = g_stca_m.stcadocno
 
      #更新共用欄位
      
                                       
  
   #將資料塞回原table   
   INSERT INTO stcb_t SELECT * FROM astt601_detail
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = "reproduce"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN
   END IF
   
   #add-point:單身複製中1
   {<point name="detail_reproduce.body.table1.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt601_detail
   
   #add-point:單身複製後1
   {<point name="detail_reproduce.body.table1.a_insert"/>}
   #end add-point
 
   #add-point:單身複製前
   {<point name="detail_reproduce.body.table2.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = 
      "CREATE GLOBAL TEMPORARY TABLE astt601_detail AS ",
      "SELECT * FROM stcd_t "
   PREPARE repro_tbl2 FROM ls_sql
   EXECUTE repro_tbl2
   FREE repro_tbl2
      
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astt601_detail SELECT * FROM stcd_t
                                         WHERE stcdent = g_enterprise AND stcddocno = g_stcadocno_t
 
 
   #將key修正為調整後   
   UPDATE astt601_detail SET stcddocno = g_stca_m.stcadocno
 
  
   #將資料塞回原table   
   INSERT INTO stcd_t SELECT * FROM astt601_detail
   
   #add-point:單身複製中
   {<point name="detail_reproduce.body.table2.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt601_detail
   
   #add-point:單身複製後
   {<point name="detail_reproduce.body.table2.a_insert"/>}
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_stcadocno_t = g_stca_m.stcadocno
 
   
   DROP TABLE astt601_detail
   
END FUNCTION

{</section>}

{<section id="astt601.delete" >}
#+ 資料刪除
PRIVATE FUNCTION astt601_delete()
   {<Local define>}
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:delete段define
{<point name="delete.define"/>}
   #end add-point     
   
   IF g_stca_m.stcadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
 
    SELECT UNIQUE stca000,stcadocno,stcadocdt,stca005,stca001,stca002,stca003,stca004,stca009,stca010,stca011,stca012,stca027,stca021, 
        stca022,stca023,stca006,stca007,stca024,stca028,stca025,stca026,stca008,stcaacti,stca013,stca014,stca015,stca016,stca017, 
        stca018,stca019,stca020,stcasite,stcaunit,stcastus,stcaownid,stcaowndp,stcacrtid,stcacrtdp,stcacrtdt, 
        stcamodid,stcamoddt,stcacnfid,stcacnfdt
 INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001,g_stca_m.stca002, 
     g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca009,g_stca_m.stca010,g_stca_m.stca011,g_stca_m.stca012,g_stca_m.stca027,g_stca_m.stca021,g_stca_m.stca022,g_stca_m.stca023, 
     g_stca_m.stca006,g_stca_m.stca007,g_stca_m.stca024,g_stca_m.stca028,g_stca_m.stca025,g_stca_m.stca026,g_stca_m.stca008,g_stca_m.stcaacti, 
     g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca015,g_stca_m.stca016,g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019, 
     g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaowndp, 
     g_stca_m.stcacrtid,g_stca_m.stcacrtdp,g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamoddt, 
     g_stca_m.stcacnfid,g_stca_m.stcacnfdt
 FROM stca_t
 WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
   
   
 
   CALL astt601_show()
   
   CALL s_transaction_begin()
 
   OPEN astt601_cl USING g_enterprise,g_stca_m.stcadocno
 
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code =  STATUS
      LET g_errparam.extend = "OPEN astt601_cl:"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      CLOSE astt601_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   FETCH astt601_cl INTO g_stca_m.stca000,g_stca_m.stcadocno,g_stca_m.stcadocdt,g_stca_m.stca005,g_stca_m.stca001, 
       g_stca_m.stca002,g_stca_m.stca003,g_stca_m.stca004,g_stca_m.stca004_desc,g_stca_m.stca009, 
       g_stca_m.stca009_desc,g_stca_m.stca021,g_stca_m.stca021_desc,g_stca_m.stca022,g_stca_m.stca022_desc, 
       g_stca_m.stca023,g_stca_m.stca023_desc,g_stca_m.stca006,g_stca_m.stca006_desc,g_stca_m.stca007,g_stca_m.stca007_desc, 
       g_stca_m.stca024,g_stca_m.stca024_desc,g_stca_m.stca025,g_stca_m.stca025_desc,g_stca_m.stca008, 
       g_stca_m.stcaacti,g_stca_m.stca013,g_stca_m.stca014,g_stca_m.stca014_desc,g_stca_m.stca015,g_stca_m.stca015_desc, 
       g_stca_m.stca017,g_stca_m.stca018,g_stca_m.stca019,g_stca_m.stca020,g_stca_m.stcasite,g_stca_m.stcasite_desc, 
       g_stca_m.stcaunit,g_stca_m.stcastus,g_stca_m.stcaownid,g_stca_m.stcaownid_desc,g_stca_m.stcaowndp, 
       g_stca_m.stcaowndp_desc,g_stca_m.stcacrtid,g_stca_m.stcacrtid_desc,g_stca_m.stcacrtdp,g_stca_m.stcacrtdp_desc, 
       g_stca_m.stcacrtdt,g_stca_m.stcamodid,g_stca_m.stcamodid_desc,g_stca_m.stcamoddt,g_stca_m.stcacnfid, 
       g_stca_m.stcacnfid_desc,g_stca_m.stcacnfdt              #鎖住將被更改或取消的資料 

   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stca_m.stcadocno
      LET g_errparam.popup = FALSE
      CALL cl_err()
          #資料被他人LOCK
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #IF NOT cl_ask_delete() THEN             #確認一下
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前
{<point name="delete.head.b_delete" mark="Y"/>}
      #end add-point   
      
      INITIALIZE g_doc.* TO NULL         
      LET g_doc.column1 = "stcadocno"       
      LET g_doc.value1 = g_stca_m.stcadocno     
      CALL cl_doc_remove()  
  
      #資料備份
      LET g_stcadocno_t = g_stca_m.stcadocno
 
 
      DELETE FROM stca_t
       WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
 
       
      #add-point:單頭刪除中
{<point name="delete.head.m_delete"/>}
      #end add-point
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = g_stca_m.stcadocno
      LET g_errparam.popup = FALSE
      CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      
      #add-point:單頭刪除後
{<point name="delete.head.a_delete"/>}
      #end add-point
  
      #add-point:單身刪除前
{<point name="delete.body.b_delete" mark="Y"/>}
      #end add-point
      
      DELETE FROM stcb_t
       WHERE stcbent = g_enterprise AND stcbdocno = g_stca_m.stcadocno
 
 
      #add-point:單身刪除中
{<point name="delete.body.m_delete"/>}
      #end add-point
         
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcb_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF    
 
      #add-point:單身刪除後
{<point name="delete.body.a_delete"/>}
      #end add-point
      
            
                                                               
      #add-point:單身刪除前
{<point name="delete.body.b_delete2" mark="Y"/>}
      #end add-point
      DELETE FROM stcd_t
       WHERE stcdent = g_enterprise AND
             stcddocno = g_stca_m.stcadocno
      #add-point:單身刪除中
{<point name="delete.body.m_delete2"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcd_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF      
 
      #add-point:單身刪除後
{<point name="delete.body.a_delete2"/>}
      #end add-point
 
 
 
 
                                                               
      CLEAR FORM
      CALL g_stcb_d.clear() 
      CALL g_stcb2_d.clear()       
      CALL g_stcv_d.clear()
 
     
      CALL astt601_ui_browser_refresh()  
      CALL astt601_ui_headershow()  
      CALL astt601_ui_detailshow()
       
      IF g_browser_cnt > 0 THEN 
         CALL astt601_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
      ELSE
         LET g_wc = " 1=1"
         CALL astt601_browser_fill("F")
      END IF
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
      
 
 
 
   
   END IF
 
   CALL s_transaction_end('Y','0')
   
   CLOSE astt601_cl
 
   #流程通知預埋點-D
   CALL cl_flow_notify(g_stca_m.stcadocno,'D')
    
END FUNCTION

{</section>}

{<section id="astt601.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION astt601_b_fill()
   {<Local define>}
   DEFINE p_wc2      STRING
   {</Local define>}
   #add-point:b_fill段define
{<point name="b_fill.define"/>}
   #end add-point     
 
   CALL g_stcb_d.clear()    #g_stcb_d 單頭及單身 
   CALL g_stcb2_d.clear()
 
 
 
   #add-point:b_fill段sql_before
{<point name="b_fill.sql_before"/>}
   #end add-point
   
   #判斷是否填充
   IF astt601_fill_chk(1) THEN
   
      LET g_sql = "SELECT  UNIQUE stcbseq,stcb002,'',stcb003,stcb004,stcb005,stcb006,stcb007,stcb008, 
          '',stcb009,'',stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018,stcbunit, 
          stcbsite FROM stcb_t",   
                  " INNER JOIN stca_t ON stcadocno = stcbdocno ",
 
                  #"",
                  
                  "",
                  " WHERE stcbent=? AND stcbdocno=?"
      #add-point:b_fill段sql_before
{<point name="b_fill.body.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table1) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
      END IF
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY stcb_t.stcbseq"
      
      #add-point:單身填充控制
{<point name="b_fill.sql"/>}
      #end add-point
      
      PREPARE astt601_pb FROM g_sql
      DECLARE b_fill_cs CURSOR FOR astt601_pb
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
      OPEN b_fill_cs USING g_enterprise,g_stca_m.stcadocno
 
                                               
      FOREACH b_fill_cs INTO g_stcb_d[l_ac].stcbseq,g_stcb_d[l_ac].stcb002,g_stcb_d[l_ac].stcb002_desc,g_stcb_d[l_ac].stcb021, #160513-00033#7 add stcb021
          g_stcb_d[l_ac].stcb003,g_stcb_d[l_ac].stcb004,g_stcb_d[l_ac].stcb005,g_stcb_d[l_ac].stcb006, 
          g_stcb_d[l_ac].stcb007,g_stcb_d[l_ac].stcb008,g_stcb_d[l_ac].stcb008_desc,g_stcb_d[l_ac].stcb009, 
          g_stcb_d[l_ac].stcb009_desc,g_stcb_d[l_ac].stcb010,g_stcb_d[l_ac].stcb011,g_stcb_d[l_ac].stcb012, 
          g_stcb_d[l_ac].stcb013,g_stcb_d[l_ac].stcb014,g_stcb_d[l_ac].stcb015,g_stcb_d[l_ac].stcb016, 
          g_stcb_d[l_ac].stcb017,g_stcb_d[l_ac].stcb018,g_stcb_d[l_ac].stcb019,g_stcb_d[l_ac].stcb020,g_stcb_d[l_ac].stcbunit,g_stcb_d[l_ac].stcbsite 

         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
{<point name="b_fill.fill"/>}
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec AND g_error_show = 1 THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code =  9035
            LET g_errparam.extend =  ''
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
         
      END FOREACH
      LET g_error_show = 0
   
   END IF
   
   #判斷是否填充
   IF astt601_fill_chk(2) THEN
      LET g_sql = "SELECT  UNIQUE stcdseq,stcd002,'',stcd003,stcdunit,stcdsite FROM stcd_t",   
                  " INNER JOIN stca_t ON stcadocno = stcddocno ",
 
                  "",
                  
                  " WHERE stcdent=? AND stcddocno=?"   
      #add-point:b_fill段sql_before
{<point name="b_fill.body2.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table2) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
      END IF
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY stcd_t.stcdseq"
      
      #add-point:單身填充控制
{<point name="b_fill.sql2"/>}
      #end add-point
      
      PREPARE astt601_pb2 FROM g_sql
      DECLARE b_fill_cs2 CURSOR FOR astt601_pb2
      
      LET l_ac = 1
      
      OPEN b_fill_cs2 USING g_enterprise,g_stca_m.stcadocno
 
                                               
      FOREACH b_fill_cs2 INTO g_stcb2_d[l_ac].stcdseq,g_stcb2_d[l_ac].stcd002,g_stcb2_d[l_ac].stcd002_desc, 
          g_stcb2_d[l_ac].stcd003,g_stcb2_d[l_ac].stcdunit,g_stcb2_d[l_ac].stcdsite
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
{<point name="b_fill2.fill"/>}
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code =  9035
            LET g_errparam.extend =  ''
            LET g_errparam.popup = FALSE
            CALL cl_err()

            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
 
 
   
   #add-point:browser_fill段其他table處理
{<point name="browser_fill.other_fill"/>}
   #end add-point
   
   CALL g_stcb_d.deleteElement(g_stcb_d.getLength())
   CALL g_stcb2_d.deleteElement(g_stcb2_d.getLength())
 
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE astt601_pb
   FREE astt601_pb2
 
 
   
END FUNCTION

{</section>}

{<section id="astt601.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION astt601_delete_b(ps_table,ps_keys_bak,ps_page)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:delete_b段define
   {<point name="delete_b.define"/>}
   #end add-point     
 
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete" mark="Y"/>}
      #end add-point    
      DELETE FROM stcb_t
       WHERE stcbent = g_enterprise AND
         stcbdocno = ps_keys_bak[1] AND stcbseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = ""
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete"/>}
      #end add-point   
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete2" mark="Y"/>}
      #end add-point    
      DELETE FROM stcd_t
       WHERE stcdent = g_enterprise AND
         stcddocno = ps_keys_bak[1] AND stcdseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete2"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcd_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete2"/>}
      #end add-point    
   END IF
 
 
   
 
   
   #add-point:delete_b段other
   {<point name="delete_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astt601.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION astt601_insert_b(ps_table,ps_keys,ps_page)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   {</Local define>}
   #add-point:insert_b段define
{<point name="insert_b.define"/>}
   #end add-point     
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
{<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point 
      INSERT INTO stcb_t
                  (stcbent,
                   stcbdocno,
                   stcbseq
                   ,stcb002,stcb003,stcb004,stcb005,stcb006,stcb007,stcb008,stcb009,stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018,stcb019,stcb020,stcbunit,stcbsite,stcb021)   #160513-00033#7 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_stcb_d[g_detail_idx].stcb002,g_stcb_d[g_detail_idx].stcb003,g_stcb_d[g_detail_idx].stcb004, 
                       g_stcb_d[g_detail_idx].stcb005,g_stcb_d[g_detail_idx].stcb006,g_stcb_d[g_detail_idx].stcb007, 
                       g_stcb_d[g_detail_idx].stcb008,g_stcb_d[g_detail_idx].stcb009,g_stcb_d[g_detail_idx].stcb010, 
                       g_stcb_d[g_detail_idx].stcb011,g_stcb_d[g_detail_idx].stcb012,g_stcb_d[g_detail_idx].stcb013, 
                       g_stcb_d[g_detail_idx].stcb014,g_stcb_d[g_detail_idx].stcb015,g_stcb_d[g_detail_idx].stcb016, 
                       g_stcb_d[g_detail_idx].stcb017,g_stcb_d[g_detail_idx].stcb018,
                       g_stcb_d[g_detail_idx].stcb019,g_stcb_d[g_detail_idx].stcb020,g_stcb_d[g_detail_idx].stcbunit, 
                       g_stcb_d[g_detail_idx].stcbsite,g_stcb_d[g_detail_idx].stcb021)     #160513-00033#7 add atcb021
      #add-point:insert_b段資料新增中
{<point name="insert_b.m_insert"/>}
      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcb_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:insert_b段資料新增後
{<point name="insert_b.after_insert"/>}
      #end add-point 
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
{<point name="insert_b.before_insert2" mark="Y"/>}
      #end add-point 
      INSERT INTO stcd_t
                  (stcdent,
                   stcddocno,
                   stcdseq
                   ,stcd002,stcd003,stcdunit,stcdsite) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_stcb2_d[g_detail_idx].stcd002,g_stcb2_d[g_detail_idx].stcd003,g_stcb2_d[g_detail_idx].stcdunit, 
                       g_stcb2_d[g_detail_idx].stcdsite)
      #add-point:insert_b段資料新增中
{<point name="insert_b.m_insert2"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stcd_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:insert_b段資料新增後
{<point name="insert_b.after_insert2"/>}
      #end add-point
   END IF
 
 
   
 
   
   #add-point:insert_b段other
{<point name="insert_b.other"/>}
   #end add-point     
   
END FUNCTION

{</section>}

{<section id="astt601.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION astt601_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   {<Local define>}
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:update_b段define
{<point name="update_b.define"/>}
   #end add-point     
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stcb_t" THEN
      #add-point:update_b段修改前
{<point name="update_b.before_update" mark="Y"/>}
      #end add-point     
      UPDATE stcb_t 
         SET (stcbdocno,
              stcbseq
              ,stcb002,stcb003,stcb004,stcb005,stcb006,stcb007,stcb008,stcb009,stcb010,stcb011,stcb012,stcb013,stcb014,stcb015,stcb016,stcb017,stcb018,stcbunit,stcbsite,stcb021) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_stcb_d[g_detail_idx].stcb002,g_stcb_d[g_detail_idx].stcb003,g_stcb_d[g_detail_idx].stcb004, 
                  g_stcb_d[g_detail_idx].stcb005,g_stcb_d[g_detail_idx].stcb006,g_stcb_d[g_detail_idx].stcb007, 
                  g_stcb_d[g_detail_idx].stcb008,g_stcb_d[g_detail_idx].stcb009,g_stcb_d[g_detail_idx].stcb010, 
                  g_stcb_d[g_detail_idx].stcb011,g_stcb_d[g_detail_idx].stcb012,g_stcb_d[g_detail_idx].stcb013, 
                  g_stcb_d[g_detail_idx].stcb014,g_stcb_d[g_detail_idx].stcb015,g_stcb_d[g_detail_idx].stcb016, 
                  g_stcb_d[g_detail_idx].stcb017,g_stcb_d[g_detail_idx].stcb018,g_stcb_d[g_detail_idx].stcbunit, 
                  g_stcb_d[g_detail_idx].stcbsite,g_stcb_d[g_detail_idx].stcb021) 
         WHERE stcbent = g_enterprise AND stcbdocno = ps_keys_bak[1] AND stcbseq = ps_keys_bak[2]
      #add-point:update_b段修改中
{<point name="update_b.m_update"/>}
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = "std-00009"
            LET g_errparam.extend = "stcb_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "stcb_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()
  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
{<point name="update_b.after_update"/>}
      #end add-point  
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stcd_t" THEN
      #add-point:update_b段修改前
{<point name="update_b.before_update2" mark="Y"/>}
      #end add-point     
      UPDATE stcd_t 
         SET (stcddocno,
              stcdseq
              ,stcd002,stcd003,stcdunit,stcdsite) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_stcb2_d[g_detail_idx].stcd002,g_stcb2_d[g_detail_idx].stcd003,g_stcb2_d[g_detail_idx].stcdunit, 
                  g_stcb2_d[g_detail_idx].stcdsite) 
         WHERE stcdent = g_enterprise AND stcddocno = ps_keys_bak[1] AND stcdseq = ps_keys_bak[2]
      #add-point:update_b段修改中
{<point name="update_b.m_update2"/>}
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = "std-00009"
            LET g_errparam.extend = "stcd_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()

            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "stcd_t"
            LET g_errparam.popup = TRUE
            CALL cl_err()
  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
{<point name="update_b.after_update2"/>}
      #end add-point  
   END IF
 
 
   
 
   
 
   
   #add-point:update_b段other
{<point name="update_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astt601.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION astt601_lock_b(ps_table,ps_page)
   {<Local define>}
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:lock_b段define
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #先刷新資料
   #CALL astt601_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "stcb_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt601_bcl USING g_enterprise,
                                       g_stca_m.stcadocno,g_stcb_d[g_detail_idx].stcbseq
                                       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "astt601_bcl"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   
   END IF
                                    
   #鎖定整組table
   #LET ls_group = "'2',"
   #僅鎖定自身table
   LET ls_group = "stcd_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt601_bcl2 USING g_enterprise,
                                             g_stca_m.stcadocno,g_stcb2_d[g_detail_idx].stcdseq
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "astt601_bcl2"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   END IF
 
 
   
 
   
   #add-point:lock_b段other
   {<point name="lock_b.other"/>}
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION

{</section>}

{<section id="astt601.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION astt601_unlock_b(ps_table,ps_page)
   {<Local define>}
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:unlock_b段define
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt601_bcl
   END IF
   
   LET ls_group = "'2',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt601_bcl2
   END IF
 
 
   
 
 
   #add-point:unlock_b段other
   {<point name="unlock_b.other"/>}
   #end add-point  
 
END FUNCTION

{</section>}

{<section id="astt601.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION astt601_set_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1  
   {</Local define>}
   #add-point:set_entry段define
   {<point name="set_entry.define"/>}
   #end add-point       
 
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("stcadocno",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後
   {<point name="set_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="astt601.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION astt601_set_no_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_no_entry段define
   {<point name="set_no_entry.define"/>}
   #end add-point     
 
   IF p_cmd = 'u' THEN
      CALL cl_set_comp_entry("stcadocno",FALSE)
      #add-point:set_no_entry段欄位控制
      {<point name="set_no_entry.field_control"/>}
      #end add-point 
   END IF
   
   #add-point:set_no_entry段欄位控制後
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="astt601.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION astt601_set_entry_b(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define"/>}
   #end add-point     
   #add-point:set_entry_b段
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point  
END FUNCTION

{</section>}

{<section id="astt601.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION astt601_set_no_entry_b(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define"/>}
   #end add-point    
   #add-point:set_no_entry_b段
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point     
END FUNCTION

{</section>}

{<section id="astt601.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION astt601_default_search()
   {<Local define>}
   DEFINE li_idx  LIKE type_t.num5
   DEFINE li_cnt  LIKE type_t.num5
   DEFINE ls_wc   STRING
   {</Local define>}
   #add-point:default_search段define
   {<point name="default_search.define"/>}
   #end add-point  
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[1]) THEN
      LET ls_wc = ls_wc, " stcadocno = '", g_argv[1], "' AND "
   END IF
   
 
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
   ELSE
      IF cl_null(g_wc) THEN
         LET g_wc = " 1=1"
      END IF
   END IF
   
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point  
 
END FUNCTION

{</section>}

{<section id="astt601.state_change" >}
   #+ 此段落由子樣板a09產生
#+ 確認碼變更
PRIVATE FUNCTION astt601_statechange()
   {<Local define>}
   DEFINE lc_state LIKE type_t.chr5
   {</Local define>}
   #add-point:statechange段define
{<point name="statechange.define"/>}
   #end add-point  
   
   #add-point:statechange段開始前
{<point name="statechange.before"/>}
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_stca_m.stcadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN
   END IF
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         HIDE OPTION "approved"
         HIDE OPTION "rejection"
         CASE g_stca_m.stcastus
            WHEN "N"
               HIDE OPTION "open"
            WHEN "X"
               HIDE OPTION "invalid"
 
            WHEN "Y"
               HIDE OPTION "confirmed"
 
            WHEN "A"
               HIDE OPTION "approved"
            WHEN "D"
               HIDE OPTION "withdraw"
            WHEN "R"
               HIDE OPTION "rejection"
            WHEN "W"
               HIDE OPTION "signing"
            
         END CASE
     
      #add-point:menu前
{<point name="statechange.before_menu"/>}
      #end add-point
      
      ON ACTION open
         LET lc_state = "N"
         #add-point:action控制
{<point name="statechange.open"/>}
         #end add-point
         EXIT MENU
      
      
      #ON ACTION invalid
      #   LET lc_state = "X"
      #   #add-point:action控制
{<point name="statechange.invalid"/>}
      #   #end add-point
      #   EXIT MENU
      #160628-00032#1 160629 by sakura mark(E)
 
      ON ACTION confirmed
         LET lc_state = "Y"
         #add-point:action控制
{<point name="statechange.confirmed"/>}
         #end add-point
         EXIT MENU
 
      #提交
      ON ACTION signing
         IF cl_auth_chk_act("signing") THEN
       IF NOT astt601_send() THEN
         RETURN
       END IF
         END IF
         LET lc_state = ''  #因為_send()已有執行update動作
         EXIT MENU
 
      #抽單
      ON ACTION withdraw
         IF cl_auth_chk_act("withdraw") THEN
            IF NOT astt601_draw_out() THEN
               RETURN
            END IF
         END IF
         LET lc_state = ''   #因為_draw_out()已有執行update動作
         EXIT MENU 
      
      
      
      #add-point:stus控制
{<point name="statechange.more_control"/>}
      #end add-point
      
   END MENU
   
   IF (lc_state <> "N" 
      AND lc_state <> "X"
 
      AND lc_state <> "Y"
      AND lc_state <> "A"
      AND lc_state <> "D"
      AND lc_state <> "R"
      AND lc_state <> "W"
 
      ) OR 
      cl_null(lc_state) THEN
      RETURN
   END IF
   
   #add-point:stus修改前
{<point name="statechange.b_update"/>}
   #end add-point
      
   UPDATE stca_t SET stcastus = lc_state 
    WHERE stcaent = g_enterprise AND stcadocno = g_stca_m.stcadocno
 
  
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()

   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
 
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
 
         
      END CASE
      LET g_stca_m.stcastus = lc_state
      DISPLAY BY NAME g_stca_m.stcastus
   END IF
 
   #add-point:stus修改後
{<point name="statechange.a_update"/>}
   #end add-point
 
   #add-point:statechange段結束前
{<point name="statechange.after"/>}
   #end add-point  
 
END FUNCTION
 
 

{</section>}

{<section id="astt601.idx_chk" >}
#+ 單身筆數變更
PRIVATE FUNCTION astt601_idx_chk()
   #add-point:idx_chk段define
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_stcb_d.getLength() THEN
         LET g_detail_idx = g_stcb_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_stcb_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_stcb_d.getLength() TO FORMONLY.cnt
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx > g_stcb2_d.getLength() THEN
         LET g_detail_idx = g_stcb2_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_stcb2_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_stcb2_d.getLength() TO FORMONLY.cnt
   END IF
 
 
   
   #add-point:idx_chk段other
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="astt601.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION astt601_b_fill2(pi_idx)
   {<Local define>}
   DEFINE pi_idx          LIKE type_t.num5
   DEFINE li_ac           LIKE type_t.num5
   DEFINE ls_chk          LIKE type_t.chr1
   {</Local define>}
   #add-point:b_fill2段define
   {<point name="b_fill2.define"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
 
      
   #add-point:單身填充後
   {<point name="b_fill2.after_fill" />}
   #end add-point
    
   LET l_ac = li_ac
   
   CALL astt601_detail_show()
   
END FUNCTION

{</section>}

{<section id="astt601.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION astt601_fill_chk(ps_idx)
   {<Local define>}
   DEFINE ps_idx        LIKE type_t.chr10
   {</Local define>}
   #add-point:fill_chk段define
   {<point name="fill_chk.define"/>}
   #end add-point
   
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
      (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1') THEN
      #add-point:fill_chk段define
      {<point name="fill_chk.other_chk"/>}
      #end add-point
      RETURN TRUE
   END IF
   
   #第一單身
   IF ps_idx = 1 AND
      ((NOT cl_null(g_wc2_table1) AND g_wc2_table1.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
   
   #根據wc判定是否需要填充
   IF ps_idx = 2 AND
      ((NOT cl_null(g_wc2_table2) AND g_wc2_table2.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
 
 
 
   RETURN FALSE
 
END FUNCTION

{</section>}

{<section id="astt601.signature" >}
   

{</section>}

{<section id="astt601.set_pk_array" >}


{</section>}

{<section id="astt601.other_dialog" readonly="Y" >}
 

{</section>}

{<section id="astt601.other_function" readonly="Y" >}
   
{<point name="other.function"/>}

{</section>}

