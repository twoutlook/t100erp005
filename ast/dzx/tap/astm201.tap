<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="astm201" std_prog="astm201" erpver="1.0" module="AST" ver="6" env="s" zone="t10prd" booking="Y" type="M" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="F" status="u"/>
    <free_style value="N" status="u"/>
    <start_arg value="" status="u"/>
  </other>
  <point name="construct.c.page1.stah003" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_stae001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stah003  #顯示到畫面上
               #DISPLAY g_qryparam.return2 TO stael003 #說明 
               #DISPLAY g_qryparam.return3 TO stae001 #費用編號 

            NEXT FIELD stah003                     #返回原欄位

]]>
  </point>
  <point name="input.c.stag007" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag007             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_site #

            CALL q_oodb002_1()                                #呼叫開窗

            LET g_stag_m.stag007 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag007 TO stag007              #顯示到畫面上
            CALL astm201_stag007_ref()
            NEXT FIELD stag007                          #返回原欄位

]]>
  </point>
  <point name="input.c.stag006" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag006             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_site
            CALL q_ooaj002_1()                                #呼叫開窗

            LET g_stag_m.stag006 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag006 TO stag006              #顯示到畫面上
            CALL astm201_stag006_ref()
            NEXT FIELD stag006                          #返回原欄位

]]>
  </point>
  <point name="input.c.stag005" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag005             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "2060" #

            CALL q_oocq002()                                #呼叫開窗

            LET g_stag_m.stag005 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag005 TO stag005              #顯示到畫面上
            CALL astm201_stag005_ref()
            NEXT FIELD stag005                          #返回原欄位

]]>
  </point>
  <point name="input.a.stag001" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a05產生
            IF  NOT cl_null(g_stag_m.stag001) THEN 
               IF p_cmd = 'a' OR ( p_cmd = 'u' AND ( p_cmd = 'u' AND (g_stag_m.stag001 != g_stag001_t ))) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stag_t WHERE "||"stagent = '" ||g_enterprise|| "' AND "||"stag001 = '"||g_stag_m.stag001 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF


]]>
  </point>
  <point name="input.a.page2.stai003" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  NOT cl_null(g_stag_m.stag001) AND NOT cl_null(g_stah2_d[l_ac].stai001) AND NOT cl_null(g_stah2_d[l_ac].stai002) AND NOT cl_null(g_stah2_d[l_ac].stai003) THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND ( l_cmd = 'u' AND (g_stag_m.stag001 != g_stag001_t OR g_stah2_d[l_ac].stai001 != g_stah2_d_t.stai001 OR g_stah2_d[l_ac].stai002 != g_stah2_d_t.stai002 OR g_stah2_d[l_ac].stai003 != g_stah2_d_t.stai003))) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stai_t WHERE "||"staient = '" ||g_enterprise|| "' AND "||"stai001 = '"||g_stag_m.stag001 ||"' AND "|| "stai002 = '"||g_stah2_d[l_ac].stai001 ||"' AND "|| "stai003 = '"||g_stah2_d[l_ac].stai002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page2.stai002" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  NOT cl_null(g_stag_m.stag001) AND NOT cl_null(g_stah2_d[l_ac].stai001) AND NOT cl_null(g_stah2_d[l_ac].stai002) AND NOT cl_null(g_stah2_d[l_ac].stai003) THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND ( l_cmd = 'u' AND (g_stag_m.stag001 != g_stag001_t OR g_stah2_d[l_ac].stai001 != g_stah2_d_t.stai001 OR g_stah2_d[l_ac].stai002 != g_stah2_d_t.stai002 OR g_stah2_d[l_ac].stai003 != g_stah2_d_t.stai003))) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stai_t WHERE "||"staient = '" ||g_enterprise|| "' AND "||"stai001 = '"||g_stag_m.stag001 ||"' AND "|| "stai002 = '"||g_stah2_d[l_ac].stai001 ||"' AND "|| "stai003 = '"||g_stah2_d[l_ac].stai002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page2.stai001" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  NOT cl_null(g_stag_m.stag001) AND NOT cl_null(g_stah2_d[l_ac].stai001) AND NOT cl_null(g_stah2_d[l_ac].stai002) AND NOT cl_null(g_stah2_d[l_ac].stai003) THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND ( l_cmd = 'u' AND (g_stag_m.stag001 != g_stag001_t OR g_stah2_d[l_ac].stai001 != g_stah2_d_t.stai001 OR g_stah2_d[l_ac].stai002 != g_stah2_d_t.stai002 OR g_stah2_d[l_ac].stai003 != g_stah2_d_t.stai003))) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stai_t WHERE "||"staient = '" ||g_enterprise|| "' AND "||"stai001 = '"||g_stag_m.stag001 ||"' AND "|| "stai002 = '"||g_stah2_d[l_ac].stai001 ||"' AND "|| "stai003 = '"||g_stah2_d[l_ac].stai002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page1.stah002" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a05產生
            IF  NOT cl_null(g_stag_m.stag001) AND NOT cl_null(g_stah_d[l_ac].stah002) THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND ( l_cmd = 'u' AND (g_stag_m.stag001 != g_stag001_t OR g_stah_d[l_ac].stah002 != g_stah_d_t.stah002))) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stah_t WHERE "||"stahent = '" ||g_enterprise|| "' AND "||"stah001 = '"||g_stag_m.stag001 ||"' AND "|| "stah002 = '"||g_stah_d[l_ac].stah002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
           
            LET g_stah_d_t.stah002 = g_stah_d[l_ac].stah002
]]>
  </point>
  <point name="construct.c.stagownid" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagownid  #顯示到畫面上

            NEXT FIELD stagownid                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagowndp" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagowndp  #顯示到畫面上

            NEXT FIELD stagowndp                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagmodid" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagmodid  #顯示到畫面上

            NEXT FIELD stagmodid                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagcrtid" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagcrtid  #顯示到畫面上

            NEXT FIELD stagcrtid                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagcrtdp" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagcrtdp  #顯示到畫面上

            NEXT FIELD stagcrtdp                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagcnfid" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stagcnfid  #顯示到畫面上

            NEXT FIELD stagcnfid                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stag007" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
			LET g_qryparam.arg1 = g_site
            CALL q_oodb002_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag007  #顯示到畫面上

            NEXT FIELD stag007                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stag006" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_aooi001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag006  #顯示到畫面上

            NEXT FIELD stag006                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stag005" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
			LET g_qryparam.arg1 = "2060"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag005  #顯示到畫面上

            NEXT FIELD stag005                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stag004" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_staa001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag004  #顯示到畫面上

            NEXT FIELD stag004                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stag001" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_stag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag001  #顯示到畫面上
               #DISPLAY g_qryparam.return2 TO stagl003 #說明 

            NEXT FIELD stag001                     #返回原欄位

]]>
  </point>
  <point name="function.astm201_stag004_chk" order="1" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+  檢查結算方式
PUBLIC FUNCTION astm201_stag004_chk(p_staa001)
DEFINE p_staa001  LIKE staa_t.staa001
DEFINE l_staastus LIKE staa_t.staastus

   SELECT staastus INTO l_staastus FROM staa_t 
     WHERE staaent = g_enterprise AND staa001 = p_staa001
     
   IF STATUS = 100 OR cl_null(l_staastus) THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00003'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   ELSE
      IF l_staastus = 'N' THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'ast-00004'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   END IF
   RETURN TRUE
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag005_chk" order="2" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+ 檢查結算類別
PUBLIC FUNCTION astm201_stag005_chk(p_oocq002)
DEFINE p_oocq002  LIKE oocq_t.oocq002
DEFINE l_oocqstus LIKE oocq_t.oocqstus

   SELECT oocqstus INTO l_oocqstus FROM oocq_t
    WHERE oocqent =  g_enterprise AND oocq001 = '2060' AND oocq002 = p_oocq002
    
   IF STATUS = 100 OR cl_null(l_oocqstus) THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00005'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   ELSE
      IF l_oocqstus = 'N' THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.code = 'ast-00006'
          LET g_errparam.extend = ''
          LET g_errparam.popup = TRUE
          CALL cl_err()

          RETURN FALSE
      END IF
   END IF
   
  
   RETURN TRUE
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag008_chk" order="3" ver="4" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+ 檢查營運據點
PUBLIC FUNCTION astm201_stag008_chk(p_ooea001)
 DEFINE p_ooea001   LIKE ooea_t.ooea001
#   DEFINE l_ooeastus  LIKE ooea_t.ooeastus
#   
#   SELECT ooeastus INTO l_ooeastus FROM ooea_t 
#    WHERE ooeaent = g_enterprise  AND ooea001 = p_ooea001  AND ooea004 = 'Y'
#    
#   IF status = 100 THEN
#      INITIALIZE g_errparam TO NULL
#      LET g_errparam.code = 'aoo-00163'
#      LET g_errparam.extend = ''
#      LET g_errparam.popup = FALSE
#      CALL cl_err()
#
#      RETURN FALSE
#   END IF  
#   IF l_ooeastus = 'N' THEN 
#      INITIALIZE g_errparam TO NULL
#      LET g_errparam.code = 'aoo-00012'
#      LET g_errparam.extend = ''
#      LET g_errparam.popup = FALSE
#      CALL cl_err()
#
#      RETURN FALSE
#   END IF
#   RETURN TRUE 
END FUNCTION]]>
  </point>
  <point name="function.astm201_stah003_chk" order="4" ver="4" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+ 費用編號檢查
PUBLIC FUNCTION astm201_stah003_chk(p_stae001)
DEFINE p_stae001  LIKE stae_t.stae001
DEFINE l_staestus LIKE stae_t.staestus

   #SELECT staestus INTO l_staestus FROM stae_t
   # WHERE stae001 = p_stae001 AND staeent = g_enterprise
   #
   #IF STATUS = 100 OR  cl_null(l_staestus) THEN
   #   INITIALIZE g_errparam TO NULL
   #   LET g_errparam.code = 'ast-00001'
   #   LET g_errparam.extend = ''
   #   LET g_errparam.popup = TRUE
   #   CALL cl_err()
   #
   #   RETURN FALSE
   #ELSE
   #   IF l_staestus = 'N' THEN
   #      INITIALIZE g_errparam TO NULL
   #      LET g_errparam.code = 'ast-00002'
   #      LET g_errparam.extend = ''
   #      LET g_errparam.popup = TRUE
   #      CALL cl_err()
   #
   #      RETURN FALSE
   #   END IF
   #END IF
   INITIALIZE g_chkparam.* TO NULL
   LET g_errshow = '1'
   LET g_chkparam.arg1 = p_stae001
   IF g_stag_m.stag002 NOT MATCHES "[1-5]" THEN
      IF NOT cl_chk_exist("v_stae001_1") THEN
         RETURN FALSE
      END IF
   ELSE
      IF NOT cl_chk_exist("v_stae001") THEN
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE
    
END FUNCTION]]>
  </point>
  <point name="function.astm201_idx_chk2" order="5" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PRIVATE FUNCTION astm201_idx_chk2()
 IF g_current_page = 2 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx2 > g_stai_d.getLength() THEN
         LET g_detail_idx2 = g_stai_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_stai_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_stai_d.getLength() TO FORMONLY.cnt
   END IF
END FUNCTION]]>
  </point>
  <point name="function.astm201_b2_fill" order="6" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_b2_fill()
 DEFINE p_wc2      STRING
 DEFINE l_a      LIKE type_t.num5
 
   CALL g_stai_d.clear()   
   
   LET g_sql = "SELECT  UNIQUE stai003,stai004,stai005,stai006 FROM stai_t",    
               "",
               " WHERE staient=? AND stai001=? AND stai002 = ?"
 
   IF NOT cl_null(g_wc2_table2) THEN
      LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table2 CLIPPED
   END IF
 
   LET g_sql = g_sql, " ORDER BY stai_t.stai001,stai_t.stai002,stai_t.stai003"
 
   #add-point:單身填充控制

   #end add-point
   
   PREPARE astm201_pb2 FROM g_sql
   DECLARE b_fill_cs2 CURSOR FOR astm201_pb2
 
   LET g_cnt = l_a
   LET l_a = 1
   IF cl_null(l_ac) OR l_ac = 0 THEN
      LET l_ac = 1
   END IF
   OPEN b_fill_cs2 USING g_enterprise,g_stag_m.stag001,g_stah_d[l_ac].stah002

                                            
   FOREACH b_fill_cs2 INTO g_stai_d[l_a].stai003,g_stai_d[l_a].stai004,g_stai_d[l_a].stai005,g_stai_d[l_a].stai006
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         EXIT FOREACH
      END IF
     
      #add-point:b_fill段資料填充

      #end add-point
 
      LET l_a = l_a + 1
      IF l_a > g_max_rec AND g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code =  9035
         LET g_errparam.extend =  ''
         LET g_errparam.popup = TRUE
         CALL cl_err()

         EXIT FOREACH
      END IF
      
   END FOREACH
   LET g_error_show = 0
   
   CALL g_stai_d.deleteElement(g_stai_d.getLength())

   LET l_a = g_cnt
   LET g_cnt = 0  
   
   FREE astm201_pb2
END FUNCTION]]>
  </point>
  <point name="function.astm201_reflesh" order="7" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_reflesh()
    DISPLAY ARRAY g_stai_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b2)
       BEFORE DISPLAY
         EXIT DISPLAY
    END DISPLAY
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag007_chk" order="8" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_stag007_chk(p_stag007)
DEFINE  p_stag007    LIKE stag_t.stag007
DEFINE  l_oodcstus   LIKE oodc_t.oodcstus

   LET g_errno = ''
   SELECT oodbstus INTO l_oodcstus
     FROM oodb_t,ooef_t
    WHERE oodbent = g_enterprise AND oodb001 = ooef019 AND oodb002 = p_stag007 AND oodb004 = '1'
      AND ooefent = g_enterprise AND ooef001 = g_site
   CASE
      WHEN SQLCA.sqlcode = 100 LET g_errno = 'ast-00009' #發票稅目不存在
                               LET g_stag_m.stag007_desc = ''
      WHEN l_oodcstus <> 'Y'   LET g_errno = 'ast-00010' #發票稅目已無效
                               LET  g_stag_m.stag007_desc = ''
   END CASE
   IF cl_null(g_errno) THEN
      RETURN TRUE
   ELSE
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = g_errno
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF

END FUNCTION]]>
  </point>
  <point name="function.astm201_stag006_chk" order="9" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_stag006_chk(p_stag006)
DEFINE p_stag006  LIKE stag_t.stag006
  
   LET g_errshow = '1'
   INITIALIZE g_chkparam.* TO NULL
   LET g_chkparam.arg1 = g_site
   LET g_chkparam.arg2 = p_stag006
   IF NOT cl_chk_exist("v_ooaj002") THEN
      RETURN FALSE
   END IF
   RETURN TRUE

END FUNCTION]]>
  </point>
  <point name="function.astm201_set_no_required_b" order="10" ver="6" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_set_no_required_b(p_cmd)
 DEFINE p_cmd   LIKE type_t.chr1   
   DEFINE l_n     LIKE type_t.num5
   DEFINE l_staf003 LIKE staf_t.staf003
   DEFINE l_staf004 LIKE staf_t.staf004
   DEFINE l_staf005 LIKE staf_t.staf005


   CALL astm201_init_required(p_cmd)
   IF NOT cl_null(g_stah_d[l_ac].stah003) THEN
      #檢查費用編號+經營方式是否存在asti204
      
      SELECT COUNT(*) INTO l_n FROM staf_t
       WHERE stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
      IF l_n > 0 THEN
         DECLARE sel_staf_nq CURSOR FOR 
          SELECT staf003,staf004,staf005 FROM staf_t
           WHERE  stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
         FOREACH sel_staf_nq INTO l_staf003,l_staf004,l_staf005
            LET l_staf003 = cl_str_replace(l_staf003,"stao","stah")
            IF l_staf003 = "stah017" OR l_staf003 = "stah018" THEN
               CONTINUE FOREACH
            END IF
            
            IF l_staf005 = 'N' THEN
               CALL cl_set_comp_required(l_staf003,FALSE)
            END IF
         END FOREACH 
      
      ELSE
          #合同相關欄位必輸控管
          IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
             IF g_stah_d[l_ac].stah016 <> '1' THEN      
                LET g_stah_d[l_ac].stah012 = ''
                CALL cl_set_comp_required('stah012',FALSE)
             END IF
          ELSE                                    #固定
             CALL cl_set_comp_required('stah010',FALSE) 
             LET g_stah_d[l_ac].stah012 = ''
             CALL cl_set_comp_required('stah012',FALSE) 
          END IF   
          IF g_stah_d[l_ac].stah013 = '1' THEN    #保底
             CALL cl_set_comp_required('stah014,stah015',FALSE) 
          END IF
      END IF
   ELSE
      #合同相關欄位必輸控管
       IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
          IF g_stah_d[l_ac].stah016 <> '1' THEN      
             LET g_stah_d[l_ac].stah012 = ''
             CALL cl_set_comp_required('stah012',FALSE)
          END IF
       ELSE                                    #固定
          CALL cl_set_comp_required('stah010',FALSE) 
          LET g_stah_d[l_ac].stah012 = ''
          CALL cl_set_comp_required('stah012',FALSE) 
       END IF   
       IF g_stah_d[l_ac].stah013 = '1' THEN    #保底
          CALL cl_set_comp_required('stah014,stah015',FALSE) 
       END IF   
   END IF  
 
END FUNCTION]]>
  </point>
  <point name="function.astm201_set_required_b" order="11" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_set_required_b(p_cmd)
DEFINE p_cmd   LIKE type_t.chr1   
DEFINE l_n     LIKE type_t.num5
DEFINE l_staf003 LIKE staf_t.staf003
DEFINE l_staf004 LIKE staf_t.staf004
DEFINE l_staf005 LIKE staf_t.staf005

  
   IF NOT cl_null(g_stah_d[l_ac].stah003) THEN
      #檢查費用編號+經營方式是否存在asti204
      
      SELECT COUNT(*) INTO l_n FROM staf_t
       WHERE stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
      IF l_n > 0 THEN
         DECLARE sel_staf_q CURSOR FOR 
          SELECT staf003,staf004,staf005 FROM staf_t
           WHERE  stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
         FOREACH sel_staf_q INTO l_staf003,l_staf004,l_staf005
            LET l_staf003 = cl_str_replace(l_staf003,"stao","stah")
            IF l_staf003 = "stah017" OR l_staf003 = "stah018" THEN
               CONTINUE FOREACH
            END IF
            IF l_staf005 = 'Y' THEN
               CALL cl_set_comp_required(l_staf003,TRUE)
            END IF
         END FOREACH 
      ELSE
          #合同相關欄位必輸控管
         IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
            CALL cl_set_comp_required('stah010',TRUE)
            IF g_stah_d[l_ac].stah016 = '1' THEN      
               CALL cl_set_comp_required('stah012',TRUE) 
            END IF
         ELSE                                    #固定
            CALL cl_set_comp_required('stah011',TRUE)
         END IF   
         IF g_stah_d[l_ac].stah013 <> '1' THEN    #保底
            CALL cl_set_comp_required('stah014,stah015',TRUE)
         END IF       
      END IF 
   ELSE
       #合同相關欄位必輸控管
       IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
          CALL cl_set_comp_required('stah010',TRUE)
          IF g_stah_d[l_ac].stah016 = '1' THEN      
             CALL cl_set_comp_required('stah012',TRUE) 
          END IF
       ELSE                                    #固定
          CALL cl_set_comp_required('stah011',TRUE)
       END IF   
       IF g_stah_d[l_ac].stah013 <> '1' THEN    #保底
          CALL cl_set_comp_required('stah014,stah015',TRUE)
       END IF   
   END IF 
 
END FUNCTION]]>
  </point>
  <point name="function.astm201_stah009_chk" order="12" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_stah009_chk(p_stab001)
DEFINE p_stab001   LIKE stab_t.stab001
DEFINE l_stabstus  LIKE stab_t.stabstus
DEFINE l_n         LIKE type_t.num5
  #SELECT stabstus INTO l_stabstus FROM stab_t
  # WHERE stabent = g_enterprise AND stab001 = p_stab001
  # 
  #IF STATUS = 100 OR cl_null(l_stabstus) THEN
  #   INITIALIZE g_errparam TO NULL
  #   LET g_errparam.code = 'ast-00014'
  #   LET g_errparam.extend = ''
  #   LET g_errparam.popup = TRUE
  #   CALL cl_err()
  #
  #   RETURN FALSE
  #ELSE
  #   IF l_stabstus = 'N' THEN
  #      INITIALIZE g_errparam TO NULL
  #      LET g_errparam.code = 'ast-00015'
  #      LET g_errparam.extend = ''
  #      LET g_errparam.popup = TRUE
  #      CALL cl_err()
  #
  #      RETURN FALSE 
  #   END IF
  #END IF
   LET g_errshow = '1'
   INITIALIZE g_chkparam.* TO NULL
   LET g_chkparam.arg1 = p_stab001
   IF g_stag_m.stag002  MATCHES "[1-5]" THEN
      IF NOT cl_chk_exist("v_stab001") THEN
         RETURN FALSE
      END IF
   ELSE
      IF NOT cl_chk_exist("v_stab001_1") THEN
         RETURN FALSE
      END IF
   END IF
   
    SELECT COUNT(*) INTO l_n FROM stab_t LEFT OUTER JOIN stat_t ON stabent = statent AND stab001 = stat003
     WHERE  stabent = 99 AND stab001= p_stab001 AND stat001 = g_stag_m.stag002 AND stat002 = g_stag_m.stag005 
   IF l_n = 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00189'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF
   RETURN TRUE
   
END FUNCTION]]>
  </point>
  <point name="function.astm201_default" order="13" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#+
PUBLIC FUNCTION astm201_default(p_stag002,p_stah003)
DEFINE p_stag002 LIKE stag_t.stag002
DEFINE p_stah003 LIKE stah_t.stah003
DEFINE l_staf003 LIKE staf_t.staf003
DEFINE l_staf006 LIKE staf_t.staf006

   DECLARE sel_staf_d CURSOR FOR 
     SELECT staf003,staf006 FROM staf_t
      WHERE  stafent = g_enterprise AND staf001= p_stah003 AND staf002 = p_stag002
        AND stafstus = 'Y'
   FOREACH sel_staf_d INTO l_staf003,l_staf006
      LET l_staf003 = cl_str_replace(l_staf003,"stao","stah")
      CASE l_staf003
          WHEN 'stah004'
             LET g_stah_d[l_ac].stah004 = l_staf006
          WHEN 'stah005'
             IF NOT cl_null(l_staf006) THEN
                LET g_stah_d[l_ac].stah005 = l_staf006
             END IF
          WHEN 'stah006'
             LET g_stah_d[l_ac].stah006 = l_staf006
          WHEN 'stah007'
             LET g_stah_d[l_ac].stah007 = l_staf006
          WHEN 'stah008'
             LET g_stah_d[l_ac].stah008 = l_staf006
          WHEN 'stah009'
             LET g_stah_d[l_ac].stah009 = l_staf006
             CALL astm201_stah009_ref()
          WHEN 'stah010'
             LET g_stah_d[l_ac].stah010 = l_staf006
             CALL astm201_stah010_ref()
          WHEN 'stah011'
             LET g_stah_d[l_ac].stah011 = l_staf006
          WHEN 'stah012'
             LET g_stah_d[l_ac].stah012 = l_staf006
          WHEN 'stah013'
             LET g_stah_d[l_ac].stah013 = l_staf006
          WHEN 'stah014'
             LET g_stah_d[l_ac].stah014 = l_staf006
          WHEN 'stah015'
             LET g_stah_d[l_ac].stah015 = l_staf006
          WHEN 'stah016'
             LET g_stah_d[l_ac].stah016 = l_staf006
       
      END CASE

   END FOREACH 
   DISPLAY BY NAME g_stah_d[l_ac].stah004,g_stah_d[l_ac].stah005,g_stah_d[l_ac].stah006,
                  g_stah_d[l_ac].stah007,g_stah_d[l_ac].stah008,g_stah_d[l_ac].stah009,g_stah_d[l_ac].stah009_desc,
                  g_stah_d[l_ac].stah010,g_stah_d[l_ac].stah010_desc,g_stah_d[l_ac].stah011,g_stah_d[l_ac].stah012,
                  g_stah_d[l_ac].stah013,g_stah_d[l_ac].stah014,g_stah_d[l_ac].stah015,
                  g_stah_d[l_ac].stah016
                  
END FUNCTION]]>
  </point>
  <point name="function.astm201_stah009_ref" order="14" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stah009_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stah_d[l_ac].stah009
   CALL ap_ref_array2(g_ref_fields,"SELECT stabl003 FROM stabl_t WHERE stablent='"||g_enterprise||"' AND stabl001=? AND stabl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stah_d[l_ac].stah009_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stah_d[l_ac].stah009_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stah010_ref" order="15" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stah010_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stah_d[l_ac].stah010
   CALL ap_ref_array2(g_ref_fields,"SELECT stabl003 FROM stabl_t WHERE stablent='"||g_enterprise||"' AND stabl001=? AND stabl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stah_d[l_ac].stah010_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stah_d[l_ac].stah010_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stah003_ref" order="16" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stah003_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stah_d[l_ac].stah003
   CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stah_d[l_ac].stah003_desc = '', g_rtn_fields[1] , '' 
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag004_ref" order="17" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag004_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stag_m.stag004
   CALL ap_ref_array2(g_ref_fields,"SELECT staal003 FROM staal_t WHERE staalent='"||g_enterprise||"' AND staal001=? AND staal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stag_m.stag004_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stag_m.stag004_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag005_ref" order="18" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag005_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stag_m.stag005
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001 = '2060' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stag_m.stag005_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stag_m.stag005_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag006_ref" order="19" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag006_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stag_m.stag006
   CALL ap_ref_array2(g_ref_fields,"SELECT ooail003 FROM ooail_t WHERE ooailent='"||g_enterprise||"' AND ooail001=? AND ooail002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stag_m.stag006_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stag_m.stag006_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag007_ref" order="20" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag007_ref()
   SELECT oodbl004 INTO g_stag_m.stag007_desc
    FROM oodbl_t,ooef_t
   WHERE oodblent = g_enterprise AND oodbl001 = ooef019 
     AND oodbl002 = g_stag_m.stag007  AND oodbl003 = g_dlang
     AND ooefent = g_enterprise AND ooef001 = g_site
   DISPLAY BY NAME g_stag_m.stag007_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag008_ref" order="21" ver="4" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag008_ref()
#   INITIALIZE g_ref_fields TO NULL
#   LET g_ref_fields[1] = g_stag_m.stag008
#   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
#   LET g_stag_m.stag008_desc = '', g_rtn_fields[1] , ''
#   DISPLAY BY NAME g_stag_m.stag008_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_init_required" order="22" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_init_required(p_cmd)
DEFINE p_cmd   LIKE type_t.chr1
   CALL cl_set_comp_required("stah005,stah006,stah007,stah008,stah009,stah010,stah011,stah013,stah016",TRUE)
   CALL cl_set_comp_required("stah004,stah012,stah014,stah015",FALSE)
END FUNCTION]]>
  </point>
  <point name="function.astm201_init_entry" order="23" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_init_entry(p_cmd)
DEFINE p_cmd   LIKE type_t.chr1

   CALL cl_set_comp_entry("stah004,stah005,stah006,stah007,stah008,stah009,stah010,stah011,stah012,stah013,stah014,stah015,stah016",TRUE)
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag003_ref" order="24" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag003_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stag_m.stag003
   CALL ap_ref_array2(g_ref_fields,"SELECT ooibl004 FROM ooibl_t WHERE ooiblent='"||g_enterprise||"' AND ooibl002=? AND ooibl003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stag_m.stag003_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stag_m.stag003_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stag003_chk" order="25" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stag003_chk()
   INITIALIZE g_chkparam.* TO NULL
   LET g_errshow = '1'
   LET g_chkparam.arg1 = g_stag_m.stag003
   IF g_stag_m.stag002 MATCHES "[1-5]" THEN
      IF NOT cl_chk_exist("v_ooib002") THEN
         RETURN FALSE
      END IF
   ELSE
      IF NOT cl_chk_exist("v_ooib002_1") THEN
         RETURN FALSE
      END IF
   END IF
   RETURN TRUE
END FUNCTION]]>
  </point>
  <point name="function.astm201_b_chk" order="26" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_b_chk()
DEFINE l_n1        LIKE type_t.num5
DEFINE l_n2        LIKE type_t.num5

#单身条件基准 和单头的结算类型不符合就报错 
   SELECT COUNT(*) INTO l_n1 FROM stah_t 
    WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001 AND stah009 IS NOT NULL
      AND  NOT EXISTS (SELECT 1 FROM stab_t LEFT OUTER JOIN stat_t ON stabent = statent AND stab001 = stat003
              WHERE stab001 = stah009 AND stat001 = g_stag_m.stag002 AND stat002 = g_stag_m.stag005)
              
              
   SELECT COUNT(*) INTO l_n2 FROM stah_t 
    WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001 AND stah010 IS NOT NULL
      AND  NOT EXISTS (SELECT 1 FROM stab_t LEFT OUTER JOIN stat_t ON stabent = statent AND stab001 = stat003
              WHERE stab001 = stah010 AND stat001 = g_stag_m.stag002 AND stat002 = g_stag_m.stag005)

   
   IF l_n1 > 0 OR l_n2 > 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00110'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF
   
   RETURN TRUE
END FUNCTION]]>
  </point>
  <point name="function.astm201_stagunit_ref" order="27" ver="4" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stagunit_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_stag_m.stagunit
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_stag_m.stagunit_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_stag_m.stagunit_desc
END FUNCTION]]>
  </point>
  <point name="function.astm201_stagunit_chk" order="28" ver="4" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION astm201_stagunit_chk(p_ooea001)
DEFINE p_ooea001   LIKE ooea_t.ooea001
DEFINE l_ooeastus  LIKE ooea_t.ooeastus
   
   SELECT ooeastus INTO l_ooeastus FROM ooea_t 
    WHERE ooeaent = g_enterprise  AND ooea001 = p_ooea001  AND ooea004 = 'Y'
    
   IF status = 100 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'aoo-00163'
      LET g_errparam.extend = ''
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN FALSE
   END IF  
   IF l_ooeastus = 'N' THEN 
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'aoo-00012'
      LET g_errparam.extend = ''
      LET g_errparam.popup = FALSE
      CALL cl_err()

      RETURN FALSE
   END IF
   RETURN TRUE 
END FUNCTION]]>
  </point>
  <point name="b_fill.body.fill_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="b_fill.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="b_fill.fill" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   #            INITIALIZE g_ref_fields TO NULL
   #   LET g_ref_fields[1] = g_stah_d[l_ac].stah003
   #   CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
   #   LET g_stah_d[l_ac].stah003_desc = '', g_rtn_fields[1] , ''
   #
   #      CALL astm201_stah009_ref()
   #      CALL astm201_stah010_ref()]]>
  </point>
  <point name="b_fill.sql" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            LET g_sql = "SELECT  UNIQUE stah002,stah003,stah004,stah005,stah006,stah007,stah008,stah009,stah010, 
          stah011,stah012,stah013,stah014,stah015,stah016 ,t1.stael003 ,t2.stabl003 ,t3.stabl003 FROM stah_t",   
                  " INNER JOIN stag_t ON stag001 = stah001 ",
                  " LEFT JOIN stai_t ON staient = stahent AND stah001 = stai001 AND stah002 = stai002 ",  
                  "",
                  " LEFT JOIN stael_t t1 ON t1.staelent='"||g_enterprise||"' AND t1.stael001=stah003 AND t1.stael002='"||g_dlang||"' ",
                  " LEFT JOIN stabl_t t2 ON t2.stablent='"||g_enterprise||"' AND t2.stabl001=stah009 AND t2.stabl002='"||g_dlang||"' ",
                  " LEFT JOIN stabl_t t3 ON t3.stablent='"||g_enterprise||"' AND t3.stabl001=stah010 AND t3.stabl002='"||g_dlang||"' ",
                  " WHERE stahent=? AND stah001=?"
      
      IF NOT cl_null(g_wc2_table1) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
      END IF
      IF NOT cl_null(g_wc2_table2) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table2 CLIPPED
      END IF 
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY stah_t.stah002"]]>
  </point>
  <point name="b_fill.sql_before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="b_fill2.after_fill" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL astm201_b2_fill()
   CALL astm201_reflesh()]]>
  </point>
  <point name="b_fill2.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="browser_fill.after" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL astm201_set_act_visible()   
   CALL astm201_set_act_no_visible()]]>
  </point>
  <point name="browser_fill.before_browser_fill" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   IF g_wc = " 1=2" THEN
      LET g_wc = " 1=1"
   END IF]]>
  </point>
  <point name="browser_fill.before_count" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[       IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE stag001 ",

                        " FROM stag_t ",
                              " ",
                              " LEFT JOIN stah_t ON stahent = stagent AND stag001 = stah001 ",
                              
                              " LEFT JOIN stai_t ON staient = stahent AND stah001 = stai001 AND stah002 = stai002",


                              " LEFT JOIN stagl_t ON stag001 = stagl001 AND stagl002 = '",g_lang,"' ", 
                              " ", 
                       " WHERE stagent = '" ||g_enterprise|| "' AND stahent = '" ||g_enterprise|| "' AND ",l_wc, " AND ", l_wc2
 
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE stag001 ",

                        " FROM stag_t ", 
                              " ",
                              " LEFT JOIN stagl_t ON stag001 = stagl001 AND stagl002 = '",g_lang,"' ",
                        "WHERE stagent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED
 
   END IF
   
   LET g_sql = " SELECT COUNT(*) FROM (",l_sub_sql,")"]]>
  </point>
  <point name="browser_fill.before_foreach" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="browser_fill.before_prepare" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[        #單身有輸入查詢條件且非null
   IF g_wc2 <> " 1=1" AND NOT cl_null(g_wc2) THEN 
      #依照stag001 Browser欄位定義(取代原本bs_sql功能)
      LET l_sql_rank = "SELECT DISTINCT stagstus,stag001,DENSE_RANK() OVER(ORDER BY stag001 ",g_order,") AS RANK ",
                        " FROM stag_t ",
                              " ",
                              " LEFT JOIN stah_t ON stahent = stagent AND stag001 = stah001 ",
                              " LEFT JOIN stai_t ON staient = stahent AND stah001 = stai001 AND stah002 = stai002",
                               
                              " LEFT JOIN stagl_t ON stag001 = stagl001 AND stagl002 = '",g_lang,"' ",
                              " ",
                       " ",
                       " WHERE stagent = '" ||g_enterprise|| "' AND ",g_wc," AND ",g_wc2
   ELSE
      #單身無輸入資料
      LET l_sql_rank = "SELECT DISTINCT stagstus,stag001,DENSE_RANK() OVER(ORDER BY stag001 ",g_order,") AS RANK ",
                       " FROM stag_t ",
                            "  ",
                            "  LEFT JOIN stagl_t ON stag001 = stagl001 AND stagl002 = '",g_lang,"' ",
                       " WHERE stagent = '" ||g_enterprise|| "' AND ", g_wc
   END IF
   
   #定義翻頁CURSOR
   LET g_sql= "SELECT stagstus,stag001 FROM (",l_sql_rank,") WHERE ",
              " RANK >= ",1," AND RANK<",1+g_max_browse,
              " ORDER BY stag001 ",g_order]]>
  </point>
  <point name="browser_fill.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL g_stai_d.clear()]]>
  </point>
  <point name="browser_fill.open" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="browser_fill.other_fill" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="browser_fill.reference" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="browser_search.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="construct.a.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah009" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah010" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stag008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagcnfid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagcrtdp" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagcrtid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagmodid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagowndp" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagownid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.a.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah009" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah010" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stag008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagcnfdt" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagcnfid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagcrtdp" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagcrtdt" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagcrtid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagmoddt" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagmodid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagowndp" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagownid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.b.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah009" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_stab001_3()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stah009  #顯示到畫面上
               #DISPLAY g_qryparam.return2 TO stabl003 #說明 
               #DISPLAY g_qryparam.return3 TO stabl004 #助記碼 

            NEXT FIELD stah009                     #返回原欄位

]]>
  </point>
  <point name="construct.c.page1.stah010" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			LET g_qryparam.reqry = FALSE
            CALL q_stab001_3()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stah010  #顯示到畫面上
               #DISPLAY g_qryparam.return2 TO stabl003 #說明 
               #DISPLAY g_qryparam.return3 TO stabl004 #助記碼 

            NEXT FIELD stah010                     #返回原欄位

]]>
  </point>
  <point name="construct.c.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.stag002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.stag003" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			   LET g_qryparam.reqry = FALSE
            CALL q_ooib002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stag003  #顯示到畫面上

            NEXT FIELD stag003                     #返回原欄位 ]]>
  </point>
  <point name="construct.c.stag008" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        #此段落由子樣板a08產生
            #開窗c段
			   INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			   LET g_qryparam.reqry = FALSE
			#LET g_qryparam.arg1 = '2'
#			   LET g_qryparam.where = "ooef201 ='Y'"
#            CALL q_ooef001()                           #呼叫開窗
            IF s_aooi500_setpoint(g_prog,'stag008') THEN
               LET g_qryparam.where = s_aooi500_q_where(g_prog,'stag008',g_site)
               CALL q_ooef001_24() 
            ELSE
               LET g_qryparam.where = "ooef201 ='Y'"
               CALL q_ooef001() 
            END IF
            
            DISPLAY g_qryparam.return1 TO stag008  #顯示到畫面上

            NEXT FIELD stag008                     #返回原欄位

]]>
  </point>
  <point name="construct.c.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="construct.c.stagunit" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
			   LET g_qryparam.reqry = FALSE
			#LET g_qryparam.arg1 = '2'
#			  LET g_qryparam.where = "ooef201 = 'Y'"
#            CALL q_ooef001()                           #呼叫開窗
            LET g_qryparam.where = s_aooi500_q_where(g_prog,'stagunit',g_site,'c')   #150308-00001#5  By benson add 'c'
            CALL q_ooef001_24()
            DISPLAY g_qryparam.return1 TO stagunit  #顯示到畫面上

            NEXT FIELD stagunit]]>
  </point>
  <point name="cs.add_cs" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[           CONSTRUCT g_wc2_table2 ON stai003,stai004,stai005,stai006
           FROM s_detail2[1].stai003, s_detail2[1].stai004, s_detail2[1].stai005, s_detail2[1].stai006
                      
         BEFORE CONSTRUCT
        
            #add-point:cs段more_construct
      END CONSTRUCT
]]>
  </point>
  <point name="cs.after_construct" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
   IF cl_null(g_wc2_table2) THEN
      LET g_wc2_table2 = " 1=1"
   END IF
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2_table1," AND ",g_wc2_table2
   END IF]]>
  </point>
  <point name="cs.b_dialog" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[        # DISPLAY '1' TO stag002]]>
  </point>
  <point name="cs.before_construct" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="cs.body.before_construct" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="cs.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL g_stai_d.clear()]]>
  </point>
  <point name="cs.head.before_construct" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="default_search.after" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="default_search.before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="default_search.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="delete.body.a_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[           ]]>
  </point>
  <point name="delete.body.b_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[             DELETE FROM stai_t
       WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001
       IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stai_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
       END IF   
      CALL g_stai_d.clear()]]>
  </point>
  <point name="delete.body.m_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="delete.head.a_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            DELETE FROM stagl_t WHERE staglent =  g_enterprise 
         AND stagl001 = g_stag_m.stag001
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "del stagl_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF ]]>
  </point>
  <point name="delete.head.b_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete.head.m_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete_b.a_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete_b.b_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="delete_b.m_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="delete_b.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_reproduce.body.table1.a_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[       #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE astm201_detail AS ",
                "SELECT * FROM stai_t "
   PREPARE repro_tb2 FROM ls_sql
   EXECUTE repro_tb2
   FREE repro_tb2
                
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astm201_detail SELECT * FROM stai_t 
                                         WHERE staient = g_enterprise AND stai001 = g_stag001_t
 
   
   #將key修正為調整後   
   UPDATE astm201_detail 
      #更新key欄位
      SET stai001 = g_stag_m.stag001
 
      #更新共用欄位
      
                                       
  
   #將資料塞回原table   
   INSERT INTO stai_t SELECT * FROM astm201_detail
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = "reproduce"
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN
   END IF
   
   DROP TABLE astm201_detail]]>
  </point>
  <point name="detail_reproduce.body.table1.b_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_reproduce.body.table1.m_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_reproduce.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_show.after" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_show.before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="detail_show.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="fetch.action_control" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   IF g_stag_m.stagstus = 'N' THEN
      CALL cl_set_act_visible("modify,delete",TRUE)
   ELSE
      CALL cl_set_act_visible("modify,delete",FALSE)
   END IF  ]]>
  </point>
  <point name="fetch.after" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   # 2015/04/27  geaz add   150402-00005#28
   IF g_stag_m.stag002 = '4' THEN
      CALL cl_set_comp_visible('stah013',FALSE)
      CALL cl_set_comp_visible('stah014',FALSE)
      CALL cl_set_comp_visible('stah015',FALSE)
      CALL cl_set_comp_visible('stah016',FALSE)
      CALL cl_set_comp_visible('group5',FALSE)
   ELSE
      CALL cl_set_comp_visible('stah013',TRUE)
      CALL cl_set_comp_visible('stah014',TRUE)
      CALL cl_set_comp_visible('stah015',TRUE)
      CALL cl_set_comp_visible('stah016',TRUE)
      CALL cl_set_comp_visible('group5',TRUE)
   END IF]]>
  </point>
  <point name="fetch.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="fill_chk.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="fill_chk.other_chk" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="filter.add_cs" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="filter.b_dialog" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="global.variable" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[ TYPE type_g_stai_d        RECORD
    stai003 LIKE stai_t.stai003, 
    stai004 LIKE stai_t.stai004, 
    stai005 LIKE stai_t.stai005, 
    stai006 LIKE stai_t.stai006
       END RECORD
DEFINE g_stai_d        DYNAMIC ARRAY OF type_g_stai_d  
DEFINE g_stai_d_t      type_g_stai_d
DEFINE l_ac2           LIKE type_t.num5
DEFINE g_rec_b2        LIKE type_t.num5
DEFINE g_wc2_table2          STRING
]]>
  </point>
  <point name="idx_chk.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="idx_chk.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="init.define" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success LIKE type_t.num5      #150308-00001#5  By benson 150309]]>
  </point>
  <point name="init.init" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL s_aooi500_create_temp() RETURNING l_success    #150308-00001#5  By benson 150309]]>
  </point>
  <point name="input.a.page1.stah003" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                       LET g_stah_d[l_ac].stah003_desc = ''
           DISPLAY BY NAME g_stah_d[l_ac].stah003_desc           
           IF NOT cl_null(g_stah_d[l_ac].stah003) THEN
              IF NOT astm201_stah003_chk(g_stah_d[l_ac].stah003 ) THEN
                 LET g_stah_d[l_ac].stah003 = g_stah_d_t.stah003
                 CALL astm201_stah003_ref() 
                 NEXT FIELD stah003
              END IF
              IF l_cmd = 'a' OR ( l_cmd = 'u'  AND  g_stah_d[l_ac].stah003 != g_stah_d_t.stah003) THEN
                 SELECT COUNT(*) INTO l_n FROM stah_t 
                  WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001 AND stah003 = g_stah_d[l_ac].stah003
                 IF l_n > 0 THEN
                    INITIALIZE g_errparam TO NULL
                    LET g_errparam.code = 'ast-00033'
                    LET g_errparam.extend = ''
                    LET g_errparam.popup = TRUE
                    CALL cl_err()

                    LET g_stah_d[l_ac].stah003 = g_stah_d_t.stah003
                    CALL astm201_stah003_ref() 
                    NEXT FIELD stah003
                 END IF
              END IF
              IF (g_stah_d[l_ac].stah003 <> g_stah_d_o.stah003 AND NOT cl_null(g_stah_d_o.stah003))
                  OR (l_cmd = 'a' AND cl_null(g_stah_d_o.stah003) ) THEN
                 LET g_stah_d_t.stah002 = g_stah_d[l_ac].stah002 
                 LET g_stah_d_t.stah003 = g_stah_d[l_ac].stah003
                 INITIALIZE g_stah_d[l_ac].* TO NULL
                 LET g_stah_d[l_ac].stah002 = g_stah_d_t.stah002
                 LET g_stah_d[l_ac].stah003 =  g_stah_d_t.stah003 
                 #帶出費用編號預設
                 SELECT stae006 INTO  g_stah_d[l_ac].stah005 FROM stae_t WHERE staeent = g_enterprise AND stae001 = g_stah_d[l_ac].stah003
                   DISPLAY BY NAME g_stah_d[l_ac].stah003_desc,g_stah_d[l_ac].stah005 
                #費用合約設定asti204
                 CALL astm201_default(g_stag_m.stag002,g_stah_d[l_ac].stah003)
                 IF l_cmd = 'u' AND g_rec_b2 > 0 THEN
                    IF cl_ask_confirm('ast-00018') THEN
                       DELETE FROM stai_t
                        WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND
                              stai002 = g_stah_d_t.stah002
                        CALL g_stai_d.clear()
                    END IF 
                 END IF  
              END IF
              CALL astm201_stah003_ref() 
             # SELECT stae006 INTO  g_stah_d[l_ac].stah005 FROM stae_t WHERE staeent = g_enterprise AND stae001 = g_stah_d[l_ac].stah003
           ELSE
              LET g_stah_d[l_ac].stah003_desc = ''
              LET g_stah_d[l_ac].stah005 = ''
           END IF
           
           LET g_stah_d_o.stah003 = g_stah_d[l_ac].stah003
              CALL astm201_set_entry_b(l_cmd)
              CALL astm201_set_no_required_b(l_cmd)
              CALL astm201_set_required_b(l_cmd)
              CALL astm201_set_no_entry_b(l_cmd)
            # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF   ]]>
  </point>
  <point name="input.a.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.page1.stah006" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                         CALL astm201_set_entry_b(l_cmd)
             CALL astm201_set_no_required_b(l_cmd)
             CALL astm201_set_required_b(l_cmd)
             CALL astm201_set_no_entry_b(l_cmd)
             # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF]]>
  </point>
  <point name="input.a.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.page1.stah009" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        LET g_stah_d[l_ac].stah009_desc = ''
            IF NOT cl_null(g_stah_d[l_ac].stah009) THEN
               IF NOT astm201_stah009_chk(g_stah_d[l_ac].stah009) THEN
                  LET g_stah_d[l_ac].stah009 = g_stah_d_t.stah009
                  CALL astm201_stah009_ref()
                  NEXT FIELD stah009
               END IF
            END IF
            CALL astm201_stah009_ref()]]>
  </point>
  <point name="input.a.page1.stah010" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        LET g_stah_d[l_ac].stah010_desc = ''
            IF NOT cl_null(g_stah_d[l_ac].stah010) THEN   
               IF NOT astm201_stah009_chk(g_stah_d[l_ac].stah010) THEN
                  LET g_stah_d[l_ac].stah010 = g_stah_d_t.stah010
                  CALL astm201_stah010_ref()
                  NEXT FIELD stah010
               END IF
             END IF
             CALL astm201_stah010_ref()]]>
  </point>
  <point name="input.a.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        IF NOT cl_null(g_stah_d[l_ac].stah011) THEN
               IF g_stah_d[l_ac].stah011 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stah_d[l_ac].stah011 = g_stah_d_t.stah011
                  NEXT FIELD stah011
               END IF
            END IF]]>
  </point>
  <point name="input.a.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        IF NOT cl_null( g_stah_d[l_ac].stah012) THEN
               IF g_stah_d[l_ac].stah012 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stah_d[l_ac].stah012 = g_stah_d_t.stah012
                  NEXT FIELD stah012
               END IF
            END IF
      ]]>
  </point>
  <point name="input.a.page1.stah013" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                         CALL astm201_set_entry_b(l_cmd)
             CALL astm201_set_no_required_b(l_cmd)
             CALL astm201_set_required_b(l_cmd)
             CALL astm201_set_no_entry_b(l_cmd)
             # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF
               ]]>
  </point>
  <point name="input.a.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        IF NOT cl_null(g_stah_d[l_ac].stah014) THEN
               IF g_stah_d[l_ac].stah014 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stah_d[l_ac].stah014 = g_stah_d_t.stah014
                  NEXT FIELD stah014
               END IF
            END IF]]>
  </point>
  <point name="input.a.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                         IF NOT cl_null(g_stah_d[l_ac].stah015) THEN
               IF g_stah_d[l_ac].stah015 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stah_d[l_ac].stah015 = g_stah_d_t.stah015
                  NEXT FIELD stah015
               END IF
            END IF]]>
  </point>
  <point name="input.a.page1.stah016" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                         CALL astm201_set_entry_b(l_cmd)
             CALL astm201_set_no_required_b(l_cmd)
             CALL astm201_set_required_b(l_cmd)
             CALL astm201_set_no_entry_b(l_cmd)
             IF g_stah_d[l_ac].stah016 ='1' AND g_stai_d.getLength() > 0 THEN
                 IF cl_ask_confirm('ast-00018') THEN
                    DELETE FROM stai_t
                     WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND
                           stai002 = g_stah_d_t.stah002
                     CALL g_stai_d.clear()
                 ELSE
                     LET g_stah_d[l_ac].stah016 = g_stah_d_t.stah016
                 END IF       
              END IF 
            # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF]]>
  </point>
  <point name="input.a.page1.stah017" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[     ]]>
  </point>
  <point name="input.a.page1.stah018" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[     ]]>
  </point>
  <point name="input.a.stag002" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="input.a.stag003" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            LET g_stag_m.stag003_desc = ''
            DISPLAY BY NAME g_stag_m.stag003_desc
            IF NOT cl_null(g_stag_m.stag003) THEN
               IF NOT astm201_stag003_chk() THEN
                  LET g_stag_m.stag003 = g_stag_m_t.stag003
                  CALL astm201_stag003_ref()
                  NEXT FIELD stag003 
               END IF
            END IF
            CALL astm201_stag003_ref()]]>
  </point>
  <point name="input.a.stag004" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            LET g_stag_m.stag004_desc = ''
            DISPLAY BY NAME g_stag_m.stag004_desc
            IF NOT cl_null(g_stag_m.stag004) THEN
               IF NOT  astm201_stag004_chk(g_stag_m.stag004) THEN
                  LET g_stag_m.stag004 = g_stag_m_t.stag004
                  CALL astm201_stag004_ref()
                  NEXT FIELD stag004 
               END IF
            END IF
            CALL astm201_stag004_ref()
]]>
  </point>
  <point name="input.a.stag005" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[           LET g_stag_m.stag005_desc = ''
           DISPLAY BY NAME g_stag_m.stag005_desc
            IF NOT cl_null(g_stag_m.stag005) THEN
               IF NOT astm201_stag005_chk(g_stag_m.stag005) THEN
                  LET g_stag_m.stag005 = g_stag_m_t.stag005
                  CALL astm201_stag005_ref() 
                  NEXT FIELD stag005
               END IF
               IF NOT astm201_b_chk() THEN
                  LET g_stag_m.stag005 = g_stag_m_t.stag005
                  CALL astm201_stag005_ref() 
                  NEXT FIELD stag005
               END IF
            END IF
            CALL astm201_stag005_ref()
]]>
  </point>
  <point name="input.a.stag006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                       LET g_stag_m.stag006_desc = ''
           DISPLAY BY NAME g_stag_m.stag006_desc
           IF NOT cl_null(g_stag_m.stag006) THEN
              IF NOT astm201_stag006_chk(g_stag_m.stag006) THEN
                 LET g_stag_m.stag006 = g_stag_m_t.stag006
                 CALL astm201_stag006_ref()
                 NEXT FIELD stag006
              END IF
              CALL astm201_stag006_ref()
           END IF]]>
  </point>
  <point name="input.a.stag007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        LET g_stag_m.stag007_desc = ''
            DISPLAY BY NAME g_stag_m.stag007_desc
            IF NOT cl_null(g_stag_m.stag007) THEN
               IF NOT astm201_stag007_chk(g_stag_m.stag007) THEN
                  LET g_stag_m.stag007 = g_stag_m_t.stag007 
                  CALL astm201_stag007_ref()
                  NEXT FIELD stag007
               END IF 
               CALL astm201_stag007_ref()            
            ELSE
               LET g_stag_m.stag007_desc = ''
               DISPLAY BY NAME g_stag_m.stag007_desc
            END IF]]>
  </point>
  <point name="input.a.stag008" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            LET g_stag_m.stag008_desc = ''
            DISPLAY BY NAME g_stag_m.stag008_desc
            IF NOT cl_null(g_stag_m.stag008) THEN
               IF s_aooi500_setpoint(g_prog,'stag008') THEN
                  CALL s_aooi500_chk(g_prog,'stag008',g_stag_m.stag008,g_site) RETURNING l_success,l_errno
                  IF NOT l_success THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.extend = g_stag_m.stag008
                     LET g_errparam.code   = l_errno
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                     
                     LET g_stag_m.stag008 = g_stag_m_t.stag008
                     CALL s_desc_get_department_desc(g_stag_m.stag008) RETURNING g_stag_m.stag008_desc
                     DISPLAY BY NAME g_stag_m.stag008,g_stag_m.stag008_desc
                     NEXT FIELD CURRENT
                  END IF
               ELSE
                  IF NOT astm201_stag008_chk(g_stag_m.stag008) THEN
                     LET g_stag_m.stag008 = g_stag_m_t.stag008
                     CALL astm201_stag008_ref()
                     NEXT FIELD stag008
                  END IF
               END IF 
            END IF
            CALL astm201_stag008_ref()
]]>
  </point>
  <point name="input.a.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.a.stagunit" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[           
            IF NOT cl_null(g_stag_m.stagunit) THEN 
                  CALL s_aooi500_chk(g_prog,'stagunit',g_stag_m.stagunit,g_site) RETURNING l_success,l_errno
                  IF NOT l_success THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.extend = ''
                     LET g_errparam.code   = l_errno
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                  
                     LET g_stag_m.stagunit = g_stag_m_t.stagunit
                     CALL astm201_stagunit_ref()
                     NEXT FIELD CURRENT
                  END IF
                  
                  CALL astm201_set_entry(p_cmd)
                  CALL astm201_set_no_entry(p_cmd)

            END IF            
            
            
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_stag_m.stagunit
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_stag_m.stagunit_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_stag_m.stagunit_desc

]]>
  </point>
  <point name="input.after_define_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="input.after_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="input.after_set_entry" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="input.b.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        IF cl_null(g_stah_d[l_ac].stah002) THEN
               NEXT FIELD stah002
            END IF]]>
  </point>
  <point name="input.b.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah009" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah010" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stag008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.b.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.before_dialog" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="input.before_input" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   LET t_stag002 = g_stag_m.stag002
   ]]>
  </point>
  <point name="input.body.a_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                  ]]>
  </point>
  <point name="input.body.a_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.a_insert2" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.a_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.after_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.body.after_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                     ]]>
  </point>
  <point name="input.body.after_row" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.body.after_set_entry_b" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.b_a_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.body.b_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                               DELETE FROM stai_t
                WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND

                      stai002 = g_stah_d_t.stah002
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "stai_t"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE 
               END IF                  ]]>
  </point>
  <point name="input.body.b_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.b_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.before_insert" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                        LET g_insert = 'Y'
            CALL g_stai_d.clear()
            CALL astm201_set_entry_b(l_cmd)
             CALL astm201_set_no_required_b(l_cmd)
             CALL astm201_set_required_b(l_cmd)
             CALL astm201_set_no_entry_b(l_cmd)
            # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF 
            SELECT MAX(stah002)+1 INTO  g_stah_d[l_ac].stah002 FROM stah_t
             WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001
            IF cl_null( g_stah_d[l_ac].stah002 ) THEN             
               LET g_stah_d[l_ac].stah002 = 1
            END IF
            ]]>
  </point>
  <point name="input.body.before_row" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[                         IF l_cmd = 'u' THEN
                 CALL astm201_b2_fill()
                 CALL astm201_reflesh()
             END IF
             CALL astm201_set_entry_b(l_cmd)
             CALL astm201_set_no_required_b(l_cmd)
             CALL astm201_set_required_b(l_cmd)
             CALL astm201_set_no_entry_b(l_cmd)
             LET g_stah_d_t.* = g_stah_d[l_ac].*     #新輸入資料
             LET g_stah_d_o.* = g_stah_d[l_ac].* 
             # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF]]>
  </point>
  <point name="input.body.before_row2" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="input.body.insert.after_set_entry_b" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.body.m_delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.body.m_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.c.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah003" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stah_d[l_ac].stah003             #給予default值
            LET g_qryparam.default2 = "" #g_stah_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_stah_d[l_ac].stae001 #費用編號

            #給予arg
            IF g_stag_m.stag002 NOT MATCHES "[1-5]" THEN
               CALL q_stae001_3()
            ELSE      
               CALL q_stae001()                                #呼叫開窗
            END IF

            LET g_stah_d[l_ac].stah003 = g_qryparam.return1              #將開窗取得的值回傳到變數
            #LET g_stah_d[l_ac].stael003 = g_qryparam.return2 #說明
            #LET g_stah_d[l_ac].stae001 = g_qryparam.return3 #費用編號

            DISPLAY g_stah_d[l_ac].stah003 TO stah003              #顯示到畫面上
            #DISPLAY g_stah_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_stah_d[l_ac].stae001 TO stae001 #費用編號
           
            CALL astm201_stah003_ref()  
            NEXT FIELD stah003                          #返回原欄位

]]>
  </point>
  <point name="input.c.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah009" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stah_d[l_ac].stah009             #給予default值
            LET g_qryparam.default2 = "" #g_stah_d[l_ac].stabl003 #說明
            LET g_qryparam.default3 = "" #g_stah_d[l_ac].stabl004 #助記碼

            #給予arg
            LET g_qryparam.arg1 = g_stag_m.stag002
            LET g_qryparam.arg2 = g_stag_m.stag005     
            CALL q_stab001_3()                                #呼叫開窗

            LET g_stah_d[l_ac].stah009 = g_qryparam.return1              #將開窗取得的值回傳到變數
            #LET g_stah_d[l_ac].stabl003 = g_qryparam.return2 #說明
            #LET g_stah_d[l_ac].stabl004 = g_qryparam.return3 #助記碼

            DISPLAY g_stah_d[l_ac].stah009 TO stah009              #顯示到畫面上
            #DISPLAY g_stah_d[l_ac].stabl003 TO stabl003 #說明
            #DISPLAY g_stah_d[l_ac].stabl004 TO stabl004 #助記碼
            CALL astm201_stah009_ref()
            NEXT FIELD stah009                          #返回原欄位

]]>
  </point>
  <point name="input.c.page1.stah010" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stah_d[l_ac].stah010             #給予default值
            LET g_qryparam.default2 = "" #g_stah_d[l_ac].stabl003 #說明
            LET g_qryparam.default3 = "" #g_stah_d[l_ac].stabl004 #助記碼

            #給予arg
            LET g_qryparam.arg1 = g_stag_m.stag002
            LET g_qryparam.arg2 = g_stag_m.stag005 
            CALL q_stab001_3()                                #呼叫開窗

            LET g_stah_d[l_ac].stah010 = g_qryparam.return1              #將開窗取得的值回傳到變數
            #LET g_stah_d[l_ac].stabl003 = g_qryparam.return2 #說明
            #LET g_stah_d[l_ac].stabl004 = g_qryparam.return3 #助記碼

            DISPLAY g_stah_d[l_ac].stah010 TO stah010              #顯示到畫面上
            #DISPLAY g_stah_d[l_ac].stabl003 TO stabl003 #說明
            #DISPLAY g_stah_d[l_ac].stabl004 TO stabl004 #助記碼
            CALL astm201_stah010_ref()
            NEXT FIELD stah010                          #返回原欄位

]]>
  </point>
  <point name="input.c.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stag001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stag002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stag003" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			   LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag003             #給予default值
            
            IF g_stag_m.stag002 MATCHES "[1-5]" THEN
               CALL q_ooib002_1()
            ELSE
               CALL q_ooib002_2()
            END IF

            LET g_stag_m.stag003 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag003 TO stag003              #顯示到畫面上
            CALL astm201_stag003_ref()
            
            NEXT FIELD stag003                          #返回原欄位]]>
  </point>
  <point name="input.c.stag004" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			   INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			   LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag004             #給予default值

            #給予arg

            CALL q_staa001()                                #呼叫開窗

            LET g_stag_m.stag004 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag004 TO stag004              #顯示到畫面上
            CALL astm201_stag004_ref()
            
            NEXT FIELD stag004                          #返回原欄位

]]>
  </point>
  <point name="input.c.stag008" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
			INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
			LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stag008             #給予default值

            #給予arg
            #LET g_qryparam.arg1 = '2'
#            LET g_qryparam.where = "ooef201 = 'Y'"
#            CALL q_ooef001()                                #呼叫開窗
            IF s_aooi500_setpoint(g_prog,'stag008') THEN
               LET g_qryparam.where = s_aooi500_q_where(g_prog,'stag008',g_site)
               CALL q_ooef001_24() 
            ELSE
               LET g_qryparam.where = "ooef201 ='Y'"
               CALL q_ooef001() 
            END IF
            LET g_stag_m.stag008 = g_qryparam.return1              #將開窗取得的值回傳到變數

            DISPLAY g_stag_m.stag008 TO stag008              #顯示到畫面上
            CALL astm201_stag008_ref()
            NEXT FIELD stag008                          #返回原欄位

]]>
  </point>
  <point name="input.c.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.c.stagunit" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_stag_m.stagunit             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            LET g_qryparam.where = s_aooi500_q_where(g_prog,'stagunit',g_site,'i')   #150308-00001#5  By benson add 'i'
            CALL q_ooef001_24()                                #呼叫開窗

            LET g_stag_m.stagunit = g_qryparam.return1              

            DISPLAY g_stag_m.stagunit TO stagunit              #

            NEXT FIELD stagunit]]>
  </point>
  <point name="input.d.before_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.define" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE  t_stag002             LIKE stag_t.stag002
   DEFINE  l_success             LIKE type_t.num5
   DEFINE  l_errno               LIKE type_t.chr10]]>
  </point>
  <point name="input.define_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      LET g_forupd_sql = "SELECT stai003,stai004,stai005,stai006 FROM stai_t WHERE staient=? AND stai001=? AND stai002=? AND stai003 = ? FOR UPDATE"
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE astm201_bcl2 CURSOR FROM g_forupd_sql]]>
  </point>
  <point name="input.g.page1.stah002" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        ]]>
  </point>
  <point name="input.g.page1.stah007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah009" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah010" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah011" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah012" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah013" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        IF NOT cl_null(g_stah_d[l_ac].stah013) THEN
               IF g_stah_d[l_ac].stah013 <> '1' THEN    #保底
                  CALL cl_set_comp_entry('stah014,stah015',TRUE)
                  CALL cl_set_comp_required('stah014,stah015',TRUE)
               ELSE
                  LET g_stah_d[l_ac].stah014 = ''
                  LET g_stah_d[l_ac].stah015 = ''
                  CALL cl_set_comp_entry('stah014,stah015',FALSE)
                  CALL cl_set_comp_required('stah014,stah015',FALSE)
               END IF
            END IF]]>
  </point>
  <point name="input.g.page1.stah014" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah015" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.page1.stah016" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag002" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_stag_m.stag002) THEN
               IF NOT astm201_b_chk() THEN
                  LET g_stag_m.stag002 = g_stag_m_t.stag002
                  NEXT FIELD stag002
               END IF
               IF t_stag002 MATCHES "[1-5]" AND g_stag_m.stag002 NOT MATCHES "[1-5]" THEN
                  LET g_stag_m.stag003 = ''
                  LET g_stag_m.stag003_desc = ''
               END IF
               IF  t_stag002 NOT MATCHES "[1-5]" AND g_stag_m.stag002 MATCHES "[1-5]" THEN
                  LET g_stag_m.stag003 = ''
                  LET g_stag_m.stag003_desc = ''
               END IF
               DISPLAY BY NAME g_stag_m.stag003,g_stag_m.stag003_desc
            END IF
            LET t_stag002 = g_stag_m.stag002
            # 2015/04/27  geaz add   150402-00005#28
            IF g_stag_m.stag002 = '4' THEN
               CALL cl_set_comp_visible('stah013',FALSE)
               CALL cl_set_comp_visible('stah014',FALSE)
               CALL cl_set_comp_visible('stah015',FALSE)
               CALL cl_set_comp_visible('stah016',FALSE)
               CALL cl_set_comp_visible('group5',FALSE)
            ELSE
               CALL cl_set_comp_visible('stah013',TRUE)
               CALL cl_set_comp_visible('stah014',TRUE)
               CALL cl_set_comp_visible('stah015',TRUE)
               CALL cl_set_comp_visible('stah016',TRUE)
               CALL cl_set_comp_visible('group5',TRUE)
            END IF]]>
  </point>
  <point name="input.g.stag003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag005" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag006" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag007" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stag008" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stagl003" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stagl004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.g.stagstus" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.head.a_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.head.a_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.head.b_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.head.b_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.head.m_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.head.m_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="input.m.before_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="input.master_input.update_item" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                         IF NOT cl_null(g_stag_m.stag001) THEN
                  CALL n_stagl(g_stag_m.stag001)
                  INITIALIZE g_ref_fields TO NULL
                  LET g_ref_fields[1] = g_stag_m.stag001
                  CALL ap_ref_array2(g_ref_fields," SELECT stagl003,stagl004 FROM stagl_t WHERE stagl001 = ? AND stagl002 = '"||g_lang||"'","") RETURNING g_rtn_fields
                  LET g_stag_m.stagl003 = g_rtn_fields[1]
                  LET g_stag_m.stagl004 = g_rtn_fields[2]
                  DISPLAY BY NAME g_stag_m.stagl003
                  DISPLAY BY NAME g_stag_m.stagl004
               END IF]]>
  </point>
  <point name="input.more_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[             INPUT ARRAY g_stai_d FROM s_detail2.*
          ATTRIBUTE(COUNT = g_rec_b2,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 

         BEFORE INPUT
          
            IF g_stah_d[l_ac].stah016 = '1' OR  cl_null(g_stah_d[l_ac].stah016) THEN 
               NEXT FIELD stah002
            END IF
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stai_d.getLength()+1) 
              LET g_insert = 'N' 
            END IF 

            CALL astm201_b2_fill()
            LET g_rec_b2 = g_stai_d.getLength()

            
         BEFORE ROW
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac2 = ARR_CURR()
            LET g_detail_idx2 = l_ac2
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac2 TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astm201_cl USING g_enterprise,g_stag_m.stag001

            IF STATUS THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code =  STATUS
               LET g_errparam.extend = "OPEN astm201_cl:"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               CLOSE astm201_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
         
            
            LET g_rec_b2 = g_stai_d.getLength()
            
            IF g_rec_b2 >= l_ac2 
               AND NOT cl_null(g_stai_d[l_ac2].stai003) 

            THEN
               LET l_cmd='u'
               LET g_stai_d_t.* = g_stai_d[l_ac2].*  #BACKUP
               CALL astm201_set_entry_b(l_cmd)
               CALL astm201_set_no_entry_b(l_cmd)
               IF NOT astm201_lock_b("stai_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astm201_bcl2 INTO g_stai_d[l_ac2].stai003,  g_stai_d[l_ac2].stai004,g_stai_d[l_ac2].stai005,g_stai_d[l_ac2].stai006
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = SQLCA.sqlcode
                     LET g_errparam.extend = g_stai_d_t.stai003
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL astm201_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
      
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stai_d[l_ac2].* TO NULL 
            
            LET g_stai_d_t.* = g_stai_d[l_ac2].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astm201_set_entry_b(l_cmd)
            CALL astm201_set_no_entry_b(l_cmd)
            #公用欄位給值(單身)
            
   
            SELECT MAX(stai003)+1 INTO  g_stai_d[l_ac2].stai003 FROM stai_t
             WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND stai002 =g_stah_d[l_ac].stah002  
            IF cl_null(  g_stai_d[l_ac2].stai003 ) THEN             
               LET  g_stai_d[l_ac2].stai003 = 1
            END IF
            
            SELECT MAX(stai005)+1 INTO  g_stai_d[l_ac2].stai004 FROM stai_t
             WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND stai002 =g_stah_d[l_ac].stah002  
            IF cl_null(  g_stai_d[l_ac2].stai004 ) THEN             
               LET  g_stai_d[l_ac2].stai003 = 1
            END IF
        
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增

            #end add-point
			   
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stai_t 
             WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001

               AND stai002 = g_stah_d[l_ac].stah002 AND stai003 = g_stai_d[l_ac2].stai003

                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前

               #end add-point
            
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stag_m.stag001
               LET gs_keys[2] = g_stah_d[l_ac].stah002
               CALL astm201_insert_b('stai_t',gs_keys,"'2'")
                           
               #add-point:單身新增後

               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_stai_d[l_ac2].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stai_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
              
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_rec_b2 = g_rec_b2 + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF NOT cl_null(g_stai_d[l_ac2].stai003) 

               THEN 
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code =  -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前

               #end add-point 
               
               DELETE FROM stai_t
                WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 AND

                      stai002 = g_stah_d[l_ac].stah002 AND stai003 =  g_stai_d_t.stai003

                  
               #add-point:單身刪除中

               #end add-point 
               
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stai_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b2 = g_rec_b2-1
                  
                  #add-point:單身刪除後

                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE astm201_bcl2
               LET l_count = g_stai_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stag_m.stag001
               LET gs_keys[2] = g_stah_d[l_ac].stah002



         
         AFTER FIELD stai004,stai005
            IF NOT cl_null(g_stai_d[l_ac2].stai004) THEN
               IF g_stai_d[l_ac2].stai004 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stai_d[l_ac2].stai004 = g_stai_d_t.stai004
                  NEXT FIELD stai004
               END IF
            END IF
            IF NOT cl_null(g_stai_d[l_ac2].stai005) THEN
               IF g_stai_d[l_ac2].stai005 <=0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_stai_d[l_ac2].stai005 = g_stai_d_t.stai005
                  NEXT FIELD stai005
               END IF
            END IF
            IF NOT cl_null(g_stai_d[l_ac2].stai004) AND NOT cl_null(g_stai_d[l_ac2].stai005) THEN
               IF g_stai_d[l_ac2].stai005 < g_stai_d[l_ac2].stai004 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'ast-00017'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  NEXT FIELD CURRENT
               END IF
            
               SELECT COUNT(*) INTO l_n FROM stai_t
                WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 
                  AND stai002 = g_stah_d[l_ac].stah002
                  AND ((stai004 between g_stai_d[l_ac2].stai004 AND g_stai_d[l_ac2].stai005)
                      OR (stai005 between g_stai_d[l_ac2].stai004 AND g_stai_d[l_ac2].stai005)
                      OR (g_stai_d[l_ac2].stai004  between stai004 AND stai005)
                      OR (g_stai_d[l_ac2].stai005  between stai004 AND stai005))
                  AND stai003 <> g_stai_d[l_ac2].stai003
               IF l_n > 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'ast-00016'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  NEXT FIELD CURRENT
               END IF
             
            END IF
         
     
         
         
         AFTER FIELD stai006
            IF NOT cl_null(g_stai_d[l_ac2].stai006) THEN
               IF g_stai_d[l_ac2].stai006<= 0 THEN
                 INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = '-32406'
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                 LET g_stai_d[l_ac2].stai006 = g_stai_d_t.stai006
                 NEXT FIELD stai006
               END IF
            END IF
         
     
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_stai_d[l_ac2].* = g_stai_d_t.*
               CLOSE astm201_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = g_stai_d[l_ac2].stai003
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_stai_d[l_ac2].* = g_stai_d_t.*
            ELSE
            
               #add-point:單身修改前

               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               UPDATE stai_t SET (stai003,stai004,stai005,stai006) = (g_stai_d[l_ac2].stai003,g_stai_d[l_ac2].stai004,g_stai_d[l_ac2].stai005,g_stai_d[l_ac2].stai006)
                WHERE staient = g_enterprise AND stai001 = g_stag_m.stag001 
                  AND stai002 = g_stah_d[l_ac].stah002 #項次   
                  AND stai003 = g_stai_d_t.stai003
                  
               #add-point:單身修改中

               #end add-point
               
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "stai_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()
   
                  LET g_stai_d[l_ac2].* = g_stai_d_t.*
             
                  
               END IF
               
               #add-point:單身修改後

               #end add-point
 
            END IF
            
         AFTER ROW
            CALL astm201_unlock_b("stai_t","'2'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            
              
         AFTER INPUT
            #add-point:input段after input 

            #end add-point   
              
     
                 
      END INPUT      ]]>
  </point>
  <point name="input.next_field" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            NEXT FIELD stagunit]]>
  </point>
  <point name="input.other_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="insert.after_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            CALL g_stai_d.clear()
      LET g_rec_b2 = 0]]>
  </point>
  <point name="insert.default" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#      LET g_stag_m.stag008 = g_site
#      CALL astm201_stag008_ref()
      CALL s_aooi500_default(g_prog,'stagunit',g_site) RETURNING l_insert,g_stag_m.stagunit
      IF NOT l_insert THEN
         RETURN
      END IF
      CALL astm201_stagunit_ref()
      LET g_stag_m_t.* = g_stag_m.*]]>
  </point>
  <point name="insert.define" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_insert    LIKE type_t.num5    
    CALL g_stai_d.clear()]]>
  </point>
  <point name="insert_b.after_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="insert_b.before_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="insert_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      LET ls_group = "'2',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前

      #end add-point 
      INSERT INTO stai_t
                  (staient,stai001,stai002,stai003,stai004,stai005,stai006)
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],
                   g_stai_d[l_ac2].stai003,g_stai_d[l_ac2].stai004,g_stai_d[l_ac2].stai005,g_stai_d[l_ac2].stai006)
      #add-point:insert_b段資料新增中

      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "stai_t"
         LET g_errparam.popup = FALSE
         CALL cl_err()

      END IF
      #add-point:insert_b段資料新增後

      #end add-point 
   END IF]]>
  </point>
  <point name="insert_b.m_insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="insert_b.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="lock_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      IF ps_table = "stai_t" THEN
      OPEN astm201_bcl2 USING g_enterprise,
                                       g_stag_m.stag001,g_stah_d[l_ac].stah002,g_stai_d[l_ac2].stai003
                                       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "astm201_bcl2"
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   END IF
    ]]>
  </point>
  <point name="lock_b.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="main.after_define_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="main.before_close" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="main.define" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success LIKE type_t.num5      #150308-00001#5  By benson 150309]]>
  </point>
  <point name="main.define_sql" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="main.exit" order="" ver="5" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL s_aooi500_drop_temp() RETURNING l_success      #150308-00001#5  By benson 150309]]>
  </point>
  <point name="main.init" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="main.servicecall" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="menu.delete" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.detail_show.page1.detail_qrystr" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.detail_show.page1_sub.asti203" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                        ]]>
  </point>
  <point name="menu.detail_show.page1_sub.prog_asti203" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               #+ 此段落由子樣板a41產生
               #使用JSON格式組合參數與作業編號(串查)
               INITIALIZE la_param.* TO NULL
               LET la_param.prog     = 'asti203'
               LET la_param.param[1] = g_stah_d[l_ac].stah003

               LET ls_js = util.JSON.stringify(la_param)
               CALL cl_cmdrun_wait(ls_js)

]]>
  </point>
  <point name="menu.exporttoexcel" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                  LET g_export_node[2] = base.typeInfo.create(g_stai_d)
                  LET g_export_id[2]   = "s_detail2"]]>
  </point>
  <point name="menu.insert" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.modify" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.modify_detail" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.output" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.prog_stag004" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.query" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="menu.reproduce" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="modify.after_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="modify.before_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="modify.body.a_fk_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="modify.body.b_fk_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="modify.body.m_fk_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="modify.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="query.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL g_stai_d.clear()]]>
  </point>
  <point name="query.other" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL cl_set_comp_visible('stah013',TRUE)
   CALL cl_set_comp_visible('stah014',TRUE)
   CALL cl_set_comp_visible('stah015',TRUE)
   CALL cl_set_comp_visible('stah016',TRUE)
   CALL cl_set_comp_visible('group5',TRUE)]]>
  </point>
  <point name="reproduce.after_reproduce" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="reproduce.define" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_insert    LIKE type_t.num5]]>
  </point>
  <point name="reproduce.head.b_input" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         LET g_stag_m.stag001 = ''
      LET g_stag_m.stagstus = 'N'
      LET g_stag_m.stagcnfid = ""
      LET g_stag_m.stagcnfdt = ""
      LET g_stag_m.stagcnfid_desc = ''
      LET g_stag_m.stagmodid_desc = ''
      DISPLAY BY NAME g_stag_m.*
      CALL s_aooi500_default(g_prog,'stagunit',g_site) RETURNING l_insert,g_stag_m.stagunit
      IF NOT l_insert THEN
         RETURN
      END IF
      CALL astm201_stagunit_ref()]]>
  </point>
  <point name="set_act_no_visible.set_act_no_visible" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   IF g_stag_m.stagstus  ! = 'N' THEN   # N未確認
      CALL cl_set_act_visible("modify,delete,modify_detail,reproduce", FALSE)
   END IF]]>
  </point>
  <point name="set_act_visible.set_act_visible" order="" ver="6" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="set_entry.after_control" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="set_entry.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="set_entry.field_control" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL cl_set_comp_entry("stagunit",TRUE)]]>
  </point>
  <point name="set_entry_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      DEFINE l_n     LIKE type_t.num5
   DEFINE l_staf003 LIKE staf_t.staf003
   DEFINE l_staf004 LIKE staf_t.staf004
   DEFINE l_staf005 LIKE staf_t.staf005
   ]]>
  </point>
  <point name="set_entry_b.set_entry_b" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[     
   CALL astm201_init_entry(p_cmd)
   IF NOT cl_null(g_stah_d[l_ac].stah003) THEN
      #檢查費用編號+經營方式是否存在asti204      
      SELECT COUNT(*) INTO l_n FROM staf_t
       WHERE stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
      IF l_n > 0 THEN
         DECLARE sel_staf CURSOR FOR 
          SELECT staf003,staf004,staf005,stafstus FROM staf_t
           WHERE  stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
         FOREACH sel_staf INTO l_staf003,l_staf004,l_staf005
            LET l_staf003 = cl_str_replace(l_staf003,"stao","stah")
            IF l_staf003 = "stah017" OR l_staf003 = "stah018" THEN
               CONTINUE FOREACH
            END IF     
            IF l_staf004 = 'Y' THEN
               CALL cl_set_comp_entry(l_staf003,TRUE)
            END IF                 
         END FOREACH  
      ELSE
          #合同相關欄位必輸控管
          IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
             IF g_stah_d[l_ac].stah016 = '1' THEN      
                CALL cl_set_comp_entry('stah012',TRUE)
             END IF
             CALL cl_set_comp_entry('stah009,stah010',TRUE)
             CALL cl_set_comp_entry('stah013,stah014,stah015,stah016',TRUE)
          ELSE                                    #固定
             CALL cl_set_comp_entry('stah011',TRUE)
          END IF 
          IF g_stah_d[l_ac].stah013 <> '1' THEN    #保底
             CALL cl_set_comp_entry('stah014,stah015',TRUE)
          END IF      
      END IF    
   ELSE
       #合同相關欄位必輸控管
       IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
          IF g_stah_d[l_ac].stah016 = '1' THEN      
             CALL cl_set_comp_entry('stah012',TRUE)
          END IF
          CALL cl_set_comp_entry('stah009,stah010',TRUE)
          CALL cl_set_comp_entry('stah013,stah014,stah015,stah016',TRUE)
       ELSE                                    #固定
          CALL cl_set_comp_entry('stah011',TRUE)
       END IF 
       IF g_stah_d[l_ac].stah013 <> '1' THEN    #保底
          CALL cl_set_comp_entry('stah014,stah015',TRUE)
       END IF
   END IF   
   ]]>
  </point>
  <point name="set_no_entry.after_control" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   IF NOT s_aooi500_comp_entry(g_prog,'stagunit')  THEN
      CALL cl_set_comp_entry("stagunit",FALSE)
   END IF]]>
  </point>
  <point name="set_no_entry.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="set_no_entry.field_control" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="set_no_entry_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      DEFINE l_n     LIKE type_t.num5
   DEFINE l_staf003 LIKE staf_t.staf003
   DEFINE l_staf004 LIKE staf_t.staf004
   DEFINE l_staf005 LIKE staf_t.staf005]]>
  </point>
  <point name="set_no_entry_b.set_no_entry_b" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[       
  
    
    IF NOT cl_null(g_stah_d[l_ac].stah003) THEN
      #檢查費用編號+經營方式是否存在asti204
      
      SELECT COUNT(*) INTO l_n FROM staf_t
       WHERE stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
      IF l_n > 0 THEN
         DECLARE sel_staf_ne CURSOR FOR 
          SELECT staf003,staf004,staf005 FROM staf_t
           WHERE  stafent = g_enterprise AND staf001= g_stah_d[l_ac].stah003 AND staf002 = g_stag_m.stag002
         FOREACH sel_staf_ne INTO l_staf003,l_staf004,l_staf005
            LET l_staf003 = cl_str_replace(l_staf003,"stao","stah")
             IF l_staf003 = "stah017" OR l_staf003 = "stah018" THEN
               CONTINUE FOREACH
            END IF
            IF l_staf004 = 'N' THEN
               CALL cl_set_comp_entry(l_staf003,FALSE)
            END IF
         END FOREACH 
      ELSE
         IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
            IF g_stah_d[l_ac].stah016 <> '1' THEN      
               LET g_stah_d[l_ac].stah012 = ''
               CALL cl_set_comp_entry('stah012',FALSE)
            END IF
         ELSE                                    #固定
            LET g_stah_d[l_ac].stah009 = ''
            LET g_stah_d[l_ac].stah009_desc = ''
            LET g_stah_d[l_ac].stah010 = ''
            LET g_stah_d[l_ac].stah010_desc = ''
            LET g_stah_d[l_ac].stah012 = ''
            LET g_stah_d[l_ac].stah013 = '1'
            LET g_stah_d[l_ac].stah014 = ''
            LET g_stah_d[l_ac].stah015 = ''
            LET g_stah_d[l_ac].stah016 = '1'
            CALL cl_set_comp_entry('stah009,stah010,stah012',FALSE)
            CALL cl_set_comp_entry('stah013,stah014,stah015,stah016',FALSE)
         END IF
         
         IF g_stah_d[l_ac].stah013 = '1' THEN    #无保底
            LET g_stah_d[l_ac].stah014 = ''
            LET g_stah_d[l_ac].stah015 = '' 
            CALL cl_set_comp_entry('stah014,stah015',FALSE)
         END IF
         
         IF g_stah_d[l_ac].stah013 = '3' THEN    #保底扣減
            LET g_stah_d[l_ac].stah015 = ''
            CALL cl_set_comp_entry('stah015',FALSE)
         END IF
      END IF  
   ELSE
      IF g_stah_d[l_ac].stah006 = '1' THEN    #變動
         IF g_stah_d[l_ac].stah016 <> '1' THEN      
            LET g_stah_d[l_ac].stah012 = ''
            CALL cl_set_comp_entry('stah012',FALSE)
         END IF
      ELSE                                    #固定
         LET g_stah_d[l_ac].stah009 = ''
         LET g_stah_d[l_ac].stah009_desc = ''
         LET g_stah_d[l_ac].stah010 = ''
         LET g_stah_d[l_ac].stah010_desc = ''
         LET g_stah_d[l_ac].stah012 = ''
         LET g_stah_d[l_ac].stah013 = '1'
         LET g_stah_d[l_ac].stah014 = ''
         LET g_stah_d[l_ac].stah015 = ''
         LET g_stah_d[l_ac].stah016 = '1'
         CALL cl_set_comp_entry('stah009,stah010,stah012',FALSE)
         CALL cl_set_comp_entry('stah013,stah014,stah015,stah016',FALSE)
      END IF
      
      IF g_stah_d[l_ac].stah013 = '1' THEN    #无保底
         LET g_stah_d[l_ac].stah014 = ''
         LET g_stah_d[l_ac].stah015 = '' 
         CALL cl_set_comp_entry('stah014,stah015',FALSE)
      END IF  
      IF g_stah_d[l_ac].stah013 = '3' THEN    #保底扣減
         LET g_stah_d[l_ac].stah015 = ''
         CALL cl_set_comp_entry('stah015',FALSE)
      END IF      
   END IF   
   
  ]]>
  </point>
  <point name="show.after" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="show.before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="show.body.reference" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   #              INITIALIZE g_ref_fields TO NULL
   #        LET g_ref_fields[1] = g_stah_d[l_ac].stah003
   #        CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
   #        LET g_stah_d[l_ac].stah003_desc = '', g_rtn_fields[1] , ''
   #        DISPLAY BY NAME g_stah_d[l_ac].stah003_desc
   #        
   #        CALL astm201_stah009_ref()
   #        CALL astm201_stah010_ref()

]]>
  </point>
  <point name="show.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="show.head.reference" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      
   CALL astm201_stag007_ref()
   
    INITIALIZE g_ref_fields TO NULL
    LET g_ref_fields[1] = g_stag_m.stag001
    CALL ap_ref_array2(g_ref_fields," SELECT stagl003 FROM stagl_t WHERE staglent = '"||g_enterprise||"' AND stagl001 = ? AND stagl002 = '"||g_dlang||"'","") RETURNING g_rtn_fields 
    LET g_stag_m.stagl003 = g_rtn_fields[1] 
    DISPLAY BY NAME g_stag_m.stagl003
    
    INITIALIZE g_ref_fields TO NULL
    LET g_ref_fields[1] = g_stag_m.stag001
    CALL ap_ref_array2(g_ref_fields," SELECT stagl004 FROM stagl_t WHERE staglent = '"||g_enterprise||"' AND stagl001 = ? AND stagl002 = '"||g_dlang||"'","") RETURNING g_rtn_fields 
    LET g_stag_m.stagl004 = g_rtn_fields[1] 
    DISPLAY BY NAME g_stag_m.stagl004
   
  # INITIALIZE g_ref_fields TO NULL
  # LET g_ref_fields[1] = g_stag_m.stag004
  # CALL ap_ref_array2(g_ref_fields,"SELECT staal003 FROM staal_t WHERE staalent='"||g_enterprise||"' AND staal001=? AND staal002='"||g_dlang||"'","") RETURNING g_rtn_fields
  # LET g_stag_m.stag004_desc = '', g_rtn_fields[1] , ''
  # DISPLAY BY NAME g_stag_m.stag004_desc
  # 
  # 
  #  INITIALIZE g_ref_fields TO NULL
  #  LET g_ref_fields[1] = g_stag_m.stag005
  #  CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001 = '2060' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
  #  LET g_stag_m.stag005_desc = '', g_rtn_fields[1] , ''
  #  DISPLAY BY NAME g_stag_m.stag005_desc
  # 
  # 
  #  INITIALIZE g_ref_fields TO NULL
  #  LET g_ref_fields[1] = g_stag_m.stag006
  #  CALL ap_ref_array2(g_ref_fields,"SELECT ooail003 FROM ooail_t WHERE ooailent='"||g_enterprise||"' AND ooail001=? AND ooail002='"||g_dlang||"'","") RETURNING g_rtn_fields
  #  LET g_stag_m.stag006_desc = '', g_rtn_fields[1] , ''
  #  DISPLAY BY NAME g_stag_m.stag006_desc
  # 
  # SELECT oodbl004 INTO g_stag_m.stag007_desc  FROM oodbl_t,ooef_t
  #  WHERE oodblent = g_enterprise AND oodbl001 = ooef019 
  #    AND oodbl002 = g_stag_m.stag007  AND oodbl003 = g_dlang
  #    AND ooefent = g_enterprise AND ooef001 = g_site
  #  DISPLAY BY NAME g_stag_m.stag007_desc
  # 
  # 
  # INITIALIZE g_ref_fields TO NULL
  # LET g_ref_fields[1] = g_stag_m.stag008
  # CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
  # LET g_stag_m.stag008_desc = '', g_rtn_fields[1] , ''
  # DISPLAY BY NAME g_stag_m.stag008_desc 
  # 
  # 
  # 
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagownid
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagownid_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagownid_desc
  #
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagowndp
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagowndp_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagowndp_desc
  #
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagcrtid
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagcrtid_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagcrtid_desc
  #
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagcrtdp
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagcrtdp_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagcrtdp_desc
  #
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagmodid
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagmodid_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagmodid_desc
  #          
  #          INITIALIZE g_ref_fields TO NULL
  #          LET g_ref_fields[1] = g_stag_m.stagcnfid
  #          CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
  #          LET g_stag_m.stagcnfid_desc = '', g_rtn_fields[1] , ''
  #          DISPLAY BY NAME g_stag_m.stagcnfid_desc]]>
  </point>
  <point name="show.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="statechange.a_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="statechange.after" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="statechange.b_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      LET l_success = TRUE
   CASE 
      WHEN lc_state = 'Y' AND g_stag_m.stagstus = 'N'
         CALL s_astm201_conf_chk(g_stag_m.stag001) RETURNING l_success,g_errno
         IF l_success THEN
            IF cl_ask_confirm('aim-00108') THEN
               CALL s_transaction_begin()
               CALL s_astm201_conf_upd(g_stag_m.stag001) RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0')
                  RETURN
               ELSE
                  CALL s_transaction_end('Y','1')
               END IF
            ELSE
               RETURN
            END IF
         ELSE
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = g_errno
            LET g_errparam.extend = g_stag_m.stag001
            LET g_errparam.popup = TRUE
            CALL cl_err()

            RETURN
         END IF
      WHEN lc_state = 'X' AND g_stag_m.stagstus = 'N'
         CALL s_astm201_void_chk(g_stag_m.stag001) RETURNING l_success,g_errno
         IF l_success THEN
            IF cl_ask_confirm('art-00039') THEN
               CALL s_transaction_begin()
               CALL s_astm201_void_upd(g_stag_m.stag001) RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0')
                  RETURN
               ELSE
                  CALL s_transaction_end('Y','1')
               END IF
            ELSE
               RETURN 
            END IF
         ELSE
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = g_errno
            LET g_errparam.extend = g_stag_m.stag001
            LET g_errparam.popup = TRUE
            CALL cl_err()

            RETURN
         END IF   
       WHEN lc_state = 'N' AND g_stag_m.stagstus = 'X'
         CALL s_astm201_void_chk(g_stag_m.stag001) RETURNING l_success,g_errno
         IF l_success THEN
           IF cl_ask_confirm('art-00038') THEN
              CALL s_transaction_begin()
              CALL s_astm201_void_upd(g_stag_m.stag001) RETURNING l_success
              IF NOT l_success THEN
                 CALL s_transaction_end('N','0')
                 RETURN
              ELSE
                 CALL s_transaction_end('Y','1')
              END IF
           ELSE
              RETURN 
           END IF
         ELSE
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = g_errno
            LET g_errparam.extend = g_stag_m.stag001
            LET g_errparam.popup = TRUE
            CALL cl_err()

            RETURN
         END IF          
       WHEN lc_state = 'N' AND g_stag_m.stagstus = 'Y'
          CALL s_astm201_unconf_chk(g_stag_m.stag001) RETURNING l_success,g_errno
          IF l_success THEN
             IF cl_ask_confirm('aim-00110') THEN
                CALL s_transaction_begin()
                CALL s_astm201_unconf_upd(g_stag_m.stag001) RETURNING l_success
                IF NOT l_success THEN
                  CALL s_transaction_end('N','0')
                  RETURN
                ELSE
                  CALL s_transaction_end('Y','1')
                END IF
             ELSE 
                RETURN
             END IF
          ELSE
             INITIALIZE g_errparam TO NULL
            LET g_errparam.code = g_errno
            LET g_errparam.extend = g_stag_m.stag001
            LET g_errparam.popup = TRUE
            CALL cl_err()

             RETURN
          END IF
                 
               
     END CASE               ]]>
  </point>
  <point name="statechange.before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="statechange.before_menu" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               CASE g_stag_m.stagstus
            WHEN "Y"
               HIDE OPTION "void"
            WHEN "X"
               HIDE OPTION "valid"
         END CASE]]>
  </point>
  <point name="statechange.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      DEFINE l_success      LIKE type_t.num5 ]]>
  </point>
  <point name="statechange.more_control" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="statechange.open" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="statechange.valid" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="statechange.void" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="ui_browser_refresh.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_detailshow.after" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_detailshow.before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_detailshow.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_dialog.before_dialog" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_dialog.before_dialog2" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ]]>
  </point>
  <point name="ui_dialog.body1.action" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="ui_dialog.body1.before_row" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               CALL astm201_b2_fill()
               CALL astm201_reflesh()]]>
  </point>
  <point name="ui_dialog.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="ui_dialog.more_displayarray" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                   DISPLAY ARRAY g_stai_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b2) #page1  
    
            BEFORE ROW
               CALL astm201_idx_chk2()
               LET l_ac2 = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx2 = l_ac2
               
               #add-point:page1, before row動作

               #end add-point
               
            BEFORE DISPLAY
               CALL FGL_SET_ARR_CURR(g_detail_idx2)
               LET l_ac2 = DIALOG.getCurrentRow("s_detail2")
               CALL astm201_idx_chk2()
               LET g_current_page = 2
               
            #自訂ACTION(detail_show,page_1)
            

            #add-point:page1自定義行為
            
            #end add-point
               
         END DISPLAY]]>
  </point>
  <point name="ui_dialog.page1.action" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            ]]>
  </point>
  <point name="ui_dialog.page1.before_display" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               ]]>
  </point>
  <point name="ui_dialog.page1.before_row" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[                              CALL astm201_b2_fill()
               CALL astm201_reflesh()]]>
  </point>
  <point name="ui_headershow.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="unlock_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="unlock_b.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="update_b.after_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="update_b.before_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="update_b.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="update_b.m_update" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      ]]>
  </point>
  <point name="update_b.other" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <section id="astm201.action_chk" ver="1" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION astm201_action_chk()
   #add-point:action_chk段define
   {<point name="action_chk.define" edit="s"/>}
   #end add-point
   #add-point:action_chk段define(客製用)
   {<point name="action_chk.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:action_chk段action_chk
   {<point name="action_chk.action_chk"/>}
   #end add-point
   
   RETURN TRUE
   
END FUNCTION
]]>
  </section>
  <section id="astm201.b_fill" ver="12" status="" src="s" readonly="">
    <![CDATA[#+ 單身陣列填充
PRIVATE FUNCTION astm201_b_fill()
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define
   {<point name="b_fill.define" edit="s"/>}
   #end add-point     
   #add-point:b_fill段define(客製用)
   {<point name="b_fill.define_customerization" edit="c"/>}
   #end add-point     
 
   CALL g_stah_d.clear()    #g_stah_d 單頭及單身 
 
 
   #add-point:b_fill段sql_before
   {<point name="b_fill.sql_before"/>}
   #end add-point
   
   #判斷是否填充
   IF astm201_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF g_action_choice <> 'fetch' OR cl_null(g_action_choice) THEN
         LET g_sql = "SELECT  UNIQUE stah002,stah003,stah004,stah005,stah006,stah007,stah008,stah009, 
             stah010,stah011,stah012,stah013,stah014,stah015,stah016 ,t1.stael003 ,t2.stabl003 ,t3.stabl003 FROM stah_t", 
                
                     " INNER JOIN stag_t ON stag001 = stah001 ",
 
                     #"",
                     
                     "",
                                    " LEFT JOIN stael_t t1 ON t1.staelent='"||g_enterprise||"' AND t1.stael001=stah003 AND t1.stael002='"||g_dlang||"' ",
               " LEFT JOIN stabl_t t2 ON t2.stablent='"||g_enterprise||"' AND t2.stabl001=stah009 AND t2.stabl002='"||g_dlang||"' ",
               " LEFT JOIN stabl_t t3 ON t3.stablent='"||g_enterprise||"' AND t3.stabl001=stah010 AND t3.stabl002='"||g_dlang||"' ",
 
                     " WHERE stahent=? AND stah001=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before
         {<point name="b_fill.body.fill_sql"/>}
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY stah_t.stah002"
         
         #add-point:單身填充控制
         {<point name="b_fill.sql"/>}
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astm201_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR astm201_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
      OPEN b_fill_cs USING g_enterprise,g_stag_m.stag001
                                               
      FOREACH b_fill_cs INTO g_stah_d[l_ac].stah002,g_stah_d[l_ac].stah003,g_stah_d[l_ac].stah004,g_stah_d[l_ac].stah005, 
          g_stah_d[l_ac].stah006,g_stah_d[l_ac].stah007,g_stah_d[l_ac].stah008,g_stah_d[l_ac].stah009, 
          g_stah_d[l_ac].stah010,g_stah_d[l_ac].stah011,g_stah_d[l_ac].stah012,g_stah_d[l_ac].stah013, 
          g_stah_d[l_ac].stah014,g_stah_d[l_ac].stah015,g_stah_d[l_ac].stah016,g_stah_d[l_ac].stah003_desc, 
          g_stah_d[l_ac].stah009_desc,g_stah_d[l_ac].stah010_desc
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
         {<point name="b_fill.fill"/>}
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code   = 9035 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
   
 
   
   #add-point:browser_fill段其他table處理
   {<point name="browser_fill.other_fill"/>}
   #end add-point
   
   CALL g_stah_d.deleteElement(g_stah_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE astm201_pb
 
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO g_stah_d.getLength()
      LET g_stah_d_mask_o[l_ac].* =  g_stah_d[l_ac].*
      CALL astm201_stah_t_mask()
      LET g_stah_d_mask_n[l_ac].* =  g_stah_d[l_ac].*
   END FOR
   
 
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
]]>
  </section>
  <section id="astm201.b_fill2" ver="6" status="" src="s" readonly="">
    <![CDATA[#+ 單身陣列填充2
PRIVATE FUNCTION astm201_b_fill2(pi_idx)
   DEFINE pi_idx          LIKE type_t.num10
   DEFINE li_ac           LIKE type_t.num10
   DEFINE ls_chk          LIKE type_t.chr1
   #add-point:b_fill2段define
   {<point name="b_fill2.define" edit="s"/>}
   #end add-point
   #add-point:b_fill2段define(客製用)
   {<point name="b_fill2.define_customerization" edit="c"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
 
      
 
      
   #add-point:單身填充後
   {<point name="b_fill2.after_fill" />}
   #end add-point
    
   LET l_ac = li_ac
   
   CALL astm201_detail_show()
   
END FUNCTION
]]>
  </section>
  <section id="astm201.browser_fill" ver="22" status="" src="s" readonly="">
    <![CDATA[#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION astm201_browser_fill(ps_page_action)
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define
   {<point name="browser_fill.define" edit="s"/>}
   #end add-point   
   #add-point:browser_fill段define(客製用)
   {<point name="browser_fill.define_customerization" edit="c"/>}
   #end add-point   
   
   #add-point:browser_fill段動作開始前
   {<point name="browser_fill.before_browser_fill"/>}
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前
   {<point name="browser_fill.before_foreach"/>}
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE stag001 ",
                      " FROM stag_t ",
                      " ",
                      " LEFT JOIN stah_t ON stahent = stagent AND stag001 = stah001 ", "  ",
                      #add-point:browser_fill段sql(stah_t1)
                      {<point name="browser_fill.cnt.join.}"/>}
                      #end add-point
 
 
                      " LEFT JOIN stagl_t ON staglent = '"||g_enterprise||"' AND stag001 = stagl001 AND stagl002 = '",g_dlang,"' ", 
                      " ", 
                      " WHERE stagent = '" ||g_enterprise|| "' AND stahent = '" ||g_enterprise|| "' AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("stag_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE stag001 ",
                      " FROM stag_t ", 
                      "  ",
                      "  LEFT JOIN stagl_t ON staglent = '"||g_enterprise||"' AND stag001 = stagl001 AND stagl002 = '",g_dlang,"' ",
                      " WHERE stagent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED, cl_sql_add_filter("stag_t")
   END IF
   
   #add-point:browser_fill,cnt wc
   {<point name="browser_fill.cnt_sqlwc"/>}
   #end add-point
   
   LET g_sql = " SELECT COUNT(*) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前
   {<point name="browser_fill.before_count"/>}
   #end add-point
   
   PREPARE header_cnt_pre FROM g_sql
   EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
   FREE header_cnt_pre
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code   = 9035 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_stag_m.* TO NULL
      CALL g_stah_d.clear()        
 
      #add-point:browser_fill g_add_browse段額外處理
      {<point name="browser_fill.add_browse.other"/>}
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.stag001 Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   LET g_sql = " SELECT DISTINCT t0.stagstus,t0.stag001 ",
               " FROM stag_t t0",
               "  ",
               "  LEFT JOIN stah_t ON stahent = stagent AND stag001 = stah001 ", "  ", 
               #add-point:browser_fill段sql(stah_t1)
               {<point name="browser_fill.join.stah_t1"/>}
               #end add-point
 
 
               "  ",
               
               " LEFT JOIN stagl_t ON staglent = '"||g_enterprise||"' AND stag001 = stagl001 AND stagl002 = '",g_dlang,"' ",
               " WHERE t0.stagent = '" ||g_enterprise|| "' AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("stag_t")
   #add-point:browser_fill,sql wc
   {<point name="browser_fill.fill_sqlwc"/>}
   #end add-point
   LET g_sql = g_sql, " ORDER BY stag001 ",g_order
 
   #add-point:browser_fill,before_prepare
   {<point name="browser_fill.before_prepare"/>}
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"stag_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   PREPARE browse_pre FROM g_sql
   DECLARE browse_cur CURSOR FOR browse_pre
   
   #add-point:browser_fill段open cursor
   {<point name="browser_fill.open"/>}
   #end add-point
   
   FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_stag001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = 'foreach:' 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         EXIT FOREACH
      END IF
  
      #add-point:browser_fill段reference
      {<point name="browser_fill.reference"/>}
      #end add-point
  
  
            #應用 a24 樣板自動產生(Version:2)
      #browser顯示圖片
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/open.png"
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/valid.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/void.png"
         
      END CASE
 
 
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_browse THEN
         EXIT FOREACH
      END IF
      
   END FOREACH
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_stag001) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
   
   FREE browse_pre
   
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前
   {<point name="browser_fill.after"/>}
   #end add-point   
 
END FUNCTION
]]>
  </section>
  <section id="astm201.construct" ver="13" status="" src="s" readonly="">
    <![CDATA[#+ QBE資料查詢
PRIVATE FUNCTION astm201_construct()
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   #add-point:cs段define
   {<point name="cs.define" edit="s"/>}
   #end add-point    
   #add-point:cs段define(客製用)
   {<point name="cs.define_customerization" edit="c"/>}
   #end add-point    
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stag_m.* TO NULL
   CALL g_stah_d.clear()        
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前
   {<point name="cs.before_construct"/>}
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON stagunit,stag001,stagl003,stagl004,stag002,stag003,stag004,stag005,stag006, 
          stag007,stag007_desc,stagstus,stagownid,stagowndp,stagcrtid,stagcrtdp,stagcrtdt,stagmodid, 
          stagmoddt,stagcnfid,stagcnfdt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
            {<point name="cs.head.before_construct"/>}
            #end add-point 
            
         #公用欄位開窗相關處理
         #應用 a11 樣板自動產生(Version:2)
         #共用欄位查詢處理  
         ##----<<stagcrtdt>>----
         AFTER FIELD stagcrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
 
         #----<<stagmoddt>>----
         AFTER FIELD stagmoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stagcnfdt>>----
         AFTER FIELD stagcnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stagpstdt>>----
 
 
            
         #一般欄位開窗相關處理    
                  #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagunit
            #add-point:BEFORE FIELD stagunit
            {<point name="construct.b.stagunit" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagunit
            
            #add-point:AFTER FIELD stagunit
            {<point name="construct.a.stagunit" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagunit
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagunit
            #add-point:ON ACTION controlp INFIELD stagunit
            {<point name="construct.c.stagunit" />}
            #END add-point
 
         #Ctrlp:construct.c.stag001
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag001
            #add-point:ON ACTION controlp INFIELD stag001
            {<point name="construct.c.stag001" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag001
            #add-point:BEFORE FIELD stag001
            {<point name="construct.b.stag001" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag001
            
            #add-point:AFTER FIELD stag001
            {<point name="construct.a.stag001" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagl003
            #add-point:BEFORE FIELD stagl003
            {<point name="construct.b.stagl003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagl003
            
            #add-point:AFTER FIELD stagl003
            {<point name="construct.a.stagl003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagl003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagl003
            #add-point:ON ACTION controlp INFIELD stagl003
            {<point name="construct.c.stagl003" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagl004
            #add-point:BEFORE FIELD stagl004
            {<point name="construct.b.stagl004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagl004
            
            #add-point:AFTER FIELD stagl004
            {<point name="construct.a.stagl004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagl004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagl004
            #add-point:ON ACTION controlp INFIELD stagl004
            {<point name="construct.c.stagl004" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag002
            #add-point:BEFORE FIELD stag002
            {<point name="construct.b.stag002" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag002
            
            #add-point:AFTER FIELD stag002
            {<point name="construct.a.stag002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag002
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag002
            #add-point:ON ACTION controlp INFIELD stag002
            {<point name="construct.c.stag002" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag003
            #add-point:BEFORE FIELD stag003
            {<point name="construct.b.stag003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag003
            
            #add-point:AFTER FIELD stag003
            {<point name="construct.a.stag003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag003
            #add-point:ON ACTION controlp INFIELD stag003
            {<point name="construct.c.stag003" />}
            #END add-point
 
         #Ctrlp:construct.c.stag004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag004
            #add-point:ON ACTION controlp INFIELD stag004
            {<point name="construct.c.stag004" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag004
            #add-point:BEFORE FIELD stag004
            {<point name="construct.b.stag004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag004
            
            #add-point:AFTER FIELD stag004
            {<point name="construct.a.stag004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag005
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag005
            #add-point:ON ACTION controlp INFIELD stag005
            {<point name="construct.c.stag005" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag005
            #add-point:BEFORE FIELD stag005
            {<point name="construct.b.stag005" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag005
            
            #add-point:AFTER FIELD stag005
            {<point name="construct.a.stag005" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag006
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag006
            #add-point:ON ACTION controlp INFIELD stag006
            {<point name="construct.c.stag006" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag006
            #add-point:BEFORE FIELD stag006
            {<point name="construct.b.stag006" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag006
            
            #add-point:AFTER FIELD stag006
            {<point name="construct.a.stag006" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag007
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag007
            #add-point:ON ACTION controlp INFIELD stag007
            {<point name="construct.c.stag007" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag007
            #add-point:BEFORE FIELD stag007
            {<point name="construct.b.stag007" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag007
            
            #add-point:AFTER FIELD stag007
            {<point name="construct.a.stag007" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag007_desc
            #add-point:BEFORE FIELD stag007_desc
            {<point name="construct.b.stag007_desc" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag007_desc
            
            #add-point:AFTER FIELD stag007_desc
            {<point name="construct.a.stag007_desc" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stag007_desc
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag007_desc
            #add-point:ON ACTION controlp INFIELD stag007_desc
            {<point name="construct.c.stag007_desc" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagstus
            #add-point:BEFORE FIELD stagstus
            {<point name="construct.b.stagstus" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagstus
            
            #add-point:AFTER FIELD stagstus
            {<point name="construct.a.stagstus" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagstus
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagstus
            #add-point:ON ACTION controlp INFIELD stagstus
            {<point name="construct.c.stagstus" />}
            #END add-point
 
         #Ctrlp:construct.c.stagownid
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagownid
            #add-point:ON ACTION controlp INFIELD stagownid
            {<point name="construct.c.stagownid" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagownid
            #add-point:BEFORE FIELD stagownid
            {<point name="construct.b.stagownid" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagownid
            
            #add-point:AFTER FIELD stagownid
            {<point name="construct.a.stagownid" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagowndp
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagowndp
            #add-point:ON ACTION controlp INFIELD stagowndp
            {<point name="construct.c.stagowndp" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagowndp
            #add-point:BEFORE FIELD stagowndp
            {<point name="construct.b.stagowndp" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagowndp
            
            #add-point:AFTER FIELD stagowndp
            {<point name="construct.a.stagowndp" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagcrtid
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagcrtid
            #add-point:ON ACTION controlp INFIELD stagcrtid
            {<point name="construct.c.stagcrtid" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagcrtid
            #add-point:BEFORE FIELD stagcrtid
            {<point name="construct.b.stagcrtid" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagcrtid
            
            #add-point:AFTER FIELD stagcrtid
            {<point name="construct.a.stagcrtid" />}
            #END add-point
            
 
         #Ctrlp:construct.c.stagcrtdp
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagcrtdp
            #add-point:ON ACTION controlp INFIELD stagcrtdp
            {<point name="construct.c.stagcrtdp" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagcrtdp
            #add-point:BEFORE FIELD stagcrtdp
            {<point name="construct.b.stagcrtdp" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagcrtdp
            
            #add-point:AFTER FIELD stagcrtdp
            {<point name="construct.a.stagcrtdp" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagcrtdt
            #add-point:BEFORE FIELD stagcrtdt
            {<point name="construct.b.stagcrtdt" />}
            #END add-point
 
         #Ctrlp:construct.c.stagmodid
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagmodid
            #add-point:ON ACTION controlp INFIELD stagmodid
            {<point name="construct.c.stagmodid" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagmodid
            #add-point:BEFORE FIELD stagmodid
            {<point name="construct.b.stagmodid" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagmodid
            
            #add-point:AFTER FIELD stagmodid
            {<point name="construct.a.stagmodid" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagmoddt
            #add-point:BEFORE FIELD stagmoddt
            {<point name="construct.b.stagmoddt" />}
            #END add-point
 
         #Ctrlp:construct.c.stagcnfid
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagcnfid
            #add-point:ON ACTION controlp INFIELD stagcnfid
            {<point name="construct.c.stagcnfid" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagcnfid
            #add-point:BEFORE FIELD stagcnfid
            {<point name="construct.b.stagcnfid" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagcnfid
            
            #add-point:AFTER FIELD stagcnfid
            {<point name="construct.a.stagcnfid" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagcnfdt
            #add-point:BEFORE FIELD stagcnfdt
            {<point name="construct.b.stagcnfdt" />}
            #END add-point
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON stah002,stah003,stah004,stah005,stah006,stah007,stah008,stah009,stah010, 
          stah011,stah012,stah013,stah014,stah015,stah016
           FROM s_detail1[1].stah002,s_detail1[1].stah003,s_detail1[1].stah004,s_detail1[1].stah005, 
               s_detail1[1].stah006,s_detail1[1].stah007,s_detail1[1].stah008,s_detail1[1].stah009,s_detail1[1].stah010, 
               s_detail1[1].stah011,s_detail1[1].stah012,s_detail1[1].stah013,s_detail1[1].stah014,s_detail1[1].stah015, 
               s_detail1[1].stah016
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
            {<point name="cs.body.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah002
            #add-point:BEFORE FIELD stah002
            {<point name="construct.b.page1.stah002" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah002
            
            #add-point:AFTER FIELD stah002
            {<point name="construct.a.page1.stah002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah002
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah002
            #add-point:ON ACTION controlp INFIELD stah002
            {<point name="construct.c.page1.stah002" />}
            #END add-point
 
         #Ctrlp:construct.c.page1.stah003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah003
            #add-point:ON ACTION controlp INFIELD stah003
            {<point name="construct.c.page1.stah003" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah003
            #add-point:BEFORE FIELD stah003
            {<point name="construct.b.page1.stah003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah003
            
            #add-point:AFTER FIELD stah003
            {<point name="construct.a.page1.stah003" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah004
            #add-point:BEFORE FIELD stah004
            {<point name="construct.b.page1.stah004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah004
            
            #add-point:AFTER FIELD stah004
            {<point name="construct.a.page1.stah004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah004
            #add-point:ON ACTION controlp INFIELD stah004
            {<point name="construct.c.page1.stah004" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah005
            #add-point:BEFORE FIELD stah005
            {<point name="construct.b.page1.stah005" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah005
            
            #add-point:AFTER FIELD stah005
            {<point name="construct.a.page1.stah005" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah005
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah005
            #add-point:ON ACTION controlp INFIELD stah005
            {<point name="construct.c.page1.stah005" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah006
            #add-point:BEFORE FIELD stah006
            {<point name="construct.b.page1.stah006" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah006
            
            #add-point:AFTER FIELD stah006
            {<point name="construct.a.page1.stah006" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah006
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah006
            #add-point:ON ACTION controlp INFIELD stah006
            {<point name="construct.c.page1.stah006" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah007
            #add-point:BEFORE FIELD stah007
            {<point name="construct.b.page1.stah007" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah007
            
            #add-point:AFTER FIELD stah007
            {<point name="construct.a.page1.stah007" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah007
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah007
            #add-point:ON ACTION controlp INFIELD stah007
            {<point name="construct.c.page1.stah007" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah008
            #add-point:BEFORE FIELD stah008
            {<point name="construct.b.page1.stah008" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah008
            
            #add-point:AFTER FIELD stah008
            {<point name="construct.a.page1.stah008" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah008
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah008
            #add-point:ON ACTION controlp INFIELD stah008
            {<point name="construct.c.page1.stah008" />}
            #END add-point
 
         #Ctrlp:construct.c.page1.stah009
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah009
            #add-point:ON ACTION controlp INFIELD stah009
            {<point name="construct.c.page1.stah009" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah009
            #add-point:BEFORE FIELD stah009
            {<point name="construct.b.page1.stah009" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah009
            
            #add-point:AFTER FIELD stah009
            {<point name="construct.a.page1.stah009" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah010
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah010
            #add-point:ON ACTION controlp INFIELD stah010
            {<point name="construct.c.page1.stah010" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah010
            #add-point:BEFORE FIELD stah010
            {<point name="construct.b.page1.stah010" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah010
            
            #add-point:AFTER FIELD stah010
            {<point name="construct.a.page1.stah010" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah011
            #add-point:BEFORE FIELD stah011
            {<point name="construct.b.page1.stah011" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah011
            
            #add-point:AFTER FIELD stah011
            {<point name="construct.a.page1.stah011" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah011
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah011
            #add-point:ON ACTION controlp INFIELD stah011
            {<point name="construct.c.page1.stah011" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah012
            #add-point:BEFORE FIELD stah012
            {<point name="construct.b.page1.stah012" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah012
            
            #add-point:AFTER FIELD stah012
            {<point name="construct.a.page1.stah012" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah012
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah012
            #add-point:ON ACTION controlp INFIELD stah012
            {<point name="construct.c.page1.stah012" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah013
            #add-point:BEFORE FIELD stah013
            {<point name="construct.b.page1.stah013" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah013
            
            #add-point:AFTER FIELD stah013
            {<point name="construct.a.page1.stah013" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah013
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah013
            #add-point:ON ACTION controlp INFIELD stah013
            {<point name="construct.c.page1.stah013" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah014
            #add-point:BEFORE FIELD stah014
            {<point name="construct.b.page1.stah014" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah014
            
            #add-point:AFTER FIELD stah014
            {<point name="construct.a.page1.stah014" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah014
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah014
            #add-point:ON ACTION controlp INFIELD stah014
            {<point name="construct.c.page1.stah014" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah015
            #add-point:BEFORE FIELD stah015
            {<point name="construct.b.page1.stah015" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah015
            
            #add-point:AFTER FIELD stah015
            {<point name="construct.a.page1.stah015" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah015
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah015
            #add-point:ON ACTION controlp INFIELD stah015
            {<point name="construct.c.page1.stah015" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah016
            #add-point:BEFORE FIELD stah016
            {<point name="construct.b.page1.stah016" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah016
            
            #add-point:AFTER FIELD stah016
            {<point name="construct.a.page1.stah016" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.stah016
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah016
            #add-point:ON ACTION controlp INFIELD stah016
            {<point name="construct.c.page1.stah016" />}
            #END add-point
 
   
       
      END CONSTRUCT
      
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令)
      {<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog
         {<point name="cs.b_dialog"/>}
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
 
 
 
   
   #add-point:cs段結束前
   {<point name="cs.after_construct"/>}
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
]]>
  </section>
  <section id="astm201.default_search" ver="11" status="" src="s" readonly="">
    <![CDATA[#+ 外部參數搜尋
PRIVATE FUNCTION astm201_default_search()
   DEFINE li_idx  LIKE type_t.num10
   DEFINE li_cnt  LIKE type_t.num10
   DEFINE ls_wc   STRING
   #add-point:default_search段define
   {<point name="default_search.define" edit="s"/>}
   #end add-point  
   #add-point:default_search段define(客製用)
   {<point name="default_search.define_customerization" edit="c"/>}
   #end add-point  
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " stag001 = '", g_argv[01], "' AND "
   END IF
   
 
   
   #add-point:default_search段after sql
   {<point name="default_search.after_sql"/>}
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      #預設查詢條件
      LET g_wc = cl_qbe_get_default_qryplan()
      IF cl_null(g_wc) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
]]>
  </section>
  <section id="astm201.delete" ver="24" status="" src="s" readonly="">
    <![CDATA[#+ 資料刪除
PRIVATE FUNCTION astm201_delete()
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define
   {<point name="delete.define" edit="s"/>}
   #end add-point     
   #add-point:delete段define(客製用)
   {<point name="delete.define_customerization" edit="c"/>}
   #end add-point     
   
   IF g_stag_m.stag001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   LET g_master_multi_table_t.stagl001 = g_stag_m.stag001
LET g_master_multi_table_t.stagl003 = g_stag_m.stagl003
LET g_master_multi_table_t.stagl004 = g_stag_m.stagl004
 
   
   CALL s_transaction_begin()
 
   OPEN astm201_cl USING g_enterprise,g_stag_m.stag001
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astm201_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      CLOSE astm201_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
   
   #檢查是否允許此動作
   IF NOT astm201_action_chk() THEN
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_stag_m_mask_o.* =  g_stag_m.*
   CALL astm201_stag_t_mask()
   LET g_stag_m_mask_n.* =  g_stag_m.*
   
   CALL astm201_show()
   
   #add-point:delete段before ask
   {<point name="delete.before_ask"/>}
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前
      {<point name="delete.head.b_delete" mark="Y"/>}
      #end add-point   
      
      #應用 a47 樣板自動產生(Version:2)
      #刪除相關文件
      CALL astm201_set_pk_array()
      #add-point:相關文件刪除前
      {<point name="delete.befroe.related_document_remove"/>}
      #end add-point   
      CALL cl_doc_remove()  
 
 
  
  
      #資料備份
      LET g_stag001_t = g_stag_m.stag001
 
 
      DELETE FROM stag_t
       WHERE stagent = g_enterprise AND stag001 = g_stag_m.stag001
 
       
      #add-point:單頭刪除中
      {<point name="delete.head.m_delete"/>}
      #end add-point
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_stag_m.stag001 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      
      #add-point:單頭刪除後
      {<point name="delete.head.a_delete"/>}
      #end add-point
  
      #add-point:單身刪除前
      {<point name="delete.body.b_delete" mark="Y"/>}
      #end add-point
      
      DELETE FROM stah_t
       WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001
 
 
      #add-point:單身刪除中
      {<point name="delete.body.m_delete"/>}
      #end add-point
         
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stah_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF    
 
      #add-point:單身刪除後
      {<point name="delete.body.a_delete"/>}
      #end add-point
      
            
                                                               
 
 
 
      
      #修改歷程記錄(刪除)
      IF NOT cl_log_modified_record('','') THEN 
         CLOSE astm201_cl
         CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL g_stah_d.clear() 
 
     
      CALL astm201_ui_browser_refresh()  
      #CALL astm201_ui_headershow()  
      #CALL astm201_ui_detailshow()
      
      IF g_browser_cnt > 0 THEN 
         #CALL astm201_browser_fill("")
         CALL astm201_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
 
      #add-point:多語言刪除
      {<point name="delete.lang.before_delete"/>}
      #end add-point
      
      #單頭多語言刪除
      INITIALIZE l_var_keys_bak TO NULL 
   INITIALIZE l_field_keys   TO NULL 
   LET l_var_keys_bak[01] = g_enterprise
   LET l_field_keys[01] = 'staglent'
   LET l_var_keys_bak[02] = g_master_multi_table_t.stagl001
   LET l_field_keys[02] = 'stagl001'
   CALL cl_multitable_delete(l_field_keys,l_var_keys_bak,'stagl_t')
 
      
      #單身多語言刪除
      
 
 
   
      #add-point:多語言刪除
      {<point name="delete.lang.delete"/>}
      #end add-point
   
   END IF
 
   CALL s_transaction_end('Y','0')
   CLOSE astm201_cl
 
   #功能已完成,通報訊息中心
   CALL astm201_msgcentre_notify('')
    
END FUNCTION
]]>
  </section>
  <section id="astm201.delete_b" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ 刪除單身後其他table連動
PRIVATE FUNCTION astm201_delete_b(ps_table,ps_keys_bak,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define
   {<point name="delete_b.define" edit="s"/>}
   #end add-point     
   #add-point:delete_b段define(客製用)
   {<point name="delete_b.define_customerization" edit="c"/>}
   #end add-point     
 
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete" mark="Y"/>}
      #end add-point    
      DELETE FROM stah_t
       WHERE stahent = g_enterprise AND
         stah001 = ps_keys_bak[1] AND stah002 = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_stah_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
 
   
 
   
   #add-point:delete_b段other
   {<point name="delete_b.other"/>}
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
]]>
  </section>
  <section id="astm201.description" ver="34" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:6,PR版次:6) Build-000436
#+ 
#+ Filename...: astm201
#+ Description: 合約模板維護作業
#+ Creator....: 01533(2013-10-08 14:02:12)
#+ Modifier...: 01752(2015-03-09 00:37:01) -SD/PR-
]]>
  </section>
  <section id="astm201.detail_reproduce" ver="7" status="" src="s" readonly="">
    <![CDATA[#+ 單身自動複製
PRIVATE FUNCTION astm201_detail_reproduce()
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE stah_t.*
 
 
   #add-point:delete段define
   {<point name="detail_reproduce.define" edit="s"/>}
   #end add-point    
   #add-point:delete段define(客製用)
   {<point name="detail_reproduce.define_customerization" edit="c"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE astm201_detail
   
   #add-point:單身複製前1
   {<point name="detail_reproduce.body.table1.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE astm201_detail AS ",
                "SELECT * FROM stah_t "
   PREPARE repro_tbl FROM ls_sql
   EXECUTE repro_tbl
   FREE repro_tbl
                
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO astm201_detail SELECT * FROM stah_t 
                                         WHERE stahent = g_enterprise AND stah001 = g_stag001_t
 
   
   #將key修正為調整後   
   UPDATE astm201_detail 
      #更新key欄位
      SET stah001 = g_stag_m.stag001
 
      #更新共用欄位
      
 
   #add-point:單身修改前
   {<point name="detail_reproduce.body.table1.b_update"/>}
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO stah_t SELECT * FROM astm201_detail
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1
   {<point name="detail_reproduce.body.table1.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astm201_detail
   
   #add-point:單身複製後1
   {<point name="detail_reproduce.body.table1.a_insert"/>}
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_stag001_t = g_stag_m.stag001
 
   
END FUNCTION
]]>
  </section>
  <section id="astm201.detail_show" ver="6" status="" src="s" readonly="">
    <![CDATA[#+ 第二階單身reference
PRIVATE FUNCTION astm201_detail_show()
   #add-point:detail_show段define
   {<point name="detail_show.define" edit="s"/>}
   #end add-point  
   #add-point:detail_show段define(客製用)
   {<point name="detail_show.define_customerization" edit="c"/>}
   #end add-point  
   
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   #add-point:detail_show段之後
   {<point name="detail_show.after"/>}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="astm201.fetch" ver="18" status="" src="s" readonly="">
    <![CDATA[#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION astm201_fetch(p_flag)
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define
   {<point name="fetch.define" edit="s"/>}
   #end add-point    
   #add-point:fetch段define(客製用)
   {<point name="fetch.define_customerization" edit="c"/>}
   #end add-point    
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_pagestart = g_current_idx
   DISPLAY g_pagestart TO FORMONLY.b_index   #當下筆數
   DISPLAY g_pagestart TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_pagestart, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #超出範圍
   IF g_current_idx > g_browser.getLength() THEN
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_stag_m.stag001 = g_browser[g_current_idx].b_stag001
 
   
   #重讀DB,因TEMP有不被更新特性
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
   
   #遮罩相關處理
   LET g_stag_m_mask_o.* =  g_stag_m.*
   CALL astm201_stag_t_mask()
   LET g_stag_m_mask_n.* =  g_stag_m.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astm201_set_act_visible()   
   CALL astm201_set_act_no_visible()
   
   #add-point:fetch段action控制
   {<point name="fetch.action_control"/>}
   #end add-point  
   
   
   
   #add-point:fetch結束前
   {<point name="fetch.after" />}
   #end add-point
   
   #保存單頭舊值
   LET g_stag_m_t.* = g_stag_m.*
   LET g_stag_m_o.* = g_stag_m.*
   
   LET g_data_owner = g_stag_m.stagownid      
   LET g_data_dept  = g_stag_m.stagowndp
   
   #重新顯示   
   CALL astm201_show()
 
   
 
END FUNCTION
]]>
  </section>
  <section id="astm201.fill_chk" ver="8" status="" src="s" readonly="">
    <![CDATA[#+ 單身填充確認
PRIVATE FUNCTION astm201_fill_chk(ps_idx)
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define
   {<point name="fill_chk.define" edit="s"/>}
   #end add-point
   #add-point:fill_chk段define(客製用)
   {<point name="fill_chk.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:fill_chk段before_chk
   {<point name="fill_chk.before_chk"/>}
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk
      {<point name="fill_chk.other_chk"/>}
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk
   {<point name="fill_chk.after_chk"/>}
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
]]>
  </section>
  <section id="astm201.global" ver="24" status="" src="s" readonly="">
    <![CDATA[#應用 t01 樣板自動產生(Version:35)
{<point name="global.memo" />}
        
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔
{<point name="global.inc" />}
#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_stag_m        RECORD
       stagunit LIKE stag_t.stagunit, 
   stagunit_desc LIKE type_t.chr80, 
   stag001 LIKE stag_t.stag001, 
   stagl003 LIKE stagl_t.stagl003, 
   stagl004 LIKE stagl_t.stagl004, 
   stag002 LIKE stag_t.stag002, 
   stag003 LIKE stag_t.stag003, 
   stag003_desc LIKE type_t.chr80, 
   stag004 LIKE stag_t.stag004, 
   stag004_desc LIKE type_t.chr80, 
   stag005 LIKE stag_t.stag005, 
   stag005_desc LIKE type_t.chr80, 
   stag006 LIKE stag_t.stag006, 
   stag006_desc LIKE type_t.chr80, 
   stag007 LIKE stag_t.stag007, 
   stag007_desc LIKE type_t.chr80, 
   stagstus LIKE stag_t.stagstus, 
   stagownid LIKE stag_t.stagownid, 
   stagownid_desc LIKE type_t.chr80, 
   stagowndp LIKE stag_t.stagowndp, 
   stagowndp_desc LIKE type_t.chr80, 
   stagcrtid LIKE stag_t.stagcrtid, 
   stagcrtid_desc LIKE type_t.chr80, 
   stagcrtdp LIKE stag_t.stagcrtdp, 
   stagcrtdp_desc LIKE type_t.chr80, 
   stagcrtdt LIKE stag_t.stagcrtdt, 
   stagmodid LIKE stag_t.stagmodid, 
   stagmodid_desc LIKE type_t.chr80, 
   stagmoddt LIKE stag_t.stagmoddt, 
   stagcnfid LIKE stag_t.stagcnfid, 
   stagcnfid_desc LIKE type_t.chr80, 
   stagcnfdt LIKE stag_t.stagcnfdt
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_stah_d        RECORD
       stah002 LIKE stah_t.stah002, 
   stah003 LIKE stah_t.stah003, 
   stah003_desc LIKE type_t.chr500, 
   stah004 LIKE stah_t.stah004, 
   stah005 LIKE stah_t.stah005, 
   stah006 LIKE stah_t.stah006, 
   stah007 LIKE stah_t.stah007, 
   stah008 LIKE stah_t.stah008, 
   stah009 LIKE stah_t.stah009, 
   stah009_desc LIKE type_t.chr500, 
   stah010 LIKE stah_t.stah010, 
   stah010_desc LIKE type_t.chr500, 
   stah011 LIKE stah_t.stah011, 
   stah012 LIKE stah_t.stah012, 
   stah013 LIKE stah_t.stah013, 
   stah014 LIKE stah_t.stah014, 
   stah015 LIKE stah_t.stah015, 
   stah016 LIKE stah_t.stah016
       END RECORD
 
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
            b_stag001 LIKE stag_t.stag001
       END RECORD
       
#模組變數(Module Variables)
DEFINE g_stag_m          type_g_stag_m
DEFINE g_stag_m_t        type_g_stag_m
DEFINE g_stag_m_o        type_g_stag_m
DEFINE g_stag_m_mask_o   type_g_stag_m #轉換遮罩前資料
DEFINE g_stag_m_mask_n   type_g_stag_m #轉換遮罩後資料
 
   DEFINE g_stag001_t LIKE stag_t.stag001
 
 
DEFINE g_stah_d          DYNAMIC ARRAY OF type_g_stah_d
DEFINE g_stah_d_t        type_g_stah_d
DEFINE g_stah_d_o        type_g_stah_d
DEFINE g_stah_d_mask_o   DYNAMIC ARRAY OF type_g_stah_d #轉換遮罩前資料
DEFINE g_stah_d_mask_n   DYNAMIC ARRAY OF type_g_stah_d #轉換遮罩後資料
 
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
DEFINE g_master_multi_table_t    RECORD
      stagl001 LIKE stagl_t.stagl001,
      stagl003 LIKE stagl_t.stagl003,
      stagl004 LIKE stagl_t.stagl004
      END RECORD
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
 
 
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog
    
DEFINE g_pagestart           LIKE type_t.num10           
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_page_action         STRING                        #page action
DEFINE g_header_hidden       LIKE type_t.num5              #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5              #隱藏工作Panel
DEFINE g_page                STRING                        #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10              #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10              #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10              #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10              #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10              #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10              #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                        #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10              #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                       #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10              #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5              #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable" edit="s"/>}
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv)
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="astm201.idx_chk" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION astm201_idx_chk()
   #add-point:idx_chk段define
   {<point name="idx_chk.define" edit="s"/>}
   #end add-point  
   #add-point:idx_chk段define(客製用)
   {<point name="idx_chk.define_customerization" edit="c"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_stah_d.getLength() THEN
         LET g_detail_idx = g_stah_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_stah_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_stah_d.getLength() TO FORMONLY.cnt
   END IF
   
 
   
   #add-point:idx_chk段other
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION
]]>
  </section>
  <section id="astm201.init" ver="7" status="" src="s" readonly="">
    <![CDATA[#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION astm201_init()
   #add-point:init段define
   {<point name="init.define" edit="s"/>}
   #end add-point    
   #add-point:init段define(客製用)
   {<point name="init.define_customerization" edit="c"/>}
   #end add-point    
 
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
      CALL cl_set_combo_scc_part('stagstus','50','N,Y,X')
 
      CALL cl_set_combo_scc('stag002','6013') 
   CALL cl_set_combo_scc('stah005','6006') 
   CALL cl_set_combo_scc('stah006','6007') 
   CALL cl_set_combo_scc('stah007','6008') 
   CALL cl_set_combo_scc('stah008','6009') 
   CALL cl_set_combo_scc('stah013','6010') 
   CALL cl_set_combo_scc('stah016','6011') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
 
   #add-point:畫面資料初始化
   {<point name="init.init"/>}
   #end add-point
   
   #初始化搜尋條件
   CALL astm201_default_search()
    
END FUNCTION
]]>
  </section>
  <section id="astm201.input" ver="10" status="" src="s" readonly="">
    <![CDATA[#+ 資料輸入
PRIVATE FUNCTION astm201_input(p_cmd)
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define
   {<point name="input.define" edit="s"/>}
   #end add-point  
   #add-point:input段define(客製用)
   {<point name="input.define_customerization" edit="c"/>}
   #end add-point  
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stagunit_desc,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004, 
       g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag003_desc,g_stag_m.stag004,g_stag_m.stag004_desc, 
       g_stag_m.stag005,g_stag_m.stag005_desc,g_stag_m.stag006,g_stag_m.stag006_desc,g_stag_m.stag007, 
       g_stag_m.stag007_desc,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagownid_desc,g_stag_m.stagowndp, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp,g_stag_m.stagcrtdp_desc, 
       g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmodid_desc,g_stag_m.stagmoddt,g_stag_m.stagcnfid, 
       g_stag_m.stagcnfid_desc,g_stag_m.stagcnfdt
   
   #切換畫面
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql
   {<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT stah002,stah003,stah004,stah005,stah006,stah007,stah008,stah009,stah010, 
       stah011,stah012,stah013,stah014,stah015,stah016 FROM stah_t WHERE stahent=? AND stah001=? AND  
       stah002=? FOR UPDATE"
   #add-point:input段define_sql
   {<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astm201_bcl CURSOR FROM g_forupd_sql
   
 
   
 
 
   #add-point:input段define_sql
   {<point name="input.other_sql"/>}
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL astm201_set_entry(p_cmd)
   #add-point:set_entry後
   {<point name="input.after_set_entry"/>}
   #end add-point
   CALL astm201_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus 

   
   LET lb_reproduce = FALSE
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前
   {<point name="input.before_input"/>}
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
]]>
  </section>
  <section id="astm201.input.body" ver="19" status="" src="s" readonly="">
    <![CDATA[   
      #Page1 預設值產生於此處
      INPUT ARRAY g_stah_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #add-point:資料輸入前
            {<point name="input.body.before_input2"/>}
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_stah_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astm201_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_detail_idx)
            END IF
            LET g_loc = 'm'
            LET g_rec_b = g_stah_d.getLength()
            #add-point:資料輸入前
            {<point name="input.d.before_input"/>}
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2
            {<point name="input.body.before_row2"/>}
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_current_page = 1
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astm201_cl USING g_enterprise,g_stag_m.stag001
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astm201_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CLOSE astm201_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_stah_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_stah_d[l_ac].stah002 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_stah_d_t.* = g_stah_d[l_ac].*  #BACKUP
               LET g_stah_d_o.* = g_stah_d[l_ac].*  #BACKUP
               CALL astm201_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
               {<point name="input.body.after_set_entry_b"/>}
               #end add-point  
               CALL astm201_set_no_entry_b(l_cmd)
               IF NOT astm201_lock_b("stah_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astm201_bcl INTO g_stah_d[l_ac].stah002,g_stah_d[l_ac].stah003,g_stah_d[l_ac].stah004, 
                      g_stah_d[l_ac].stah005,g_stah_d[l_ac].stah006,g_stah_d[l_ac].stah007,g_stah_d[l_ac].stah008, 
                      g_stah_d[l_ac].stah009,g_stah_d[l_ac].stah010,g_stah_d[l_ac].stah011,g_stah_d[l_ac].stah012, 
                      g_stah_d[l_ac].stah013,g_stah_d[l_ac].stah014,g_stah_d[l_ac].stah015,g_stah_d[l_ac].stah016 

                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_stah_d_t.stah002 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_stah_d_mask_o[l_ac].* =  g_stah_d[l_ac].*
                  CALL astm201_stah_t_mask()
                  LET g_stah_d_mask_n[l_ac].* =  g_stah_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astm201_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_stah_d[l_ac].* TO NULL 
            INITIALIZE g_stah_d_t.* TO NULL 
            INITIALIZE g_stah_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
            
            #add-point:modify段before備份
            {<point name="input.body.insert.before_bak"/>}
            #end add-point
            LET g_stah_d_t.* = g_stah_d[l_ac].*     #新輸入資料
            LET g_stah_d_o.* = g_stah_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astm201_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
            {<point name="input.body.insert.after_set_entry_b"/>}
            #end add-point
            CALL astm201_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_stah_d[li_reproduce_target].* = g_stah_d[li_reproduce].*
 
               LET g_stah_d[li_reproduce_target].stah002 = NULL
 
            END IF
            
            #add-point:modify段before insert
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增
            {<point name="input.body.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM stah_t 
             WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001
 
               AND stah002 = g_stah_d[l_ac].stah002
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
               {<point name="input.body.b_insert"/>}
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stag_m.stag001
               LET gs_keys[2] = g_stah_d[g_detail_idx].stah002
               CALL astm201_insert_b('stah_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               INITIALIZE g_stah_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stah_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astm201_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert
               {<point name="input.body.a_insert2"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d)
               {<point name="input.body.after_delete_d"/>}
               #end add-point
            ELSE
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
               {<point name="input.body.b_delete" mark="Y"/>}
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_stag_m.stag001
 
               LET gs_keys[gs_keys.getLength()+1] = g_stah_d_t.stah002
 
            
               #刪除同層單身
               IF NOT astm201_delete_b('stah_t',gs_keys,"'1'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astm201_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT astm201_key_delete_b(gs_keys,'stah_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astm201_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
               
               #add-point:單身刪除中
               {<point name="input.body.m_delete"/>}
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE astm201_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後
               {<point name="input.body.a_delete"/>}
               #end add-point
               LET l_count = g_stah_d.getLength()
               
               #add-point:單身刪除後(<>d)
               {<point name="input.body.after_delete"/>}
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_stah_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah002
            #add-point:BEFORE FIELD stah002
            {<point name="input.b.page1.stah002" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah002
            
            #add-point:AFTER FIELD stah002
            {<point name="input.a.page1.stah002" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah002
            #add-point:ON CHANGE stah002
            {<point name="input.g.page1.stah002" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah003
            
            #add-point:AFTER FIELD stah003
            {<point name="input.a.page1.stah003" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah003
            #add-point:BEFORE FIELD stah003
            {<point name="input.b.page1.stah003" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah003
            #add-point:ON CHANGE stah003
            {<point name="input.g.page1.stah003" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah004
            #add-point:BEFORE FIELD stah004
            {<point name="input.b.page1.stah004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah004
            
            #add-point:AFTER FIELD stah004
            {<point name="input.a.page1.stah004" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah004
            #add-point:ON CHANGE stah004
            {<point name="input.g.page1.stah004" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah005
            #add-point:BEFORE FIELD stah005
            {<point name="input.b.page1.stah005" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah005
            
            #add-point:AFTER FIELD stah005
            {<point name="input.a.page1.stah005" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah005
            #add-point:ON CHANGE stah005
            {<point name="input.g.page1.stah005" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah006
            #add-point:BEFORE FIELD stah006
            {<point name="input.b.page1.stah006" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah006
            
            #add-point:AFTER FIELD stah006
            {<point name="input.a.page1.stah006" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah006
            #add-point:ON CHANGE stah006
            {<point name="input.g.page1.stah006" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah007
            #add-point:BEFORE FIELD stah007
            {<point name="input.b.page1.stah007" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah007
            
            #add-point:AFTER FIELD stah007
            {<point name="input.a.page1.stah007" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah007
            #add-point:ON CHANGE stah007
            {<point name="input.g.page1.stah007" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah008
            #add-point:BEFORE FIELD stah008
            {<point name="input.b.page1.stah008" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah008
            
            #add-point:AFTER FIELD stah008
            {<point name="input.a.page1.stah008" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah008
            #add-point:ON CHANGE stah008
            {<point name="input.g.page1.stah008" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah009
            
            #add-point:AFTER FIELD stah009
            {<point name="input.a.page1.stah009" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah009
            #add-point:BEFORE FIELD stah009
            {<point name="input.b.page1.stah009" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah009
            #add-point:ON CHANGE stah009
            {<point name="input.g.page1.stah009" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah010
            
            #add-point:AFTER FIELD stah010
            {<point name="input.a.page1.stah010" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah010
            #add-point:BEFORE FIELD stah010
            {<point name="input.b.page1.stah010" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah010
            #add-point:ON CHANGE stah010
            {<point name="input.g.page1.stah010" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah011
            #add-point:BEFORE FIELD stah011
            {<point name="input.b.page1.stah011" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah011
            
            #add-point:AFTER FIELD stah011
            {<point name="input.a.page1.stah011" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah011
            #add-point:ON CHANGE stah011
            {<point name="input.g.page1.stah011" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah012
            #add-point:BEFORE FIELD stah012
            {<point name="input.b.page1.stah012" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah012
            
            #add-point:AFTER FIELD stah012
            {<point name="input.a.page1.stah012" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah012
            #add-point:ON CHANGE stah012
            {<point name="input.g.page1.stah012" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah013
            #add-point:BEFORE FIELD stah013
            {<point name="input.b.page1.stah013" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah013
            
            #add-point:AFTER FIELD stah013
            {<point name="input.a.page1.stah013" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah013
            #add-point:ON CHANGE stah013
            {<point name="input.g.page1.stah013" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah014
            #add-point:BEFORE FIELD stah014
            {<point name="input.b.page1.stah014" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah014
            
            #add-point:AFTER FIELD stah014
            {<point name="input.a.page1.stah014" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah014
            #add-point:ON CHANGE stah014
            {<point name="input.g.page1.stah014" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah015
            #add-point:BEFORE FIELD stah015
            {<point name="input.b.page1.stah015" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah015
            
            #add-point:AFTER FIELD stah015
            {<point name="input.a.page1.stah015" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah015
            #add-point:ON CHANGE stah015
            {<point name="input.g.page1.stah015" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stah016
            #add-point:BEFORE FIELD stah016
            {<point name="input.b.page1.stah016" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stah016
            
            #add-point:AFTER FIELD stah016
            {<point name="input.a.page1.stah016" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stah016
            #add-point:ON CHANGE stah016
            {<point name="input.g.page1.stah016" />}
            #END add-point 
 
 
                  #Ctrlp:input.c.page1.stah002
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah002
            #add-point:ON ACTION controlp INFIELD stah002
            {<point name="input.c.page1.stah002" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah003
            #add-point:ON ACTION controlp INFIELD stah003
            {<point name="input.c.page1.stah003" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah004
            #add-point:ON ACTION controlp INFIELD stah004
            {<point name="input.c.page1.stah004" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah005
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah005
            #add-point:ON ACTION controlp INFIELD stah005
            {<point name="input.c.page1.stah005" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah006
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah006
            #add-point:ON ACTION controlp INFIELD stah006
            {<point name="input.c.page1.stah006" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah007
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah007
            #add-point:ON ACTION controlp INFIELD stah007
            {<point name="input.c.page1.stah007" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah008
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah008
            #add-point:ON ACTION controlp INFIELD stah008
            {<point name="input.c.page1.stah008" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah009
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah009
            #add-point:ON ACTION controlp INFIELD stah009
            {<point name="input.c.page1.stah009" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah010
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah010
            #add-point:ON ACTION controlp INFIELD stah010
            {<point name="input.c.page1.stah010" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah011
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah011
            #add-point:ON ACTION controlp INFIELD stah011
            {<point name="input.c.page1.stah011" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah012
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah012
            #add-point:ON ACTION controlp INFIELD stah012
            {<point name="input.c.page1.stah012" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah013
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah013
            #add-point:ON ACTION controlp INFIELD stah013
            {<point name="input.c.page1.stah013" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah014
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah014
            #add-point:ON ACTION controlp INFIELD stah014
            {<point name="input.c.page1.stah014" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah015
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah015
            #add-point:ON ACTION controlp INFIELD stah015
            {<point name="input.c.page1.stah015" />}
            #END add-point
 
         #Ctrlp:input.c.page1.stah016
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stah016
            #add-point:ON ACTION controlp INFIELD stah016
            {<point name="input.c.page1.stah016" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               LET g_stah_d[l_ac].* = g_stah_d_t.*
               CLOSE astm201_bcl
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_stah_d[l_ac].stah002 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_stah_d[l_ac].* = g_stah_d_t.*
            ELSE
            
               #add-point:單身修改前
               {<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               CALL astm201_stah_t_mask_restore('restore_mask_o')
      
               UPDATE stah_t SET (stah001,stah002,stah003,stah004,stah005,stah006,stah007,stah008,stah009, 
                   stah010,stah011,stah012,stah013,stah014,stah015,stah016) = (g_stag_m.stag001,g_stah_d[l_ac].stah002, 
                   g_stah_d[l_ac].stah003,g_stah_d[l_ac].stah004,g_stah_d[l_ac].stah005,g_stah_d[l_ac].stah006, 
                   g_stah_d[l_ac].stah007,g_stah_d[l_ac].stah008,g_stah_d[l_ac].stah009,g_stah_d[l_ac].stah010, 
                   g_stah_d[l_ac].stah011,g_stah_d[l_ac].stah012,g_stah_d[l_ac].stah013,g_stah_d[l_ac].stah014, 
                   g_stah_d[l_ac].stah015,g_stah_d[l_ac].stah016)
                WHERE stahent = g_enterprise AND stah001 = g_stag_m.stag001 
 
                  AND stah002 = g_stah_d_t.stah002 #項次   
 
                  
               #add-point:單身修改中
               {<point name="input.body.m_update"/>}
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stah_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     CALL s_transaction_end('N','0')
                     LET g_stah_d[l_ac].* = g_stah_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stah_t" 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()                   
                     CALL s_transaction_end('N','0')
                     LET g_stah_d[l_ac].* = g_stah_d_t.*  
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stag_m.stag001
               LET gs_keys_bak[1] = g_stag001_t
               LET gs_keys[2] = g_stah_d[g_detail_idx].stah002
               LET gs_keys_bak[2] = g_stah_d_t.stah002
               CALL astm201_update_b('stah_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                     
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL astm201_stah_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(g_stah_d[g_detail_idx].stah002 = g_stah_d_t.stah002 
 
                  ) THEN
                  LET gs_keys[01] = g_stag_m.stag001
 
                  LET gs_keys[gs_keys.getLength()+1] = g_stah_d_t.stah002
 
                  CALL astm201_key_update_b(gs_keys,'stah_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stag_m),util.JSON.stringify(g_stah_d_t)
               LET g_log2 = util.JSON.stringify(g_stag_m),util.JSON.stringify(g_stah_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row
            {<point name="input.body.after_row"/>}
            #end add-point
            CALL astm201_unlock_b("stah_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2
            {<point name="input.body.after_row2"/>}
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input 
            {<point name="input.body.after_input"/>}
            #end add-point 
 
         ON ACTION controlo    
            CALL FGL_SET_ARR_CURR(g_stah_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_stah_d.getLength()+1
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
 
      
 
 
 
]]>
  </section>
  <section id="astm201.input.head" ver="22" status="" src="s" readonly="">
    <![CDATA[      #單頭段
      INPUT BY NAME g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004,g_stag_m.stag002, 
          g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus  

         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION update_item
            LET g_action_choice="update_item"
            IF cl_auth_chk_act("update_item") THEN
               
               #add-point:ON ACTION update_item
               {<point name="input.master_input.update_item" />}
               #END add-point
            END IF
 
 
 
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN astm201_cl USING g_enterprise,g_stag_m.stag001
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astm201_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CLOSE astm201_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            LET g_master_multi_table_t.stagl001 = g_stag_m.stag001
LET g_master_multi_table_t.stagl003 = g_stag_m.stagl003
LET g_master_multi_table_t.stagl004 = g_stag_m.stagl004
 
            IF l_cmd_t = 'r' THEN
               LET g_master_multi_table_t.stagl001 = ''
LET g_master_multi_table_t.stagl003 = ''
LET g_master_multi_table_t.stagl004 = ''
 
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL astm201_set_entry(p_cmd)
            #add-point:資料輸入前
            {<point name="input.m.before_input"/>}
            #end add-point
            CALL astm201_set_no_entry(p_cmd)
    
                  #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagunit
            
            #add-point:AFTER FIELD stagunit
            {<point name="input.a.stagunit" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagunit
            #add-point:BEFORE FIELD stagunit
            {<point name="input.b.stagunit" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stagunit
            #add-point:ON CHANGE stagunit
            {<point name="input.g.stagunit" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag001
            #add-point:BEFORE FIELD stag001
            {<point name="input.b.stag001" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag001
            
            #add-point:AFTER FIELD stag001
            {<point name="input.a.stag001" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag001
            #add-point:ON CHANGE stag001
            {<point name="input.g.stag001" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagl003
            #add-point:BEFORE FIELD stagl003
            {<point name="input.b.stagl003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagl003
            
            #add-point:AFTER FIELD stagl003
            {<point name="input.a.stagl003" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stagl003
            #add-point:ON CHANGE stagl003
            {<point name="input.g.stagl003" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagl004
            #add-point:BEFORE FIELD stagl004
            {<point name="input.b.stagl004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagl004
            
            #add-point:AFTER FIELD stagl004
            {<point name="input.a.stagl004" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stagl004
            #add-point:ON CHANGE stagl004
            {<point name="input.g.stagl004" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag002
            #add-point:BEFORE FIELD stag002
            {<point name="input.b.stag002" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag002
            
            #add-point:AFTER FIELD stag002
            {<point name="input.a.stag002" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag002
            #add-point:ON CHANGE stag002
            {<point name="input.g.stag002" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag003
            
            #add-point:AFTER FIELD stag003
            {<point name="input.a.stag003" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag003
            #add-point:BEFORE FIELD stag003
            {<point name="input.b.stag003" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag003
            #add-point:ON CHANGE stag003
            {<point name="input.g.stag003" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag004
            
            #add-point:AFTER FIELD stag004
            {<point name="input.a.stag004" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag004
            #add-point:BEFORE FIELD stag004
            {<point name="input.b.stag004" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag004
            #add-point:ON CHANGE stag004
            {<point name="input.g.stag004" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag005
            
            #add-point:AFTER FIELD stag005
            {<point name="input.a.stag005" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag005
            #add-point:BEFORE FIELD stag005
            {<point name="input.b.stag005" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag005
            #add-point:ON CHANGE stag005
            {<point name="input.g.stag005" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag006
            
            #add-point:AFTER FIELD stag006
            {<point name="input.a.stag006" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag006
            #add-point:BEFORE FIELD stag006
            {<point name="input.b.stag006" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag006
            #add-point:ON CHANGE stag006
            {<point name="input.g.stag006" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stag007
            
            #add-point:AFTER FIELD stag007
            {<point name="input.a.stag007" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stag007
            #add-point:BEFORE FIELD stag007
            {<point name="input.b.stag007" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stag007
            #add-point:ON CHANGE stag007
            {<point name="input.g.stag007" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD stagstus
            #add-point:BEFORE FIELD stagstus
            {<point name="input.b.stagstus" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD stagstus
            
            #add-point:AFTER FIELD stagstus
            {<point name="input.a.stagstus" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE stagstus
            #add-point:ON CHANGE stagstus
            {<point name="input.g.stagstus" />}
            #END add-point 
 
 #欄位檢查
                  #Ctrlp:input.c.stagunit
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagunit
            #add-point:ON ACTION controlp INFIELD stagunit
            {<point name="input.c.stagunit" />}
            #END add-point
 
         #Ctrlp:input.c.stag001
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag001
            #add-point:ON ACTION controlp INFIELD stag001
            {<point name="input.c.stag001" />}
            #END add-point
 
         #Ctrlp:input.c.stagl003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagl003
            #add-point:ON ACTION controlp INFIELD stagl003
            {<point name="input.c.stagl003" />}
            #END add-point
 
         #Ctrlp:input.c.stagl004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagl004
            #add-point:ON ACTION controlp INFIELD stagl004
            {<point name="input.c.stagl004" />}
            #END add-point
 
         #Ctrlp:input.c.stag002
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag002
            #add-point:ON ACTION controlp INFIELD stag002
            {<point name="input.c.stag002" />}
            #END add-point
 
         #Ctrlp:input.c.stag003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag003
            #add-point:ON ACTION controlp INFIELD stag003
            {<point name="input.c.stag003" />}
            #END add-point
 
         #Ctrlp:input.c.stag004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag004
            #add-point:ON ACTION controlp INFIELD stag004
            {<point name="input.c.stag004" />}
            #END add-point
 
         #Ctrlp:input.c.stag005
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag005
            #add-point:ON ACTION controlp INFIELD stag005
            {<point name="input.c.stag005" />}
            #END add-point
 
         #Ctrlp:input.c.stag006
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag006
            #add-point:ON ACTION controlp INFIELD stag006
            {<point name="input.c.stag006" />}
            #END add-point
 
         #Ctrlp:input.c.stag007
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stag007
            #add-point:ON ACTION controlp INFIELD stag007
            {<point name="input.c.stag007" />}
            #END add-point
 
         #Ctrlp:input.c.stagstus
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD stagstus
            #add-point:ON ACTION controlp INFIELD stagstus
            {<point name="input.c.stagstus" />}
            #END add-point
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_stag_m.stag001
                        
            #add-point:單頭INPUT後
            {<point name="input.head.after_input"/>}
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前
               {<point name="input.head.b_insert" mark="Y"/>}
               #end add-point
               
               INSERT INTO stag_t (stagent,stagunit,stag001,stag002,stag003,stag004,stag005,stag006, 
                   stag007,stagstus,stagownid,stagowndp,stagcrtid,stagcrtdp,stagcrtdt,stagmodid,stagmoddt, 
                   stagcnfid,stagcnfdt)
               VALUES (g_enterprise,g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002,g_stag_m.stag003, 
                   g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
                   g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
                   g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt) 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_stag_m" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CALL s_transaction_end('N','0')
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中
               {<point name="input.head.m_insert"/>}
               #end add-point
               
               
                        INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         IF g_stag_m.stag001 = g_master_multi_table_t.stagl001 AND
         g_stag_m.stagl003 = g_master_multi_table_t.stagl003 AND 
         g_stag_m.stagl004 = g_master_multi_table_t.stagl004  THEN
         ELSE 
            LET l_var_keys[01] = g_enterprise
            LET l_field_keys[01] = 'staglent'
            LET l_var_keys_bak[01] = g_enterprise
            LET l_var_keys[02] = g_stag_m.stag001
            LET l_field_keys[02] = 'stagl001'
            LET l_var_keys_bak[02] = g_master_multi_table_t.stagl001
            LET l_var_keys[03] = g_dlang
            LET l_field_keys[03] = 'stagl002'
            LET l_var_keys_bak[03] = g_dlang
            LET l_vars[01] = g_stag_m.stagl003
            LET l_fields[01] = 'stagl003'
            LET l_vars[02] = g_stag_m.stagl004
            LET l_fields[02] = 'stagl004'
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'stagl_t')
         END IF 
 
               
               #add-point:單頭新增後
               {<point name="input.head.a_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL astm201_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL astm201_b_fill()
               END IF
               
               #add-point:單頭新增後
               {<point name="input.head.a_insert2"/>}
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前
               {<point name="input.head.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL astm201_stag_t_mask_restore('restore_mask_o')
               
               UPDATE stag_t SET (stagunit,stag001,stag002,stag003,stag004,stag005,stag006,stag007,stagstus, 
                   stagownid,stagowndp,stagcrtid,stagcrtdp,stagcrtdt,stagmodid,stagmoddt,stagcnfid,stagcnfdt) = (g_stag_m.stagunit, 
                   g_stag_m.stag001,g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005, 
                   g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagowndp, 
                   g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmoddt, 
                   g_stag_m.stagcnfid,g_stag_m.stagcnfdt)
                WHERE stagent = g_enterprise AND stag001 = g_stag001_t
 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "stag_t" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CALL s_transaction_end('N','0')
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中
               {<point name="input.head.m_update"/>}
               #end add-point
               
               
                        INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         IF g_stag_m.stag001 = g_master_multi_table_t.stagl001 AND
         g_stag_m.stagl003 = g_master_multi_table_t.stagl003 AND 
         g_stag_m.stagl004 = g_master_multi_table_t.stagl004  THEN
         ELSE 
            LET l_var_keys[01] = g_enterprise
            LET l_field_keys[01] = 'staglent'
            LET l_var_keys_bak[01] = g_enterprise
            LET l_var_keys[02] = g_stag_m.stag001
            LET l_field_keys[02] = 'stagl001'
            LET l_var_keys_bak[02] = g_master_multi_table_t.stagl001
            LET l_var_keys[03] = g_dlang
            LET l_field_keys[03] = 'stagl002'
            LET l_var_keys_bak[03] = g_dlang
            LET l_vars[01] = g_stag_m.stagl003
            LET l_fields[01] = 'stagl003'
            LET l_vars[02] = g_stag_m.stagl004
            LET l_fields[02] = 'stagl004'
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'stagl_t')
         END IF 
 
               
               #將遮罩欄位進行遮蔽
               CALL astm201_stag_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(g_stag_m_t)
               LET g_log2 = util.JSON.stringify(g_stag_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後
               {<point name="input.head.a_update"/>}
               #end add-point
            END IF
            
            LET g_stag001_t = g_stag_m.stag001
 
            
      END INPUT
   
]]>
  </section>
  <section id="astm201.input.other" ver="9" status="" src="s" readonly="">
    <![CDATA[      
      #add-point:自定義input
      {<point name="input.more_input"/>}
      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog
         {<point name="input.before_dialog"/>}
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_detail_idx)      
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field
            {<point name="input.next_field"/>}
            #end add-point  
            NEXT FIELD stag001
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD stah002
 
               #add-point:input段modify_detail 
               {<point name="input.modify_detail.other"/>}
               #end add-point  
            END CASE
         END IF
    
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept 
         {<point name="input.accept"/>}
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input 
   {<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION
]]>
  </section>
  <section id="astm201.insert" ver="18" status="" src="s" readonly="">
    <![CDATA[#+ 資料新增
PRIVATE FUNCTION astm201_insert()
   #add-point:insert段define
   {<point name="insert.define" edit="s"/>}
   #end add-point    
   #add-point:insert段define(客製用)
   {<point name="insert.define_customerization" edit="c"/>}
   #end add-point    
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_stah_d.clear()   
 
 
   INITIALIZE g_stag_m.* LIKE stag_t.*             #DEFAULT 設定
   
   LET g_stag001_t = NULL
 
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before
   {<point name="insert.before"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #應用 a14 樣板自動產生(Version:4)    
      #公用欄位新增給值  
      LET g_stag_m.stagownid = g_user
      LET g_stag_m.stagowndp = g_dept
      LET g_stag_m.stagcrtid = g_user
      LET g_stag_m.stagcrtdp = g_dept 
      LET g_stag_m.stagcrtdt = cl_get_current()
      LET g_stag_m.stagmodid = g_user
      LET g_stag_m.stagmoddt = cl_get_current()
      LET g_stag_m.stagstus = 'N'
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_stag_m.stag002 = "1"
      LET g_stag_m.stagstus = "N"
 
 
      #add-point:單頭預設值
      {<point name="insert.default"/>}
      #end add-point 
 
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET g_stag_m_t.* = g_stag_m.*
      LET g_stag_m_o.* = g_stag_m.*
      
      #顯示狀態(stus)圖片
            #應用 a21 樣板自動產生(Version:2)
	  #根據當下狀態碼顯示圖片
      CASE g_stag_m.stagstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
         
      END CASE
 
 
    
      CALL astm201_input("a")
      
      #add-point:單頭輸入後
      {<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG AND NOT g_master_insert THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code   = 9001 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_stag_m.* TO NULL
         INITIALIZE g_stah_d TO NULL
 
         #add-point:取消新增後
         {<point name="insert.cancel"/>}
         #end add-point 
         CALL astm201_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_stah_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astm201_set_act_visible()   
   CALL astm201_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_stag001_t = g_stag_m.stag001
 
   
   #組合新增資料的條件
   LET g_add_browse = " stagent = '" ||g_enterprise|| "' AND",
                      " stag001 = '", g_stag_m.stag001, "' "
 
                      
   #add-point:組合新增資料的條件後
   {<point name="insert.after.add_browse"/>}
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL astm201_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE astm201_cl
   
   CALL astm201_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
   
   #遮罩相關處理
   LET g_stag_m_mask_o.* =  g_stag_m.*
   CALL astm201_stag_t_mask()
   LET g_stag_m_mask_n.* =  g_stag_m.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stagunit_desc,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004, 
       g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag003_desc,g_stag_m.stag004,g_stag_m.stag004_desc, 
       g_stag_m.stag005,g_stag_m.stag005_desc,g_stag_m.stag006,g_stag_m.stag006_desc,g_stag_m.stag007, 
       g_stag_m.stag007_desc,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagownid_desc,g_stag_m.stagowndp, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp,g_stag_m.stagcrtdp_desc, 
       g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmodid_desc,g_stag_m.stagmoddt,g_stag_m.stagcnfid, 
       g_stag_m.stagcnfid_desc,g_stag_m.stagcnfdt
   
   #add-point:新增結束後
   {<point name="insert.after"/>}
   #end add-point 
   
   #功能已完成,通報訊息中心
   CALL astm201_msgcentre_notify('')
   
END FUNCTION
]]>
  </section>
  <section id="astm201.insert_b" ver="7" status="" src="s" readonly="">
    <![CDATA[#+ 新增單身後其他table連動
PRIVATE FUNCTION astm201_insert_b(ps_table,ps_keys,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define
   {<point name="insert_b.define" edit="s"/>}
   #end add-point     
   #add-point:insert_b段define(客製用)
   {<point name="insert_b.define_customerization" edit="c"/>}
   #end add-point     
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
      {<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point 
      INSERT INTO stah_t
                  (stahent,
                   stah001,
                   stah002
                   ,stah003,stah004,stah005,stah006,stah007,stah008,stah009,stah010,stah011,stah012,stah013,stah014,stah015,stah016) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_stah_d[g_detail_idx].stah003,g_stah_d[g_detail_idx].stah004,g_stah_d[g_detail_idx].stah005, 
                       g_stah_d[g_detail_idx].stah006,g_stah_d[g_detail_idx].stah007,g_stah_d[g_detail_idx].stah008, 
                       g_stah_d[g_detail_idx].stah009,g_stah_d[g_detail_idx].stah010,g_stah_d[g_detail_idx].stah011, 
                       g_stah_d[g_detail_idx].stah012,g_stah_d[g_detail_idx].stah013,g_stah_d[g_detail_idx].stah014, 
                       g_stah_d[g_detail_idx].stah015,g_stah_d[g_detail_idx].stah016)
      #add-point:insert_b段資料新增中
      {<point name="insert_b.m_insert"/>}
      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stah_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_stah_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後
      {<point name="insert_b.after_insert"/>}
      #end add-point 
   END IF
   
 
   
 
   
   #add-point:insert_b段other
   {<point name="insert_b.other"/>}
   #end add-point     
   
END FUNCTION
]]>
  </section>
  <section id="astm201.key_delete_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION astm201_key_delete_b(ps_keys_bak,ps_table)
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table    STRING
   #add-point:delete_b段define
   {<point name="key_delete_b.define" edit="s"/>}
   #end add-point
   #add-point:delete_b段define(客製用)
   {<point name="key_delete_b.define_customerization" edit="c"/>}
   #end add-point
   
 
   
   RETURN TRUE
   
END FUNCTION
]]>
  </section>
  <section id="astm201.key_update_b" ver="2" status="" src="s" readonly="">
    <![CDATA[#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION astm201_key_update_b(ps_keys_bak,ps_table)
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table    STRING
   #add-point:update_b段define
   {<point name="key_update_b.define" edit="s"/>}
   #end add-point
   #add-point:update_b段define(客製用)
   {<point name="key_update_b.define_customerization" edit="c"/>}
   #end add-point
   
 
   
END FUNCTION
]]>
  </section>
  <section id="astm201.lock_b" ver="6" status="" src="s" readonly="">
    <![CDATA[#+ 連動lock其他單身table資料
PRIVATE FUNCTION astm201_lock_b(ps_table,ps_page)
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define
   {<point name="lock_b.define" edit="s"/>}
   #end add-point   
   #add-point:lock_b段define(客製用)
   {<point name="lock_b.define_customerization" edit="c"/>}
   #end add-point   
    
   #先刷新資料
   #CALL astm201_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "stah_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN astm201_bcl USING g_enterprise,
                                       g_stag_m.stag001,g_stah_d[g_detail_idx].stah002     
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astm201_bcl" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
 
   
 
   
   #add-point:lock_b段other
   {<point name="lock_b.other"/>}
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
]]>
  </section>
  <section id="astm201.main" ver="19" status="" src="s" readonly="">
    <![CDATA[#應用 a26 樣板自動產生(Version:4)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define
   {<point name="main.define" edit="s"/>}
   #end add-point   
   #add-point:main段define(客製用)
   {<point name="main.define_customerization" edit="c"/>}
   #end add-point   
 
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("ast","")
 
   #add-point:作業初始化
   {<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define
   {<point name="main.define_sql" />}
   #end add-point
   LET g_forupd_sql = " SELECT stagunit,'',stag001,'','',stag002,stag003,'',stag004,'',stag005,'',stag006, 
       '',stag007,'',stagstus,stagownid,'',stagowndp,'',stagcrtid,'',stagcrtdp,'',stagcrtdt,stagmodid, 
       '',stagmoddt,stagcnfid,'',stagcnfdt", 
                      " FROM stag_t",
                      " WHERE stagent= ? AND stag001=? FOR UPDATE"
   #add-point:SQL_define
   {<point name="main.after_define_sql"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astm201_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT UNIQUE t0.stagunit,t0.stag001,t0.stag002,t0.stag003,t0.stag004,t0.stag005,t0.stag006, 
       t0.stag007,t0.stagstus,t0.stagownid,t0.stagowndp,t0.stagcrtid,t0.stagcrtdp,t0.stagcrtdt,t0.stagmodid, 
       t0.stagmoddt,t0.stagcnfid,t0.stagcnfdt,t1.ooefl003 ,t2.ooibl004 ,t3.staal003 ,t4.oocql004 ,t5.ooail003 , 
       t6.ooag011 ,t7.ooefl003 ,t8.ooag011 ,t9.ooefl003 ,t10.ooag011 ,t11.ooag011",
               " FROM stag_t t0",
                              " LEFT JOIN ooefl_t t1 ON t1.ooeflent='"||g_enterprise||"' AND t1.ooefl001=t0.stagunit AND t1.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooibl_t t2 ON t2.ooiblent='"||g_enterprise||"' AND t2.ooibl002=t0.stag003 AND t2.ooibl003='"||g_dlang||"' ",
               " LEFT JOIN staal_t t3 ON t3.staalent='"||g_enterprise||"' AND t3.staal001=t0.stag004 AND t3.staal002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t4 ON t4.oocqlent='"||g_enterprise||"' AND t4.oocql001='2060' AND t4.oocql002=t0.stag005 AND t4.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooail_t t5 ON t5.ooailent='"||g_enterprise||"' AND t5.ooail001=t0.stag006 AND t5.ooail002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t6 ON t6.ooagent='"||g_enterprise||"' AND t6.ooag001=t0.stagownid  ",
               " LEFT JOIN ooefl_t t7 ON t7.ooeflent='"||g_enterprise||"' AND t7.ooefl001=t0.stagowndp AND t7.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t8 ON t8.ooagent='"||g_enterprise||"' AND t8.ooag001=t0.stagcrtid  ",
               " LEFT JOIN ooefl_t t9 ON t9.ooeflent='"||g_enterprise||"' AND t9.ooefl001=t0.stagcrtdp AND t9.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t10 ON t10.ooagent='"||g_enterprise||"' AND t10.ooag001=t0.stagmodid  ",
               " LEFT JOIN ooag_t t11 ON t11.ooagent='"||g_enterprise||"' AND t11.ooag001=t0.stagcnfid  ",
 
               " WHERE t0.stagent = '" ||g_enterprise|| "' AND t0.stag001 = ?"
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define
   {<point name="main.after_refresh_sql"/>}
   #end add-point
   PREPARE astm201_master_referesh FROM g_sql
 
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_astm201 WITH FORM cl_ap_formpath("ast",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL astm201_init()   
 
      #進入選單 Menu (="N")
      CALL astm201_ui_dialog() 
      
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_astm201
      
   END IF 
   
   CLOSE astm201_cl
   
   
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
]]>
  </section>
  <section id="astm201.mask_functions" ver="1" status="" src="s" readonly="">
    <![CDATA[&include "erp/ast/astm201_mask.4gl"
]]>
  </section>
  <section id="astm201.modify" ver="22" status="" src="s" readonly="">
    <![CDATA[#+ 資料修改
PRIVATE FUNCTION astm201_modify()
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
 
 
   #add-point:modify段define
   {<point name="modify.define" edit="s"/>}
   #end add-point    
   #add-point:modify段define(客製用)
   {<point name="modify.define_customerization" edit="c"/>}
   #end add-point    
   
   #保存單頭舊值
   LET g_stag_m_t.* = g_stag_m.*
   LET g_stag_m_o.* = g_stag_m.*
   
   IF g_stag_m.stag001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_stag001_t = g_stag_m.stag001
 
   CALL s_transaction_begin()
   
   OPEN astm201_cl USING g_enterprise,g_stag_m.stag001
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astm201_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      CLOSE astm201_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
   
   #檢查是否允許此動作
   IF NOT astm201_action_chk() THEN
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_stag_m_mask_o.* =  g_stag_m.*
   CALL astm201_stag_t_mask()
   LET g_stag_m_mask_n.* =  g_stag_m.*
   
   
   
   #add-point:modify段show之前
   {<point name="modify.before_show"/>}
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
 
 
   
   CALL astm201_show()
   #add-point:modify段show之後
   {<point name="modify.after_show"/>}
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
 
 
    
   WHILE TRUE
      LET g_stag001_t = g_stag_m.stag001
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_stag_m.stagmodid = g_user 
LET g_stag_m.stagmoddt = cl_get_current()
LET g_stag_m.stagmodid_desc = cl_get_username(g_stag_m.stagmodid)
      
      #add-point:modify段修改前
      {<point name="modify.before_input"/>}
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      CALL astm201_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後
      {<point name="modify.after_input"/>}
      #end add-point
      
      IF g_update OR NOT INT_FLAG THEN
         #若有modid跟moddt則進行update
         UPDATE stag_t SET (stagmodid,stagmoddt) = (g_stag_m.stagmodid,g_stag_m.stagmoddt)
          WHERE stagent = g_enterprise AND stag001 = g_stag001_t
 
      END IF
    
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_stag_m.* = g_stag_m_t.*
         CALL astm201_show()
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code   = 9001 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF g_stag_m.stag001 != g_stag001_t 
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前
         {<point name="modify.body.b_fk_update" mark="Y"/>}
         #end add-point
         
         #更新單身key值
         UPDATE stah_t SET stah001 = g_stag_m.stag001
 
          WHERE stahent = g_enterprise AND stah001 = g_stag001_t
 
            
         #add-point:單身fk修改中
         {<point name="modify.body.m_fk_update"/>}
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stah_t" 
               LET g_errparam.code   = "std-00009" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stah_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後
         {<point name="modify.body.a_fk_update"/>}
         #end add-point
         
 
         
 
         
         #UPDATE 多語言table key值
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astm201_set_act_visible()   
   CALL astm201_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " stagent = '" ||g_enterprise|| "' AND",
                      " stag001 = '", g_stag_m.stag001, "' "
 
   #填到對應位置
   CALL astm201_browser_fill("")
 
   CLOSE astm201_cl
   
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL astm201_msgcentre_notify('')
 
END FUNCTION   
]]>
  </section>
  <section id="astm201.msgcentre_notify" ver="1" status="" src="s" readonly="">
    <![CDATA[#應用 a66 樣板自動產生(Version:2)
PRIVATE FUNCTION astm201_msgcentre_notify(lc_state)
   DEFINE lc_state LIKE type_t.chr5
   #add-point:msgcentre_notify段define
   {<point name="msgcentre_notify.define" edit="s"/>}
   #end add-point
   #add-point:msgcentre_notify段define
   {<point name="msgcentre_notify.define_customerization" edit="c"/>}
   #end add-point   
   
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   IF g_action_choice = "statechange" THEN
      LET g_msgparam.state = g_action_choice,":",lc_state
   ELSE
      LET g_msgparam.state = g_action_choice
   END IF
 
   #PK資料填寫
   CALL astm201_set_pk_array()
   #單頭資料填寫
   LET g_msgparam.data[1] = util.JSON.stringify(g_stag_m)
 
   #add-point:msgcentre其他通知
   {<point name="msgcentre_notify.process"/>}
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
 
]]>
  </section>
  <section id="astm201.other_dialog" ver="2" status="" src="s" readonly="">
    <![CDATA[   
]]>
  </section>
  <section id="astm201.other_function" ver="2" status="" src="s" readonly="">
    <![CDATA[{<point name="other.function"/>}
]]>
  </section>
  <section id="astm201.query" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ 資料查詢QBE功能準備
PRIVATE FUNCTION astm201_query()
   DEFINE ls_wc STRING
   #add-point:query段define
   {<point name="query.define" edit="s"/>}
   #end add-point   
   #add-point:query段define(客製用)
   {<point name="query.define_customerization" edit="c"/>}
   #end add-point   
   
   #切換畫面
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_stah_d.clear()
 
   
   #add-point:query段other
   {<point name="query.other"/>}
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL astm201_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      LET g_wc = ls_wc
      CALL astm201_browser_fill("")
      CALL astm201_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
   CALL astm201_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "-100" 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
   ELSE
      CALL astm201_fetch("F") 
      #顯示單身筆數
      CALL astm201_idx_chk()
   END IF
 
END FUNCTION
]]>
  </section>
  <section id="astm201.reproduce" ver="18" status="" src="s" readonly="">
    <![CDATA[#+ 資料複製
PRIVATE FUNCTION astm201_reproduce()
   DEFINE l_newno     LIKE stag_t.stag001 
   DEFINE l_oldno     LIKE stag_t.stag001 
 
   DEFINE l_master    RECORD LIKE stag_t.*
   DEFINE l_detail    RECORD LIKE stah_t.*
 
 
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define
   {<point name="reproduce.define" edit="s"/>}
   #end add-point   
   #add-point:reproduce段define(客製用)
   {<point name="reproduce.define_customerization" edit="c"/>}
   #end add-point   
   
   #切換畫面
   
   LET g_master_insert = FALSE
   
   IF g_stag_m.stag001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_stag001_t = g_stag_m.stag001
 
    
   LET g_stag_m.stag001 = ""
 
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #應用 a14 樣板自動產生(Version:4)    
      #公用欄位新增給值  
      LET g_stag_m.stagownid = g_user
      LET g_stag_m.stagowndp = g_dept
      LET g_stag_m.stagcrtid = g_user
      LET g_stag_m.stagcrtdp = g_dept 
      LET g_stag_m.stagcrtdt = cl_get_current()
      LET g_stag_m.stagmodid = g_user
      LET g_stag_m.stagmoddt = cl_get_current()
      LET g_stag_m.stagstus = 'N'
 
 
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前
   {<point name="reproduce.head.b_input"/>}
   #end add-point
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:2)
	  #根據當下狀態碼顯示圖片
      CASE g_stag_m.stagstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
         
      END CASE
 
 
   
   #清空key欄位的desc
   
   
   CALL astm201_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code   = 9001 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      CALL s_transaction_end('N','0')
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_stag_m.* TO NULL
      INITIALIZE g_stah_d TO NULL
 
      #add-point:複製取消後
      {<point name="reproduce.cancel" />}
      #end add-point
      CALL astm201_show()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astm201_set_act_visible()   
   CALL astm201_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_stag001_t = g_stag_m.stag001
 
   
   #組合新增資料的條件
   LET g_add_browse = " stagent = '" ||g_enterprise|| "' AND",
                      " stag001 = '", g_stag_m.stag001, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL astm201_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後
   {<point name="reproduce.after_reproduce" />}
   #end add-point
   
   CALL astm201_idx_chk()
   
   #功能已完成,通報訊息中心
   CALL astm201_msgcentre_notify('')
 
END FUNCTION
]]>
  </section>
  <section id="astm201.set_act_no_visible" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單頭權限關閉
PRIVATE FUNCTION astm201_set_act_no_visible()
   #add-point:set_act_no_visible段define
   {<point name="set_act_no_visible.define" edit="s"/>}
   #end add-point   
   #add-point:set_act_no_visible段define(客製用)
   {<point name="set_act_no_visible.define_customerization" edit="c"/>}
   #end add-point   
   #add-point:set_act_no_visible段
   {<point name="set_act_no_visible.set_act_no_visible"/>}
   #end add-point   
END FUNCTION
]]>
  </section>
  <section id="astm201.set_act_no_visible_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身權限關閉
PRIVATE FUNCTION astm201_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define
   {<point name="set_act_no_visible_b.define" edit="s"/>}
   #end add-point   
   #add-point:set_act_no_visible_b段define(客製用)
   {<point name="set_act_no_visible_b.define_customerization" edit="c"/>}
   #end add-point   
   #add-point:set_act_no_visible_b段
   {<point name="set_act_no_visible_b.set_act_no_visible_b"/>}
   #end add-point   
END FUNCTION
]]>
  </section>
  <section id="astm201.set_act_visible" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單頭權限開啟
PRIVATE FUNCTION astm201_set_act_visible()
   #add-point:set_act_visible段define
   {<point name="set_act_visible.define" edit="s"/>}
   #end add-point   
   #add-point:set_act_visible段define(客製用)
   {<point name="set_act_visible.define_customerization" edit="c"/>}
   #end add-point   
   #add-point:set_act_visible段
   {<point name="set_act_visible.set_act_visible"/>}
   #end add-point   
END FUNCTION
]]>
  </section>
  <section id="astm201.set_act_visible_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身權限開啟
PRIVATE FUNCTION astm201_set_act_visible_b()
   #add-point:set_act_visible_b段define
   {<point name="set_act_visible_b.define" edit="s"/>}
   #end add-point   
   #add-point:set_act_visible_b段define(客製用)
   {<point name="set_act_visible_b.define_customerization" edit="c"/>}
   #end add-point   
   #add-point:set_act_visible_b段
   {<point name="set_act_visible_b.set_act_visible_b"/>}
   #end add-point   
END FUNCTION
]]>
  </section>
  <section id="astm201.set_entry" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 單頭欄位開啟設定
PRIVATE FUNCTION astm201_set_entry(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define
   {<point name="set_entry.define" edit="s"/>}
   #end add-point       
   #add-point:set_entry段define(客製用)
   {<point name="set_entry.define_customerization" edit="c"/>}
   #end add-point       
   
   CALL cl_set_comp_entry("",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("stag001",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後
   {<point name="set_entry.after_control"/>}
   #end add-point 
 
END FUNCTION
]]>
  </section>
  <section id="astm201.set_entry_b" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 單身欄位開啟設定
PRIVATE FUNCTION astm201_set_entry_b(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define" edit="s"/>}
   #end add-point     
   #add-point:set_entry_b段define(客製用)
   {<point name="set_entry_b.define_customerization" edit="c"/>}
   #end add-point     
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry_b.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry_b段
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point  
END FUNCTION
]]>
  </section>
  <section id="astm201.set_no_entry" ver="6" status="" src="s" readonly="">
    <![CDATA[#+ 單頭欄位關閉設定
PRIVATE FUNCTION astm201_set_no_entry(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define
   {<point name="set_no_entry.define" edit="s"/>}
   #end add-point     
   #add-point:set_no_entry段define(客製用)
   {<point name="set_no_entry.define_customerization" edit="c"/>}
   #end add-point     
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("stag001",FALSE)
      #add-point:set_no_entry段欄位控制
      {<point name="set_no_entry.field_control"/>}
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN
      CALL cl_set_comp_entry("",FALSE)
   END IF 
   
   #add-point:set_no_entry段欄位控制後
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
 
END FUNCTION
]]>
  </section>
  <section id="astm201.set_no_entry_b" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 單身欄位關閉設定
PRIVATE FUNCTION astm201_set_no_entry_b(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define" edit="s"/>}
   #end add-point    
   #add-point:set_no_entry_b段define(客製用)
   {<point name="set_no_entry_b.define_customerization" edit="c"/>}
   #end add-point    
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制
      {<point name="set_no_entry_b.field_control"/>}
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point     
END FUNCTION
]]>
  </section>
  <section id="astm201.set_pk_array" ver="3" status="" src="s" readonly="">
    <![CDATA[   #應用 a51 樣板自動產生(Version:5)
#+ 給予pk_array內容
PRIVATE FUNCTION astm201_set_pk_array()
   #add-point:set_pk_array段define
   {<point name="set_pk_array.define" edit="s"/>}
   #end add-point
   #add-point:set_pk_array段define
   {<point name="set_pk_array.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:set_pk_array段之前
   {<point name="set_pk_array.before"/>}
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_stag_m.stag001
   LET g_pk_array[1].column = 'stag001'
 
   
   #add-point:set_pk_array段之後
   {<point name="set_pk_array.after"/>}
   #end add-point  
   
END FUNCTION
 
 
]]>
  </section>
  <section id="astm201.show" ver="14" status="" src="s" readonly="">
    <![CDATA[#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION astm201_show()
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define
   {<point name="show.define" edit="s"/>}
   #end add-point  
   #add-point:show段define(客製用)
   {<point name="show.define_customerization" edit="c"/>}
   #end add-point  
   
   #add-point:show段之前
   {<point name="show.before"/>}
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL astm201_b_fill() #單身填充
      CALL astm201_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #應用 a12 樣板自動產生(Version:3)
 
 
   
   #顯示followup圖示
   #應用 a48 樣板自動產生(Version:2)
   CALL astm201_set_pk_array()
   #add-point:ON ACTION agendum
   {<point name="show.follow_pic"/>}
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference
   {<point name="show.head.reference"/>}
   #end add-point
   
   #遮罩相關處理
   LET g_stag_m_mask_o.* =  g_stag_m.*
   CALL astm201_stag_t_mask()
   LET g_stag_m_mask_n.* =  g_stag_m.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stagunit_desc,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004, 
       g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag003_desc,g_stag_m.stag004,g_stag_m.stag004_desc, 
       g_stag_m.stag005,g_stag_m.stag005_desc,g_stag_m.stag006,g_stag_m.stag006_desc,g_stag_m.stag007, 
       g_stag_m.stag007_desc,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagownid_desc,g_stag_m.stagowndp, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp,g_stag_m.stagcrtdp_desc, 
       g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmodid_desc,g_stag_m.stagmoddt,g_stag_m.stagcnfid, 
       g_stag_m.stagcnfid_desc,g_stag_m.stagcnfdt
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:2)
	  #根據當下狀態碼顯示圖片
      CASE g_stag_m.stagstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
         
      END CASE
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_stah_d.getLength()
      #add-point:show段單身reference
      {<point name="show.body.reference"/>}
      #end add-point
   END FOR
   
 
   
    
   
   #add-point:show段other
   {<point name="show.other"/>}
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL astm201_detail_show()
 
   #add-point:show段之後
   {<point name="show.after"/>}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="astm201.signature" ver="1" status="" src="s" readonly="">
    <![CDATA[   
]]>
  </section>
  <section id="astm201.state_change" ver="10" status="" src="s" readonly="">
    <![CDATA[   #應用 a09 樣板自動產生(Version:11)
#+ 確認碼變更 
PRIVATE FUNCTION astm201_statechange()
   DEFINE lc_state LIKE type_t.chr5
   #add-point:statechange段define
   {<point name="statechange.define" edit="s"/>}
   #end add-point  
   #add-point:statechange段define(客製用)
   {<point name="statechange.define_customerization" edit="c"/>}
   #end add-point  
   
   #add-point:statechange段開始前
   {<point name="statechange.before"/>}
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_stag_m.stag001 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   CALL s_transaction_begin()
   
   OPEN astm201_cl USING g_enterprise,g_stag_m.stag001
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astm201_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      CLOSE astm201_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #顯示最新的資料
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
 
   #檢查是否允許此動作
   IF NOT astm201_action_chk() THEN
      CLOSE astm201_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #將資料顯示到畫面上
   DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stagunit_desc,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004, 
       g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag003_desc,g_stag_m.stag004,g_stag_m.stag004_desc, 
       g_stag_m.stag005,g_stag_m.stag005_desc,g_stag_m.stag006,g_stag_m.stag006_desc,g_stag_m.stag007, 
       g_stag_m.stag007_desc,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagownid_desc,g_stag_m.stagowndp, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp,g_stag_m.stagcrtdp_desc, 
       g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmodid_desc,g_stag_m.stagmoddt,g_stag_m.stagcnfid, 
       g_stag_m.stagcnfid_desc,g_stag_m.stagcnfdt
 
   CASE g_stag_m.stagstus
      WHEN "N"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
      WHEN "Y"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
      WHEN "X"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
      
   END CASE
 
   #add-point:資料刷新後
   {<point name="statechange.after_refresh"/>}
   #end add-point
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         HIDE OPTION "approved"
         HIDE OPTION "rejection"
         CASE g_stag_m.stagstus
            
            WHEN "N"
               HIDE OPTION "open"
            WHEN "Y"
               HIDE OPTION "valid"
            WHEN "X"
               HIDE OPTION "void"
         END CASE
     
      #add-point:menu前
      {<point name="statechange.before_menu"/>}
      #end add-point
      
      
	  
      ON ACTION open
         IF cl_auth_chk_act("open") THEN
            LET lc_state = "N"
            #add-point:action控制
            {<point name="statechange.open"/>}
            #end add-point
         END IF
         EXIT MENU
      ON ACTION valid
         IF cl_auth_chk_act("valid") THEN
            LET lc_state = "Y"
            #add-point:action控制
            {<point name="statechange.valid"/>}
            #end add-point
         END IF
         EXIT MENU
      ON ACTION void
         IF cl_auth_chk_act("void") THEN
            LET lc_state = "X"
            #add-point:action控制
            {<point name="statechange.void"/>}
            #end add-point
         END IF
         EXIT MENU
 
      #add-point:stus控制
      {<point name="statechange.more_control"/>}
      #end add-point
      
   END MENU
   
   #確認被選取的狀態碼在清單中
   IF (lc_state <> "N" 
      AND lc_state <> "Y"
      AND lc_state <> "X"
      ) OR 
      g_stag_m.stagstus = lc_state OR cl_null(lc_state) THEN
      CLOSE astm201_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:stus修改前
   {<point name="statechange.b_update"/>}
   #end add-point
   
   LET g_stag_m.stagmodid = g_user
   LET g_stag_m.stagmoddt = cl_get_current()
   LET g_stag_m.stagstus = lc_state
   
   #異動狀態碼欄位/修改人/修改日期
   UPDATE stag_t 
      SET (stagstus,stagmodid,stagmoddt) 
        = (g_stag_m.stagstus,g_stag_m.stagmodid,g_stag_m.stagmoddt)     
    WHERE stagent = g_enterprise AND stag001 = g_stag_m.stag001
 
    
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/open.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/void.png")
         
      END CASE
    
      #撈取異動後的資料
      EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001, 
          g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007, 
          g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp, 
          g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt, 
          g_stag_m.stagunit_desc,g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc, 
          g_stag_m.stagownid_desc,g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc, 
          g_stag_m.stagmodid_desc,g_stag_m.stagcnfid_desc
      
      #將資料顯示到畫面上
      DISPLAY BY NAME g_stag_m.stagunit,g_stag_m.stagunit_desc,g_stag_m.stag001,g_stag_m.stagl003,g_stag_m.stagl004, 
          g_stag_m.stag002,g_stag_m.stag003,g_stag_m.stag003_desc,g_stag_m.stag004,g_stag_m.stag004_desc, 
          g_stag_m.stag005,g_stag_m.stag005_desc,g_stag_m.stag006,g_stag_m.stag006_desc,g_stag_m.stag007, 
          g_stag_m.stag007_desc,g_stag_m.stagstus,g_stag_m.stagownid,g_stag_m.stagownid_desc,g_stag_m.stagowndp, 
          g_stag_m.stagowndp_desc,g_stag_m.stagcrtid,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp,g_stag_m.stagcrtdp_desc, 
          g_stag_m.stagcrtdt,g_stag_m.stagmodid,g_stag_m.stagmodid_desc,g_stag_m.stagmoddt,g_stag_m.stagcnfid, 
          g_stag_m.stagcnfid_desc,g_stag_m.stagcnfdt
   END IF
 
   #add-point:stus修改後
   {<point name="statechange.a_update"/>}
   #end add-point
 
   #add-point:statechange段結束前
   {<point name="statechange.after"/>}
   #end add-point  
 
   CLOSE astm201_cl
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL astm201_msgcentre_notify(lc_state)
   
END FUNCTION
 
 
]]>
  </section>
  <section id="astm201.status_show" ver="1" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION astm201_status_show()
   #add-point:status_show段define
   {<point name="status_show.define" edit="s"/>}
   #end add-point
   #add-point:status_show段define(客製用)
   {<point name="status_show.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:status_show段status_show
   {<point name="status_show.status_show"/>}
   #end add-point
END FUNCTION
]]>
  </section>
  <section id="astm201.ui_browser_refresh" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION astm201_ui_browser_refresh()
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define
   {<point name="ui_browser_refresh.define" edit="s"/>}
   #end add-point    
   #add-point:ui_browser_refresh段define(客製用)
   {<point name="ui_browser_refresh.define_customerization" edit="c"/>}
   #end add-point    
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_stag001 = g_stag_m.stag001 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after
   {<point name="ui_browser_refresh.after"/>}
   #end add-point    
   
END FUNCTION
]]>
  </section>
  <section id="astm201.ui_detailshow" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身資料重新顯示
PRIVATE FUNCTION astm201_ui_detailshow()
   #add-point:ui_detailshow段define
   {<point name="ui_detailshow.define" edit="s"/>}
   #end add-point    
   #add-point:ui_detailshow段define(客製用)
   {<point name="ui_detailshow.define_customerization" edit="c"/>}
   #end add-point    
   
   #add-point:ui_detailshow段before
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
 
   END IF
   
   #add-point:ui_detailshow段after
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION
]]>
  </section>
  <section id="astm201.ui_dialog" ver="29" status="" src="s" readonly="">
    <![CDATA[#+ 功能選單
PRIVATE FUNCTION astm201_ui_dialog()
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define" edit="s"/>}
   #end add-point
   #add-point:ui_dialog段define(客製用)
   {<point name="ui_dialog.define_customerization" edit="c"/>}
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   
   #action default動作
   #應用 a42 樣板自動產生(Version:2)
   #進入程式時預設執行的動作
   CASE g_actdefault
      WHEN "insert"
         LET g_action_choice="insert"
         LET g_actdefault = ""
         IF cl_auth_chk_act("insert") THEN
            CALL astm201_insert()
            #add-point:ON ACTION insert
            {<point name="menu.default.insert" />}
            #END add-point
         END IF
 
      #add-point:action default自訂
      {<point name="ui_dialog.action_default"/>}
      #end add-point
      OTHERWISE
   END CASE
 
 
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog 
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE g_stag_m.* TO NULL
         CALL g_stah_d.clear()
 
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL astm201_init()
      END IF
   
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
    
         DISPLAY ARRAY g_stah_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astm201_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               
               #add-point:page1, before row動作
               {<point name="ui_dialog.page1.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx)
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL astm201_idx_chk()
               #add-point:page1自定義行為
               {<point name="ui_dialog.page1.before_display"/>}
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION detail_qrystr
               MENU "" ATTRIBUTE(STYLE="popup")
                  #add-point:ON ACTION detail_qrystr相關動作
                  {<point name="menu.detail_show.page1_sub.detail_qrystr" />}
                  #END add-point
                                 #應用 a43 樣板自動產生(Version:2)
               ON ACTION prog_asti203
                  LET g_action_choice="prog_asti203"
                  IF cl_auth_chk_act("prog_asti203") THEN
                     
                     #add-point:ON ACTION prog_asti203
                     {<point name="menu.detail_show.page1_sub.prog_asti203" />}
                     #END add-point
                     
                  END IF
 
 
 
               END MENU
 
 
               #add-point:ON ACTION detail_qrystr
               {<point name="menu.detail_show.page1.detail_qrystr" />}
               #END add-point
 
 
 
               
            #add-point:page1自定義行為
            {<point name="ui_dialog.page1.action"/>}
            #end add-point
               
         END DISPLAY
        
 
         
 
         
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
         
      
         BEFORE DIALOG
            #先填充browser資料
            CALL astm201_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL astm201_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL astm201_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL astm201_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2
            {<point name="ui_dialog.before_dialog2"/>}
            #end add-point
 
         #狀態碼切換
         ON ACTION statechange
            LET g_action_choice = "statechange"
            CALL astm201_statechange()
            #根據資料狀態切換action狀態
            CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
            CALL astm201_set_act_visible()   
            CALL astm201_set_act_no_visible()
            IF NOT (g_stag_m.stag001 IS NULL
 
              ) THEN
               #組合條件
               LET g_add_browse = " stagent = '" ||g_enterprise|| "' AND",
                                  " stag001 = '", g_stag_m.stag001, "' "
 
               #填到對應位置
               CALL astm201_browser_fill("")
            END IF
         
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               LET g_wc = ls_wc
               CALL astm201_browser_fill("F")   #browser_fill()會將notice區塊清空
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               LET g_wc = ls_wc
               #取得條件後需要重查、跳到結果第一筆資料的功能程式段
               CALL astm201_browser_fill("F")
               IF g_browser_cnt = 0 THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "-100" 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CLEAR FORM
               ELSE
                  CALL astm201_fetch("F")
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
          
         
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL astm201_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm201_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL astm201_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm201_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL astm201_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm201_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL astm201_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm201_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL astm201_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astm201_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_stah_d)
                  LET g_export_id[1]   = "s_detail1"
 
                  #add-point:ON ACTION exporttoexcel
                  {<point name="menu.exporttoexcel" />}
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL astm201_modify()
               #add-point:ON ACTION modify
               {<point name="menu.modify" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL astm201_modify()
               #add-point:ON ACTION modify_detail
               {<point name="menu.modify_detail" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL astm201_delete()
               #add-point:ON ACTION delete
               {<point name="menu.delete" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               CALL astm201_insert()
               #add-point:ON ACTION insert
               {<point name="menu.insert" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output
               {<point name="menu.output" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION reproduce
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN
               CALL astm201_reproduce()
               #add-point:ON ACTION reproduce
               {<point name="menu.reproduce" />}
               #END add-point
               
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL astm201_query()
               #add-point:ON ACTION query
               {<point name="menu.query" />}
               #END add-point
               #應用 a59 樣板自動產生(Version:2)  
               CALL g_curr_diag.setCurrentRow("s_detail1",1)
 
 
 
            END IF
 
 
 
         #應用 a43 樣板自動產生(Version:2)
         ON ACTION prog_stag004
            LET g_action_choice="prog_stag004"
            IF cl_auth_chk_act("prog_stag004") THEN
               
               #add-point:ON ACTION prog_stag004
               {<point name="menu.prog_stag004" />}
               #END add-point
               
            END IF
 
 
 
         
         #應用 a46 樣板自動產生(Version:2)
         #新增相關文件
         ON ACTION related_document
            CALL astm201_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document
               {<point name="ui_dialog.dialog.related_document"/>}
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL astm201_set_pk_array()
            #add-point:ON ACTION agendum
            {<point name="ui_dialog.dialog.agendum"/>}
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL astm201_set_pk_array()
            #add-point:ON ACTION followup
            {<point name="ui_dialog.dialog.followup"/>}
            #END add-point
            CALL cl_user_overview_follow('')
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前
         {<point name="ui_dialog.b_exit"/>}
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
]]>
  </section>
  <section id="astm201.ui_headershow" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ 單頭資料重新顯示
PRIVATE FUNCTION astm201_ui_headershow()
   #add-point:ui_headershow段define
   {<point name="ui_headershow.define" edit="s"/>}
   #end add-point    
   #add-point:ui_headershow段define(客製用)
   {<point name="ui_headershow.define_customerization" edit="c"/>}
   #end add-point    
   
   LET g_stag_m.stag001 = g_browser[g_current_idx].b_stag001   
 
   EXECUTE astm201_master_referesh USING g_stag_m.stag001 INTO g_stag_m.stagunit,g_stag_m.stag001,g_stag_m.stag002, 
       g_stag_m.stag003,g_stag_m.stag004,g_stag_m.stag005,g_stag_m.stag006,g_stag_m.stag007,g_stag_m.stagstus, 
       g_stag_m.stagownid,g_stag_m.stagowndp,g_stag_m.stagcrtid,g_stag_m.stagcrtdp,g_stag_m.stagcrtdt, 
       g_stag_m.stagmodid,g_stag_m.stagmoddt,g_stag_m.stagcnfid,g_stag_m.stagcnfdt,g_stag_m.stagunit_desc, 
       g_stag_m.stag003_desc,g_stag_m.stag004_desc,g_stag_m.stag005_desc,g_stag_m.stag006_desc,g_stag_m.stagownid_desc, 
       g_stag_m.stagowndp_desc,g_stag_m.stagcrtid_desc,g_stag_m.stagcrtdp_desc,g_stag_m.stagmodid_desc, 
       g_stag_m.stagcnfid_desc
   CALL astm201_stag_t_mask()
   CALL astm201_show()
      
END FUNCTION
]]>
  </section>
  <section id="astm201.unlock_b" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ 連動unlock其他單身table資料
PRIVATE FUNCTION astm201_unlock_b(ps_table,ps_page)
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define
   {<point name="unlock_b.define" edit="s"/>}
   #end add-point  
   #add-point:unlock_b段define(客製用)
   {<point name="unlock_b.define_customerization" edit="c"/>}
   #end add-point  
    
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astm201_bcl
   END IF
   
 
   
 
 
   #add-point:unlock_b段other
   {<point name="unlock_b.other"/>}
   #end add-point  
 
END FUNCTION
]]>
  </section>
  <section id="astm201.update_b" ver="8" status="" src="s" readonly="">
    <![CDATA[#+ 修改單身後其他table連動
PRIVATE FUNCTION astm201_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define
   {<point name="update_b.define" edit="s"/>}
   #end add-point   
   #add-point:update_b段define(客製用)
   {<point name="update_b.define_customerization" edit="c"/>}
   #end add-point   
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stah_t" THEN
      #add-point:update_b段修改前
      {<point name="update_b.before_update" mark="Y"/>}
      #end add-point 
      
      #將遮罩欄位還原
      CALL astm201_stah_t_mask_restore('restore_mask_o')
               
      UPDATE stah_t 
         SET (stah001,
              stah002
              ,stah003,stah004,stah005,stah006,stah007,stah008,stah009,stah010,stah011,stah012,stah013,stah014,stah015,stah016) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_stah_d[g_detail_idx].stah003,g_stah_d[g_detail_idx].stah004,g_stah_d[g_detail_idx].stah005, 
                  g_stah_d[g_detail_idx].stah006,g_stah_d[g_detail_idx].stah007,g_stah_d[g_detail_idx].stah008, 
                  g_stah_d[g_detail_idx].stah009,g_stah_d[g_detail_idx].stah010,g_stah_d[g_detail_idx].stah011, 
                  g_stah_d[g_detail_idx].stah012,g_stah_d[g_detail_idx].stah013,g_stah_d[g_detail_idx].stah014, 
                  g_stah_d[g_detail_idx].stah015,g_stah_d[g_detail_idx].stah016) 
         WHERE stahent = g_enterprise AND stah001 = ps_keys_bak[1] AND stah002 = ps_keys_bak[2]
      #add-point:update_b段修改中
      {<point name="update_b.m_update"/>}
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stah_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stah_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astm201_stah_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後
      {<point name="update_b.after_update"/>}
      #end add-point  
   END IF
   
 
   
 
   
   #add-point:update_b段other
   {<point name="update_b.other"/>}
   #end add-point  
   
END FUNCTION
]]>
  </section>
</add_points>
