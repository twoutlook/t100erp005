#該程式未解開Section, 採用最新樣板產出!
{<section id="astt806.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0002(2017-02-03 14:24:59), PR版次:0002(2017-02-09 11:15:16)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000000
#+ Filename...: astt806
#+ Description: 招商租賃合約費用標準變更作業
#+ Creator....: 06189(2016-07-19 14:36:54)
#+ Modifier...: 06189 -SD/PR- 08172
 
{</section>}
 
{<section id="astt806.global" >}
#應用 t01 樣板自動產生(Version:79)
#add-point:填寫註解說明 name="global.memo" 
#Memos
#170117-00025#1      2017/02/04   by 08172   修正BPM集成功能，將確認段拆解至SUB，增加整合用的「確認」功能應用元件 s_xxx_ws_confirm()。
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目 name="global.import"

#end add-point 
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"

#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_stem_m        RECORD
       stemsite LIKE stem_t.stemsite, 
   stemsite_desc LIKE type_t.chr80, 
   stemdocdt LIKE stem_t.stemdocdt, 
   stemdocno LIKE stem_t.stemdocno, 
   stem035 LIKE stem_t.stem035, 
   stem036 LIKE stem_t.stem036, 
   stem000 LIKE stem_t.stem000, 
   stem012 LIKE stem_t.stem012, 
   stem012_desc LIKE type_t.chr80, 
   stem013 LIKE stem_t.stem013, 
   stem013_desc LIKE type_t.chr80, 
   stem034 LIKE stem_t.stem034, 
   stemstus LIKE stem_t.stemstus, 
   stemownid LIKE stem_t.stemownid, 
   stemownid_desc LIKE type_t.chr80, 
   stemowndp LIKE stem_t.stemowndp, 
   stemowndp_desc LIKE type_t.chr80, 
   stemcrtid LIKE stem_t.stemcrtid, 
   stemcrtid_desc LIKE type_t.chr80, 
   stemcrtdp LIKE stem_t.stemcrtdp, 
   stemcrtdp_desc LIKE type_t.chr80, 
   stemcrtdt LIKE stem_t.stemcrtdt, 
   stemmodid LIKE stem_t.stemmodid, 
   stemmodid_desc LIKE type_t.chr80, 
   stemmoddt LIKE stem_t.stemmoddt, 
   stemcnfid LIKE stem_t.stemcnfid, 
   stemcnfid_desc LIKE type_t.chr80, 
   stemcnfdt LIKE stem_t.stemcnfdt
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_sten_d        RECORD
       stenseq LIKE sten_t.stenseq, 
   sten002 LIKE sten_t.sten002, 
   sten002_desc LIKE type_t.chr500, 
   sten001 LIKE sten_t.sten001, 
   sten003 LIKE sten_t.sten003, 
   sten004 LIKE sten_t.sten004, 
   sten006 LIKE sten_t.sten006, 
   sten007 LIKE sten_t.sten007, 
   sten012 LIKE sten_t.sten012, 
   sten005 LIKE sten_t.sten005, 
   sten008 LIKE sten_t.sten008, 
   sten009 LIKE sten_t.sten009, 
   sten009_desc LIKE type_t.chr500, 
   sten010 LIKE sten_t.sten010, 
   sten011 LIKE sten_t.sten011, 
   stenacti LIKE sten_t.stenacti, 
   stensite LIKE sten_t.stensite, 
   stenunit LIKE sten_t.stenunit
       END RECORD
PRIVATE TYPE type_g_sten15_d RECORD
       stknsite LIKE type_t.chr10, 
   stknunit LIKE type_t.chr10, 
   stknseq LIKE type_t.num10, 
   stkn002 LIKE type_t.dat, 
   stkn003 LIKE type_t.chr10, 
   stkn004 LIKE type_t.chr10, 
   stkn005 LIKE type_t.chr10, 
   stkn006 LIKE type_t.num20_6, 
   stkn007 LIKE type_t.chr20, 
   stkn008 LIKE type_t.chr10, 
   stkn009 LIKE type_t.chr10, 
   stkn010 LIKE type_t.num10
       END RECORD
PRIVATE TYPE type_g_sten16_d RECORD
       stkosite LIKE type_t.chr10, 
   stkounit LIKE type_t.chr10, 
   stkoseq LIKE type_t.num10, 
   stko002 LIKE type_t.dat, 
   stko003 LIKE type_t.dat, 
   stko004 LIKE type_t.dat, 
   stko005 LIKE type_t.chr1, 
   stko006 LIKE type_t.chr20, 
   stko007 LIKE type_t.chr10
       END RECORD
PRIVATE TYPE type_g_sten2_d RECORD
       stkeunit LIKE stke_t.stkeunit, 
   stkesite LIKE stke_t.stkesite, 
   stkesite_desc LIKE type_t.chr500, 
   stkedocdt LIKE stke_t.stkedocdt, 
   stke001 LIKE stke_t.stke001, 
   stke000 LIKE stke_t.stke000, 
   stke002 LIKE stke_t.stke002, 
   stke003 LIKE stke_t.stke003, 
   stke003_desc LIKE type_t.chr500, 
   stke004 LIKE stke_t.stke004, 
   stke005 LIKE stke_t.stke005, 
   stke006 LIKE stke_t.stke006, 
   stke007 LIKE stke_t.stke007, 
   stke007_desc LIKE type_t.chr500, 
   stke008 LIKE stke_t.stke008, 
   stke008_desc LIKE type_t.chr500, 
   stke009 LIKE stke_t.stke009, 
   stke010 LIKE stke_t.stke010, 
   stke011 LIKE stke_t.stke011, 
   stke012 LIKE stke_t.stke012, 
   stke013 LIKE stke_t.stke013, 
   stke014 LIKE stke_t.stke014, 
   stke015 LIKE stke_t.stke015, 
   stke016 LIKE stke_t.stke016, 
   stke017 LIKE stke_t.stke017, 
   stke017_desc LIKE type_t.chr500, 
   stke018 LIKE stke_t.stke018, 
   stke018_desc LIKE type_t.chr500, 
   stke019 LIKE stke_t.stke019, 
   stke019_desc LIKE type_t.chr500, 
   stke020 LIKE stke_t.stke020, 
   stke020_desc LIKE type_t.chr500, 
   stke021 LIKE stke_t.stke021, 
   stke021_desc LIKE type_t.chr500, 
   stke022 LIKE stke_t.stke022, 
   stke022_desc LIKE type_t.chr500, 
   stke023 LIKE stke_t.stke023, 
   stke024 LIKE stke_t.stke024, 
   stke025 LIKE stke_t.stke025, 
   stke026 LIKE stke_t.stke026, 
   stke028 LIKE stke_t.stke028, 
   stke028_desc LIKE type_t.chr500, 
   stke029 LIKE stke_t.stke029, 
   stke029_desc LIKE type_t.chr500, 
   stke030 LIKE stke_t.stke030, 
   stke030_desc LIKE type_t.chr500, 
   stke031 LIKE stke_t.stke031, 
   stke031_desc LIKE type_t.chr500, 
   stke032 LIKE stke_t.stke032, 
   stke032_desc LIKE type_t.chr500, 
   stke033 LIKE stke_t.stke033, 
   stke034 LIKE stke_t.stke034, 
   stke034_desc LIKE type_t.chr500, 
   stke035 LIKE stke_t.stke035, 
   stke035_desc LIKE type_t.chr500, 
   stke036 LIKE stke_t.stke036, 
   stke036_desc LIKE type_t.chr500, 
   stke037 LIKE stke_t.stke037, 
   stke038 LIKE stke_t.stke038, 
   stke038_desc LIKE type_t.chr500, 
   stke039 LIKE stke_t.stke039, 
   stke040 LIKE stke_t.stke040, 
   stke041 LIKE stke_t.stke041, 
   stke042 LIKE stke_t.stke042, 
   stke043 LIKE stke_t.stke043, 
   stke044 LIKE stke_t.stke044, 
   stke045 LIKE stke_t.stke045, 
   stke046 LIKE stke_t.stke046, 
   stke047 LIKE stke_t.stke047, 
   stke048 LIKE stke_t.stke048, 
   stke049 LIKE stke_t.stke049, 
   stke050 LIKE stke_t.stke050, 
   stke051 LIKE stke_t.stke051, 
   stke052 LIKE stke_t.stke052, 
   stke053 LIKE stke_t.stke053, 
   stke200 LIKE stke_t.stke200, 
   stke223 LIKE stke_t.stke223, 
   stke224 LIKE stke_t.stke224, 
   stke225 LIKE stke_t.stke225, 
   stkestus LIKE stke_t.stkestus
       END RECORD
PRIVATE TYPE type_g_sten3_d RECORD
       stkfseq LIKE stkf_t.stkfseq, 
   stkf002 LIKE stkf_t.stkf002, 
   stkf003 LIKE stkf_t.stkf003, 
   stkf021 LIKE stkf_t.stkf021, 
   stkf004 LIKE stkf_t.stkf004, 
   stkf004_desc LIKE type_t.chr500, 
   stae004 LIKE type_t.chr10, 
   stkf022 LIKE stkf_t.stkf022, 
   stkf022_desc LIKE type_t.chr500, 
   stkf005 LIKE stkf_t.stkf005, 
   stkf006 LIKE stkf_t.stkf006, 
   stkf007 LIKE stkf_t.stkf007, 
   stkf008 LIKE stkf_t.stkf008, 
   stkf009 LIKE stkf_t.stkf009, 
   stkf010 LIKE stkf_t.stkf010, 
   stkf011 LIKE stkf_t.stkf011, 
   stkf018 LIKE stkf_t.stkf018, 
   stkf016 LIKE stkf_t.stkf016, 
   stkf017 LIKE stkf_t.stkf017, 
   stkf020 LIKE stkf_t.stkf020, 
   stkf023 LIKE stkf_t.stkf023, 
   stkf024 LIKE stkf_t.stkf024, 
   stkf024_desc LIKE type_t.chr500, 
   stkf025 LIKE stkf_t.stkf025, 
   stkfsite LIKE stkf_t.stkfsite, 
   stkfunit LIKE stkf_t.stkfunit
       END RECORD
PRIVATE TYPE type_g_sten4_d RECORD
       stkhseq LIKE stkh_t.stkhseq, 
   stkh002 LIKE stkh_t.stkh002, 
   stkh002_desc LIKE type_t.chr500, 
   stae004 LIKE stae_t.stae004, 
   stkh003 LIKE stkh_t.stkh003, 
   stkh008 LIKE stkh_t.stkh008, 
   stkh004 LIKE stkh_t.stkh004, 
   stkh005 LIKE stkh_t.stkh005, 
   stkh006 LIKE stkh_t.stkh006, 
   stkh007 LIKE stkh_t.stkh007, 
   stkhsite LIKE stkh_t.stkhsite, 
   stkhunit LIKE stkh_t.stkhunit
       END RECORD
PRIVATE TYPE type_g_sten5_d RECORD
       stkiseq LIKE stki_t.stkiseq, 
   stki002 LIKE stki_t.stki002, 
   stki002_desc LIKE type_t.chr500, 
   stae004 LIKE stae_t.stae004, 
   stki003 LIKE stki_t.stki003, 
   stki003_desc LIKE type_t.chr500, 
   stki010 LIKE stki_t.stki010, 
   stki010_desc LIKE type_t.chr500, 
   stki004 LIKE stki_t.stki004, 
   stki005 LIKE stki_t.stki005, 
   stki006 LIKE stki_t.stki006, 
   stki007 LIKE stki_t.stki007, 
   stki008 LIKE stki_t.stki008, 
   stki009 LIKE stki_t.stki009, 
   stkisite LIKE stki_t.stkisite, 
   stkiunit LIKE stki_t.stkiunit
       END RECORD
PRIVATE TYPE type_g_sten6_d RECORD
       stkjacti LIKE stkj_t.stkjacti, 
   stkjseq LIKE stkj_t.stkjseq, 
   stkj002 LIKE stkj_t.stkj002, 
   stkj002_desc LIKE type_t.chr500, 
   stkj003 LIKE stkj_t.stkj003, 
   stkj004 LIKE stkj_t.stkj004, 
   stkj005 LIKE stkj_t.stkj005, 
   stkj006 LIKE stkj_t.stkj006, 
   stkj006_desc LIKE type_t.chr500, 
   stkj007 LIKE stkj_t.stkj007, 
   stkj007_desc LIKE type_t.chr500, 
   stkj008 LIKE stkj_t.stkj008, 
   stkj008_desc LIKE type_t.chr500, 
   stkj009 LIKE stkj_t.stkj009, 
   stkjsite LIKE stkj_t.stkjsite, 
   stkjunit LIKE stkj_t.stkjunit
       END RECORD
PRIVATE TYPE type_g_sten7_d RECORD
       stkkacti LIKE stkk_t.stkkacti, 
   stkkseq LIKE stkk_t.stkkseq, 
   stkk002 LIKE stkk_t.stkk002, 
   stkk002_desc LIKE type_t.chr500, 
   stkk004 LIKE stkk_t.stkk004, 
   stkk003 LIKE stkk_t.stkk003, 
   stkk003_desc LIKE type_t.chr500, 
   stkk005 LIKE stkk_t.stkk005, 
   stkksite LIKE stkk_t.stkksite, 
   stkkunit LIKE stkk_t.stkkunit
       END RECORD
PRIVATE TYPE type_g_sten8_d RECORD
       stklseq LIKE stkl_t.stklseq, 
   stkl002 LIKE stkl_t.stkl002, 
   stkl003 LIKE stkl_t.stkl003, 
   stkl003_desc LIKE type_t.chr500, 
   stkl004 LIKE stkl_t.stkl004, 
   stkl005 LIKE stkl_t.stkl005, 
   stkl006 LIKE stkl_t.stkl006, 
   stkl007 LIKE stkl_t.stkl007, 
   stkl008 LIKE stkl_t.stkl008, 
   stklsite LIKE stkl_t.stklsite, 
   stklunit LIKE stkl_t.stklunit
       END RECORD
PRIVATE TYPE type_g_sten9_d RECORD
       stkmseq LIKE stkm_t.stkmseq, 
   stkm002 LIKE stkm_t.stkm002, 
   stkm003 LIKE stkm_t.stkm003, 
   stkm003_desc LIKE type_t.chr500, 
   stkm004 LIKE stkm_t.stkm004, 
   stkm005 LIKE stkm_t.stkm005, 
   stkm006 LIKE stkm_t.stkm006, 
   stkm007 LIKE stkm_t.stkm007, 
   stkm008 LIKE stkm_t.stkm008, 
   stkm009 LIKE stkm_t.stkm009, 
   stkm010 LIKE stkm_t.stkm010, 
   stkm011 LIKE stkm_t.stkm011, 
   stkm012 LIKE stkm_t.stkm012, 
   stkm013 LIKE stkm_t.stkm013, 
   stkm014 LIKE stkm_t.stkm014, 
   stkm015 LIKE stkm_t.stkm015, 
   stkm016 LIKE stkm_t.stkm016, 
   stkm017 LIKE stkm_t.stkm017, 
   stkm018 LIKE stkm_t.stkm018, 
   stkm019 LIKE stkm_t.stkm019, 
   stkmsite LIKE stkm_t.stkmsite, 
   stkmunit LIKE stkm_t.stkmunit
       END RECORD
 
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
            b_stemsite LIKE stem_t.stemsite,
   b_stemsite_desc LIKE type_t.chr80,
      b_stemdocdt LIKE stem_t.stemdocdt,
      b_stemdocno LIKE stem_t.stemdocno,
      b_stem035 LIKE stem_t.stem035,
      b_stem036 LIKE stem_t.stem036,
      b_stem012 LIKE stem_t.stem012,
   b_stem012_desc LIKE type_t.chr80,
      b_stem013 LIKE stem_t.stem013,
   b_stem013_desc LIKE type_t.chr80,
      b_stem034 LIKE stem_t.stem034
       END RECORD
       
#add-point:自定義模組變數(Module Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
DEFINE g_site_flag           LIKE type_t.num5
TYPE type_g_sten12_d        RECORD
       stkfseq_2 LIKE stkf_t.stkfseq, 
   stkf002_2 LIKE stkf_t.stkf002, 
   stkf003_2 LIKE stkf_t.stkf003, 
   stkf021_2 LIKE stkf_t.stkf021,
   stkf004_2 LIKE stkf_t.stkf004, 
   stkf004_2_desc LIKE type_t.chr500, 
   stae004_2 LIKE stae_t.stae004, 
   stkf005_2 LIKE stkf_t.stkf005, 
   stkf006_2 LIKE stkf_t.stkf006, 
   stkf007_2 LIKE stkf_t.stkf007, 
   stkf008_2 LIKE stkf_t.stkf008, 
   stkf009_2 LIKE stkf_t.stkf009, 
   stkf010_2 LIKE stkf_t.stkf010, 
   stkf012_2 LIKE stkf_t.stkf012,
   stkf019_2 LIKE stkf_t.stkf019,
   stkf013_2 LIKE stkf_t.stkf013,
   stkf014_2 LIKE stkf_t.stkf014,
   stkf015_2 LIKE stkf_t.stkf015,
   stkf016_2 LIKE stkf_t.stkf016,
   stkf020_2 LIKE stkf_t.stkf020,
   stkf023_2 LIKE stkf_t.stkf023,
   stkf024_2 LIKE stkf_t.stkf024,
   stkf024_2_desc LIKE type_t.chr500,
   stkf025_2 LIKE stkf_t.stkf025
       END RECORD
TYPE type_g_sten11_d RECORD
  stkgseq1 LIKE stkg_t.stkgseq1, 
  stkg002 LIKE stkg_t.stkg002, 
  stkg003 LIKE stkg_t.stkg003, 
  stkg004 LIKE stkg_t.stkg004,
  stkg006 LIKE stkg_t.stkg006
      END RECORD        
TYPE type_g_sten13_d RECORD
  stkgseq1_1 LIKE stkg_t.stkgseq1, 
  stkg002_1 LIKE stkg_t.stkg002, 
  stkg003_1 LIKE stkg_t.stkg003, 
  stkg005_1 LIKE stkg_t.stkg005,
  stkg007_1 LIKE stkg_t.stkg007
      END RECORD       
DEFINE g_sten12_d          DYNAMIC ARRAY OF type_g_sten12_d
DEFINE g_sten12_d_t        type_g_sten12_d
DEFINE g_sten12_d_o        type_g_sten12_d 
DEFINE g_sten12_d_mask_o   DYNAMIC ARRAY OF type_g_sten12_d #轉換遮罩前資料
DEFINE g_sten12_d_mask_n   DYNAMIC ARRAY OF type_g_sten12_d #轉換遮罩後資料
DEFINE g_sten11_d          DYNAMIC ARRAY OF type_g_sten11_d
DEFINE g_sten11_d_t        type_g_sten11_d
DEFINE g_sten11_d_o        type_g_sten11_d 
DEFINE g_sten11_d_mask_o   DYNAMIC ARRAY OF type_g_sten11_d #轉換遮罩前資料
DEFINE g_sten11_d_mask_n   DYNAMIC ARRAY OF type_g_sten11_d #轉換遮罩後資料
DEFINE g_sten13_d          DYNAMIC ARRAY OF type_g_sten13_d
DEFINE g_sten13_d_t        type_g_sten13_d
DEFINE g_sten13_d_o        type_g_sten13_d 
DEFINE g_sten13_d_mask_o   DYNAMIC ARRAY OF type_g_sten13_d #轉換遮罩前資料
DEFINE g_sten13_d_mask_n   DYNAMIC ARRAY OF type_g_sten13_d #轉換遮罩後資料
DEFINE g_wc2_table12       STRING
DEFINE g_wc2_table13       STRING
DEFINE g_wc2_table14       STRING
DEFINE g_detail_idx3       LIKE type_t.num10                #單身3目前所在筆數
DEFINE g_detail_idx2_tmp   LIKE type_t.num10                #單身2目前所在筆數
TYPE type_g_sten14_d        RECORD
   stkfseq_1 LIKE stkf_t.stkfseq, 
   stkf004_1 LIKE stkf_t.stkf004,
   stkf004_1_desc LIKE type_t.chr500,
   stae004_1 LIKE stae_t.stae004,
   stae012_1 LIKE stae_t.stae012,
   stkf002_1 LIKE stkf_t.stkf002,  
   stkm007_1 LIKE stkm_t.stkm007, 
   stkm008_1 LIKE stkm_t.stkm008, 
   stkm009_1 LIKE stkm_t.stkm009, 
   stkm010_1 LIKE stkm_t.stkm010, 
   stkm011_1 LIKE stkm_t.stkm011, 
   stkm012_1 LIKE stkm_t.stkm012, 
   stkm013_1 LIKE stkm_t.stkm013, 
   stkm014_1 LIKE stkm_t.stkm014
  END RECORD    
DEFINE g_sten14_d          DYNAMIC ARRAY OF type_g_sten14_d
#end add-point
       
#模組變數(Module Variables)
DEFINE g_stem_m          type_g_stem_m
DEFINE g_stem_m_t        type_g_stem_m
DEFINE g_stem_m_o        type_g_stem_m
DEFINE g_stem_m_mask_o   type_g_stem_m #轉換遮罩前資料
DEFINE g_stem_m_mask_n   type_g_stem_m #轉換遮罩後資料
 
   DEFINE g_stemdocno_t LIKE stem_t.stemdocno
 
 
DEFINE g_sten_d          DYNAMIC ARRAY OF type_g_sten_d
DEFINE g_sten_d_t        type_g_sten_d
DEFINE g_sten_d_o        type_g_sten_d
DEFINE g_sten_d_mask_o   DYNAMIC ARRAY OF type_g_sten_d #轉換遮罩前資料
DEFINE g_sten_d_mask_n   DYNAMIC ARRAY OF type_g_sten_d #轉換遮罩後資料
DEFINE g_sten15_d          DYNAMIC ARRAY OF type_g_sten15_d
DEFINE g_sten15_d_t        type_g_sten15_d
DEFINE g_sten15_d_o        type_g_sten15_d
DEFINE g_sten15_d_mask_o   DYNAMIC ARRAY OF type_g_sten15_d #轉換遮罩前資料
DEFINE g_sten15_d_mask_n   DYNAMIC ARRAY OF type_g_sten15_d #轉換遮罩後資料
DEFINE g_sten16_d          DYNAMIC ARRAY OF type_g_sten16_d
DEFINE g_sten16_d_t        type_g_sten16_d
DEFINE g_sten16_d_o        type_g_sten16_d
DEFINE g_sten16_d_mask_o   DYNAMIC ARRAY OF type_g_sten16_d #轉換遮罩前資料
DEFINE g_sten16_d_mask_n   DYNAMIC ARRAY OF type_g_sten16_d #轉換遮罩後資料
DEFINE g_sten2_d          DYNAMIC ARRAY OF type_g_sten2_d
DEFINE g_sten2_d_t        type_g_sten2_d
DEFINE g_sten2_d_o        type_g_sten2_d
DEFINE g_sten2_d_mask_o   DYNAMIC ARRAY OF type_g_sten2_d #轉換遮罩前資料
DEFINE g_sten2_d_mask_n   DYNAMIC ARRAY OF type_g_sten2_d #轉換遮罩後資料
DEFINE g_sten3_d          DYNAMIC ARRAY OF type_g_sten3_d
DEFINE g_sten3_d_t        type_g_sten3_d
DEFINE g_sten3_d_o        type_g_sten3_d
DEFINE g_sten3_d_mask_o   DYNAMIC ARRAY OF type_g_sten3_d #轉換遮罩前資料
DEFINE g_sten3_d_mask_n   DYNAMIC ARRAY OF type_g_sten3_d #轉換遮罩後資料
DEFINE g_sten4_d          DYNAMIC ARRAY OF type_g_sten4_d
DEFINE g_sten4_d_t        type_g_sten4_d
DEFINE g_sten4_d_o        type_g_sten4_d
DEFINE g_sten4_d_mask_o   DYNAMIC ARRAY OF type_g_sten4_d #轉換遮罩前資料
DEFINE g_sten4_d_mask_n   DYNAMIC ARRAY OF type_g_sten4_d #轉換遮罩後資料
DEFINE g_sten5_d          DYNAMIC ARRAY OF type_g_sten5_d
DEFINE g_sten5_d_t        type_g_sten5_d
DEFINE g_sten5_d_o        type_g_sten5_d
DEFINE g_sten5_d_mask_o   DYNAMIC ARRAY OF type_g_sten5_d #轉換遮罩前資料
DEFINE g_sten5_d_mask_n   DYNAMIC ARRAY OF type_g_sten5_d #轉換遮罩後資料
DEFINE g_sten6_d          DYNAMIC ARRAY OF type_g_sten6_d
DEFINE g_sten6_d_t        type_g_sten6_d
DEFINE g_sten6_d_o        type_g_sten6_d
DEFINE g_sten6_d_mask_o   DYNAMIC ARRAY OF type_g_sten6_d #轉換遮罩前資料
DEFINE g_sten6_d_mask_n   DYNAMIC ARRAY OF type_g_sten6_d #轉換遮罩後資料
DEFINE g_sten7_d          DYNAMIC ARRAY OF type_g_sten7_d
DEFINE g_sten7_d_t        type_g_sten7_d
DEFINE g_sten7_d_o        type_g_sten7_d
DEFINE g_sten7_d_mask_o   DYNAMIC ARRAY OF type_g_sten7_d #轉換遮罩前資料
DEFINE g_sten7_d_mask_n   DYNAMIC ARRAY OF type_g_sten7_d #轉換遮罩後資料
DEFINE g_sten8_d          DYNAMIC ARRAY OF type_g_sten8_d
DEFINE g_sten8_d_t        type_g_sten8_d
DEFINE g_sten8_d_o        type_g_sten8_d
DEFINE g_sten8_d_mask_o   DYNAMIC ARRAY OF type_g_sten8_d #轉換遮罩前資料
DEFINE g_sten8_d_mask_n   DYNAMIC ARRAY OF type_g_sten8_d #轉換遮罩後資料
DEFINE g_sten9_d          DYNAMIC ARRAY OF type_g_sten9_d
DEFINE g_sten9_d_t        type_g_sten9_d
DEFINE g_sten9_d_o        type_g_sten9_d
DEFINE g_sten9_d_mask_o   DYNAMIC ARRAY OF type_g_sten9_d #轉換遮罩前資料
DEFINE g_sten9_d_mask_n   DYNAMIC ARRAY OF type_g_sten9_d #轉換遮罩後資料
 
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
DEFINE g_wc2_table2   STRING
 
 
DEFINE g_wc2_table3   STRING
 
DEFINE g_wc2_table4   STRING
 
DEFINE g_wc2_table5   STRING
 
DEFINE g_wc2_table6   STRING
 
DEFINE g_wc2_table7   STRING
 
DEFINE g_wc2_table8   STRING
 
DEFINE g_wc2_table9   STRING
 
DEFINE g_wc2_table10   STRING
 
DEFINE g_wc2_table11   STRING
 
 
DEFINE g_wc2_extend          STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                         #Current Dialog
                                                               
DEFINE g_pagestart           LIKE type_t.num10                 
DEFINE gwin_curr             ui.Window                         #Current Window
DEFINE gfrm_curr             ui.Form                           #Current Form
DEFINE g_page_action         STRING                            #page action
DEFINE g_header_hidden       LIKE type_t.num5                  #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5                  #隱藏工作Panel
DEFINE g_page                STRING                            #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10                  #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx_tmp      LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10                  #單身2目前所在筆數
DEFINE g_detail_idx_list     DYNAMIC ARRAY OF LIKE type_t.num10 #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10                  #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10                  #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10                  #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                             #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10                  #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                            #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10                  #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5                   #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
DEFINE g_idx_group           om.SaxAttributes              #頁籤群組
DEFINE g_master_commit       LIKE type_t.chr1              #確認單頭是否修改過
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"

#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"

#end add-point
 
{</section>}
 
{<section id="astt806.main" >}
#應用 a26 樣板自動產生(Version:7)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define(客製用) name="main.define_customerization"
   
   #end add-point   
   #add-point:main段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="main.define"
   DEFINE l_success LIKE type_t.num5
   #end add-point   
   
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("ast","")
 
   #add-point:作業初始化 name="main.init"
   
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define name="main.define_sql"
   
   #end add-point
   LET g_forupd_sql = " SELECT stemsite,'',stemdocdt,stemdocno,stem035,stem036,stem000,stem012,'',stem013, 
       '',stem034,stemstus,stemownid,'',stemowndp,'',stemcrtid,'',stemcrtdp,'',stemcrtdt,stemmodid,'', 
       stemmoddt,stemcnfid,'',stemcnfdt", 
                      " FROM stem_t",
                      " WHERE stement= ? AND stemdocno=? FOR UPDATE"
   #add-point:SQL_define name="main.after_define_sql"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT DISTINCT t0.stemsite,t0.stemdocdt,t0.stemdocno,t0.stem035,t0.stem036,t0.stem000, 
       t0.stem012,t0.stem013,t0.stem034,t0.stemstus,t0.stemownid,t0.stemowndp,t0.stemcrtid,t0.stemcrtdp, 
       t0.stemcrtdt,t0.stemmodid,t0.stemmoddt,t0.stemcnfid,t0.stemcnfdt,t1.ooefl003 ,t2.ooefl003 ,t3.ooag011 , 
       t4.ooefl003 ,t5.ooag011 ,t6.ooefl003 ,t7.ooag011 ,t8.ooag011",
               " FROM stem_t t0",
                              " LEFT JOIN ooefl_t t1 ON t1.ooeflent="||g_enterprise||" AND t1.ooefl001=t0.stemsite AND t1.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooefl_t t2 ON t2.ooeflent="||g_enterprise||" AND t2.ooefl001=t0.stem013 AND t2.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t3 ON t3.ooagent="||g_enterprise||" AND t3.ooag001=t0.stemownid  ",
               " LEFT JOIN ooefl_t t4 ON t4.ooeflent="||g_enterprise||" AND t4.ooefl001=t0.stemowndp AND t4.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t5 ON t5.ooagent="||g_enterprise||" AND t5.ooag001=t0.stemcrtid  ",
               " LEFT JOIN ooefl_t t6 ON t6.ooeflent="||g_enterprise||" AND t6.ooefl001=t0.stemcrtdp AND t6.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t7 ON t7.ooagent="||g_enterprise||" AND t7.ooag001=t0.stemmodid  ",
               " LEFT JOIN ooag_t t8 ON t8.ooagent="||g_enterprise||" AND t8.ooag001=t0.stemcnfid  ",
 
               " WHERE t0.stement = " ||g_enterprise|| " AND t0.stemdocno = ?"
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define name="main.after_refresh_sql"
   
   #end add-point
   PREPARE astt806_master_referesh FROM g_sql
 
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call name="main.servicecall"
      
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_astt806 WITH FORM cl_ap_formpath("ast",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL astt806_init()   
 
      #進入選單 Menu (="N")
      CALL astt806_ui_dialog() 
      
      #add-point:畫面關閉前 name="main.before_close"
      
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_astt806
      
   END IF 
   
   CLOSE astt806_cl
   
   
 
   #add-point:作業離開前 name="main.exit"
   CALL s_aooi500_drop_temp() RETURNING l_success
   CALL s_astt806_drop_tmp()  
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
 
 
{</section>}
 
{<section id="astt806.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION astt806_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   
   #end add-point    
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   DEFINE l_success LIKE type_t.num5
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   
   #end add-point
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   
   #各個page指標
   LET g_detail_idx_list[1] = 1 
   LET g_detail_idx_list[2] = 1
   LET g_detail_idx_list[3] = 1
   LET g_detail_idx_list[4] = 1
   LET g_detail_idx_list[5] = 1
   LET g_detail_idx_list[6] = 1
   LET g_detail_idx_list[7] = 1
   LET g_detail_idx_list[8] = 1
   LET g_detail_idx_list[9] = 1
   LET g_detail_idx_list[10] = 1
   LET g_detail_idx_list[11] = 1
 
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
      CALL cl_set_combo_scc_part('stemstus','13','N,Y,A,D,R,W,X')
 
      CALL cl_set_combo_scc('sten001','6783') 
   CALL cl_set_combo_scc('stke000','6863') 
   CALL cl_set_combo_scc('stke004','6013') 
   CALL cl_set_combo_scc('stke005','6785') 
   CALL cl_set_combo_scc('stkf023','6932') 
   CALL cl_set_combo_scc('stkm018','6932') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
   
   #page群組
   LET g_idx_group = om.SaxAttributes.create()
   CALL g_idx_group.addAttribute("'1',","1")
   CALL g_idx_group.addAttribute("'4',","1")
   CALL g_idx_group.addAttribute("'2',","1")
   CALL g_idx_group.addAttribute("'3',","1")
   CALL g_idx_group.addAttribute("'5',","1")
   CALL g_idx_group.addAttribute("'6',","1")
   CALL g_idx_group.addAttribute("'7',","1")
   CALL g_idx_group.addAttribute("'8',","1")
   CALL g_idx_group.addAttribute("'9',","1")
   CALL g_idx_group.addAttribute("'10',","1")
   CALL g_idx_group.addAttribute("'11',","1")
 
 
   #add-point:畫面資料初始化 name="init.init"
   LET g_detail_idx_list[12] = 1
   LET g_detail_idx_list[13] = 1   
   LET g_detail_idx_list[14] = 1
   LET g_detail_idx_list[15] = 1
   CALL g_idx_group.addAttribute("'12',","1")
   CALL g_idx_group.addAttribute("'13',","1")
   CALL g_idx_group.addAttribute("'14',","1")
   CALL g_idx_group.addAttribute("'15',","1")
   CALL cl_set_combo_scc_part('sten001','6916','1,2,3,4')
   #CALL cl_set_combo_scc('stem035','6951')
   CALL cl_set_combo_scc_part('stem035','6951','1,3')
   CALL cl_set_combo_scc('stke005','6935')
   CALL cl_set_combo_scc('stkf023_2','6932')
   CALL cl_set_combo_scc_part('stkestus','13','N,X,FP,FR,TP,TR')
   CALL cl_set_combo_scc_part('stke004','6013','5')   
   CALL cl_set_combo_scc('stke000','6914') 
   CALL cl_set_combo_scc('stke009','6911')
   CALL cl_set_combo_scc('stke033','6202')
   CALL cl_set_combo_scc('stke037','2086')
   CALL cl_set_combo_scc_part('stkf007','6920','1,2,3,4,5')
   CALL cl_set_combo_scc_part('stkf009','6910','1,3')
   CALL cl_set_combo_scc_part('stkf010','6904','1,2,3,4')
   CALL cl_set_combo_scc_part('stkf016','6011','1,2,3')
   CALL cl_set_combo_scc_part('stkf007_2','6920','1,2,3,4,5')
   CALL cl_set_combo_scc_part('stkf009_2','6910','2')
   CALL cl_set_combo_scc_part('stkf010_2','6904','5,6') 
   CALL cl_set_combo_scc('stkf013_2','6010')
   CALL cl_set_combo_scc_part('stkf016_2','6011','1,2,3')
   CALL cl_set_combo_scc('stae004_1','6004')
   CALL cl_set_combo_scc('stae012_1','6820')
   CALL cl_set_combo_scc('stae004_2','6004')
   CALL cl_set_combo_scc('stae004_3','6004')
   CALL cl_set_combo_scc('stae004_4','6004')
   CALL cl_set_combo_scc('stae004','6004')
   CALL cl_set_combo_scc('stki006','6005')
   CALL cl_set_combo_scc('stkl002','6848') 
   CALL cl_set_combo_scc('stkn003','6916') 
   CALL cl_set_combo_scc('stkn004','6915') 
   CALL cl_set_combo_scc_part('stkh008','6916','1,2,3,4')
   CALL cl_set_combo_scc('stki009','6917')
   CALL s_asti800_set_comp_format("stke023",g_site,'2')
   CALL s_asti800_set_comp_format("stke024",g_site,'2')
   CALL s_asti800_set_comp_format("stke025",g_site,'2')
   CALL s_asti800_set_comp_format("stke223",g_site,'2')
   CALL s_asti800_set_comp_format("stke224",g_site,'2')
   CALL s_asti800_set_comp_format("stke225",g_site,'2')
   CALL s_asti800_set_comp_format("stkj003",g_site,'2')
   CALL s_asti800_set_comp_format("stkj004",g_site,'2')
   CALL s_asti800_set_comp_format("stkj005",g_site,'2')
   CALL s_asti800_set_comp_format("stkm007",g_site,'1')
   CALL s_asti800_set_comp_format("stkm008",g_site,'1')
   CALL s_asti800_set_comp_format("stkm009",g_site,'1')
   CALL s_asti800_set_comp_format("stkm010",g_site,'1')
   CALL s_asti800_set_comp_format("stkm007_1",g_site,'1')
   CALL s_asti800_set_comp_format("stkm008_1",g_site,'1')
   CALL s_asti800_set_comp_format("stkm009_1",g_site,'1')
   CALL s_asti800_set_comp_format("stkm010_1",g_site,'1')
   CALL s_asti800_set_comp_format("stkn006",g_site,'1')
   CALL s_asti800_set_comp_format("stkh006",g_site,'1')
   CALL s_asti800_set_comp_format("stkf014_2",g_site,'1')
   CALL s_asti800_set_comp_format("stkf011",g_site,'1')
   CALL s_asti800_set_comp_format("stkf018",g_site,'1')
   CALL s_asti800_set_comp_format("stkf017",g_site,'1')
   CALL s_asti800_set_comp_format("stkg004",g_site,'1')
   CALL s_asti800_set_comp_format("stkg006",g_site,'1')
   CALL s_asti800_set_comp_format("stkn006",g_site,'1')   
   CALL s_aooi500_create_temp() RETURNING l_success
   CALL s_astt806_create_tmp() RETURNING l_success 
   #end add-point
   
   #初始化搜尋條件
   CALL astt806_default_search()
    
END FUNCTION
 
{</section>}
 
{<section id="astt806.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION astt806_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   
   #end add-point
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   DEFINE  l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE  l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE  l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   DEFINE l_current_row          LIKE type_t.num10  #获取当前的行数
   DEFINE l_success              LIKE type_t.num5 
   DEFINE l_cnt                  LIKE type_t.num10 
   DEFINE l_stje043              LIKE stje_t.stje043  
   DEFINE l_stje012              LIKE stje_t.stje012
   DEFINE l_sdate                LIKE type_t.dat   
   DEFINE l_type                 LIKE type_t.chr10
   DEFINE l_stke001              LIKE stke_t.stke001
   DEFINE l_stke011              LIKE stke_t.stke011
   DEFINE l_stke012              LIKE stke_t.stke012
   DEFINE l_stke042              LIKE stke_t.stke042
   DEFINE l_stke043              LIKE stke_t.stke043
   DEFINE  l_sql                 STRING    
   #end add-point
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   #因應查詢方案進行處理
   IF g_default THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #action default動作
   #應用 a42 樣板自動產生(Version:3)
   #進入程式時預設執行的動作
   CASE g_actdefault
      WHEN "insert"
         LET g_action_choice="insert"
         LET g_actdefault = ""
         IF cl_auth_chk_act("insert") THEN
            CALL astt806_insert()
            #add-point:ON ACTION insert name="menu.default.insert"
            
            #END add-point
         END IF
 
      #add-point:action default自訂 name="ui_dialog.action_default"
      
      #end add-point
      OTHERWISE
   END CASE
 
 
 
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE g_stem_m.* TO NULL
         CALL g_sten_d.clear()
         CALL g_sten15_d.clear()
         CALL g_sten16_d.clear()
         CALL g_sten2_d.clear()
         CALL g_sten3_d.clear()
         CALL g_sten4_d.clear()
         CALL g_sten5_d.clear()
         CALL g_sten6_d.clear()
         CALL g_sten7_d.clear()
         CALL g_sten8_d.clear()
         CALL g_sten9_d.clear()
 
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL astt806_init()
      END IF
   
      CALL lib_cl_dlg.cl_dlg_before_display()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
         
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL astt806_fetch('') # reload data
               LET l_ac = 1
               CALL astt806_ui_detailshow() #Setting the current row 
         
               CALL astt806_idx_chk()
               #NEXT FIELD stenseq
         
               ON ACTION qbefield_user   #欄位隱藏設定 
                  LET g_action_choice="qbefield_user"
                  CALL cl_ui_qbefield_user()
         END DISPLAY
    
         DISPLAY ARRAY g_sten_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[1] = l_ac
               CALL g_idx_group.addAttribute("'1',",l_ac)
               
               #add-point:page1, before row動作 name="ui_dialog.page1.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page1自定義行為 name="ui_dialog.page1.before_display"
               
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
               
            #add-point:page1自定義行為 name="ui_dialog.page1.action"
            
            #end add-point
               
         END DISPLAY
        
         #第一階單身段落
         DISPLAY ARRAY g_sten2_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[4] = l_ac
               CALL g_idx_group.addAttribute("'3',",l_ac)
               CALL astt806_b_fill2('3')
CALL astt806_b_fill2('4')
CALL astt806_b_fill2('5')
CALL astt806_b_fill2('6')
CALL astt806_b_fill2('7')
CALL astt806_b_fill2('8')
CALL astt806_b_fill2('9')
CALL astt806_b_fill2('10')
CALL astt806_b_fill2('11')
 
               #add-point:page4, before row動作 name="ui_dialog.body2.before_row"
CALL astt806_b_fill2('12')
CALL astt806_b_fill2('14')
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'3',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_current_page = 4
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page4自定義行為 name="ui_dialog.body2.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_4)
            
         
            #add-point:page4自定義行為 name="ui_dialog.body2.action"
            
            #end add-point
         
         END DISPLAY
 
         
         #第二階單身段落
         DISPLAY ARRAY g_sten15_d TO s_detail15.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail15")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[2] = l_ac
               CALL g_idx_group.addAttribute("'4',",l_ac)
               
               #add-point:page2, before row動作 name="ui_dialog.body15.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'4',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail15")
               LET g_current_page = 2
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page2自定義行為 name="ui_dialog.body15.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_2)
            
         
            #add-point:page2自定義行為 name="ui_dialog.body15.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten16_d TO s_detail16.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail16")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[3] = l_ac
               CALL g_idx_group.addAttribute("'2',",l_ac)
               
               #add-point:page3, before row動作 name="ui_dialog.body16.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail16")
               LET g_current_page = 3
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page3自定義行為 name="ui_dialog.body16.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_3)
            
         
            #add-point:page3自定義行為 name="ui_dialog.body16.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten3_d TO s_detail3.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[5] = l_ac
               CALL g_idx_group.addAttribute("'5',",l_ac)
               
               #add-point:page5, before row動作 name="ui_dialog.body3.before_row"
               CALL astt806_b_fill3()
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'5',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_current_page = 5
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page5自定義行為 name="ui_dialog.body3.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_5)
            
         
            #add-point:page5自定義行為 name="ui_dialog.body3.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten4_d TO s_detail4.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail4")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[6] = l_ac
               CALL g_idx_group.addAttribute("'6',",l_ac)
               
               #add-point:page6, before row動作 name="ui_dialog.body4.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'6',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail4")
               LET g_current_page = 6
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page6自定義行為 name="ui_dialog.body4.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_6)
            
         
            #add-point:page6自定義行為 name="ui_dialog.body4.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten5_d TO s_detail5.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail5")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[7] = l_ac
               CALL g_idx_group.addAttribute("'7',",l_ac)
               
               #add-point:page7, before row動作 name="ui_dialog.body5.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'7',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail5")
               LET g_current_page = 7
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page7自定義行為 name="ui_dialog.body5.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_7)
            
         
            #add-point:page7自定義行為 name="ui_dialog.body5.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten6_d TO s_detail6.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail6")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[8] = l_ac
               CALL g_idx_group.addAttribute("'8',",l_ac)
               
               #add-point:page8, before row動作 name="ui_dialog.body6.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'8',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail6")
               LET g_current_page = 8
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page8自定義行為 name="ui_dialog.body6.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_8)
            
         
            #add-point:page8自定義行為 name="ui_dialog.body6.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten7_d TO s_detail7.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail7")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[9] = l_ac
               CALL g_idx_group.addAttribute("'9',",l_ac)
               
               #add-point:page9, before row動作 name="ui_dialog.body7.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'9',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail7")
               LET g_current_page = 9
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page9自定義行為 name="ui_dialog.body7.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_9)
            
         
            #add-point:page9自定義行為 name="ui_dialog.body7.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten8_d TO s_detail8.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail8")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[10] = l_ac
               CALL g_idx_group.addAttribute("'10',",l_ac)
               
               #add-point:page10, before row動作 name="ui_dialog.body8.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'10',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail8")
               LET g_current_page = 10
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page10自定義行為 name="ui_dialog.body8.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_10)
            
         
            #add-point:page10自定義行為 name="ui_dialog.body8.action"
            
            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten9_d TO s_detail9.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail9")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[11] = l_ac
               CALL g_idx_group.addAttribute("'11',",l_ac)
               
               #add-point:page11, before row動作 name="ui_dialog.body9.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'11',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail9")
               LET g_current_page = 11
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page11自定義行為 name="ui_dialog.body9.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_11)
            
         
            #add-point:page11自定義行為 name="ui_dialog.body9.action"
            
            #end add-point
         
         END DISPLAY
 
         
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         #第二階單身段落
         DISPLAY ARRAY g_sten12_d TO s_detail12.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail12")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[12] = l_ac
               CALL g_idx_group.addAttribute("'12',",l_ac)
               
               #add-point:page5, before row動作 name="ui_dialog.body3.before_row"
               CALL astt806_b_fill4()
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'12',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail12")
               LET g_current_page = 12
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page5自定義行為 name="ui_dialog.body3.before_display"

               #end add-point
      
            #自訂ACTION(detail_show,page_5)
            
         
            #add-point:page5自定義行為 name="ui_dialog.body3.action"

            #end add-point
         
         END DISPLAY
         #第三階單身段落
         DISPLAY ARRAY g_sten11_d TO s_detail11.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail11")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[13] = l_ac
               CALL g_idx_group.addAttribute("'13',",l_ac)
               
               #add-point:page5, before row動作 name="ui_dialog.body3.before_row"

               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'13',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail11")
               LET g_current_page = 13
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page5自定義行為 name="ui_dialog.body3.before_display"

               #end add-point
      
            #自訂ACTION(detail_show,page_5)
            
         
            #add-point:page5自定義行為 name="ui_dialog.body3.action"

            #end add-point
         
         END DISPLAY
         #第二階單身段落
         DISPLAY ARRAY g_sten13_d TO s_detail13.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail13")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[14] = l_ac
               CALL g_idx_group.addAttribute("'14',",l_ac)
               
               #add-point:page5, before row動作 name="ui_dialog.body3.before_row"

               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'14',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail13")
               LET g_current_page = 14
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page5自定義行為 name="ui_dialog.body3.before_display"

               #end add-point
      
            #自訂ACTION(detail_show,page_5)
            
         
            #add-point:page5自定義行為 name="ui_dialog.body3.action"

            #end add-point
         
         END DISPLAY
         DISPLAY ARRAY g_sten14_d TO s_detail17.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL astt806_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail17")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[15] = l_ac
               CALL g_idx_group.addAttribute("'15',",l_ac)
               
               #add-point:page5, before row動作 name="ui_dialog.body3.before_row"

               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'15',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail17")
               LET g_current_page = 15
               #顯示單身筆數
               CALL astt806_idx_chk()
               #add-point:page5自定義行為 name="ui_dialog.body3.before_display"

               #end add-point
      
            #自訂ACTION(detail_show,page_5)
            
         
            #add-point:page5自定義行為 name="ui_dialog.body3.action"

            #end add-point
         
         END DISPLAY
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            #先填充browser資料
            CALL astt806_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL astt806_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL astt806_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL astt806_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2 name="ui_dialog.before_dialog2"
            
            #end add-point
 
         #add-point:ui_dialog段more_action name="ui_dialog.more_action"
         
         #end add-point
 
         #狀態碼切換
         ON ACTION statechange
            LET g_action_choice = "statechange"
            CALL astt806_statechange()
            #根據資料狀態切換action狀態
            CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
            CALL astt806_set_act_visible()   
            CALL astt806_set_act_no_visible()
            IF NOT (g_stem_m.stemdocno IS NULL
 
              ) THEN
               #組合條件
               LET g_add_browse = " stement = " ||g_enterprise|| " AND",
                                  " stemdocno = '", g_stem_m.stemdocno, "' "
 
               #填到對應位置
               CALL astt806_browser_fill("")
            END IF
         #應用 a32 樣板自動產生(Version:3)
         #簽核狀況
         ON ACTION bpm_status
            #查詢簽核狀況, 統一建立HyperLink
            CALL cl_bpm_status()
            #add-point:ON ACTION bpm_status name="menu.bpm_status"
            
            #END add-point
 
 
 
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               INITIALIZE g_wc2_table2 TO NULL
 
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "stem_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "sten_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "stke_t" 
                        LET g_wc2_table2 = la_wc[li_idx].wc
 
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
                  OR NOT cl_null(g_wc2_table2)
 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  #組合g_wc2
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
                  END IF
 
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
 
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
               END IF
               CALL astt806_browser_fill("F")   #browser_fill()會將notice區塊清空
               CALL cl_notice()   #重新顯示,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               INITIALIZE g_wc2_table2 TO NULL
 
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "stem_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "sten_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "stke_t" 
                        LET g_wc2_table2 = la_wc[li_idx].wc
 
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1)
                  OR NOT cl_null(g_wc2_table2)
 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
                  END IF
 
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
                  #取得條件後需要重查、跳到結果第一筆資料的功能程式段
                  CALL astt806_browser_fill("F")
                  IF g_browser_cnt = 0 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "-100" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     CLEAR FORM
                  ELSE
                     CALL astt806_fetch("F")
                  END IF
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            CALL cl_notice()
          
         #應用 a49 樣板自動產生(Version:4)
            #過濾瀏覽頁資料
            ON ACTION filter
               LET g_action_choice = "fetch"
               #add-point:filter action name="ui_dialog.action.filter"
               
               #end add-point
               CALL astt806_filter()
               EXIT DIALOG
 
 
 
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL astt806_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt806_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL astt806_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt806_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL astt806_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt806_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL astt806_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt806_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL astt806_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL astt806_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_sten_d)
                  LET g_export_id[1]   = "s_detail1"
                  LET g_export_node[2] = base.typeInfo.create(g_sten15_d)
                  LET g_export_id[2]   = "s_detail15"
                  LET g_export_node[3] = base.typeInfo.create(g_sten16_d)
                  LET g_export_id[3]   = "s_detail16"
                  LET g_export_node[4] = base.typeInfo.create(g_sten2_d)
                  LET g_export_id[4]   = "s_detail2"
                  LET g_export_node[5] = base.typeInfo.create(g_sten3_d)
                  LET g_export_id[5]   = "s_detail3"
                  LET g_export_node[6] = base.typeInfo.create(g_sten4_d)
                  LET g_export_id[6]   = "s_detail4"
                  LET g_export_node[7] = base.typeInfo.create(g_sten5_d)
                  LET g_export_id[7]   = "s_detail5"
                  LET g_export_node[8] = base.typeInfo.create(g_sten6_d)
                  LET g_export_id[8]   = "s_detail6"
                  LET g_export_node[9] = base.typeInfo.create(g_sten7_d)
                  LET g_export_id[9]   = "s_detail7"
                  LET g_export_node[10] = base.typeInfo.create(g_sten8_d)
                  LET g_export_id[10]   = "s_detail8"
                  LET g_export_node[11] = base.typeInfo.create(g_sten9_d)
                  LET g_export_id[11]   = "s_detail9"
 
                  #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
                  
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
         #瀏覽頁折疊
         ON ACTION worksheethidden   
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            IF lb_first THEN
               LET lb_first = FALSE
               NEXT FIELD stenseq
            END IF
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL astt806_modify()
               #add-point:ON ACTION modify name="menu.modify"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL astt806_modify()
               #add-point:ON ACTION modify_detail name="menu.modify_detail"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION gen_detail
            LET g_action_choice="gen_detail"
            IF cl_auth_chk_act("gen_detail") THEN
               
               #add-point:ON ACTION gen_detail name="menu.gen_detail"
               IF NOT cl_null(g_stem_m.stemdocno) THEN                  
                  IF g_stem_m.stemstus  = 'N' THEN
                     #CALL cl_err_collect_init()
                     CALL astt806_01(g_stem_m.stemdocno)
                     LET INT_FLAG = 0
                     LET g_action_choice = ''
                     CALL astt806_b_fill()
                     IF g_detail_idx = 0 OR g_detail_idx IS NULL THEN
                        LET g_detail_idx  = 1
                     END IF
                     CALL astt806_b_fill2('0')
#                     CALL s_transaction_begin()
#                     LET l_stke001= ''
#                     LET l_stke011= ''
#                     LET l_stke012= ''
#                     LET l_stke042= '' 
#                     LET l_stke043= ''
#                     LET l_sql = "SELECT stke001,stke011,stke012,stke042,stke043 FROM stke_t WHERE stkeent = ",g_enterprise," AND stkedocno = '",g_stem_m.stemdocno,"' AND stke027 = '1' "
#                     PREPARE astt806_stke_pre1 FROM l_sql
#                     DECLARE astt806_stke_cs1 CURSOR FOR astt806_stke_pre1
#                     FOREACH astt806_stke_cs1 INTO l_stke001,l_stke011,l_stke012,l_stke042,l_stke043                  
#                        UPDATE stke_t SET stke027 = '' 
#                         WHERE stkeent = g_enterprise
#                           AND stke027  = '1'
#                           AND stkedocno = g_stem_m.stemdocno
#                           AND stke001  = l_stke001
#                        IF SQLCA.sqlcode THEN                              
#                           INITIALIZE g_errparam TO NULL
#                           LET g_errparam.code = SQLCA.sqlcode
#                           LET g_errparam.extend = " UPDATE stke_t "
#                           LET g_errparam.popup = TRUE
#                           CALL cl_err()
#                           CALL cl_err_collect_show()
#                           CALL s_transaction_end('N','0')
#                           CONTINUE DIALOG                         
#                        END IF   
#                        #新增或者面积变更续签的时候               
#                        IF g_stem_m.stem035 = '1' THEN 
#                           #产生场地信息
#                           CALL astt806_stkj_insert(l_stke001) RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF 
#                        END IF
#                        #产生账期
#                        IF g_stem_m.stem035 = '1' OR g_stem_m.stem035 = '2'  THEN   
#                           IF NOT astt806_upd_stko(l_stke001) THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF
#                        END IF                  
#                        #优惠变更
#                        IF g_stem_m.stem035 = '3' THEN                  
#                           CALL astt806_stkh_insert(l_stke001) RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF
#                           #产生费用日核算
#                           CALL s_astt806_day_account('A',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF                 
#                           #优惠的时候更新合同账单
#                           CALL s_astt806_update_stkm_t(g_stem_m.stemdocno,'A',l_stke001) RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF 
#                        END IF
#                        #延期
#                        IF g_stem_m.stem035 = '2' THEN                  
#                           #重取标准
#                           CALL s_astt806_refetch_standard('B',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF                  
#                           #产生费用日核算
#                           INITIALIZE l_stje043,l_stje012,l_sdate TO NULL
#                           SELECT stje043,stje012 INTO l_stje043,l_stje012
#                             FROM stje_t
#                            WHERE stjeent = g_enterprise
#                              AND stje001 = l_stke001
#                           IF l_stje043 IS NOT NULL THEN
#                              LET l_sdate = l_stje043
#                           ELSE
#                              LET l_sdate = l_stje012
#                           END IF
#                           CALL s_astt806_day_account('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF                 
#                           #产生合同账单                  
#                           CALL s_astt806_produce_period('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_sdate+1,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF  
#                        END IF                              
#                        #续签单头录入后自动产生单身（固定费用和变动费用不自动从合同主档带）：先提示是否重取标准，
#                        #是从合同开始~结束日期重新取标准费用带出单身；
#                        #否，从原合同带出 （一次性的费用不自动带出）
#                        IF g_stem_m.stem035 = '1' THEN               
#                           IF cl_ask_confirm('ast-00831') THEN 
#                              CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                              IF NOT l_success THEN
#                                 CALL cl_err_collect_show()
#                                 CALL s_transaction_end('N','0')
#                                 CONTINUE DIALOG 
#                              END IF
#                           ELSE   
#                              #如果场地发生变化，提示只能重取标准
#                              LET l_cnt = 0
#                              SELECT COUNT(*) INTO l_cnt
#                                FROM stkj_t,stjj_t
#                               WHERE stkjent = g_enterprise
#                                 AND stkjdocno = g_stem_m.stemdocno
#                                 AND stkjent = stjjent 
#                                 AND stkj001 = stjj001
#                                 AND stjj001 = l_stke001
#                                 AND stkj002 <> stjj002
#                                 AND stkjseq = stjjseq
#                              IF l_cnt > 0 THEN
#                                 CALL cl_ask_confirm3("ast-00832","")
#                                 CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                                 IF NOT l_success THEN
#                                    CALL cl_err_collect_show()
#                                    CALL s_transaction_end('N','0')
#                                    CONTINUE DIALOG 
#                                 END IF
#                                 #从合同主档带出非标准的
#                                 CALL astt806_stkf_get('1',l_stke001) RETURNING l_success
#                                 IF NOT l_success THEN
#                                    CALL cl_err_collect_show()
#                                    CALL s_transaction_end('N','0')
#                                    CONTINUE DIALOG 
#                                 END IF
#                              ELSE                     
#                                 #从合同主档带值
#                                 CALL astt806_stkf_get('2',l_stke001) RETURNING l_success
#                                 IF NOT l_success THEN
#                                    CALL cl_err_collect_show()
#                                    CALL s_transaction_end('N','0')
#                                    CONTINUE DIALOG 
#                                 END IF
#                              END IF
#                           END IF
#                           #产生费用日核算
#                           CALL s_astt806_day_account('R',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF
#                           #新增定义账期
#                           CALL astt806_stki_insert(l_stke001) RETURNING l_success                      
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF 
#                           #产生合同账单                  
#                           CALL s_astt806_produce_period('R',g_stem_m.stemdocno,l_stke011,l_stke012,l_stke042,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show()
#                              CALL s_transaction_end('N','0')
#                              CONTINUE DIALOG 
#                           END IF           
#                              
#                        END IF                  
#                     END FOREACH 
#                     CALL s_transaction_end('Y','0')               
                     #CALL cl_err_collect_show()       
                  ELSE   
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code   = "art-00608" 
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                     CONTINUE DIALOG 
                  END IF
               ELSE
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "std-00003" 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG             
               END IF
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION produce__cost
            LET g_action_choice="produce__cost"
            IF cl_auth_chk_act("produce__cost") THEN
               
               #add-point:ON ACTION produce__cost name="menu.produce__cost"
               IF NOT cl_null(g_stem_m.stemdocno) THEN                  
                  IF g_stem_m.stemstus  = 'N' THEN
                     IF g_sten2_d.getLength() > 0 THEN
                        INITIALIZE l_current_row TO NULL
                        LET l_current_row = DIALOG.getCurrentRow("s_detail2")
                        IF l_current_row IS NOT NULL AND g_sten2_d[l_current_row].stke001 IS NOT NULL THEN
                           CALL s_transaction_begin()
                           CALL cl_err_collect_init()
                           #产生日核算
                           #新增和优惠
                           IF g_stem_m.stem035 = '3'  THEN 
                              IF g_stem_m.stem035 = '3' THEN  
                                 #产生优惠费用单身
                                 CALL s_astt806_stkh_insert(g_sten2_d[l_current_row].stke001,g_stem_m.stemdocno,g_stem_m.stem035) RETURNING l_success
                                 IF NOT l_success THEN
                                    CALL cl_err_collect_show()
                                    CALL s_transaction_end('N','0')
                                    CONTINUE DIALOG 
                                 END IF
                              END IF  
                              CALL s_astt806_day_account('A',g_stem_m.stemdocno,g_sten2_d[l_current_row].stke042,g_sten2_d[l_current_row].stke012,g_sten2_d[l_current_row].stke001) RETURNING l_success
                           END IF
                           #延期
                           IF g_stem_m.stem035 = '2' THEN
                              INITIALIZE l_stje043,l_stje012,l_sdate TO NULL
                              SELECT stje043,stje012 INTO l_stje043,l_stje012
                                FROM stje_t
                               WHERE stjeent = g_enterprise
                                 AND stje001 = g_sten2_d[l_current_row].stke001
                              IF l_stje043 IS NOT NULL THEN
                                 LET l_sdate = l_stje043
                              ELSE
                                 LET l_sdate = l_stje012
                              END IF
                              CALL s_astt806_day_account('B',g_stem_m.stemdocno,l_sdate+1,g_sten2_d[l_current_row].stke043,g_sten2_d[l_current_row].stke001) RETURNING l_success
                           END IF                    
                           #续签
                           IF g_stem_m.stem035 = '1' THEN                              
                              CALL s_astt806_day_account('R',g_stem_m.stemdocno,g_sten2_d[l_current_row].stke042,g_sten2_d[l_current_row].stke012,g_sten2_d[l_current_row].stke001) RETURNING l_success
                           END IF
                           CALL cl_err_collect_show()                           
                           IF NOT l_success THEN
                              CALL s_transaction_end('N','0')
                           ELSE
                              INITIALIZE g_errparam TO NULL 
                              LET g_errparam.extend = "" 
                              LET g_errparam.code   = "adz-00217" 
                              LET g_errparam.popup  = TRUE
                              CALL cl_err()
                              CALL s_transaction_end('Y',0)                           
                           END IF
                           CALL astt806_b_fill() #單身填充
                           CALL astt806_b_fill2('0') #單身填充
                        ELSE
                           INITIALIZE g_errparam TO NULL 
                           LET g_errparam.extend = "" 
                           LET g_errparam.code   = "ast-00709" 
                           LET g_errparam.popup  = TRUE
                           CALL cl_err()
                           CONTINUE DIALOG 
                        END IF  
                     END IF                        
                  ELSE   
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code   = "art-00608" 
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                     CONTINUE DIALOG 
                  END IF
               ELSE
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "std-00003" 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG             
               END IF
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL astt806_delete()
               #add-point:ON ACTION delete name="menu.delete"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION execute_standard
            LET g_action_choice="execute_standard"
            IF cl_auth_chk_act("execute_standard") THEN
               
               #add-point:ON ACTION execute_standard name="menu.execute_standard"
               IF NOT cl_null(g_stem_m.stemdocno) THEN                  
                  IF g_stem_m.stemstus  = 'N' THEN
                     IF g_stem_m.stem035 = '1' OR g_stem_m.stem035 = '2'  THEN 
                        IF g_sten2_d.getLength() > 0 THEN
                           INITIALIZE l_current_row TO NULL
                           LET l_current_row = DIALOG.getCurrentRow("s_detail2")
                           IF l_current_row IS NOT NULL AND g_sten2_d[l_current_row].stke001 IS NOT NULL THEN
                              CALL s_transaction_begin()
                              CALL cl_err_collect_init()
                              LET l_type = ''
                              IF g_stem_m.stem035 = '1' THEN
                                 LET l_type = 'R'
                              END IF
                              IF g_stem_m.stem035 = '2' THEN
                                 LET l_type = 'B'
                              END IF
                              CALL s_astt806_refetch_standard(l_type,g_stem_m.stemdocno,g_sten2_d[l_current_row].stke001) RETURNING l_success
                              IF NOT l_success  THEN
                                 CALL cl_err_collect_show()
                                 CALL s_transaction_end('N',0)
                              ELSE
                                 IF g_stem_m.stem035 = '1'  THEN 
                                    #新增定义账期
                                    CALL s_astt806_stki_insert(g_sten2_d[l_current_row].stke001,g_stem_m.stemdocno) RETURNING l_success                      
                                    IF NOT l_success THEN
                                       CALL cl_err_collect_show()
                                       CALL s_transaction_end('N',0) 
                                    ELSE
                                       INITIALIZE g_errparam TO NULL 
                                       LET g_errparam.extend = "" 
                                       LET g_errparam.code   = "adz-00217" 
                                       LET g_errparam.popup  = TRUE
                                       CALL cl_err()  
                                       CALL s_transaction_end('Y',0) 
                                       CALL cl_err_collect_show()                                          
                                    END IF 
                                 ELSE
                                    INITIALIZE g_errparam TO NULL 
                                    LET g_errparam.extend = "" 
                                    LET g_errparam.code   = "adz-00217" 
                                    LET g_errparam.popup  = TRUE
                                    CALL cl_err()  
                                    CALL s_transaction_end('Y',0) 
                                    CALL cl_err_collect_show()                                      
                                 END IF                           
                              END IF
                              UPDATE stke_t SET stke027 = '' 
                               WHERE stkeent = g_enterprise
                                 AND stke027  = '1'
                                 AND stkedocno = g_stem_m.stemdocno
                                 AND stke001  = g_sten2_d[l_current_row].stke001
                              IF SQLCA.sqlcode THEN                              
                                 INITIALIZE g_errparam TO NULL
                                 LET g_errparam.code = SQLCA.sqlcode
                                 LET g_errparam.extend = " UPDATE stke_t "
                                 LET g_errparam.popup = TRUE
                                 CALL cl_err()                     
                              END IF                                
                              CALL astt806_b_fill()
                              CALL astt806_b_fill2('0')
                           ELSE
                              INITIALIZE g_errparam TO NULL 
                              LET g_errparam.extend = "" 
                              LET g_errparam.code   = "adb-00078" 
                              LET g_errparam.popup  = TRUE
                              CALL cl_err()
                              CONTINUE DIALOG
                           END IF  
                        END IF                           
                     ELSE
                        INITIALIZE g_errparam TO NULL 
                        LET g_errparam.extend = "" 
                        LET g_errparam.code   = "ast-00709" 
                        LET g_errparam.popup  = TRUE
                        CALL cl_err()
                        CONTINUE DIALOG 
                     END IF                     
                  ELSE   
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code   = "art-00608" 
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                     CONTINUE DIALOG 
                  END IF
               ELSE
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "std-00003" 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG             
               END IF
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               CALL astt806_insert()
               #add-point:ON ACTION insert name="menu.insert"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output name="menu.output"
               
               #END add-point
               &include "erp/ast/astt806_rep.4gl"
               #add-point:ON ACTION output.after name="menu.after_output"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION quickprint
            LET g_action_choice="quickprint"
            IF cl_auth_chk_act("quickprint") THEN
               
               #add-point:ON ACTION quickprint name="menu.quickprint"
               
               #END add-point
               &include "erp/ast/astt806_rep.4gl"
               #add-point:ON ACTION quickprint.after name="menu.after_quickprint"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL astt806_query()
               #add-point:ON ACTION query name="menu.query"
               
               #END add-point
               #應用 a59 樣板自動產生(Version:3)  
               CALL g_curr_diag.setCurrentRow("s_detail1",1)
               CALL g_curr_diag.setCurrentRow("s_detail15",1)
               CALL g_curr_diag.setCurrentRow("s_detail16",1)
               CALL g_curr_diag.setCurrentRow("s_detail2",1)
               CALL g_curr_diag.setCurrentRow("s_detail3",1)
               CALL g_curr_diag.setCurrentRow("s_detail4",1)
               CALL g_curr_diag.setCurrentRow("s_detail5",1)
               CALL g_curr_diag.setCurrentRow("s_detail6",1)
               CALL g_curr_diag.setCurrentRow("s_detail7",1)
               CALL g_curr_diag.setCurrentRow("s_detail8",1)
               CALL g_curr_diag.setCurrentRow("s_detail9",1)
 
 
 
 
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION produce__bill
            LET g_action_choice="produce__bill"
            IF cl_auth_chk_act("produce__bill") THEN
               
               #add-point:ON ACTION produce__bill name="menu.produce__bill"
               IF NOT cl_null(g_stem_m.stemdocno) THEN                  
                  IF g_stem_m.stemstus  = 'N' THEN
                     IF g_sten2_d.getLength() > 0 THEN
                        INITIALIZE l_current_row TO NULL
                        LET l_current_row = DIALOG.getCurrentRow("s_detail2")
                        IF l_current_row IS NOT NULL AND g_sten2_d[l_current_row].stke001 IS NOT NULL THEN                                      
                           CALL s_transaction_begin()
                           CALL cl_err_collect_init()
                           #优惠和面积变更的时候更新合同账单
                           IF g_stem_m.stem035 = '3'  THEN                      
                              CALL s_astt806_update_stkm_t(g_stem_m.stemdocno,'A',g_sten2_d[l_current_row].stke001) RETURNING l_success
                           END IF
                           #延期                         
                           IF g_stem_m.stem035 = '2'  THEN
                              INITIALIZE l_stje043,l_stje012,l_sdate TO NULL
                              SELECT stje043,stje012 INTO l_stje043,l_stje012
                                FROM stje_t
                               WHERE stjeent = g_enterprise
                                 AND stje001 = g_sten2_d[l_current_row].stke001
                              IF l_stje043 IS NOT NULL THEN
                                 LET l_sdate = l_stje043
                              ELSE
                                 LET l_sdate = l_stje012
                              END IF  
                              CALL s_astt806_produce_period('B',g_stem_m.stemdocno,l_sdate+1,g_sten2_d[l_current_row].stke043,l_sdate+1,g_sten2_d[l_current_row].stke001) RETURNING l_success
                           END IF
                           #续签
                           IF g_stem_m.stem035 = '1' THEN                              
                              #结算账期按照租赁开始日期产生
                              IF NOT s_astt806_cal_period(g_stem_m.stemdocno,g_sten2_d[l_current_row].stke001,g_sten2_d[l_current_row].stke011,g_sten2_d[l_current_row].stke012,g_sten2_d[l_current_row].stke031,'',g_sten2_d[l_current_row].stkesite,g_sten2_d[l_current_row].stkesite) THEN 
                                 INITIALIZE g_errparam TO NULL
                                 LET g_errparam.code = 'ast-00049'
                                 LET g_errparam.extend = ''
                                 LET g_errparam.popup = TRUE
                                 CALL cl_err()
                                 LET l_success = FALSE
                              ELSE
                                 CALL s_astt806_produce_period('R',g_stem_m.stemdocno,g_sten2_d[l_current_row].stke011,g_sten2_d[l_current_row].stke012,g_sten2_d[l_current_row].stke042,g_sten2_d[l_current_row].stke001) RETURNING l_success
                              END IF                         END IF
                           CALL cl_err_collect_show()
                           IF l_success THEN
                              INITIALIZE g_errparam TO NULL 
                              LET g_errparam.extend = "" 
                              LET g_errparam.code   = "adz-00217" 
                              LET g_errparam.popup  = TRUE
                              CALL cl_err()
                              CALL s_transaction_end('Y',0)
                           ELSE
                              CALL s_transaction_end('N',0)
                           END IF
                           CALL astt806_b_fill() #單身填充
                           CALL astt806_b_fill2('0') #單身填充
                        ELSE
                           INITIALIZE g_errparam TO NULL 
                           LET g_errparam.extend = "" 
                           LET g_errparam.code   = "ast-00709" 
                           LET g_errparam.popup  = TRUE
                           CALL cl_err()
                           CONTINUE DIALOG 
                        END IF 
                     END IF                        
                  ELSE   
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code   = "art-00608" 
                     LET g_errparam.popup  = TRUE
                     CALL cl_err()
                     CONTINUE DIALOG 
                  END IF
               ELSE
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "std-00003" 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG             
               END IF
               #END add-point
               
            END IF
 
 
 
 
         
         #應用 a46 樣板自動產生(Version:3)
         #新增相關文件
         ON ACTION related_document
            CALL astt806_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document name="ui_dialog.dialog.related_document"
               
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL astt806_set_pk_array()
            #add-point:ON ACTION agendum name="ui_dialog.dialog.agendum"
            
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL astt806_set_pk_array()
            #add-point:ON ACTION followup name="ui_dialog.dialog.followup"
            
            #END add-point
            CALL cl_user_overview_follow(g_stem_m.stemdocdt)
 
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG
 
      #(ver:79) ---add start---
      #add-point:ui_dialog段 after dialog name="ui_dialog.exit_dialog"
      
      #end add-point
      #(ver:79) --- add end ---
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前 name="ui_dialog.b_exit"
         
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
 
{</section>}
 
{<section id="astt806.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION astt806_browser_fill(ps_page_action)
   #add-point:browser_fill段define(客製用) name="browser_fill.define_customerization"
   
   #end add-point  
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="browser_fill.define"
   DEFINE l_where           STRING
   #end add-point    
   
   #add-point:Function前置處理 name="browser_fill.before_browser_fill"
 
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前 name="browser_fill.before_foreach"
   CALL s_aooi500_sql_where(g_prog,'stemsite') RETURNING l_where
   LET g_wc = g_wc," AND ",l_where
   LET l_wc  = g_wc.trim()
   LET l_wc = l_wc," AND stem000='astt806'" 
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT DISTINCT stemdocno ",
                      " FROM stem_t ",
                      " ",
                      " LEFT JOIN sten_t ON stenent = stement AND stemdocno = stendocno ", "  ",
                      #add-point:browser_fill段sql(sten_t1) name="browser_fill.cnt.join.}"
                      
                      #end add-point
                      " LEFT JOIN stke_t ON stkeent = stement AND stemdocno = stkedocno", "  ",
                      #add-point:browser_fill段sql(stke_t1) name="browser_fill.cnt.join.stke_t1"
                      
                      #end add-point
 
 
                      " LEFT JOIN stkn_t ON stknent = stement AND stkedocno = stkndocno AND stke001 = stkn001", "  ",
                      #add-point:browser_fill段sql(stkn_t1) name="browser_fill.cnt.join.stkn_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stko_t ON stkoent = stement AND stkedocno = stkodocno AND stke001 = stko001", "  ",
                      #add-point:browser_fill段sql(stko_t1) name="browser_fill.cnt.join.stko_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkf_t ON stkfent = stement AND stkedocno = stkfdocno AND stke001 = stkf001", "  ",
                      #add-point:browser_fill段sql(stkf_t1) name="browser_fill.cnt.join.stkf_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkh_t ON stkhent = stement AND stkedocno = stkhdocno AND stke001 = stkh001", "  ",
                      #add-point:browser_fill段sql(stkh_t1) name="browser_fill.cnt.join.stkh_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stki_t ON stkient = stement AND stkedocno = stkidocno AND stke001 = stki001", "  ",
                      #add-point:browser_fill段sql(stki_t1) name="browser_fill.cnt.join.stki_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkj_t ON stkjent = stement AND stkedocno = stkjdocno AND stke001 = stkj001", "  ",
                      #add-point:browser_fill段sql(stkj_t1) name="browser_fill.cnt.join.stkj_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkk_t ON stkkent = stement AND stkedocno = stkkdocno AND stke001 = stkk001", "  ",
                      #add-point:browser_fill段sql(stkk_t1) name="browser_fill.cnt.join.stkk_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkl_t ON stklent = stement AND stkedocno = stkldocno AND stke001 = stkl001", "  ",
                      #add-point:browser_fill段sql(stkl_t1) name="browser_fill.cnt.join.stkl_t1"
                      
                      #end add-point
 
                      " LEFT JOIN stkm_t ON stkment = stement AND stkedocno = stkmdocno AND stke001 = stkm001", "  ",
                      #add-point:browser_fill段sql(stkm_t1) name="browser_fill.cnt.join.stkm_t1"
                      
                      #end add-point
 
 
                      " ", 
                      " ", 
                      " ",                      
 
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
                      " ",
 
 
                      " WHERE stement = " ||g_enterprise|| " AND stenent = " ||g_enterprise|| " AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("stem_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT DISTINCT stemdocno ",
                      " FROM stem_t ", 
                      "  ",
                      "  ",
                      " WHERE stement = " ||g_enterprise|| " AND ",l_wc CLIPPED, cl_sql_add_filter("stem_t")
   END IF
   
   #add-point:browser_fill,cnt wc name="browser_fill.cnt_sqlwc"
   
   #end add-point
   
   LET g_sql = " SELECT COUNT(1) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前 name="browser_fill.before_count"
   
   #end add-point
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE header_cnt_pre FROM g_sql
      EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
      FREE header_cnt_pre
   END IF
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code = 9035 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_stem_m.* TO NULL
      CALL g_sten_d.clear()        
      CALL g_sten15_d.clear() 
      CALL g_sten16_d.clear() 
      CALL g_sten2_d.clear() 
      CALL g_sten3_d.clear() 
      CALL g_sten4_d.clear() 
      CALL g_sten5_d.clear() 
      CALL g_sten6_d.clear() 
      CALL g_sten7_d.clear() 
      CALL g_sten8_d.clear() 
      CALL g_sten9_d.clear() 
 
      #add-point:browser_fill g_add_browse段額外處理 name="browser_fill.add_browse.other"
      CALL g_sten11_d.clear()  
      CALL g_sten12_d.clear()
      CALL g_sten13_d.clear()  
      CALL g_sten14_d.clear()      
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.stemsite,t0.stemdocdt,t0.stemdocno,t0.stem035,t0.stem036,t0.stem012,t0.stem013,t0.stem034 Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.stemstus,t0.stemsite,t0.stemdocdt,t0.stemdocno,t0.stem035,t0.stem036, 
          t0.stem012,t0.stem013,t0.stem034,t1.ooefl003 ,t2.ooag011 ,t3.ooefl003 ",
                  " FROM stem_t t0",
                  "  ",
                  "  LEFT JOIN sten_t ON stenent = stement AND stemdocno = stendocno ", "  ", 
                  #add-point:browser_fill段sql(sten_t1) name="browser_fill.join.sten_t1"
                  
                  #end add-point
                  "  LEFT JOIN stke_t ON stkeent = stement AND stemdocno = stkedocno", "  ", 
                  #add-point:browser_fill段sql(stke_t1) name="browser_fill.join.stke_t1"
                  
                  #end add-point
 
 
                  "  LEFT JOIN stkn_t ON stknent = stement AND stkedocno = stkndocno AND stke001 = stkn001", "  ", 
                  #add-point:browser_fill段sql(stkn_t1) name="browser_fill.join.stkn_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stko_t ON stkoent = stement AND stkedocno = stkodocno AND stke001 = stko001", "  ", 
                  #add-point:browser_fill段sql(stko_t1) name="browser_fill.join.stko_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkf_t ON stkfent = stement AND stkedocno = stkfdocno AND stke001 = stkf001", "  ", 
                  #add-point:browser_fill段sql(stkf_t1) name="browser_fill.join.stkf_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkh_t ON stkhent = stement AND stkedocno = stkhdocno AND stke001 = stkh001", "  ", 
                  #add-point:browser_fill段sql(stkh_t1) name="browser_fill.join.stkh_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stki_t ON stkient = stement AND stkedocno = stkidocno AND stke001 = stki001", "  ", 
                  #add-point:browser_fill段sql(stki_t1) name="browser_fill.join.stki_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkj_t ON stkjent = stement AND stkedocno = stkjdocno AND stke001 = stkj001", "  ", 
                  #add-point:browser_fill段sql(stkj_t1) name="browser_fill.join.stkj_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkk_t ON stkkent = stement AND stkedocno = stkkdocno AND stke001 = stkk001", "  ", 
                  #add-point:browser_fill段sql(stkk_t1) name="browser_fill.join.stkk_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkl_t ON stklent = stement AND stkedocno = stkldocno AND stke001 = stkl001", "  ", 
                  #add-point:browser_fill段sql(stkl_t1) name="browser_fill.join.stkl_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN stkm_t ON stkment = stement AND stkedocno = stkmdocno AND stke001 = stkm001", "  ", 
                  #add-point:browser_fill段sql(stkm_t1) name="browser_fill.join.stkm_t1"
                  
                  #end add-point
 
 
                  " ", 
                  " ",                      
 
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
                  " ",
 
 
                                 " LEFT JOIN ooefl_t t1 ON t1.ooeflent="||g_enterprise||" AND t1.ooefl001=t0.stemsite AND t1.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.stem012  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.stem013 AND t3.ooefl002='"||g_dlang||"' ",
 
                  " WHERE t0.stement = " ||g_enterprise|| " AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("stem_t")
   ELSE
      #單身無輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.stemstus,t0.stemsite,t0.stemdocdt,t0.stemdocno,t0.stem035,t0.stem036, 
          t0.stem012,t0.stem013,t0.stem034,t1.ooefl003 ,t2.ooag011 ,t3.ooefl003 ",
                  " FROM stem_t t0",
                  "  ",
                                 " LEFT JOIN ooefl_t t1 ON t1.ooeflent="||g_enterprise||" AND t1.ooefl001=t0.stemsite AND t1.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.stem012  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.stem013 AND t3.ooefl002='"||g_dlang||"' ",
 
                  " WHERE t0.stement = " ||g_enterprise|| " AND ",l_wc, cl_sql_add_filter("stem_t")
   END IF
   #add-point:browser_fill,sql wc name="browser_fill.fill_sqlwc"
   
   #end add-point
   LET g_sql = g_sql, " ORDER BY stemdocno ",g_order
 
   #add-point:browser_fill,before_prepare name="browser_fill.before_prepare"
   
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"stem_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE browse_pre FROM g_sql
      DECLARE browse_cur CURSOR FOR browse_pre
      
      #add-point:browser_fill段open cursor name="browser_fill.open"
      
      #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_stemsite,g_browser[g_cnt].b_stemdocdt, 
          g_browser[g_cnt].b_stemdocno,g_browser[g_cnt].b_stem035,g_browser[g_cnt].b_stem036,g_browser[g_cnt].b_stem012, 
          g_browser[g_cnt].b_stem013,g_browser[g_cnt].b_stem034,g_browser[g_cnt].b_stemsite_desc,g_browser[g_cnt].b_stem012_desc, 
          g_browser[g_cnt].b_stem013_desc
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference name="browser_fill.reference"
         
         #end add-point
      
         #遮罩相關處理
         CALL astt806_browser_mask()
      
               #應用 a24 樣板自動產生(Version:3)
      #browser顯示圖片
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/unconfirmed.png"
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/confirmed.png"
         WHEN "A"
            LET g_browser[g_cnt].b_statepic = "stus/16/approved.png"
         WHEN "D"
            LET g_browser[g_cnt].b_statepic = "stus/16/withdraw.png"
         WHEN "R"
            LET g_browser[g_cnt].b_statepic = "stus/16/rejection.png"
         WHEN "W"
            LET g_browser[g_cnt].b_statepic = "stus/16/signing.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/invalid.png"
         
      END CASE
 
 
 
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_browse THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      FREE browse_pre
   END IF
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_stemdocno) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
 
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前 name="browser_fill.after"
   
   #end add-point   
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION astt806_ui_headershow()
   #add-point:ui_headershow段define(客製用) name="ui_headershow.define_customerization"
   
   #end add-point  
   #add-point:ui_headershow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_headershow.define"
   
   #end add-point      
   
   #add-point:Function前置處理  name="ui_headershow.pre_function"
   
   #end add-point
   
   LET g_stem_m.stemdocno = g_browser[g_current_idx].b_stemdocno   
 
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
   CALL astt806_stem_t_mask()
   CALL astt806_show()
      
END FUNCTION
 
{</section>}
 
{<section id="astt806.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION astt806_ui_detailshow()
   #add-point:ui_detailshow段define(客製用) name="ui_detailshow.define_customerization"
   
   #end add-point    
   #add-point:ui_detailshow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_detailshow.define"
   
   #end add-point    
 
   #add-point:Function前置處理 name="ui_detailshow.before"
   
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
      CALL g_curr_diag.setCurrentRow("s_detail15",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail16",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail2",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail3",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail4",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail5",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail6",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail7",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail8",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail9",g_detail_idx)
 
   END IF
   
   #add-point:ui_detailshow段after name="ui_detailshow.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION astt806_ui_browser_refresh()
   #add-point:ui_browser_refresh段define(客製用) name="ui_browser_refresh.define_customerization"
   
   #end add-point    
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_browser_refresh.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="ui_browser_refresh.pre_function"
   
   #end add-point
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_stemdocno = g_stem_m.stemdocno 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after name="ui_browser_refresh.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION astt806_construct()
   #add-point:cs段define(客製用) name="cs.define_customerization"
   
   #end add-point    
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   DEFINE la_wc       DYNAMIC ARRAY OF RECORD
          tableid     STRING,
          wc          STRING
          END RECORD
   DEFINE li_idx      LIKE type_t.num10
   #add-point:cs段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="cs.define"
   DEFINE  l_ooef019             LIKE ooef_t.ooef019 #稅區
   DEFINE  l_success             LIKE type_t.num5
   #end add-point    
   
   #add-point:Function前置處理  name="cs.pre_function"
   CALL g_sten11_d.clear()  
   CALL g_sten12_d.clear()
   CALL g_sten13_d.clear()  
   CALL g_sten14_d.clear()    
   #end add-point
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_stem_m.* TO NULL
   CALL g_sten_d.clear()        
   CALL g_sten15_d.clear() 
   CALL g_sten16_d.clear() 
   CALL g_sten2_d.clear() 
   CALL g_sten3_d.clear() 
   CALL g_sten4_d.clear() 
   CALL g_sten5_d.clear() 
   CALL g_sten6_d.clear() 
   CALL g_sten7_d.clear() 
   CALL g_sten8_d.clear() 
   CALL g_sten9_d.clear() 
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
   INITIALIZE g_wc2_table2 TO NULL
 
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前 name="cs.before_construct"
   
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON stemsite,stemdocdt,stemdocno,stem035,stem036,stem000,stem012,stem013, 
          stem034,stemstus,stemownid,stemowndp,stemcrtid,stemcrtdp,stemcrtdt,stemmodid,stemmoddt,stemcnfid, 
          stemcnfdt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.head.before_construct"
            
            #end add-point 
            
         #公用欄位開窗相關處理
         #應用 a11 樣板自動產生(Version:3)
         #共用欄位查詢處理  
         ##----<<stemcrtdt>>----
         AFTER FIELD stemcrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
 
         #----<<stemmoddt>>----
         AFTER FIELD stemmoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stemcnfdt>>----
         AFTER FIELD stemcnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<stempstdt>>----
 
 
 
            
         #一般欄位開窗相關處理    
                  #Ctrlp:construct.c.stemsite
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemsite
            #add-point:ON ACTION controlp INFIELD stemsite name="construct.c.stemsite"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = s_aooi500_q_where(g_prog,'stemsite',g_site,'c')
            CALL q_ooef001_24()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemsite  #顯示到畫面上
            NEXT FIELD stemsite                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemsite
            #add-point:BEFORE FIELD stemsite name="construct.b.stemsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemsite
            
            #add-point:AFTER FIELD stemsite name="construct.a.stemsite"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemdocdt
            #add-point:BEFORE FIELD stemdocdt name="construct.b.stemdocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemdocdt
            
            #add-point:AFTER FIELD stemdocdt name="construct.a.stemdocdt"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stemdocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemdocdt
            #add-point:ON ACTION controlp INFIELD stemdocdt name="construct.c.stemdocdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.stemdocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemdocno
            #add-point:ON ACTION controlp INFIELD stemdocno name="construct.c.stemdocno"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = " stem000 = 'astt806' "
            CALL q_stemdocno()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemdocno  #顯示到畫面上
            NEXT FIELD stemdocno                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemdocno
            #add-point:BEFORE FIELD stemdocno name="construct.b.stemdocno"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemdocno
            
            #add-point:AFTER FIELD stemdocno name="construct.a.stemdocno"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem035
            #add-point:BEFORE FIELD stem035 name="construct.b.stem035"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem035
            
            #add-point:AFTER FIELD stem035 name="construct.a.stem035"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stem035
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem035
            #add-point:ON ACTION controlp INFIELD stem035 name="construct.c.stem035"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem036
            #add-point:BEFORE FIELD stem036 name="construct.b.stem036"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem036
            
            #add-point:AFTER FIELD stem036 name="construct.a.stem036"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stem036
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem036
            #add-point:ON ACTION controlp INFIELD stem036 name="construct.c.stem036"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem000
            #add-point:BEFORE FIELD stem000 name="construct.b.stem000"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem000
            
            #add-point:AFTER FIELD stem000 name="construct.a.stem000"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stem000
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem000
            #add-point:ON ACTION controlp INFIELD stem000 name="construct.c.stem000"
            
            #END add-point
 
 
         #Ctrlp:construct.c.stem012
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem012
            #add-point:ON ACTION controlp INFIELD stem012 name="construct.c.stem012"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001_6()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stem012  #顯示到畫面上
            NEXT FIELD stem012                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem012
            #add-point:BEFORE FIELD stem012 name="construct.b.stem012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem012
            
            #add-point:AFTER FIELD stem012 name="construct.a.stem012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stem013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem013
            #add-point:ON ACTION controlp INFIELD stem013 name="construct.c.stem013"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stem013  #顯示到畫面上
            NEXT FIELD stem013                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem013
            #add-point:BEFORE FIELD stem013 name="construct.b.stem013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem013
            
            #add-point:AFTER FIELD stem013 name="construct.a.stem013"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem034
            #add-point:BEFORE FIELD stem034 name="construct.b.stem034"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem034
            
            #add-point:AFTER FIELD stem034 name="construct.a.stem034"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stem034
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem034
            #add-point:ON ACTION controlp INFIELD stem034 name="construct.c.stem034"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemstus
            #add-point:BEFORE FIELD stemstus name="construct.b.stemstus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemstus
            
            #add-point:AFTER FIELD stemstus name="construct.a.stemstus"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stemstus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemstus
            #add-point:ON ACTION controlp INFIELD stemstus name="construct.c.stemstus"
            
            #END add-point
 
 
         #Ctrlp:construct.c.stemownid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemownid
            #add-point:ON ACTION controlp INFIELD stemownid name="construct.c.stemownid"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemownid  #顯示到畫面上
            NEXT FIELD stemownid                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemownid
            #add-point:BEFORE FIELD stemownid name="construct.b.stemownid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemownid
            
            #add-point:AFTER FIELD stemownid name="construct.a.stemownid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stemowndp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemowndp
            #add-point:ON ACTION controlp INFIELD stemowndp name="construct.c.stemowndp"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemowndp  #顯示到畫面上
            NEXT FIELD stemowndp                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemowndp
            #add-point:BEFORE FIELD stemowndp name="construct.b.stemowndp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemowndp
            
            #add-point:AFTER FIELD stemowndp name="construct.a.stemowndp"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stemcrtid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemcrtid
            #add-point:ON ACTION controlp INFIELD stemcrtid name="construct.c.stemcrtid"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemcrtid  #顯示到畫面上
            NEXT FIELD stemcrtid                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemcrtid
            #add-point:BEFORE FIELD stemcrtid name="construct.b.stemcrtid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemcrtid
            
            #add-point:AFTER FIELD stemcrtid name="construct.a.stemcrtid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.stemcrtdp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemcrtdp
            #add-point:ON ACTION controlp INFIELD stemcrtdp name="construct.c.stemcrtdp"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemcrtdp  #顯示到畫面上
            NEXT FIELD stemcrtdp                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemcrtdp
            #add-point:BEFORE FIELD stemcrtdp name="construct.b.stemcrtdp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemcrtdp
            
            #add-point:AFTER FIELD stemcrtdp name="construct.a.stemcrtdp"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemcrtdt
            #add-point:BEFORE FIELD stemcrtdt name="construct.b.stemcrtdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.stemmodid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemmodid
            #add-point:ON ACTION controlp INFIELD stemmodid name="construct.c.stemmodid"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemmodid  #顯示到畫面上
            NEXT FIELD stemmodid                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemmodid
            #add-point:BEFORE FIELD stemmodid name="construct.b.stemmodid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemmodid
            
            #add-point:AFTER FIELD stemmodid name="construct.a.stemmodid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemmoddt
            #add-point:BEFORE FIELD stemmoddt name="construct.b.stemmoddt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.stemcnfid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemcnfid
            #add-point:ON ACTION controlp INFIELD stemcnfid name="construct.c.stemcnfid"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stemcnfid  #顯示到畫面上
            NEXT FIELD stemcnfid                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemcnfid
            #add-point:BEFORE FIELD stemcnfid name="construct.b.stemcnfid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemcnfid
            
            #add-point:AFTER FIELD stemcnfid name="construct.a.stemcnfid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemcnfdt
            #add-point:BEFORE FIELD stemcnfdt name="construct.b.stemcnfdt"
            
            #END add-point
 
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON stenseq,sten002,sten001,sten003,sten004,sten006,sten007,sten012,sten005, 
          sten008,sten009,sten010,sten011,stenacti,stensite,stenunit
           FROM s_detail1[1].stenseq,s_detail1[1].sten002,s_detail1[1].sten001,s_detail1[1].sten003, 
               s_detail1[1].sten004,s_detail1[1].sten006,s_detail1[1].sten007,s_detail1[1].sten012,s_detail1[1].sten005, 
               s_detail1[1].sten008,s_detail1[1].sten009,s_detail1[1].sten010,s_detail1[1].sten011,s_detail1[1].stenacti, 
               s_detail1[1].stensite,s_detail1[1].stenunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenseq
            #add-point:BEFORE FIELD stenseq name="construct.b.page1.stenseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenseq
            
            #add-point:AFTER FIELD stenseq name="construct.a.page1.stenseq"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.stenseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenseq
            #add-point:ON ACTION controlp INFIELD stenseq name="construct.c.page1.stenseq"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.sten002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten002
            #add-point:ON ACTION controlp INFIELD sten002 name="construct.c.page1.sten002"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_stae001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO sten002  #顯示到畫面上
            NEXT FIELD sten002                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten002
            #add-point:BEFORE FIELD sten002 name="construct.b.page1.sten002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten002
            
            #add-point:AFTER FIELD sten002 name="construct.a.page1.sten002"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten001
            #add-point:BEFORE FIELD sten001 name="construct.b.page1.sten001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten001
            
            #add-point:AFTER FIELD sten001 name="construct.a.page1.sten001"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten001
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten001
            #add-point:ON ACTION controlp INFIELD sten001 name="construct.c.page1.sten001"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten003
            #add-point:BEFORE FIELD sten003 name="construct.b.page1.sten003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten003
            
            #add-point:AFTER FIELD sten003 name="construct.a.page1.sten003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten003
            #add-point:ON ACTION controlp INFIELD sten003 name="construct.c.page1.sten003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten004
            #add-point:BEFORE FIELD sten004 name="construct.b.page1.sten004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten004
            
            #add-point:AFTER FIELD sten004 name="construct.a.page1.sten004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten004
            #add-point:ON ACTION controlp INFIELD sten004 name="construct.c.page1.sten004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten006
            #add-point:BEFORE FIELD sten006 name="construct.b.page1.sten006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten006
            
            #add-point:AFTER FIELD sten006 name="construct.a.page1.sten006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten006
            #add-point:ON ACTION controlp INFIELD sten006 name="construct.c.page1.sten006"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten007
            #add-point:BEFORE FIELD sten007 name="construct.b.page1.sten007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten007
            
            #add-point:AFTER FIELD sten007 name="construct.a.page1.sten007"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten007
            #add-point:ON ACTION controlp INFIELD sten007 name="construct.c.page1.sten007"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten012
            #add-point:BEFORE FIELD sten012 name="construct.b.page1.sten012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten012
            
            #add-point:AFTER FIELD sten012 name="construct.a.page1.sten012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten012
            #add-point:ON ACTION controlp INFIELD sten012 name="construct.c.page1.sten012"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten005
            #add-point:BEFORE FIELD sten005 name="construct.b.page1.sten005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten005
            
            #add-point:AFTER FIELD sten005 name="construct.a.page1.sten005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten005
            #add-point:ON ACTION controlp INFIELD sten005 name="construct.c.page1.sten005"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten008
            #add-point:BEFORE FIELD sten008 name="construct.b.page1.sten008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten008
            
            #add-point:AFTER FIELD sten008 name="construct.a.page1.sten008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten008
            #add-point:ON ACTION controlp INFIELD sten008 name="construct.c.page1.sten008"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.sten009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten009
            #add-point:ON ACTION controlp INFIELD sten009 name="construct.c.page1.sten009"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '2132'
            CALL q_oocq002_4()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO sten009  #顯示到畫面上
            NEXT FIELD sten009                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten009
            #add-point:BEFORE FIELD sten009 name="construct.b.page1.sten009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten009
            
            #add-point:AFTER FIELD sten009 name="construct.a.page1.sten009"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten010
            #add-point:BEFORE FIELD sten010 name="construct.b.page1.sten010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten010
            
            #add-point:AFTER FIELD sten010 name="construct.a.page1.sten010"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten010
            #add-point:ON ACTION controlp INFIELD sten010 name="construct.c.page1.sten010"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten011
            #add-point:BEFORE FIELD sten011 name="construct.b.page1.sten011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten011
            
            #add-point:AFTER FIELD sten011 name="construct.a.page1.sten011"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.sten011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten011
            #add-point:ON ACTION controlp INFIELD sten011 name="construct.c.page1.sten011"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenacti
            #add-point:BEFORE FIELD stenacti name="construct.b.page1.stenacti"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenacti
            
            #add-point:AFTER FIELD stenacti name="construct.a.page1.stenacti"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.stenacti
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenacti
            #add-point:ON ACTION controlp INFIELD stenacti name="construct.c.page1.stenacti"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stensite
            #add-point:BEFORE FIELD stensite name="construct.b.page1.stensite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stensite
            
            #add-point:AFTER FIELD stensite name="construct.a.page1.stensite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.stensite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stensite
            #add-point:ON ACTION controlp INFIELD stensite name="construct.c.page1.stensite"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenunit
            #add-point:BEFORE FIELD stenunit name="construct.b.page1.stenunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenunit
            
            #add-point:AFTER FIELD stenunit name="construct.a.page1.stenunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.stenunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenunit
            #add-point:ON ACTION controlp INFIELD stenunit name="construct.c.page1.stenunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
      
      CONSTRUCT g_wc2_table2 ON stkeunit,stkesite,stkedocdt,stke001,stke000,stke002,stke003,stke004, 
          stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015,stke016, 
          stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029, 
          stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040,stke041, 
          stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050,stke051,stke052,stke053, 
          stke200,stke223,stke224,stke225,stkestus
           FROM s_detail2[1].stkeunit,s_detail2[1].stkesite,s_detail2[1].stkedocdt,s_detail2[1].stke001, 
               s_detail2[1].stke000,s_detail2[1].stke002,s_detail2[1].stke003,s_detail2[1].stke004,s_detail2[1].stke005, 
               s_detail2[1].stke006,s_detail2[1].stke007,s_detail2[1].stke008,s_detail2[1].stke009,s_detail2[1].stke010, 
               s_detail2[1].stke011,s_detail2[1].stke012,s_detail2[1].stke013,s_detail2[1].stke014,s_detail2[1].stke015, 
               s_detail2[1].stke016,s_detail2[1].stke017,s_detail2[1].stke018,s_detail2[1].stke019,s_detail2[1].stke020, 
               s_detail2[1].stke021,s_detail2[1].stke022,s_detail2[1].stke023,s_detail2[1].stke024,s_detail2[1].stke025, 
               s_detail2[1].stke026,s_detail2[1].stke028,s_detail2[1].stke029,s_detail2[1].stke030,s_detail2[1].stke031, 
               s_detail2[1].stke032,s_detail2[1].stke033,s_detail2[1].stke034,s_detail2[1].stke035,s_detail2[1].stke036, 
               s_detail2[1].stke037,s_detail2[1].stke038,s_detail2[1].stke039,s_detail2[1].stke040,s_detail2[1].stke041, 
               s_detail2[1].stke042,s_detail2[1].stke043,s_detail2[1].stke044,s_detail2[1].stke045,s_detail2[1].stke046, 
               s_detail2[1].stke047,s_detail2[1].stke048,s_detail2[1].stke049,s_detail2[1].stke050,s_detail2[1].stke051, 
               s_detail2[1].stke052,s_detail2[1].stke053,s_detail2[1].stke200,s_detail2[1].stke223,s_detail2[1].stke224, 
               s_detail2[1].stke225,s_detail2[1].stkestus
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body2.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       #應用 a11 樣板自動產生(Version:3)
         #共用欄位查詢處理  
         ##----<<stkecrtdt>>----
 
         #----<<stkemoddt>>----
         
         #----<<stkecnfdt>>----
         
         #----<<stkepstdt>>----
 
 
 
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkeunit
            #add-point:BEFORE FIELD stkeunit name="construct.b.page2.stkeunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkeunit
            
            #add-point:AFTER FIELD stkeunit name="construct.a.page2.stkeunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stkeunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkeunit
            #add-point:ON ACTION controlp INFIELD stkeunit name="construct.c.page2.stkeunit"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkesite
            #add-point:BEFORE FIELD stkesite name="construct.b.page2.stkesite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkesite
            
            #add-point:AFTER FIELD stkesite name="construct.a.page2.stkesite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stkesite
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkesite
            #add-point:ON ACTION controlp INFIELD stkesite name="construct.c.page2.stkesite"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = s_aooi500_q_where(g_prog,'stkesite',g_site,'c')
            CALL q_ooef001_24()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stkesite  #顯示到畫面上
            NEXT FIELD stkesite  
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkedocdt
            #add-point:BEFORE FIELD stkedocdt name="construct.b.page2.stkedocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkedocdt
            
            #add-point:AFTER FIELD stkedocdt name="construct.a.page2.stkedocdt"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stkedocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkedocdt
            #add-point:ON ACTION controlp INFIELD stkedocdt name="construct.c.page2.stkedocdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke001
            #add-point:ON ACTION controlp INFIELD stke001 name="construct.c.page2.stke001"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_stje001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke001  #顯示到畫面上
            NEXT FIELD stke001                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke001
            #add-point:BEFORE FIELD stke001 name="construct.b.page2.stke001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke001
            
            #add-point:AFTER FIELD stke001 name="construct.a.page2.stke001"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke000
            #add-point:BEFORE FIELD stke000 name="construct.b.page2.stke000"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke000
            
            #add-point:AFTER FIELD stke000 name="construct.a.page2.stke000"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke000
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke000
            #add-point:ON ACTION controlp INFIELD stke000 name="construct.c.page2.stke000"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke002
            #add-point:BEFORE FIELD stke002 name="construct.b.page2.stke002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke002
            
            #add-point:AFTER FIELD stke002 name="construct.a.page2.stke002"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke002
            #add-point:ON ACTION controlp INFIELD stke002 name="construct.c.page2.stke002"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke003
            #add-point:ON ACTION controlp INFIELD stke003 name="construct.c.page2.stke003"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_stha001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke003  #顯示到畫面上
            NEXT FIELD stke003                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke003
            #add-point:BEFORE FIELD stke003 name="construct.b.page2.stke003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke003
            
            #add-point:AFTER FIELD stke003 name="construct.a.page2.stke003"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke004
            #add-point:BEFORE FIELD stke004 name="construct.b.page2.stke004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke004
            
            #add-point:AFTER FIELD stke004 name="construct.a.page2.stke004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke004
            #add-point:ON ACTION controlp INFIELD stke004 name="construct.c.page2.stke004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke005
            #add-point:BEFORE FIELD stke005 name="construct.b.page2.stke005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke005
            
            #add-point:AFTER FIELD stke005 name="construct.a.page2.stke005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke005
            #add-point:ON ACTION controlp INFIELD stke005 name="construct.c.page2.stke005"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke006
            #add-point:BEFORE FIELD stke006 name="construct.b.page2.stke006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke006
            
            #add-point:AFTER FIELD stke006 name="construct.a.page2.stke006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke006
            #add-point:ON ACTION controlp INFIELD stke006 name="construct.c.page2.stke006"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke007
            #add-point:ON ACTION controlp INFIELD stke007 name="construct.c.page2.stke007"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "('1','3')" 
            CALL q_pmaa001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke007  #顯示到畫面上
            NEXT FIELD stke007                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke007
            #add-point:BEFORE FIELD stke007 name="construct.b.page2.stke007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke007
            
            #add-point:AFTER FIELD stke007 name="construct.a.page2.stke007"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke008
            #add-point:ON ACTION controlp INFIELD stke008 name="construct.c.page2.stke008"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_mhbe001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke008  #顯示到畫面上
            NEXT FIELD stke008                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke008
            #add-point:BEFORE FIELD stke008 name="construct.b.page2.stke008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke008
            
            #add-point:AFTER FIELD stke008 name="construct.a.page2.stke008"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke009
            #add-point:BEFORE FIELD stke009 name="construct.b.page2.stke009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke009
            
            #add-point:AFTER FIELD stke009 name="construct.a.page2.stke009"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke009
            #add-point:ON ACTION controlp INFIELD stke009 name="construct.c.page2.stke009"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke010
            #add-point:BEFORE FIELD stke010 name="construct.b.page2.stke010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke010
            
            #add-point:AFTER FIELD stke010 name="construct.a.page2.stke010"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke010
            #add-point:ON ACTION controlp INFIELD stke010 name="construct.c.page2.stke010"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke011
            #add-point:BEFORE FIELD stke011 name="construct.b.page2.stke011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke011
            
            #add-point:AFTER FIELD stke011 name="construct.a.page2.stke011"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke011
            #add-point:ON ACTION controlp INFIELD stke011 name="construct.c.page2.stke011"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke012
            #add-point:BEFORE FIELD stke012 name="construct.b.page2.stke012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke012
            
            #add-point:AFTER FIELD stke012 name="construct.a.page2.stke012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke012
            #add-point:ON ACTION controlp INFIELD stke012 name="construct.c.page2.stke012"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke013
            #add-point:BEFORE FIELD stke013 name="construct.b.page2.stke013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke013
            
            #add-point:AFTER FIELD stke013 name="construct.a.page2.stke013"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke013
            #add-point:ON ACTION controlp INFIELD stke013 name="construct.c.page2.stke013"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke014
            #add-point:BEFORE FIELD stke014 name="construct.b.page2.stke014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke014
            
            #add-point:AFTER FIELD stke014 name="construct.a.page2.stke014"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke014
            #add-point:ON ACTION controlp INFIELD stke014 name="construct.c.page2.stke014"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke015
            #add-point:BEFORE FIELD stke015 name="construct.b.page2.stke015"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke015
            
            #add-point:AFTER FIELD stke015 name="construct.a.page2.stke015"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke015
            #add-point:ON ACTION controlp INFIELD stke015 name="construct.c.page2.stke015"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke016
            #add-point:BEFORE FIELD stke016 name="construct.b.page2.stke016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke016
            
            #add-point:AFTER FIELD stke016 name="construct.a.page2.stke016"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke016
            #add-point:ON ACTION controlp INFIELD stke016 name="construct.c.page2.stke016"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke017
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke017
            #add-point:ON ACTION controlp INFIELD stke017 name="construct.c.page2.stke017"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke017  #顯示到畫面上
            NEXT FIELD stke017                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke017
            #add-point:BEFORE FIELD stke017 name="construct.b.page2.stke017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke017
            
            #add-point:AFTER FIELD stke017 name="construct.a.page2.stke017"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke018
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke018
            #add-point:ON ACTION controlp INFIELD stke018 name="construct.c.page2.stke018"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke018  #顯示到畫面上
            NEXT FIELD stke018                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke018
            #add-point:BEFORE FIELD stke018 name="construct.b.page2.stke018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke018
            
            #add-point:AFTER FIELD stke018 name="construct.a.page2.stke018"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke019
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke019
            #add-point:ON ACTION controlp INFIELD stke019 name="construct.c.page2.stke019"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_mhaa001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke019  #顯示到畫面上
            NEXT FIELD stke019                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke019
            #add-point:BEFORE FIELD stke019 name="construct.b.page2.stke019"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke019
            
            #add-point:AFTER FIELD stke019 name="construct.a.page2.stke019"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke020
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke020
            #add-point:ON ACTION controlp INFIELD stke020 name="construct.c.page2.stke020"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_mhab002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke020  #顯示到畫面上
            NEXT FIELD stke020                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke020
            #add-point:BEFORE FIELD stke020 name="construct.b.page2.stke020"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke020
            
            #add-point:AFTER FIELD stke020 name="construct.a.page2.stke020"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke021
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke021
            #add-point:ON ACTION controlp INFIELD stke021 name="construct.c.page2.stke021"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_mhac003()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke021  #顯示到畫面上
            NEXT FIELD stke021                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke021
            #add-point:BEFORE FIELD stke021 name="construct.b.page2.stke021"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke021
            
            #add-point:AFTER FIELD stke021 name="construct.a.page2.stke021"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke022
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke022
            #add-point:ON ACTION controlp INFIELD stke022 name="construct.c.page2.stke022"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '2144'
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke022  #顯示到畫面上
            NEXT FIELD stke022                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke022
            #add-point:BEFORE FIELD stke022 name="construct.b.page2.stke022"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke022
            
            #add-point:AFTER FIELD stke022 name="construct.a.page2.stke022"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke023
            #add-point:BEFORE FIELD stke023 name="construct.b.page2.stke023"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke023
            
            #add-point:AFTER FIELD stke023 name="construct.a.page2.stke023"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke023
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke023
            #add-point:ON ACTION controlp INFIELD stke023 name="construct.c.page2.stke023"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke024
            #add-point:BEFORE FIELD stke024 name="construct.b.page2.stke024"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke024
            
            #add-point:AFTER FIELD stke024 name="construct.a.page2.stke024"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke024
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke024
            #add-point:ON ACTION controlp INFIELD stke024 name="construct.c.page2.stke024"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke025
            #add-point:BEFORE FIELD stke025 name="construct.b.page2.stke025"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke025
            
            #add-point:AFTER FIELD stke025 name="construct.a.page2.stke025"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke025
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke025
            #add-point:ON ACTION controlp INFIELD stke025 name="construct.c.page2.stke025"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke026
            #add-point:BEFORE FIELD stke026 name="construct.b.page2.stke026"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke026
            
            #add-point:AFTER FIELD stke026 name="construct.a.page2.stke026"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke026
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke026
            #add-point:ON ACTION controlp INFIELD stke026 name="construct.c.page2.stke026"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke028
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke028
            #add-point:ON ACTION controlp INFIELD stke028 name="construct.c.page2.stke028"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = cl_get_para(g_enterprise,g_site,'E-CIR-0001')  
            CALL q_rtax001_3()     
            DISPLAY g_qryparam.return1 TO stke028  #顯示到畫面上
            NEXT FIELD stke028                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke028
            #add-point:BEFORE FIELD stke028 name="construct.b.page2.stke028"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke028
            
            #add-point:AFTER FIELD stke028 name="construct.a.page2.stke028"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke029
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke029
            #add-point:ON ACTION controlp INFIELD stke029 name="construct.c.page2.stke029"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_oocq002_2002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke029  #顯示到畫面上
            NEXT FIELD stke029                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke029
            #add-point:BEFORE FIELD stke029 name="construct.b.page2.stke029"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke029
            
            #add-point:AFTER FIELD stke029 name="construct.a.page2.stke029"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke030
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke030
            #add-point:ON ACTION controlp INFIELD stke030 name="construct.c.page2.stke030"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooef001_23()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke030  #顯示到畫面上
            NEXT FIELD stke030                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke030
            #add-point:BEFORE FIELD stke030 name="construct.b.page2.stke030"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke030
            
            #add-point:AFTER FIELD stke030 name="construct.a.page2.stke030"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke031
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke031
            #add-point:ON ACTION controlp INFIELD stke031 name="construct.c.page2.stke031"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_staa001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke031  #顯示到畫面上
            NEXT FIELD stke031                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke031
            #add-point:BEFORE FIELD stke031 name="construct.b.page2.stke031"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke031
            
            #add-point:AFTER FIELD stke031 name="construct.a.page2.stke031"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke032
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke032
            #add-point:ON ACTION controlp INFIELD stke032 name="construct.c.page2.stke032"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '2060'
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke032  #顯示到畫面上
            NEXT FIELD stke032                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke032
            #add-point:BEFORE FIELD stke032 name="construct.b.page2.stke032"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke032
            
            #add-point:AFTER FIELD stke032 name="construct.a.page2.stke032"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke033
            #add-point:BEFORE FIELD stke033 name="construct.b.page2.stke033"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke033
            
            #add-point:AFTER FIELD stke033 name="construct.a.page2.stke033"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke033
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke033
            #add-point:ON ACTION controlp INFIELD stke033 name="construct.c.page2.stke033"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke034
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke034
            #add-point:ON ACTION controlp INFIELD stke034 name="construct.c.page2.stke034"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooib002_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke034  #顯示到畫面上
            NEXT FIELD stke034                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke034
            #add-point:BEFORE FIELD stke034 name="construct.b.page2.stke034"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke034
            
            #add-point:AFTER FIELD stke034 name="construct.a.page2.stke034"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke035
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke035
            #add-point:ON ACTION controlp INFIELD stke035 name="construct.c.page2.stke035"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '238'
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke035  #顯示到畫面上
            NEXT FIELD stke035                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke035
            #add-point:BEFORE FIELD stke035 name="construct.b.page2.stke035"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke035
            
            #add-point:AFTER FIELD stke035 name="construct.a.page2.stke035"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke036
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke036
            #add-point:ON ACTION controlp INFIELD stke036 name="construct.c.page2.stke036"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_aooi001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke036  #顯示到畫面上
            NEXT FIELD stke036                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke036
            #add-point:BEFORE FIELD stke036 name="construct.b.page2.stke036"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke036
            
            #add-point:AFTER FIELD stke036 name="construct.a.page2.stke036"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke037
            #add-point:BEFORE FIELD stke037 name="construct.b.page2.stke037"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke037
            
            #add-point:AFTER FIELD stke037 name="construct.a.page2.stke037"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke037
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke037
            #add-point:ON ACTION controlp INFIELD stke037 name="construct.c.page2.stke037"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke038
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke038
            #add-point:ON ACTION controlp INFIELD stke038 name="construct.c.page2.stke038"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = g_site
            CALL q_oodb002_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke038  #顯示到畫面上
            NEXT FIELD stke038                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke038
            #add-point:BEFORE FIELD stke038 name="construct.b.page2.stke038"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke038
            
            #add-point:AFTER FIELD stke038 name="construct.a.page2.stke038"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke039
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke039
            #add-point:ON ACTION controlp INFIELD stke039 name="construct.c.page2.stke039"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET l_ooef019 = ''
            CALL s_tax_get_ooef019(g_site) RETURNING l_success,l_ooef019
            LET g_qryparam.arg1 = l_ooef019
            LET g_qryparam.arg2 = '1'
            CALL q_isac002_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke039  #顯示到畫面上
            NEXT FIELD stke039                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke039
            #add-point:BEFORE FIELD stke039 name="construct.b.page2.stke039"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke039
            
            #add-point:AFTER FIELD stke039 name="construct.a.page2.stke039"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke040
            #add-point:BEFORE FIELD stke040 name="construct.b.page2.stke040"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke040
            
            #add-point:AFTER FIELD stke040 name="construct.a.page2.stke040"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke040
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke040
            #add-point:ON ACTION controlp INFIELD stke040 name="construct.c.page2.stke040"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke041
            #add-point:BEFORE FIELD stke041 name="construct.b.page2.stke041"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke041
            
            #add-point:AFTER FIELD stke041 name="construct.a.page2.stke041"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke041
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke041
            #add-point:ON ACTION controlp INFIELD stke041 name="construct.c.page2.stke041"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke042
            #add-point:BEFORE FIELD stke042 name="construct.b.page2.stke042"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke042
            
            #add-point:AFTER FIELD stke042 name="construct.a.page2.stke042"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke042
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke042
            #add-point:ON ACTION controlp INFIELD stke042 name="construct.c.page2.stke042"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke043
            #add-point:BEFORE FIELD stke043 name="construct.b.page2.stke043"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke043
            
            #add-point:AFTER FIELD stke043 name="construct.a.page2.stke043"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke043
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke043
            #add-point:ON ACTION controlp INFIELD stke043 name="construct.c.page2.stke043"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke044
            #add-point:BEFORE FIELD stke044 name="construct.b.page2.stke044"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke044
            
            #add-point:AFTER FIELD stke044 name="construct.a.page2.stke044"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke044
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke044
            #add-point:ON ACTION controlp INFIELD stke044 name="construct.c.page2.stke044"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke045
            #add-point:BEFORE FIELD stke045 name="construct.b.page2.stke045"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke045
            
            #add-point:AFTER FIELD stke045 name="construct.a.page2.stke045"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke045
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke045
            #add-point:ON ACTION controlp INFIELD stke045 name="construct.c.page2.stke045"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke046
            #add-point:BEFORE FIELD stke046 name="construct.b.page2.stke046"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke046
            
            #add-point:AFTER FIELD stke046 name="construct.a.page2.stke046"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke046
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke046
            #add-point:ON ACTION controlp INFIELD stke046 name="construct.c.page2.stke046"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke047
            #add-point:BEFORE FIELD stke047 name="construct.b.page2.stke047"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke047
            
            #add-point:AFTER FIELD stke047 name="construct.a.page2.stke047"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke047
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke047
            #add-point:ON ACTION controlp INFIELD stke047 name="construct.c.page2.stke047"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke048
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke048
            #add-point:ON ACTION controlp INFIELD stke048 name="construct.c.page2.stke048"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_sticdocno()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke048  #顯示到畫面上
            NEXT FIELD stke048                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke048
            #add-point:BEFORE FIELD stke048 name="construct.b.page2.stke048"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke048
            
            #add-point:AFTER FIELD stke048 name="construct.a.page2.stke048"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke049
            #add-point:BEFORE FIELD stke049 name="construct.b.page2.stke049"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke049
            
            #add-point:AFTER FIELD stke049 name="construct.a.page2.stke049"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke049
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke049
            #add-point:ON ACTION controlp INFIELD stke049 name="construct.c.page2.stke049"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke050
            #add-point:BEFORE FIELD stke050 name="construct.b.page2.stke050"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke050
            
            #add-point:AFTER FIELD stke050 name="construct.a.page2.stke050"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke050
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke050
            #add-point:ON ACTION controlp INFIELD stke050 name="construct.c.page2.stke050"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke051
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke051
            #add-point:ON ACTION controlp INFIELD stke051 name="construct.c.page2.stke051"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke051  #顯示到畫面上
            NEXT FIELD stke051                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke051
            #add-point:BEFORE FIELD stke051 name="construct.b.page2.stke051"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke051
            
            #add-point:AFTER FIELD stke051 name="construct.a.page2.stke051"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke052
            #add-point:BEFORE FIELD stke052 name="construct.b.page2.stke052"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke052
            
            #add-point:AFTER FIELD stke052 name="construct.a.page2.stke052"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke052
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke052
            #add-point:ON ACTION controlp INFIELD stke052 name="construct.c.page2.stke052"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.stke053
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke053
            #add-point:ON ACTION controlp INFIELD stke053 name="construct.c.page2.stke053"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke053  #顯示到畫面上
            NEXT FIELD stke053                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke053
            #add-point:BEFORE FIELD stke053 name="construct.b.page2.stke053"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke053
            
            #add-point:AFTER FIELD stke053 name="construct.a.page2.stke053"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke200
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke200
            #add-point:ON ACTION controlp INFIELD stke200 name="construct.c.page2.stke200"
            #應用 a08 樣板自動產生(Version:3)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = " stem000 <> 'astt806' "
            CALL q_stemdocno()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO stke200  #顯示到畫面上
            NEXT FIELD stke200                     #返回原欄位
    



            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke200
            #add-point:BEFORE FIELD stke200 name="construct.b.page2.stke200"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke200
            
            #add-point:AFTER FIELD stke200 name="construct.a.page2.stke200"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke223
            #add-point:BEFORE FIELD stke223 name="construct.b.page2.stke223"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke223
            
            #add-point:AFTER FIELD stke223 name="construct.a.page2.stke223"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke223
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke223
            #add-point:ON ACTION controlp INFIELD stke223 name="construct.c.page2.stke223"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke224
            #add-point:BEFORE FIELD stke224 name="construct.b.page2.stke224"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke224
            
            #add-point:AFTER FIELD stke224 name="construct.a.page2.stke224"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke224
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke224
            #add-point:ON ACTION controlp INFIELD stke224 name="construct.c.page2.stke224"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke225
            #add-point:BEFORE FIELD stke225 name="construct.b.page2.stke225"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke225
            
            #add-point:AFTER FIELD stke225 name="construct.a.page2.stke225"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stke225
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke225
            #add-point:ON ACTION controlp INFIELD stke225 name="construct.c.page2.stke225"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkestus
            #add-point:BEFORE FIELD stkestus name="construct.b.page2.stkestus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkestus
            
            #add-point:AFTER FIELD stkestus name="construct.a.page2.stkestus"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.stkestus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkestus
            #add-point:ON ACTION controlp INFIELD stkestus name="construct.c.page2.stkestus"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
 
      
      CONSTRUCT g_wc2_table3 ON stknunit
           FROM s_detail15[1].stknunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body3.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 3)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stknunit
            #add-point:BEFORE FIELD stknunit name="construct.b.page15.stknunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stknunit
            
            #add-point:AFTER FIELD stknunit name="construct.a.page15.stknunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page15.stknunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stknunit
            #add-point:ON ACTION controlp INFIELD stknunit name="construct.c.page15.stknunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table4 ON stkounit
           FROM s_detail16[1].stkounit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body4.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 4)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkounit
            #add-point:BEFORE FIELD stkounit name="construct.b.page16.stkounit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkounit
            
            #add-point:AFTER FIELD stkounit name="construct.a.page16.stkounit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page16.stkounit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkounit
            #add-point:ON ACTION controlp INFIELD stkounit name="construct.c.page16.stkounit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table5 ON stkf025,stkfunit
           FROM s_detail3[1].stkf025,s_detail3[1].stkfunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body5.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 5)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf025
            #add-point:BEFORE FIELD stkf025 name="construct.b.page3.stkf025"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf025
            
            #add-point:AFTER FIELD stkf025 name="construct.a.page3.stkf025"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.stkf025
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf025
            #add-point:ON ACTION controlp INFIELD stkf025 name="construct.c.page3.stkf025"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkfunit
            #add-point:BEFORE FIELD stkfunit name="construct.b.page3.stkfunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkfunit
            
            #add-point:AFTER FIELD stkfunit name="construct.a.page3.stkfunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.stkfunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkfunit
            #add-point:ON ACTION controlp INFIELD stkfunit name="construct.c.page3.stkfunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table6 ON stkhunit
           FROM s_detail4[1].stkhunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body6.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 6)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkhunit
            #add-point:BEFORE FIELD stkhunit name="construct.b.page4.stkhunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkhunit
            
            #add-point:AFTER FIELD stkhunit name="construct.a.page4.stkhunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page4.stkhunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkhunit
            #add-point:ON ACTION controlp INFIELD stkhunit name="construct.c.page4.stkhunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table7 ON stkiunit
           FROM s_detail5[1].stkiunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body7.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 7)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkiunit
            #add-point:BEFORE FIELD stkiunit name="construct.b.page5.stkiunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkiunit
            
            #add-point:AFTER FIELD stkiunit name="construct.a.page5.stkiunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page5.stkiunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkiunit
            #add-point:ON ACTION controlp INFIELD stkiunit name="construct.c.page5.stkiunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table8 ON stkjunit
           FROM s_detail6[1].stkjunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body8.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 8)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkjunit
            #add-point:BEFORE FIELD stkjunit name="construct.b.page6.stkjunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkjunit
            
            #add-point:AFTER FIELD stkjunit name="construct.a.page6.stkjunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page6.stkjunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkjunit
            #add-point:ON ACTION controlp INFIELD stkjunit name="construct.c.page6.stkjunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table9 ON stkkunit
           FROM s_detail7[1].stkkunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body9.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 9)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkkunit
            #add-point:BEFORE FIELD stkkunit name="construct.b.page7.stkkunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkkunit
            
            #add-point:AFTER FIELD stkkunit name="construct.a.page7.stkkunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page7.stkkunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkkunit
            #add-point:ON ACTION controlp INFIELD stkkunit name="construct.c.page7.stkkunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table10 ON stklunit
           FROM s_detail8[1].stklunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body10.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 10)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stklunit
            #add-point:BEFORE FIELD stklunit name="construct.b.page8.stklunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stklunit
            
            #add-point:AFTER FIELD stklunit name="construct.a.page8.stklunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page8.stklunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stklunit
            #add-point:ON ACTION controlp INFIELD stklunit name="construct.c.page8.stklunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table11 ON stkmunit
           FROM s_detail9[1].stkmunit
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body11.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 11)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkmunit
            #add-point:BEFORE FIELD stkmunit name="construct.b.page9.stkmunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkmunit
            
            #add-point:AFTER FIELD stkmunit name="construct.a.page9.stkmunit"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page9.stkmunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkmunit
            #add-point:ON ACTION controlp INFIELD stkmunit name="construct.c.page9.stkmunit"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令) name="cs.add_cs"
#      CONSTRUCT g_wc2_table12 ON stkfseq,stkf002,stkf003,stkf004,stkf005,stkf006,stkf007,stkf008, 
#          stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf021,stkf023,stkf024
#           FROM s_detail12[1].stkfseq_2,s_detail12[1].stkf002_2,s_detail12[1].stkf003_2,s_detail12[1].stkf004_2,
#                s_detail12[1].stkf005_2,s_detail12[1].stkf006_2,s_detail12[1].stkf007_2,s_detail12[1].stkf008_2,
#                s_detail12[1].stkf009_2,s_detail12[1].stkf010_2,s_detail12[1].stkf012_2,s_detail12[1].stkf019_2,
#                s_detail12[1].stkf013_2,s_detail12[1].stkf014_2,s_detail12[1].stkf015_2,s_detail12[1].stkf016_2,
#                s_detail12[1].stkf020_2,s_detail12[1].stkf021_2,s_detail12[1].stkf023_2,s_detail12[1].stkf024_2      
#         BEFORE CONSTRUCT
#            #add-point:cs段before_construct name="cs.body.before_construct"
#
#            #end add-point 
#            
#         #單身公用欄位開窗相關處理
#                   
#         ON ACTION controlp INFIELD stkf003_2
#            #add-point:ON ACTION controlp INFIELD stkf003 name="construct.c.page1.stkf003"
#            #應用 a08 樣板自動產生(Version:3)
#            #開窗c段
#            INITIALIZE g_qryparam.* TO NULL
#            LET g_qryparam.state = 'c' 
#            LET g_qryparam.reqry = FALSE
#            LET g_qryparam.where = " sthisite = '",g_site,"' AND EXISTS (SELECT 1 FROM sthj_t WHERE sthjent = sthient AND sthj001 =sthi002 AND sthj010 = '2' )"
#            CALL q_sthi002()                           #呼叫開窗
#            DISPLAY g_qryparam.return1 TO stkf003_2  #顯示到畫面上
#            NEXT FIELD stkf003_2  
#            
#         #Ctrlp:construct.c.page1.stkf004
#         #應用 a03 樣板自動產生(Version:3)
#         ON ACTION controlp INFIELD stkf004_2
#            #add-point:ON ACTION controlp INFIELD stkf004 name="construct.c.page1.stkf004"
#            #應用 a08 樣板自動產生(Version:3)
#            #開窗c段
#            INITIALIZE g_qryparam.* TO NULL
#            LET g_qryparam.state = 'c' 
#            LET g_qryparam.reqry = FALSE
#            CALL q_stae001()                           #呼叫開窗
#            DISPLAY g_qryparam.return1 TO stkf004_2  #顯示到畫面上
#            NEXT FIELD stkf004_2                     #返回原欄位
#    
#         ON ACTION controlp INFIELD stkf024_2
#            #add-point:ON ACTION controlp INFIELD stkf024 name="construct.c.page1.stkf024"
#            #應用 a08 樣板自動產生(Version:3)
#            #開窗c段
#            INITIALIZE g_qryparam.* TO NULL
#            LET g_qryparam.state = 'c' 
#            LET g_qryparam.reqry = FALSE
#            CALL q_stkf024()
#            DISPLAY g_qryparam.return1 TO stkf024_2  #顯示到畫面上
#            NEXT FIELD stkf024_2    
#
#
#            #END add-point
#
#      END CONSTRUCT
#      CONSTRUCT g_wc2_table13 ON stkgseq1,stkg002,stkg003,stkg004,stkg006
#           FROM s_detail11[1].stkgseq1, 
#                s_detail11[1].stkg002,s_detail11[1].stkg003,s_detail11[1].stkg004,s_detail11[1].stkg006
#                      
#         BEFORE CONSTRUCT
#            #add-point:cs段before_construct name="cs.body9.before_construct"
#
#            #end add-point 
#            
#      END CONSTRUCT
#      CONSTRUCT g_wc2_table14 ON stkgseq1,stkg002,stkg003,stkg005,stkg007
#           FROM s_detail13[1].stkgseq1_2, 
#                s_detail13[1].stkg002_2,s_detail13[1].stkg003_2,s_detail13[1].stkg005_2,s_detail13[1].stkg007_2
#                      
#         BEFORE CONSTRUCT
#            #add-point:cs段before_construct name="cs.body9.before_construct"
#
#            #end add-point 
#            
#      END CONSTRUCT
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="cs.b_dialog"
         
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
         IF NOT cl_null(ls_wc) THEN
            CALL util.JSON.parse(ls_wc, la_wc)
            INITIALIZE g_wc, g_wc2, g_wc2_table1, g_wc2_extend TO NULL
            INITIALIZE g_wc2_table2 TO NULL
 
 
            FOR li_idx = 1 TO la_wc.getLength()
               CASE
                  WHEN la_wc[li_idx].tableid = "stem_t" 
                     LET g_wc = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "sten_t" 
                     LET g_wc2_table1 = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "stke_t" 
                     LET g_wc2_table2 = la_wc[li_idx].wc
 
 
               END CASE
            END FOR
         END IF
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
   END IF
 
 
 
   IF g_wc2_table3 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
   END IF
 
   IF g_wc2_table4 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table4
   END IF
 
   IF g_wc2_table5 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table5
   END IF
 
   IF g_wc2_table6 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table6
   END IF
 
   IF g_wc2_table7 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table7
   END IF
 
   IF g_wc2_table8 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table8
   END IF
 
   IF g_wc2_table9 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table9
   END IF
 
   IF g_wc2_table10 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table10
   END IF
 
   IF g_wc2_table11 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table11
   END IF
 
 
   
   #add-point:cs段結束前 name="cs.after_construct"
   IF g_wc2_table12 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table12
   END IF
   IF g_wc2_table13 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table13
   END IF
   IF g_wc2_table14 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table14
   END IF
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.filter" >}
#應用 a50 樣板自動產生(Version:8)
#+ filter過濾功能
PRIVATE FUNCTION astt806_filter()
   #add-point:filter段define name="filter.define_customerization"
   
   #end add-point   
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="filter.pre_function"
   
   #end add-point
   
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter.trim()
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter_t, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON stemsite,stemdocdt,stemdocno,stem035,stem036,stem012,stem013,stem034
                          FROM s_browse[1].b_stemsite,s_browse[1].b_stemdocdt,s_browse[1].b_stemdocno, 
                              s_browse[1].b_stem035,s_browse[1].b_stem036,s_browse[1].b_stem012,s_browse[1].b_stem013, 
                              s_browse[1].b_stem034
 
         BEFORE CONSTRUCT
               DISPLAY astt806_filter_parser('stemsite') TO s_browse[1].b_stemsite
            DISPLAY astt806_filter_parser('stemdocdt') TO s_browse[1].b_stemdocdt
            DISPLAY astt806_filter_parser('stemdocno') TO s_browse[1].b_stemdocno
            DISPLAY astt806_filter_parser('stem035') TO s_browse[1].b_stem035
            DISPLAY astt806_filter_parser('stem036') TO s_browse[1].b_stem036
            DISPLAY astt806_filter_parser('stem012') TO s_browse[1].b_stem012
            DISPLAY astt806_filter_parser('stem013') TO s_browse[1].b_stem013
            DISPLAY astt806_filter_parser('stem034') TO s_browse[1].b_stem034
      
         #add-point:filter段cs_ctrl name="filter.cs_ctrl"
         
         #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs name="filter.add_cs"
      
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog name="filter.b_dialog"
         
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL astt806_filter_show('stemsite')
   CALL astt806_filter_show('stemdocdt')
   CALL astt806_filter_show('stemdocno')
   CALL astt806_filter_show('stem035')
   CALL astt806_filter_show('stem036')
   CALL astt806_filter_show('stem012')
   CALL astt806_filter_show('stem013')
   CALL astt806_filter_show('stem034')
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION astt806_filter_parser(ps_field)
   #add-point:filter段define name="filter_parser.define_customerization"
   
   #end add-point    
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num10
   DEFINE li_tmp2    LIKE type_t.num10
   DEFINE ls_var     STRING
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter_parser.define"
   
   #end add-point    
   
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION astt806_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
 
   LET ls_name = "formonly.b_", ps_field
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
 
   #顯示資料組合
   LET ls_condition = astt806_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
 
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION astt806_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   
   #end add-point   
   DEFINE ls_wc STRING
   #add-point:query段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="query.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_sten_d.clear()
   CALL g_sten15_d.clear()
   CALL g_sten16_d.clear()
   CALL g_sten2_d.clear()
   CALL g_sten3_d.clear()
   CALL g_sten4_d.clear()
   CALL g_sten5_d.clear()
   CALL g_sten6_d.clear()
   CALL g_sten7_d.clear()
   CALL g_sten8_d.clear()
   CALL g_sten9_d.clear()
 
   
   #add-point:query段other name="query.other"
   CALL g_sten11_d.clear()  
   CALL g_sten12_d.clear()
   CALL g_sten13_d.clear()   
   CALL g_sten14_d.clear()    
   CALL cl_set_comp_visible('group_8',TRUE)
   CALL cl_set_comp_visible('group_10',TRUE)   
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL astt806_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      CALL astt806_browser_fill("")
      CALL astt806_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_detail_idx_list[1] = 1
   LET g_detail_idx_list[2] = 1
   LET g_detail_idx_list[3] = 1
   LET g_detail_idx_list[4] = 1
   LET g_detail_idx_list[5] = 1
   LET g_detail_idx_list[6] = 1
   LET g_detail_idx_list[7] = 1
   LET g_detail_idx_list[8] = 1
   LET g_detail_idx_list[9] = 1
   LET g_detail_idx_list[10] = 1
   LET g_detail_idx_list[11] = 1
 
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
      CALL astt806_filter_show('stemsite')
   CALL astt806_filter_show('stemdocdt')
   CALL astt806_filter_show('stemdocno')
   CALL astt806_filter_show('stem035')
   CALL astt806_filter_show('stem036')
   CALL astt806_filter_show('stem012')
   CALL astt806_filter_show('stem013')
   CALL astt806_filter_show('stem034')
   CALL astt806_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "-100" 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   ELSE
      CALL astt806_fetch("F") 
      #顯示單身筆數
      CALL astt806_idx_chk()
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION astt806_fetch(p_flag)
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   
   #end add-point    
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="fetch.pre_function"
   
   #end add-point
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   #清空第二階單身
   CALL g_sten15_d.clear()
   CALL g_sten16_d.clear()
   CALL g_sten3_d.clear()
   CALL g_sten4_d.clear()
   CALL g_sten5_d.clear()
   CALL g_sten6_d.clear()
   CALL g_sten7_d.clear()
   CALL g_sten8_d.clear()
   CALL g_sten9_d.clear()
 
   
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #避免超出browser資料筆數上限
   IF g_current_idx > g_browser.getLength() THEN
      LET g_browser_idx = g_browser.getLength()
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_stem_m.stemdocno = g_browser[g_current_idx].b_stemdocno
 
   
   #重讀DB,因TEMP有不被更新特性
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
   #遮罩相關處理
   LET g_stem_m_mask_o.* =  g_stem_m.*
   CALL astt806_stem_t_mask()
   LET g_stem_m_mask_n.* =  g_stem_m.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astt806_set_act_visible()   
   CALL astt806_set_act_no_visible()
   
   #add-point:fetch段action控制 name="fetch.action_control"
   #170117-00025#1 -s by 08172
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("modify_detail", FALSE)
   ELSE
      CALL cl_set_act_visible("modify_detail",TRUE)
   END IF
   CALL astt806_set_act_visible()   
   CALL astt806_set_act_no_visible() 
   #170117-00025#1 -e by 08172
   #end add-point  
   
   
   
   #add-point:fetch結束前 name="fetch.after"
   
   #end add-point
   
   #保存單頭舊值
   LET g_stem_m_t.* = g_stem_m.*
   LET g_stem_m_o.* = g_stem_m.*
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #重新顯示   
   CALL astt806_show()
 
   #應用 a56 樣板自動產生(Version:3)
   #檢查此單據是否需顯示BPM簽核狀況按鈕 
   IF cl_bpm_chk() THEN
      CALL cl_set_act_visible("bpm_status",TRUE)
   ELSE
      CALL cl_set_act_visible("bpm_status",FALSE)
   END IF
 
 
 
 
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.insert" >}
#+ 資料新增
PRIVATE FUNCTION astt806_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   
   #end add-point    
   #add-point:insert段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   DEFINE l_insert      LIKE type_t.num5
   DEFINE r_success     LIKE type_t.num5
   DEFINE r_doctype     LIKE rtai_t.rtai004
   #end add-point    
   
   #add-point:Function前置處理  name="insert.pre_function"
   CALL g_sten11_d.clear()  
   CALL g_sten12_d.clear()
   CALL g_sten13_d.clear() 
   CALL g_sten14_d.clear()    
   #end add-point
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_sten_d.clear()   
   CALL g_sten15_d.clear()  
   CALL g_sten16_d.clear()  
   CALL g_sten2_d.clear()  
   CALL g_sten3_d.clear()  
   CALL g_sten4_d.clear()  
   CALL g_sten5_d.clear()  
   CALL g_sten6_d.clear()  
   CALL g_sten7_d.clear()  
   CALL g_sten8_d.clear()  
   CALL g_sten9_d.clear()  
 
 
   INITIALIZE g_stem_m.* TO NULL             #DEFAULT 設定
   
   LET g_stemdocno_t = NULL
 
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before name="insert.before"
   
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_stem_m.stemownid = g_user
      LET g_stem_m.stemowndp = g_dept
      LET g_stem_m.stemcrtid = g_user
      LET g_stem_m.stemcrtdp = g_dept 
      LET g_stem_m.stemcrtdt = cl_get_current()
      LET g_stem_m.stemmodid = g_user
      LET g_stem_m.stemmoddt = cl_get_current()
      LET g_stem_m.stemstus = 'N'
 
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_stem_m.stem035 = "1"
 
  
      #add-point:單頭預設值 name="insert.default"
      LET g_stem_m.stem036 = g_today
      LET g_stem_m.stem000 = 'astt806'
      LET g_site_flag = FALSE
      CALL s_aooi500_default(g_prog,'stemsite',g_stem_m.stemsite)
         RETURNING l_insert,g_stem_m.stemsite
      IF NOT l_insert THEN
         RETURN
      END IF
      LET g_stem_m.stemdocdt = g_today
      #預設單據的單別
      LET r_success = ''
      LET r_doctype = ''
      CALL s_arti200_get_def_doc_type(g_stem_m.stemsite,g_prog,'1')
           RETURNING r_success,r_doctype
      LET g_stem_m.stemdocno = r_doctype
      LET g_stem_m.stem012 = g_user
      LET g_stem_m.stem013 = g_dept
      

      
      INITIALIZE g_ref_fields TO NULL
      LET g_ref_fields[1] = g_stem_m.stemsite
      CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
      LET g_stem_m.stemsite_desc = '', g_rtn_fields[1] , ''
      DISPLAY BY NAME g_stem_m.stemsite_desc

      INITIALIZE g_ref_fields TO NULL
      LET g_ref_fields[1] = g_stem_m.stem012
      CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
      LET g_stem_m.stem012_desc = '', g_rtn_fields[1] , ''
      DISPLAY BY NAME g_stem_m.stem012_desc

      INITIALIZE g_ref_fields TO NULL
      LET g_ref_fields[1] = g_stem_m.stem013
      CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
      LET g_stem_m.stem013_desc = '', g_rtn_fields[1] , ''
      DISPLAY BY NAME g_stem_m.stem013_desc
      
      INITIALIZE g_ref_fields TO NULL

      #end add-point 
      
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET g_stem_m_t.* = g_stem_m.*
      LET g_stem_m_o.* = g_stem_m.*
      
      #顯示狀態(stus)圖片
            #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_stem_m.stemstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
    
      CALL astt806_input("a")
      
      #add-point:單頭輸入後 name="insert.after_insert"
      
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
      END IF
      
      IF NOT g_master_insert THEN
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_stem_m.* TO NULL
         INITIALIZE g_sten_d TO NULL
         INITIALIZE g_sten15_d TO NULL
         INITIALIZE g_sten16_d TO NULL
         INITIALIZE g_sten2_d TO NULL
         INITIALIZE g_sten3_d TO NULL
         INITIALIZE g_sten4_d TO NULL
         INITIALIZE g_sten5_d TO NULL
         INITIALIZE g_sten6_d TO NULL
         INITIALIZE g_sten7_d TO NULL
         INITIALIZE g_sten8_d TO NULL
         INITIALIZE g_sten9_d TO NULL
 
         #add-point:取消新增後 name="insert.cancel"
         
         #end add-point 
         CALL astt806_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_sten_d.clear()
      #CALL g_sten15_d.clear()
      #CALL g_sten16_d.clear()
      #CALL g_sten2_d.clear()
      #CALL g_sten3_d.clear()
      #CALL g_sten4_d.clear()
      #CALL g_sten5_d.clear()
      #CALL g_sten6_d.clear()
      #CALL g_sten7_d.clear()
      #CALL g_sten8_d.clear()
      #CALL g_sten9_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astt806_set_act_visible()   
   CALL astt806_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_stemdocno_t = g_stem_m.stemdocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " stement = " ||g_enterprise|| " AND",
                      " stemdocno = '", g_stem_m.stemdocno, "' "
 
                      
   #add-point:組合新增資料的條件後 name="insert.after.add_browse"
   
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL astt806_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE astt806_cl
   
   CALL astt806_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
   
   #遮罩相關處理
   LET g_stem_m_mask_o.* =  g_stem_m.*
   CALL astt806_stem_t_mask()
   LET g_stem_m_mask_n.* =  g_stem_m.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
       g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem012_desc,g_stem_m.stem013,g_stem_m.stem013_desc, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemownid_desc,g_stem_m.stemowndp, 
       g_stem_m.stemowndp_desc,g_stem_m.stemcrtid,g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp,g_stem_m.stemcrtdp_desc, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmodid_desc,g_stem_m.stemmoddt,g_stem_m.stemcnfid, 
       g_stem_m.stemcnfid_desc,g_stem_m.stemcnfdt
   
   #add-point:新增結束後 name="insert.after"
   
   #end add-point 
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #功能已完成,通報訊息中心
   CALL astt806_msgcentre_notify('insert')
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.modify" >}
#+ 資料修改
PRIVATE FUNCTION astt806_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   
   #end add-point    
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
   DEFINE l_wc2_table2   STRING
 
 
   DEFINE l_wc2_table3   STRING
 
   DEFINE l_wc2_table4   STRING
 
   DEFINE l_wc2_table5   STRING
 
   DEFINE l_wc2_table6   STRING
 
   DEFINE l_wc2_table7   STRING
 
   DEFINE l_wc2_table8   STRING
 
   DEFINE l_wc2_table9   STRING
 
   DEFINE l_wc2_table10   STRING
 
   DEFINE l_wc2_table11   STRING
 
 
   #add-point:modify段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="modify.pre_function"
   
   #end add-point
   
   #保存單頭舊值
   LET g_stem_m_t.* = g_stem_m.*
   LET g_stem_m_o.* = g_stem_m.*
   
   IF g_stem_m.stemdocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_stemdocno_t = g_stem_m.stemdocno
 
   CALL s_transaction_begin()
   
   OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
   #檢查是否允許此動作
   IF NOT astt806_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_stem_m_mask_o.* =  g_stem_m.*
   CALL astt806_stem_t_mask()
   LET g_stem_m_mask_n.* =  g_stem_m.*
   
   
   
   #add-point:modify段show之前 name="modify.before_show"
   
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
   #LET l_wc2_table2 = g_wc2_table2
   #LET l_wc2_table2 = " 1=1"
 
 
   #LET l_wc2_table3 = g_wc2_table3
   #LET l_wc2_table3 = " 1=1"
 
   #LET l_wc2_table4 = g_wc2_table4
   #LET l_wc2_table4 = " 1=1"
 
   #LET l_wc2_table5 = g_wc2_table5
   #LET l_wc2_table5 = " 1=1"
 
   #LET l_wc2_table6 = g_wc2_table6
   #LET l_wc2_table6 = " 1=1"
 
   #LET l_wc2_table7 = g_wc2_table7
   #LET l_wc2_table7 = " 1=1"
 
   #LET l_wc2_table8 = g_wc2_table8
   #LET l_wc2_table8 = " 1=1"
 
   #LET l_wc2_table9 = g_wc2_table9
   #LET l_wc2_table9 = " 1=1"
 
   #LET l_wc2_table10 = g_wc2_table10
   #LET l_wc2_table10 = " 1=1"
 
   #LET l_wc2_table11 = g_wc2_table11
   #LET l_wc2_table11 = " 1=1"
 
 
   
   CALL astt806_show()
   #add-point:modify段show之後 name="modify.after_show"
   
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
   #LET  g_wc2_table2 = l_wc2_table2 
 
 
   #LET  g_wc2_table3 = l_wc2_table3 
 
   #LET  g_wc2_table4 = l_wc2_table4 
 
   #LET  g_wc2_table5 = l_wc2_table5 
 
   #LET  g_wc2_table6 = l_wc2_table6 
 
   #LET  g_wc2_table7 = l_wc2_table7 
 
   #LET  g_wc2_table8 = l_wc2_table8 
 
   #LET  g_wc2_table9 = l_wc2_table9 
 
   #LET  g_wc2_table10 = l_wc2_table10 
 
   #LET  g_wc2_table11 = l_wc2_table11 
 
 
    
   WHILE TRUE
      LET g_stemdocno_t = g_stem_m.stemdocno
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_stem_m.stemmodid = g_user 
LET g_stem_m.stemmoddt = cl_get_current()
LET g_stem_m.stemmodid_desc = cl_get_username(g_stem_m.stemmodid)
      
      #add-point:modify段修改前 name="modify.before_input"
      #170117-00025#1 -s by 08172
      #「D抽單 / R已拒絕」狀況碼更改資料後，需還原為「N未確認」
      IF g_stem_m.stemstus MATCHES "[DR]" THEN 
         LET g_stem_m.stemstus = "N"
      END IF
      #170117-00025#1 -e by 08172
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      LET g_master_commit = "N"
      CALL astt806_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後 name="modify.after_input"
      
      #end add-point
      
      IF g_update OR NOT INT_FLAG THEN
         #若有modid跟moddt則進行update
         UPDATE stem_t SET (stemmodid,stemmoddt) = (g_stem_m.stemmodid,g_stem_m.stemmoddt)
          WHERE stement = g_enterprise AND stemdocno = g_stemdocno_t
 
      END IF
    
      IF INT_FLAG THEN
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         #若單頭無commit則還原
         IF g_master_commit = "N" THEN
            LET g_stem_m.* = g_stem_m_t.*
            CALL astt806_show()
         END IF
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF g_stem_m.stemdocno != g_stem_m_t.stemdocno
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前 name="modify.body.b_fk_update"
         
         #end add-point
         
         #更新單身key值
         UPDATE sten_t SET stendocno = g_stem_m.stemdocno
 
          WHERE stenent = g_enterprise AND stendocno = g_stem_m_t.stemdocno
 
            
         #add-point:單身fk修改中 name="modify.body.m_fk_update"
         
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "sten_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後 name="modify.body.a_fk_update"
         
         #end add-point
         
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update2"
         
         #end add-point
         
         UPDATE stke_t
            SET stkedocno = g_stem_m.stemdocno
 
          WHERE stkeent = g_enterprise AND
                stkedocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update2"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "stke_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update2"
         
         #end add-point
 
 
         
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update3"
         
         #end add-point
         UPDATE stkn_t
            SET stkndocno = g_stem_m.stemdocno
 
          WHERE stknent = g_enterprise AND
                stkndocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update3"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkn_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update3"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update4"
         
         #end add-point
         UPDATE stko_t
            SET stkodocno = g_stem_m.stemdocno
 
          WHERE stkoent = g_enterprise AND
                stkodocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update4"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stko_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update4"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update5"
         
         #end add-point
         UPDATE stkf_t
            SET stkfdocno = g_stem_m.stemdocno
 
          WHERE stkfent = g_enterprise AND
                stkfdocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update5"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkf_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update5"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update6"
         
         #end add-point
         UPDATE stkh_t
            SET stkhdocno = g_stem_m.stemdocno
 
          WHERE stkhent = g_enterprise AND
                stkhdocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update6"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkh_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update6"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update7"
         
         #end add-point
         UPDATE stki_t
            SET stkidocno = g_stem_m.stemdocno
 
          WHERE stkient = g_enterprise AND
                stkidocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update7"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stki_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update7"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update8"
         
         #end add-point
         UPDATE stkj_t
            SET stkjdocno = g_stem_m.stemdocno
 
          WHERE stkjent = g_enterprise AND
                stkjdocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update8"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkj_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update8"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update9"
         
         #end add-point
         UPDATE stkk_t
            SET stkkdocno = g_stem_m.stemdocno
 
          WHERE stkkent = g_enterprise AND
                stkkdocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update9"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkk_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update9"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update10"
         
         #end add-point
         UPDATE stkl_t
            SET stkldocno = g_stem_m.stemdocno
 
          WHERE stklent = g_enterprise AND
                stkldocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update10"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkl_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update10"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update11"
         
         #end add-point
         UPDATE stkm_t
            SET stkmdocno = g_stem_m.stemdocno
 
          WHERE stkment = g_enterprise AND
                stkmdocno = g_stemdocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update11"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkm_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update11"
         
         #end add-point
 
 
         
         #UPDATE 多語言table key值
         
         
         
         
         
         
         
         
         
         
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astt806_set_act_visible()   
   CALL astt806_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " stement = " ||g_enterprise|| " AND",
                      " stemdocno = '", g_stem_m.stemdocno, "' "
 
   #填到對應位置
   CALL astt806_browser_fill("")
 
   CLOSE astt806_cl
   
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL astt806_msgcentre_notify('modify')
 
END FUNCTION 
 
{</section>}
 
{<section id="astt806.input" >}
#+ 資料輸入
PRIVATE FUNCTION astt806_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   
   #end add-point  
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_ac_t                LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   DEFINE  l_ooef004             LIKE ooef_t.ooef004
   DEFINE  l_success             LIKE type_t.num5
   DEFINE  l_errno               LIKE type_t.chr10
   DEFINE  l_str                 STRING
   DEFINE  l_recount             LIKE type_t.chr10    #日核算和账单是否需要重算
   DEFINE  l_sys                 LIKE type_t.chr1   
   DEFINE  l_sthb006             LIKE sthb_t.sthb006 
   DEFINE  l_sql                 STRING 
   DEFINE  l_string              STRING
   DEFINE  l_stke001             LIKE stke_t.stke001
   DEFINE  l_stke011             LIKE stke_t.stke011
   DEFINE  l_stke012             LIKE stke_t.stke012
   DEFINE  l_stke042             LIKE stke_t.stke042
   DEFINE  l_stke043             LIKE stke_t.stke043
   DEFINE  l_stje043             LIKE stje_t.stje043  
   DEFINE  l_stje012             LIKE stje_t.stje012
   DEFINE  l_sdate               LIKE type_t.dat 
   DEFINE  l_current_row         LIKE type_t.num10    #获取当前的行数 
   DEFINE  l_type                LIKE type_t.chr10  
   DEFINE  l_discount            LIKE type_t.chr10    #优惠的日核算和账单是否需要重算  
   DEFINE  l_choice              LIKE type_t.chr10    #续签的时候1重取标准2沿用旧的方案   
   #end add-point  
   
   #add-point:Function前置處理  name="input.pre_function"
 
   #end add-point
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
       g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem012_desc,g_stem_m.stem013,g_stem_m.stem013_desc, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemownid_desc,g_stem_m.stemowndp, 
       g_stem_m.stemowndp_desc,g_stem_m.stemcrtid,g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp,g_stem_m.stemcrtdp_desc, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmodid_desc,g_stem_m.stemmoddt,g_stem_m.stemcnfid, 
       g_stem_m.stemcnfid_desc,g_stem_m.stemcnfdt
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql name="input.define_sql"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stenseq,sten002,sten001,sten003,sten004,sten006,sten007,sten012,sten005, 
       sten008,sten009,sten010,sten011,stenacti,stensite,stenunit FROM sten_t WHERE stenent=? AND stendocno=?  
       AND stenseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl CURSOR FROM g_forupd_sql
   
   #add-point:input段define_sql name="input.define_sql2"
   
   #end add-point    
   LET g_forupd_sql = "SELECT stkeunit,stkesite,stkedocdt,stke001,stke000,stke002,stke003,stke004,stke005, 
       stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015,stke016,stke017, 
       stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029,stke030, 
       stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040,stke041,stke042, 
       stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050,stke051,stke052,stke053,stke200, 
       stke223,stke224,stke225,stkestus FROM stke_t WHERE stkeent=? AND stkedocno=? AND stke001=? FOR  
       UPDATE"
   #add-point:input段define_sql name="input.after_define_sql2"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl2 CURSOR FROM g_forupd_sql
 
 
   
   #add-point:input段define_sql name="input.define_sql3"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stknsite,stknunit,stknseq,stkn002,stkn003,stkn004,stkn005,stkn006,stkn007, 
       stkn008,stkn009,stkn010 FROM stkn_t WHERE stknent=? AND stkndocno=? AND stkn001=? AND stknseq=?  
       FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql3"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl3 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql4"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkosite,stkounit,stkoseq,stko002,stko003,stko004,stko005,stko006,stko007  
       FROM stko_t WHERE stkoent=? AND stkodocno=? AND stko001=? AND stkoseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql4"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl4 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql5"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkfseq,stkf002,stkf003,stkf021,stkf004,stkf022,stkf005,stkf006,stkf007, 
       stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020,stkf023,stkf024,stkf025,stkfsite, 
       stkfunit FROM stkf_t WHERE stkfent=? AND stkfdocno=? AND stkf001=? AND stkfseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql5"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl5 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql6"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkhseq,stkh002,stkh003,stkh008,stkh004,stkh005,stkh006,stkh007,stkhsite, 
       stkhunit FROM stkh_t WHERE stkhent=? AND stkhdocno=? AND stkh001=? AND stkhseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql6"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl6 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql7"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkiseq,stki002,stki003,stki010,stki004,stki005,stki006,stki007,stki008, 
       stki009,stkisite,stkiunit FROM stki_t WHERE stkient=? AND stkidocno=? AND stki001=? AND stkiseq=?  
       FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql7"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl7 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql8"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkjacti,stkjseq,stkj002,stkj003,stkj004,stkj005,stkj006,stkj007,stkj008, 
       stkj009,stkjsite,stkjunit FROM stkj_t WHERE stkjent=? AND stkjdocno=? AND stkj001=? AND stkjseq=?  
       FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql8"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl8 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql9"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkkacti,stkkseq,stkk002,stkk004,stkk003,stkk005,stkksite,stkkunit FROM  
       stkk_t WHERE stkkent=? AND stkkdocno=? AND stkk001=? AND stkkseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql9"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl9 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql10"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stklseq,stkl002,stkl003,stkl004,stkl005,stkl006,stkl007,stkl008,stklsite, 
       stklunit FROM stkl_t WHERE stklent=? AND stkldocno=? AND stkl001=? AND stklseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql10"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl10 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql11"
   
   #end add-point 
   LET g_forupd_sql = "SELECT stkmseq,stkm002,stkm003,stkm004,stkm005,stkm006,stkm007,stkm008,stkm009, 
       stkm010,stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017,stkm018,stkm019,stkmsite,stkmunit  
       FROM stkm_t WHERE stkment=? AND stkmdocno=? AND stkm001=? AND stkmseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql11"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl11 CURSOR FROM g_forupd_sql
 
 
 
   #add-point:input段define_sql name="input.other_sql"
   LET g_forupd_sql = "SELECT stkfseq,stkf002,stkf003,stkf004,stkf005,stkf006,stkf007,stkf008, 
       stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf021,stkf023,stkf024,stkf025
       FROM stkf_t WHERE stkfent=? AND stkfdocno=? AND stkf001=? AND stkfseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql5"

   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl12 CURSOR FROM g_forupd_sql
   
   LET g_forupd_sql = "SELECT stkgseq1,stkg002,stkg003,stkg004,stkg006 FROM  
       stkg_t WHERE stkgent=? AND stkgdocno=? AND stkg001 = ? AND stkgseq=? AND stkgseq1=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql10"

   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl13 CURSOR FROM g_forupd_sql
   
   LET g_forupd_sql = "SELECT stkgseq1,stkg002,stkg003,stkg005,stkg007 FROM  
       stkg_t WHERE stkgent=? AND stkgdocno=? AND stkg001 = ? AND stkgseq=? AND stkgseq1=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql10"

   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE astt806_bcl14 CURSOR FROM g_forupd_sql
   
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL astt806_set_entry(p_cmd)
   #add-point:set_entry後 name="input.after_set_entry"
   
   #end add-point
   CALL astt806_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036, 
       g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013,g_stem_m.stem034,g_stem_m.stemstus
   
   LET lb_reproduce = FALSE
   LET l_ac_t = 1
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前 name="input.before_input"
   
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
{</section>}
 
{<section id="astt806.input.head" >}
      #單頭段
      INPUT BY NAME g_stem_m.stemsite,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036, 
          g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013,g_stem_m.stem034,g_stem_m.stemstus 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL astt806_set_entry(p_cmd)
            #add-point:資料輸入前 name="input.m.before_input"
            
            #end add-point
            CALL astt806_set_no_entry(p_cmd)
    
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemsite
            
            #add-point:AFTER FIELD stemsite name="input.a.stemsite"
            IF NOT cl_null(g_stem_m.stemsite) THEN
               CALL s_aooi500_chk(g_prog,'stemsite',g_stem_m.stemsite,g_stem_m.stemsite) RETURNING l_success,l_errno
               IF NOT l_success THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.extend = g_stem_m.stemsite
                  LET g_errparam.code   = l_errno
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()

                  LET g_stem_m.stemsite = g_stem_m_t.stemsite
                  CALL s_desc_get_department_desc(g_stem_m.stemsite) RETURNING g_stem_m.stemsite_desc
                  DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc
                  NEXT FIELD CURRENT
               END IF

               LET g_site_flag = TRUE
               CALL astt806_set_entry(p_cmd)
               CALL astt806_set_no_entry(p_cmd)
            END IF
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_stem_m.stemsite
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_stem_m.stemsite_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_stem_m.stemsite_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemsite
            #add-point:BEFORE FIELD stemsite name="input.b.stemsite"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stemsite
            #add-point:ON CHANGE stemsite name="input.g.stemsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemdocdt
            #add-point:BEFORE FIELD stemdocdt name="input.b.stemdocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemdocdt
            
            #add-point:AFTER FIELD stemdocdt name="input.a.stemdocdt"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stemdocdt
            #add-point:ON CHANGE stemdocdt name="input.g.stemdocdt"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemdocno
            
            #add-point:AFTER FIELD stemdocno name="input.a.stemdocno"
            IF NOT cl_null(g_stem_m.stemdocno) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               CALL s_aooi100_sel_ooef004(g_stem_m.stemsite)
                  RETURNING l_success,l_ooef004
               LET g_chkparam.arg1 = l_ooef004
               LET g_chkparam.arg2 = g_stem_m.stemdocno
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooba002") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 

            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  NOT cl_null(g_stem_m.stemdocno) THEN 
               IF p_cmd = 'a' OR ( p_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t )) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stem_t WHERE "||"stement = '" ||g_enterprise|| "' AND "||"stemdocno = '"||g_stem_m.stemdocno ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
                  IF NOT s_aooi200_chk_slip(g_stem_m.stemsite,'',g_stem_m.stemdocno,g_prog) THEN
                     LET g_stem_m.stemdocno = g_stem_m_t.stemdocno
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemdocno
            #add-point:BEFORE FIELD stemdocno name="input.b.stemdocno"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stemdocno
            #add-point:ON CHANGE stemdocno name="input.g.stemdocno"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem035
            #add-point:BEFORE FIELD stem035 name="input.b.stem035"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem035
            
            #add-point:AFTER FIELD stem035 name="input.a.stem035"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem035
            #add-point:ON CHANGE stem035 name="input.g.stem035"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem036
            #add-point:BEFORE FIELD stem036 name="input.b.stem036"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem036
            
            #add-point:AFTER FIELD stem036 name="input.a.stem036"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem036
            #add-point:ON CHANGE stem036 name="input.g.stem036"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem000
            #add-point:BEFORE FIELD stem000 name="input.b.stem000"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem000
            
            #add-point:AFTER FIELD stem000 name="input.a.stem000"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem000
            #add-point:ON CHANGE stem000 name="input.g.stem000"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem012
            
            #add-point:AFTER FIELD stem012 name="input.a.stem012"
            IF NOT cl_null(g_stem_m.stem012) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_stem_m.stem012

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooag001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_stem_m.stem012
            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
            LET g_stem_m.stem012_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_stem_m.stem012_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem012
            #add-point:BEFORE FIELD stem012 name="input.b.stem012"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem012
            #add-point:ON CHANGE stem012 name="input.g.stem012"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem013
            
            #add-point:AFTER FIELD stem013 name="input.a.stem013"
            IF NOT cl_null(g_stem_m.stem013) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_stem_m.stem013
               LET g_chkparam.arg2 = g_today
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooeg001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_stem_m.stem013
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_stem_m.stem013_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_stem_m.stem013_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem013
            #add-point:BEFORE FIELD stem013 name="input.b.stem013"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem013
            #add-point:ON CHANGE stem013 name="input.g.stem013"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stem034
            #add-point:BEFORE FIELD stem034 name="input.b.stem034"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stem034
            
            #add-point:AFTER FIELD stem034 name="input.a.stem034"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stem034
            #add-point:ON CHANGE stem034 name="input.g.stem034"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stemstus
            #add-point:BEFORE FIELD stemstus name="input.b.stemstus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stemstus
            
            #add-point:AFTER FIELD stemstus name="input.a.stemstus"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stemstus
            #add-point:ON CHANGE stemstus name="input.g.stemstus"
            
            #END add-point 
 
 
 #欄位檢查
                  #Ctrlp:input.c.stemsite
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemsite
            #add-point:ON ACTION controlp INFIELD stemsite name="input.c.stemsite"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_stem_m.stemsite             #給予default值

            #給予arg
  
            LET g_qryparam.where = s_aooi500_q_where(g_prog,'stemsite',g_stem_m.stemsite,'i')
 
            CALL q_ooef001_24()                                #呼叫開窗
 
            LET g_stem_m.stemsite = g_qryparam.return1              

            DISPLAY g_stem_m.stemsite TO stemsite              #

            NEXT FIELD stemsite                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.stemdocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemdocdt
            #add-point:ON ACTION controlp INFIELD stemdocdt name="input.c.stemdocdt"
            
            #END add-point
 
 
         #Ctrlp:input.c.stemdocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemdocno
            #add-point:ON ACTION controlp INFIELD stemdocno name="input.c.stemdocno"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_stem_m.stemdocno             #給予default值

            #給予arg
            LET l_ooef004 = ''            
            SELECT ooef004 INTO l_ooef004 FROM ooef_t WHERE ooef001 = g_site AND ooefent  = g_enterprise            
            LET g_qryparam.arg1 = l_ooef004 #
            LET g_qryparam.arg2 = 'astt806' 
 
            CALL q_ooba002_1()                                #呼叫開窗
 
            LET g_stem_m.stemdocno = g_qryparam.return1              

            DISPLAY g_stem_m.stemdocno TO stemdocno              #

            NEXT FIELD stemdocno                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.stem035
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem035
            #add-point:ON ACTION controlp INFIELD stem035 name="input.c.stem035"
            
            #END add-point
 
 
         #Ctrlp:input.c.stem036
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem036
            #add-point:ON ACTION controlp INFIELD stem036 name="input.c.stem036"
            
            #END add-point
 
 
         #Ctrlp:input.c.stem000
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem000
            #add-point:ON ACTION controlp INFIELD stem000 name="input.c.stem000"
            
            #END add-point
 
 
         #Ctrlp:input.c.stem012
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem012
            #add-point:ON ACTION controlp INFIELD stem012 name="input.c.stem012"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_stem_m.stem012             #給予default值
            LET g_qryparam.default2 = "" #g_stem_m.ooag011 #全名
            LET g_qryparam.default3 = "" #g_stem_m.ooag001 #員工編號
            LET g_qryparam.default4 = "" #g_stem_m.ooag003 #歸屬部門
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_ooag001_6()                                #呼叫開窗
 
            LET g_stem_m.stem012 = g_qryparam.return1              
            #LET g_stem_m.ooag011 = g_qryparam.return2 
            #LET g_stem_m.ooag001 = g_qryparam.return3 
            #LET g_stem_m.ooag003 = g_qryparam.return4 
            DISPLAY g_stem_m.stem012 TO stem012              #
            #DISPLAY g_stem_m.ooag011 TO ooag011 #全名
            #DISPLAY g_stem_m.ooag001 TO ooag001 #員工編號
            #DISPLAY g_stem_m.ooag003 TO ooag003 #歸屬部門
            NEXT FIELD stem012                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.stem013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem013
            #add-point:ON ACTION controlp INFIELD stem013 name="input.c.stem013"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_stem_m.stem013             #給予default值
            LET g_qryparam.default2 = "" #g_stem_m.ooeg001 #部門編號
            #給予arg
            LET g_qryparam.arg1 = g_today

 
            CALL q_ooeg001()                                #呼叫開窗
 
            LET g_stem_m.stem013 = g_qryparam.return1              
            #LET g_stem_m.ooeg001 = g_qryparam.return2 
            DISPLAY g_stem_m.stem013 TO stem013              #
            #DISPLAY g_stem_m.ooeg001 TO ooeg001 #部門編號
            NEXT FIELD stem013                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.stem034
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stem034
            #add-point:ON ACTION controlp INFIELD stem034 name="input.c.stem034"
            
            #END add-point
 
 
         #Ctrlp:input.c.stemstus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stemstus
            #add-point:ON ACTION controlp INFIELD stemstus name="input.c.stemstus"
            
            #END add-point
 
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_stem_m.stemdocno
                        
            #add-point:單頭INPUT後 name="input.head.after_input"
            
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前 name="input.head.b_insert"
               CALL s_aooi200_gen_docno(g_stem_m.stemsite,g_stem_m.stemdocno,g_stem_m.stemdocdt,g_prog)
               RETURNING l_success,g_stem_m.stemdocno
               IF NOT l_success THEN
               INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'apm-00003'
                  LET g_errparam.extend = g_stem_m.stemdocno
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  NEXT FIELD stemdocno
               END IF
               
               #end add-point
               
               INSERT INTO stem_t (stement,stemsite,stemdocdt,stemdocno,stem035,stem036,stem000,stem012, 
                   stem013,stem034,stemstus,stemownid,stemowndp,stemcrtid,stemcrtdp,stemcrtdt,stemmodid, 
                   stemmoddt,stemcnfid,stemcnfdt)
               VALUES (g_enterprise,g_stem_m.stemsite,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
                   g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013,g_stem_m.stem034, 
                   g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
                   g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt)  
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_stem_m:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中 name="input.head.m_insert"
 
               #end add-point
               
               
               
               
               #add-point:單頭新增後 name="input.head.a_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL astt806_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL astt806_b_fill()
                  CALL astt806_b_fill2('0')
               END IF
               
               #add-point:單頭新增後 name="input.head.a_insert2"
               #CALL cl_err_collect_init()
               CALL astt806_01(g_stem_m.stemdocno)
               IF g_detail_idx = 0 OR g_detail_idx IS NULL THEN
                  LET g_detail_idx  = 1
               END IF
               LET INT_FLAG = 0
               LET g_action_choice = ''
               CALL astt806_b_fill()
               CALL astt806_b_fill2('0')
#               CALL s_transaction_begin()
#               LET l_stke001= ''
#               LET l_stke011= ''
#               LET l_stke012= ''
#               LET l_stke042= '' 
#               LET l_stke043= ''
#               LET l_sql = "SELECT stke001,stke011,stke012,stke042,stke043 FROM stke_t WHERE stkeent = ",g_enterprise," AND stkedocno = '",g_stem_m.stemdocno,"' AND stke027 = '1' "
#               PREPARE astt806_stke_pre FROM l_sql
#               DECLARE astt806_stke_cs CURSOR FOR astt806_stke_pre
#               FOREACH astt806_stke_cs INTO l_stke001,l_stke011,l_stke012,l_stke042,l_stke043                  
#                  UPDATE stke_t SET stke027 = '' 
#                   WHERE stkeent = g_enterprise
#                     AND stke027  = '1'
#                     AND stkedocno = g_stem_m.stemdocno
#                     AND stke001  = l_stke001
#                  IF SQLCA.sqlcode THEN                              
#                     INITIALIZE g_errparam TO NULL
#                     LET g_errparam.code = SQLCA.sqlcode
#                     LET g_errparam.extend = " UPDATE stke_t "
#                     LET g_errparam.popup = TRUE
#                     CALL cl_err()
#                     CALL cl_err_collect_show()
#                     CALL s_transaction_end('N','0')
#                     LET g_master_insert = TRUE               
#                     LET p_cmd = 'u'
#                     CONTINUE DIALOG                       
#                  END IF   
#                  #新增或者面积变更续签的时候               
#                  IF g_stem_m.stem035 = '1' THEN 
#                     #产生场地信息
#                     CALL astt806_stkj_insert(l_stke001) RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF 
#                  END IF
#                  #产生账期
#                  IF g_stem_m.stem035 = '1' OR g_stem_m.stem035 = '2'  THEN   
#                     IF NOT astt806_upd_stko(l_stke001) THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF
#                  END IF                  
#                  #优惠变更
#                  IF g_stem_m.stem035 = '3' THEN                  
#                     CALL astt806_stkh_insert(l_stke001) RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF
#                     #产生费用日核算
#                     CALL s_astt806_day_account('A',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF                 
#                     #优惠的时候更新合同账单
#                     CALL s_astt806_update_stkm_t(g_stem_m.stemdocno,'A',l_stke001) RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF 
#                  END IF
#                  #延期
#                  IF g_stem_m.stem035 = '2' THEN                  
#                     #重取标准
#                     CALL s_astt806_refetch_standard('B',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF                  
#                     #产生费用日核算
#                     INITIALIZE l_stje043,l_stje012,l_sdate TO NULL
#                     SELECT stje043,stje012 INTO l_stje043,l_stje012
#                       FROM stje_t
#                      WHERE stjeent = g_enterprise
#                        AND stje001 = l_stke001
#                     IF l_stje043 IS NOT NULL THEN
#                        LET l_sdate = l_stje043
#                     ELSE
#                        LET l_sdate = l_stje012
#                     END IF
#                     CALL s_astt806_day_account('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF                 
#                     #产生合同账单                  
#                     CALL s_astt806_produce_period('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_sdate+1,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF  
#                  END IF                              
#                  #续签单头录入后自动产生单身（固定费用和变动费用不自动从合同主档带）：先提示是否重取标准，
#                  #是从合同开始~结束日期重新取标准费用带出单身；
#                  #否，从原合同带出 （一次性的费用不自动带出）
#                  IF g_stem_m.stem035 = '1' THEN               
#                     IF cl_ask_confirm('ast-00831') THEN 
#                        CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                        IF NOT l_success THEN
#                           CALL cl_err_collect_show() 
#                           CALL s_transaction_end('N','0')
#                           LET g_master_insert = TRUE               
#                           LET p_cmd = 'u'
#                           CONTINUE DIALOG
#                        END IF
#                     ELSE   
#                        #如果场地发生变化，提示只能重取标准
#                        LET l_cnt = 0
#                        SELECT COUNT(*) INTO l_cnt
#                          FROM stkj_t,stjj_t
#                         WHERE stkjent = g_enterprise
#                           AND stkjdocno = g_stem_m.stemdocno
#                           AND stkjent = stjjent 
#                           AND stkj001 = stjj001
#                           AND stjj001 = l_stke001
#                           AND stkj002 <> stjj002
#                           AND stkjseq = stjjseq
#                        IF l_cnt > 0 THEN
#                           CALL cl_ask_confirm3("ast-00832","")
#                           CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show() 
#                              CALL s_transaction_end('N','0')
#                              LET g_master_insert = TRUE               
#                              LET p_cmd = 'u'
#                              CONTINUE DIALOG
#                           END IF
#                           #从合同主档带出非标准的
#                           CALL astt806_stkf_get('1',l_stke001) RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show() 
#                              CALL s_transaction_end('N','0')
#                              LET g_master_insert = TRUE               
#                              LET p_cmd = 'u'
#                              CONTINUE DIALOG
#                           END IF
#                        ELSE                     
#                           #从合同主档带值
#                           CALL astt806_stkf_get('2',l_stke001) RETURNING l_success
#                           IF NOT l_success THEN
#                              CALL cl_err_collect_show() 
#                              CALL s_transaction_end('N','0')
#                              LET g_master_insert = TRUE               
#                              LET p_cmd = 'u'
#                              CONTINUE DIALOG
#                           END IF
#                        END IF
#                     END IF
#                     #产生费用日核算
#                     CALL s_astt806_day_account('R',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF
#                     #新增定义账期
#                     CALL astt806_stki_insert(l_stke001) RETURNING l_success                      
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF 
#                     #产生合同账单                  
#                     CALL s_astt806_produce_period('R',g_stem_m.stemdocno,l_stke011,l_stke012,l_stke042,l_stke001)  RETURNING l_success
#                     IF NOT l_success THEN
#                        CALL cl_err_collect_show() 
#                        CALL s_transaction_end('N','0')
#                        LET g_master_insert = TRUE               
#                        LET p_cmd = 'u'
#                        CONTINUE DIALOG
#                     END IF           
#                        
#                  END IF                  
#               END FOREACH 
#               CALL s_transaction_end('Y','0')               
#               CALL cl_err_collect_show()                      
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前 name="input.head.b_update"
               
               #end add-point
               
               #將遮罩欄位還原
               CALL astt806_stem_t_mask_restore('restore_mask_o')
               
               UPDATE stem_t SET (stemsite,stemdocdt,stemdocno,stem035,stem036,stem000,stem012,stem013, 
                   stem034,stemstus,stemownid,stemowndp,stemcrtid,stemcrtdp,stemcrtdt,stemmodid,stemmoddt, 
                   stemcnfid,stemcnfdt) = (g_stem_m.stemsite,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
                   g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013,g_stem_m.stem034, 
                   g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
                   g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt) 
 
                WHERE stement = g_enterprise AND stemdocno = g_stemdocno_t
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "stem_t:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中 name="input.head.m_update"
               
               #end add-point
               
               
               
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stem_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(g_stem_m_t)
               LET g_log2 = util.JSON.stringify(g_stem_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後 name="input.head.a_update"
               
               #end add-point
            END IF
            
            LET g_master_commit = "Y"
            LET g_stemdocno_t = g_stem_m.stemdocno
 
            
      END INPUT
   
 
{</section>}
 
{<section id="astt806.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_sten_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body.before_input2"
            LET l_discount = 'N'
            IF g_stem_m.stem035 <> '3' THEN
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astt806_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
            END IF
            LET g_loc = 'm'
            LET g_rec_b = g_sten_d.getLength()
            #add-point:資料輸入前 name="input.d.before_input"
            
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_detail_idx_list[1] = l_ac
            LET g_current_page = 1
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten_d[l_ac].stenseq IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_sten_d_t.* = g_sten_d[l_ac].*  #BACKUP
               LET g_sten_d_o.* = g_sten_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("sten_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl INTO g_sten_d[l_ac].stenseq,g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten001, 
                      g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten006,g_sten_d[l_ac].sten007, 
                      g_sten_d[l_ac].sten012,g_sten_d[l_ac].sten005,g_sten_d[l_ac].sten008,g_sten_d[l_ac].sten009, 
                      g_sten_d[l_ac].sten010,g_sten_d[l_ac].sten011,g_sten_d[l_ac].stenacti,g_sten_d[l_ac].stensite, 
                      g_sten_d[l_ac].stenunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_sten_d_t.stenseq,":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten_d_mask_o[l_ac].* =  g_sten_d[l_ac].*
                  CALL astt806_sten_t_mask()
                  LET g_sten_d_mask_n[l_ac].* =  g_sten_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
        
         BEFORE INSERT  
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten_d[l_ac].* TO NULL 
            INITIALIZE g_sten_d_t.* TO NULL 
            INITIALIZE g_sten_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
                  LET g_sten_d[l_ac].sten001 = "1"
      LET g_sten_d[l_ac].sten008 = "0"
      LET g_sten_d[l_ac].sten011 = "Y"
      LET g_sten_d[l_ac].stenacti = "Y"
 
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            LET g_sten_d[l_ac].stenacti = "Y"
            LET g_sten_d[l_ac].sten011 = "N"
            LET g_sten_d[l_ac].stensite = g_stem_m.stemsite
            LET g_sten_d[l_ac].stenunit = g_stem_m.stemsite
            SELECT MAX(stenseq)+1 INTO g_sten_d[l_ac].stenseq
              FROM sten_t
             WHERE stenent = g_enterprise
               AND stendocno = g_stem_m.stemdocno
            IF cl_null(g_sten_d[l_ac].stenseq) THEN
               LET g_sten_d[l_ac].stenseq = 1
            END IF
            #end add-point
            LET g_sten_d_t.* = g_sten_d[l_ac].*     #新輸入資料
            LET g_sten_d_o.* = g_sten_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten_d[li_reproduce_target].* = g_sten_d[li_reproduce].*
 
               LET g_sten_d[li_reproduce_target].stenseq = NULL
 
            END IF
            
 
            #add-point:modify段before insert name="input.body.before_insert"
            
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"
            LET l_discount = 'Y'
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM sten_t 
             WHERE stenent = g_enterprise AND stendocno = g_stem_m.stemdocno
 
               AND stenseq = g_sten_d[l_ac].stenseq
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten_d[g_detail_idx].stenseq
               CALL astt806_insert_b('sten_t',gs_keys,"'1'")
                           
               #add-point:單身新增後 name="input.body.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               INITIALIZE g_sten_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert name="input.body.a_insert2"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_stem_m.stemdocno
 
               LET gs_keys[gs_keys.getLength()+1] = g_sten_d_t.stenseq
 
            
               #刪除同層單身
               IF NOT astt806_delete_b('sten_t',gs_keys,"'1'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT astt806_key_delete_b(gs_keys,'sten_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身刪除中 name="input.body.m_delete"
               
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"
               
               #end add-point
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
               LET l_discount = 'Y'
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenseq
            #add-point:BEFORE FIELD stenseq name="input.b.page1.stenseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenseq
            
            #add-point:AFTER FIELD stenseq name="input.a.page1.stenseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten_d[g_detail_idx].stenseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten_d[g_detail_idx].stenseq != g_sten_d_t.stenseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM sten_t WHERE "||"stenent = '" ||g_enterprise|| "' AND "||"stendocno = '"||g_stem_m.stemdocno ||"' AND "|| "stenseq = '"||g_sten_d[g_detail_idx].stenseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stenseq
            #add-point:ON CHANGE stenseq name="input.g.page1.stenseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten002
            
            #add-point:AFTER FIELD sten002 name="input.a.page1.sten002"
            IF NOT cl_null(g_sten_d[l_ac].sten002) THEN

               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten_d[l_ac].sten002
               
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  LET g_sten_d[l_ac].sten002 = ''
                  LET g_sten_d[l_ac].sten002_desc = ''
                  DISPLAY BY NAME g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten002_desc
                  NEXT FIELD sten002
               END IF
#               #判断是否存在于合同对应费用明细档中
#               IF NOT cl_null(g_stem_m.stem001) THEN
#                  LET l_n = 0
#                  SELECT COUNT(*) INTO l_n
#                    FROM stjf_t
#                   WHERE stjfent = g_enterprise
#                     AND stjf001 = g_stem_m.stem001
#                     AND stjf004 = g_sten_d[l_ac].sten002
#                  IF l_n < 1 THEN
#                     INITIALIZE g_errparam TO NULL 
#                     LET g_errparam.extend = ""
#                     LET g_errparam.code   = 'ast-00630'
#                     LET g_errparam.popup  = TRUE 
#                     CALL cl_err()
#                     LET g_sten_d[l_ac].sten002 = g_sten_d_t.sten002
#                     LET g_sten_d[l_ac].sten002_desc = ''
#                     DISPLAY BY NAME g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten002_Desc
#                     NEXT FIELD sten002
#                  END IF
#               END IF
            END IF
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten_d[l_ac].sten002
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten_d[l_ac].sten002_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten_d[l_ac].sten002_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten002
            #add-point:BEFORE FIELD sten002 name="input.b.page1.sten002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten002
            #add-point:ON CHANGE sten002 name="input.g.page1.sten002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten001
            #add-point:BEFORE FIELD sten001 name="input.b.page1.sten001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten001
            
            #add-point:AFTER FIELD sten001 name="input.a.page1.sten001"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten001
            #add-point:ON CHANGE sten001 name="input.g.page1.sten001"
            CALL astt806_set_entry_b(l_cmd)  
            CALL astt806_set_no_entry_b(l_cmd)
            LET g_sten_d[l_ac].sten005=''
            LET g_sten_d[l_ac].sten007=''
            LET g_sten_d[l_ac].sten012=''
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten003
            #add-point:BEFORE FIELD sten003 name="input.b.page1.sten003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten003
            
            #add-point:AFTER FIELD sten003 name="input.a.page1.sten003"
            IF NOT cl_null(g_sten_d[l_ac].sten003) THEN
#               #日期必須在生失效日期範圍內
#               IF g_sten_d[l_ac].sten003 < g_stem_m.stem011 OR g_sten_d[l_ac].sten003 > g_stem_m.stem010 THEN
#                  INITIALIZE g_errparam TO NULL 
#                  LET g_errparam.extend = ""
#                  LET g_errparam.code   = 'ast-00668' 
#                  LET g_errparam.popup  = TRUE 
#                  CALL cl_err()
#                  LET g_sten_d[l_ac].sten003 = g_sten_d_t.sten003
#                  DISPLAY BY NAME g_sten_d[l_ac].sten003
#                  NEXT FIELD sten003
#               END IF
               #結束日期大於開始日期
               IF NOT cl_null(g_sten_d[l_ac].sten004) THEN
                  IF g_sten_d[l_ac].sten003 > g_sten_d[l_ac].sten004 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = ""
                     LET g_errparam.code   = 'amm-00080' 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET g_sten_d[l_ac].sten003 = g_sten_d_t.sten003
                     DISPLAY BY NAME g_sten_d[l_ac].sten003
                     NEXT FIELD sten003
                  END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten003
            #add-point:ON CHANGE sten003 name="input.g.page1.sten003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten004
            #add-point:BEFORE FIELD sten004 name="input.b.page1.sten004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten004
            
            #add-point:AFTER FIELD sten004 name="input.a.page1.sten004"
            IF NOT cl_null(g_sten_d[l_ac].sten004) THEN
#               #日期必須在生失效日期範圍內
#               IF g_sten_d[l_ac].sten004 < g_stem_m.stem011 OR g_sten_d[l_ac].sten004 > g_stem_m.stem010 THEN
#                  INITIALIZE g_errparam TO NULL 
#                  LET g_errparam.extend = ""
#                  LET g_errparam.code   = 'ast-00669' 
#                  LET g_errparam.popup  = TRUE 
#                  CALL cl_err()
#                  LET g_sten_d[l_ac].sten004 = g_sten_d_t.sten004
#                  DISPLAY BY NAME g_sten_d[l_ac].sten004
#                  NEXT FIELD sten004
#               END IF
               #結束日期大於開始日期
               IF NOT cl_null(g_sten_d[l_ac].sten003) THEN
                  IF g_sten_d[l_ac].sten003 > g_sten_d[l_ac].sten004 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = ""
                     LET g_errparam.code   = 'amm-00080' 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET g_sten_d[l_ac].sten004 = g_sten_d_t.sten004
                     DISPLAY BY NAME g_sten_d[l_ac].sten004
                     NEXT FIELD sten004
                  END IF
               END IF
               IF NOT astt806_chk_sten002() THEN
                  LET g_sten_d[l_ac].sten003 = ''
                  LET g_sten_d[l_ac].sten004 = ''
                  DISPLAY BY NAME g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004
                  NEXT FIELD sten003
               END IF
               #160512-00003#24 -s
#               LET l_amount=0
#               CALL astt806_discount(g_sten_d[l_ac].sten001,g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten007,g_sten_d[l_ac].sten012)
#                  RETURNING  l_amount
#               LET g_sten_d[l_ac].sten005=l_amount
#               DISPLAY BY NAME g_sten_d[l_ac].sten005
               #160512-00003#24 -e
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten004
            #add-point:ON CHANGE sten004 name="input.g.page1.sten004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten006
            #add-point:BEFORE FIELD sten006 name="input.b.page1.sten006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten006
            
            #add-point:AFTER FIELD sten006 name="input.a.page1.sten006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten006
            #add-point:ON CHANGE sten006 name="input.g.page1.sten006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten007
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten_d[l_ac].sten007,"0","0","","","azz-00079",1) THEN
               NEXT FIELD sten007
            END IF 
 
 
 
            #add-point:AFTER FIELD sten007 name="input.a.page1.sten007"
#            IF NOT cl_null(g_sten_d[l_ac].sten007) THEN 
#               LET l_amount=0
#               CALL astt806_discount(g_sten_d[l_ac].sten001,g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten007,g_sten_d[l_ac].sten012)
#                  RETURNING  l_amount
#               LET g_sten_d[l_ac].sten005=l_amount
#               DISPLAY BY NAME g_sten_d[l_ac].sten005
#            END IF 

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten007
            #add-point:BEFORE FIELD sten007 name="input.b.page1.sten007"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten007
            #add-point:ON CHANGE sten007 name="input.g.page1.sten007"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten012
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten_d[l_ac].sten012,"0","1","","","azz-00079",1) THEN
               NEXT FIELD sten012
            END IF 
 
 
 
            #add-point:AFTER FIELD sten012 name="input.a.page1.sten012"
#            IF NOT cl_null(g_sten_d[l_ac].sten012) THEN 
#  
#               LET l_amount=0
#               CALL astt806_discount(g_sten_d[l_ac].sten001,g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten007,g_sten_d[l_ac].sten012)
#                  RETURNING  l_amount
#               LET g_sten_d[l_ac].sten005=l_amount
#               DISPLAY BY NAME g_sten_d[l_ac].sten005
#            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten012
            #add-point:BEFORE FIELD sten012 name="input.b.page1.sten012"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten012
            #add-point:ON CHANGE sten012 name="input.g.page1.sten012"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten005
            #add-point:BEFORE FIELD sten005 name="input.b.page1.sten005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten005
            
            #add-point:AFTER FIELD sten005 name="input.a.page1.sten005"
            IF NOT cl_null(g_sten_d[l_ac].sten005) THEN
               IF g_sten_d[l_ac].sten005 = 0 THEN 
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = ""
                  LET g_errparam.code   = 'ast-00705' 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  LET g_sten_d[l_ac].sten005 = g_sten_d_t.sten005
               
                  NEXT FIELD sten005
               END IF 
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten005
            #add-point:ON CHANGE sten005 name="input.g.page1.sten005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten008
            #add-point:BEFORE FIELD sten008 name="input.b.page1.sten008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten008
            
            #add-point:AFTER FIELD sten008 name="input.a.page1.sten008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten008
            #add-point:ON CHANGE sten008 name="input.g.page1.sten008"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten009
            
            #add-point:AFTER FIELD sten009 name="input.a.page1.sten009"
            IF NOT cl_null(g_sten_d[l_ac].sten009) THEN
               
               IF NOT s_azzi650_chk_exist('2132',g_sten_d[l_ac].sten009) THEN
                  LET g_sten_d[l_ac].sten009 = g_sten_d_t.sten009
                  LET g_sten_d[l_ac].sten009_desc = ''
                  DISPLAY BY NAME g_sten_d[l_ac].sten009,g_sten_d[l_ac].sten009_desc
                  NEXT FIELD sten009
               END IF
            END IF
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten_d[l_ac].sten009
            LET g_ref_fields[2] = g_sten_d[l_ac].sten009
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2132' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten_d[l_ac].sten009_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten_d[l_ac].sten009_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten009
            #add-point:BEFORE FIELD sten009 name="input.b.page1.sten009"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten009
            #add-point:ON CHANGE sten009 name="input.g.page1.sten009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten010
            #add-point:BEFORE FIELD sten010 name="input.b.page1.sten010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten010
            
            #add-point:AFTER FIELD sten010 name="input.a.page1.sten010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten010
            #add-point:ON CHANGE sten010 name="input.g.page1.sten010"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD sten011
            #add-point:BEFORE FIELD sten011 name="input.b.page1.sten011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD sten011
            
            #add-point:AFTER FIELD sten011 name="input.a.page1.sten011"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE sten011
            #add-point:ON CHANGE sten011 name="input.g.page1.sten011"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenacti
            #add-point:BEFORE FIELD stenacti name="input.b.page1.stenacti"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenacti
            
            #add-point:AFTER FIELD stenacti name="input.a.page1.stenacti"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stenacti
            #add-point:ON CHANGE stenacti name="input.g.page1.stenacti"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stensite
            #add-point:BEFORE FIELD stensite name="input.b.page1.stensite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stensite
            
            #add-point:AFTER FIELD stensite name="input.a.page1.stensite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stensite
            #add-point:ON CHANGE stensite name="input.g.page1.stensite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stenunit
            #add-point:BEFORE FIELD stenunit name="input.b.page1.stenunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stenunit
            
            #add-point:AFTER FIELD stenunit name="input.a.page1.stenunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stenunit
            #add-point:ON CHANGE stenunit name="input.g.page1.stenunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page1.stenseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenseq
            #add-point:ON ACTION controlp INFIELD stenseq name="input.c.page1.stenseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten002
            #add-point:ON ACTION controlp INFIELD sten002 name="input.c.page1.sten002"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten_d[l_ac].sten002             #給予default值
            LET g_qryparam.default2 = "" #g_sten_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten_d[l_ac].sten002 = g_qryparam.return1              
            #LET g_sten_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten_d[l_ac].sten002 TO sten002              #
            #DISPLAY g_sten_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD sten002                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page1.sten001
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten001
            #add-point:ON ACTION controlp INFIELD sten001 name="input.c.page1.sten001"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten003
            #add-point:ON ACTION controlp INFIELD sten003 name="input.c.page1.sten003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten004
            #add-point:ON ACTION controlp INFIELD sten004 name="input.c.page1.sten004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten006
            #add-point:ON ACTION controlp INFIELD sten006 name="input.c.page1.sten006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten007
            #add-point:ON ACTION controlp INFIELD sten007 name="input.c.page1.sten007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten012
            #add-point:ON ACTION controlp INFIELD sten012 name="input.c.page1.sten012"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten005
            #add-point:ON ACTION controlp INFIELD sten005 name="input.c.page1.sten005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten008
            #add-point:ON ACTION controlp INFIELD sten008 name="input.c.page1.sten008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten009
            #add-point:ON ACTION controlp INFIELD sten009 name="input.c.page1.sten009"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten_d[l_ac].sten009             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "2132"

 
            CALL q_oocq002_4()                                #呼叫開窗
 
            LET g_sten_d[l_ac].sten009 = g_qryparam.return1              

            DISPLAY g_sten_d[l_ac].sten009 TO sten009              #

            NEXT FIELD sten009                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page1.sten010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten010
            #add-point:ON ACTION controlp INFIELD sten010 name="input.c.page1.sten010"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.sten011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD sten011
            #add-point:ON ACTION controlp INFIELD sten011 name="input.c.page1.sten011"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.stenacti
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenacti
            #add-point:ON ACTION controlp INFIELD stenacti name="input.c.page1.stenacti"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.stensite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stensite
            #add-point:ON ACTION controlp INFIELD stensite name="input.c.page1.stensite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.stenunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stenunit
            #add-point:ON ACTION controlp INFIELD stenunit name="input.c.page1.stenunit"
            
            #END add-point
 
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten_d[l_ac].* = g_sten_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_sten_d[l_ac].stenseq 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten_d[l_ac].* = g_sten_d_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               CALL astt806_sten_t_mask_restore('restore_mask_o')
      
               UPDATE sten_t SET (stendocno,stenseq,sten002,sten001,sten003,sten004,sten006,sten007, 
                   sten012,sten005,sten008,sten009,sten010,sten011,stenacti,stensite,stenunit) = (g_stem_m.stemdocno, 
                   g_sten_d[l_ac].stenseq,g_sten_d[l_ac].sten002,g_sten_d[l_ac].sten001,g_sten_d[l_ac].sten003, 
                   g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten006,g_sten_d[l_ac].sten007,g_sten_d[l_ac].sten012, 
                   g_sten_d[l_ac].sten005,g_sten_d[l_ac].sten008,g_sten_d[l_ac].sten009,g_sten_d[l_ac].sten010, 
                   g_sten_d[l_ac].sten011,g_sten_d[l_ac].stenacti,g_sten_d[l_ac].stensite,g_sten_d[l_ac].stenunit) 
 
                WHERE stenent = g_enterprise AND stendocno = g_stem_m.stemdocno 
 
                  AND stenseq = g_sten_d_t.stenseq #項次   
 
                  
               #add-point:單身修改中 name="input.body.m_update"
               
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten_d[l_ac].* = g_sten_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "sten_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten_d[l_ac].* = g_sten_d_t.*  
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()                   
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten_d[g_detail_idx].stenseq
               LET gs_keys_bak[2] = g_sten_d_t.stenseq
               CALL astt806_update_b('sten_t',gs_keys,gs_keys_bak,"'1'")
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL astt806_sten_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(g_sten_d[g_detail_idx].stenseq = g_sten_d_t.stenseq 
 
                  ) THEN
                  LET gs_keys[01] = g_stem_m.stemdocno
 
                  LET gs_keys[gs_keys.getLength()+1] = g_sten_d_t.stenseq
 
                  CALL astt806_key_update_b(gs_keys,'sten_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               LET l_discount = 'Y'
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            
            #end add-point
            CALL astt806_unlock_b("sten_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            IF l_discount = 'Y' THEN
               LET l_discount = 'N'
               CALL s_transaction_begin()
               CALL cl_err_collect_init()
               LET l_stke001= ''
               LET l_stke012= ''
               LET l_stke042= ''               
               LET l_sql = "SELECT stke001,stke012,stke042 FROM stke_t WHERE stkeent = ",g_enterprise," AND stkedocno = '",g_stem_m.stemdocno,"' "
               PREPARE astt806_stke_pre2 FROM l_sql
               DECLARE astt806_stke_cs2 CURSOR FOR astt806_stke_pre2
               FOREACH astt806_stke_cs2 INTO l_stke001,l_stke012,l_stke042
                  CALL s_astt806_stkh_insert(l_stke001,g_stem_m.stemdocno,g_stem_m.stem035) RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show()
                     CALL s_transaction_end('N','0')
                     EXIT DIALOG 
                  END IF
                  #产生费用日核算
                  CALL s_astt806_day_account('A',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show()
                     CALL s_transaction_end('N','0')
                     EXIT DIALOG 
                  END IF                 
                  #优惠的时候更新合同账单
                  CALL s_astt806_update_stkm_t(g_stem_m.stemdocno,'A',l_stke001) RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show()
                     CALL s_transaction_end('N','0')
                     EXIT DIALOG 
                  END IF 
               END FOREACH               
               CALL s_transaction_end('Y','0') 
               CALL astt806_b_fill() #單身填充
               CALL astt806_b_fill2('0') #單身填充                 
            END IF         

            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten_d[li_reproduce_target].* = g_sten_d[li_reproduce].*
 
               LET g_sten_d[li_reproduce_target].stenseq = NULL
 
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten_d.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
      INPUT ARRAY g_sten2_d FROM s_detail2.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_4)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body2.before_input2"
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten2_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL astt806_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'3',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten2_d.getLength()
            #add-point:資料輸入前 name="input.body2.before_input"
            
            #end add-point
            
         BEFORE INSERT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten2_d[l_ac].* TO NULL 
            INITIALIZE g_sten2_d_t.* TO NULL 
            INITIALIZE g_sten2_d_o.* TO NULL 
            #公用欄位給值(單身4)
            #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_sten2_d[l_ac].stkestus = 'N'
 
 
 
            #自定義預設值(單身4)
            
            #add-point:modify段before備份 name="input.body2.insert.before_bak"
            LET g_sten2_d[l_ac].stkedocdt = g_stem_m.stemdocdt
            #end add-point
            LET g_sten2_d_t.* = g_sten2_d[l_ac].*     #新輸入資料
            LET g_sten2_d_o.* = g_sten2_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body2.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten2_d[li_reproduce_target].* = g_sten2_d[li_reproduce].*
 
               LET g_sten2_d[li_reproduce_target].stke001 = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body2.before_insert"
            
            #end add-point  
 
         BEFORE ROW     
            #add-point:modify段before row2 name="input.body2.before_row2"
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET g_detail_idx_list[4] = l_ac
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_current_page = 4
            CALL astt806_b_fill2('3')
CALL astt806_b_fill2('4')
CALL astt806_b_fill2('5')
CALL astt806_b_fill2('6')
CALL astt806_b_fill2('7')
CALL astt806_b_fill2('8')
CALL astt806_b_fill2('9')
CALL astt806_b_fill2('10')
CALL astt806_b_fill2('11')
  
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten2_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten2_d[l_ac].stke001 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten2_d_t.* = g_sten2_d[l_ac].*  #BACKUP
               LET g_sten2_d_o.* = g_sten2_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body2.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stke_t","'4'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl2 INTO g_sten2_d[l_ac].stkeunit,g_sten2_d[l_ac].stkesite,g_sten2_d[l_ac].stkedocdt, 
                      g_sten2_d[l_ac].stke001,g_sten2_d[l_ac].stke000,g_sten2_d[l_ac].stke002,g_sten2_d[l_ac].stke003, 
                      g_sten2_d[l_ac].stke004,g_sten2_d[l_ac].stke005,g_sten2_d[l_ac].stke006,g_sten2_d[l_ac].stke007, 
                      g_sten2_d[l_ac].stke008,g_sten2_d[l_ac].stke009,g_sten2_d[l_ac].stke010,g_sten2_d[l_ac].stke011, 
                      g_sten2_d[l_ac].stke012,g_sten2_d[l_ac].stke013,g_sten2_d[l_ac].stke014,g_sten2_d[l_ac].stke015, 
                      g_sten2_d[l_ac].stke016,g_sten2_d[l_ac].stke017,g_sten2_d[l_ac].stke018,g_sten2_d[l_ac].stke019, 
                      g_sten2_d[l_ac].stke020,g_sten2_d[l_ac].stke021,g_sten2_d[l_ac].stke022,g_sten2_d[l_ac].stke023, 
                      g_sten2_d[l_ac].stke024,g_sten2_d[l_ac].stke025,g_sten2_d[l_ac].stke026,g_sten2_d[l_ac].stke028, 
                      g_sten2_d[l_ac].stke029,g_sten2_d[l_ac].stke030,g_sten2_d[l_ac].stke031,g_sten2_d[l_ac].stke032, 
                      g_sten2_d[l_ac].stke033,g_sten2_d[l_ac].stke034,g_sten2_d[l_ac].stke035,g_sten2_d[l_ac].stke036, 
                      g_sten2_d[l_ac].stke037,g_sten2_d[l_ac].stke038,g_sten2_d[l_ac].stke039,g_sten2_d[l_ac].stke040, 
                      g_sten2_d[l_ac].stke041,g_sten2_d[l_ac].stke042,g_sten2_d[l_ac].stke043,g_sten2_d[l_ac].stke044, 
                      g_sten2_d[l_ac].stke045,g_sten2_d[l_ac].stke046,g_sten2_d[l_ac].stke047,g_sten2_d[l_ac].stke048, 
                      g_sten2_d[l_ac].stke049,g_sten2_d[l_ac].stke050,g_sten2_d[l_ac].stke051,g_sten2_d[l_ac].stke052, 
                      g_sten2_d[l_ac].stke053,g_sten2_d[l_ac].stke200,g_sten2_d[l_ac].stke223,g_sten2_d[l_ac].stke224, 
                      g_sten2_d[l_ac].stke225,g_sten2_d[l_ac].stkestus
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE  
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten2_d_mask_o[l_ac].* =  g_sten2_d[l_ac].*
                  CALL astt806_stke_t_mask()
                  LET g_sten2_d_mask_n[l_ac].* =  g_sten2_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body2.before_row"
            CALL astt806_b_fill2('12')
            CALL astt806_b_fill2('14')
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body2.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body2.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身4刪除前 name="input.body2.b_delete"
               
               #end add-point    
                  
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_stem_m.stemdocno
               LET gs_keys[gs_keys.getLength()+1] = g_sten2_d_t.stke001
            
               #刪除同層單身
               IF NOT astt806_delete_b('stke_t',gs_keys,"'4'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT astt806_key_delete_b(gs_keys,'stke_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身4刪除中 name="input.body2.m_delete"
               
               #end add-point    
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
 
               LET g_rec_b = g_rec_b-1
               #add-point:單身4刪除後 name="input.body2.a_delete"
               
               #end add-point
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body2.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten2_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身4新增前 name="input.body2.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stke_t 
             WHERE stkeent = g_enterprise AND stkedocno = g_stem_m.stemdocno
               AND stke001 = g_sten2_d[l_ac].stke001
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身4新增前 name="input.body2.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               CALL astt806_insert_b('stke_t',gs_keys,"'4'")
                           
               #add-point:單身新增後4 name="input.body2.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body2.after_insert"
               IF NOT cl_null(g_sten2_d[l_ac].stke001) THEN
                  IF g_stem_m.stem035 = '1' THEN               
                     IF cl_ask_confirm('ast-00831') THEN 
                        LET l_choice = '1'
                     ELSE
                        LET l_choice = '2'
                     END IF
                  END IF   
                  IF NOT astt806_stke001_genb(l_choice) THEN
                     #INITIALIZE g_sten_d[l_ac].* TO NULL
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF
               END IF
               #CALL s_transaction_end('Y','0')  
               CALL cl_err_collect_init()
               LET l_stke001= ''
               LET l_stke011= ''
               LET l_stke012= ''
               LET l_stke042= '' 
               LET l_stke043= ''
               SELECT stke001,stke011,stke012,stke042,stke043
                 INTO l_stke001,l_stke011,l_stke012,l_stke042,l_stke043
                 FROM stke_t 
                WHERE stkeent = g_enterprise
                  AND stkedocno = g_stem_m.stemdocno
                  AND stke001 = g_sten2_d[l_ac].stke001
               #CALL s_transaction_begin()            
               #新增或者面积变更续签的时候               
               IF g_stem_m.stem035 = '1' THEN 
                  #产生场地信息
                  CALL s_astt806_stkj_insert(l_stke001,g_stem_m.stemdocno) RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF 
               END IF
               #产生账期
               IF g_stem_m.stem035 = '1' OR g_stem_m.stem035 = '2'  THEN   
                  IF NOT s_astt806_upd_stko(l_stke001,g_stem_m.stemdocno) THEN
                      CALL cl_err_collect_show() 
                      CALL s_transaction_end('N','0')
                      CANCEL INSERT
                  END IF
               END IF                  
               #优惠变更
               IF g_stem_m.stem035 = '3' THEN                  
                  CALL s_astt806_stkh_insert(l_stke001,g_stem_m.stemdocno,g_stem_m.stem035) RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF
                  #产生费用日核算
                  CALL s_astt806_day_account('A',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF                 
                  #优惠的时候更新合同账单
                  CALL s_astt806_update_stkm_t(g_stem_m.stemdocno,'A',l_stke001) RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF 
               END IF
               #延期
               IF g_stem_m.stem035 = '2' THEN                  
                  #重取标准
                  CALL s_astt806_refetch_standard('B',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF                  
                  #产生费用日核算
                  INITIALIZE l_stje043,l_stje012,l_sdate TO NULL
                  SELECT stje043,stje012 INTO l_stje043,l_stje012
                    FROM stje_t
                   WHERE stjeent = g_enterprise
                     AND stje001 = l_stke001
                  IF l_stje043 IS NOT NULL THEN
                     LET l_sdate = l_stje043
                  ELSE
                     LET l_sdate = l_stje012
                  END IF
                  CALL s_astt806_day_account('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF                 
                  #产生合同账单                  
                  CALL s_astt806_produce_period('B',g_stem_m.stemdocno,l_sdate+1,l_stke043,l_sdate+1,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF  
               END IF                              
               #续签单头录入后自动产生单身（固定费用和变动费用不自动从合同主档带）：先提示是否重取标准，
               #是从合同开始~结束日期重新取标准费用带出单身；
               #否，从原合同带出 （一次性的费用不自动带出）
               IF g_stem_m.stem035 = '1' THEN               
                  IF l_choice = '1' THEN 
                     CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
                     IF NOT l_success THEN
                        CALL cl_err_collect_show() 
                        CALL s_transaction_end('N','0')
                        CANCEL INSERT
                     END IF
                  ELSE   
                     #如果场地发生变化，提示只能重取标准
                     LET l_cnt = 0
                     SELECT COUNT(*) INTO l_cnt
                       FROM stkj_t,stjj_t
                      WHERE stkjent = g_enterprise
                        AND stkjdocno = g_stem_m.stemdocno
                        AND stkjent = stjjent 
                        AND stkj001 = stjj001
                        AND stjj001 = l_stke001
                        AND stkj002 <> stjj002
                        AND stkjseq = stjjseq
                     IF l_cnt > 0 THEN
                        CALL cl_ask_confirm3("ast-00832","")
                        CALL s_astt806_refetch_standard('R',g_stem_m.stemdocno,l_stke001)  RETURNING l_success
                        IF NOT l_success THEN
                           CALL cl_err_collect_show() 
                           CALL s_transaction_end('N','0')
                           CANCEL INSERT
                        END IF
                        #从合同主档带出非标准的
                        CALL s_astt806_stkf_get('1',l_stke001,g_stem_m.stemdocno) RETURNING l_success
                        IF NOT l_success THEN
                           CALL cl_err_collect_show() 
                           CALL s_transaction_end('N','0')
                           CANCEL INSERT
                        END IF
                     ELSE                     
                        #从合同主档带值
                        CALL s_astt806_stkf_get('2',l_stke001,g_stem_m.stemdocno) RETURNING l_success
                        IF NOT l_success THEN
                           CALL cl_err_collect_show() 
                           CALL s_transaction_end('N','0')
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #产生费用日核算
                  CALL s_astt806_day_account('R',g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF
                  #新增定义账期
                  CALL s_astt806_stki_insert(l_stke001,g_stem_m.stemdocno) RETURNING l_success                      
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF 
                  #产生合同账单                  
                  CALL s_astt806_produce_period('R',g_stem_m.stemdocno,l_stke011,l_stke012,l_stke042,l_stke001)  RETURNING l_success
                  IF NOT l_success THEN
                     CALL cl_err_collect_show() 
                     CALL s_transaction_end('N','0')
                     CANCEL INSERT
                  END IF           
                     
               END IF                                              
               CALL cl_err_collect_show() 
               CALL astt806_b_fill2('3')
               CALL astt806_b_fill2('4')
               CALL astt806_b_fill2('5')
               CALL astt806_b_fill2('6')
               CALL astt806_b_fill2('7')
               CALL astt806_b_fill2('8')
               CALL astt806_b_fill2('9')
               CALL astt806_b_fill2('10')
               CALL astt806_b_fill2('11')
               CALL astt806_b_fill2('12')
               CALL astt806_b_fill2('14')                              
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten2_d[l_ac].* = g_sten2_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten2_d[l_ac].* = g_sten2_d_t.*
            ELSE
               #add-point:單身page4修改前 name="input.body2.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身4)
               
               #將遮罩欄位還原
               CALL astt806_stke_t_mask_restore('restore_mask_o')
                              
               UPDATE stke_t SET (stkedocno,stkeunit,stkesite,stkedocdt,stke001,stke000,stke002,stke003, 
                   stke004,stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014, 
                   stke015,stke016,stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025, 
                   stke026,stke028,stke029,stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037, 
                   stke038,stke039,stke040,stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048, 
                   stke049,stke050,stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus) = (g_stem_m.stemdocno, 
                   g_sten2_d[l_ac].stkeunit,g_sten2_d[l_ac].stkesite,g_sten2_d[l_ac].stkedocdt,g_sten2_d[l_ac].stke001, 
                   g_sten2_d[l_ac].stke000,g_sten2_d[l_ac].stke002,g_sten2_d[l_ac].stke003,g_sten2_d[l_ac].stke004, 
                   g_sten2_d[l_ac].stke005,g_sten2_d[l_ac].stke006,g_sten2_d[l_ac].stke007,g_sten2_d[l_ac].stke008, 
                   g_sten2_d[l_ac].stke009,g_sten2_d[l_ac].stke010,g_sten2_d[l_ac].stke011,g_sten2_d[l_ac].stke012, 
                   g_sten2_d[l_ac].stke013,g_sten2_d[l_ac].stke014,g_sten2_d[l_ac].stke015,g_sten2_d[l_ac].stke016, 
                   g_sten2_d[l_ac].stke017,g_sten2_d[l_ac].stke018,g_sten2_d[l_ac].stke019,g_sten2_d[l_ac].stke020, 
                   g_sten2_d[l_ac].stke021,g_sten2_d[l_ac].stke022,g_sten2_d[l_ac].stke023,g_sten2_d[l_ac].stke024, 
                   g_sten2_d[l_ac].stke025,g_sten2_d[l_ac].stke026,g_sten2_d[l_ac].stke028,g_sten2_d[l_ac].stke029, 
                   g_sten2_d[l_ac].stke030,g_sten2_d[l_ac].stke031,g_sten2_d[l_ac].stke032,g_sten2_d[l_ac].stke033, 
                   g_sten2_d[l_ac].stke034,g_sten2_d[l_ac].stke035,g_sten2_d[l_ac].stke036,g_sten2_d[l_ac].stke037, 
                   g_sten2_d[l_ac].stke038,g_sten2_d[l_ac].stke039,g_sten2_d[l_ac].stke040,g_sten2_d[l_ac].stke041, 
                   g_sten2_d[l_ac].stke042,g_sten2_d[l_ac].stke043,g_sten2_d[l_ac].stke044,g_sten2_d[l_ac].stke045, 
                   g_sten2_d[l_ac].stke046,g_sten2_d[l_ac].stke047,g_sten2_d[l_ac].stke048,g_sten2_d[l_ac].stke049, 
                   g_sten2_d[l_ac].stke050,g_sten2_d[l_ac].stke051,g_sten2_d[l_ac].stke052,g_sten2_d[l_ac].stke053, 
                   g_sten2_d[l_ac].stke200,g_sten2_d[l_ac].stke223,g_sten2_d[l_ac].stke224,g_sten2_d[l_ac].stke225, 
                   g_sten2_d[l_ac].stkestus) #自訂欄位頁簽
                WHERE stkeent = g_enterprise AND stkedocno = g_stem_m.stemdocno
                  AND stke001 = g_sten2_d_t.stke001 #項次 
                  
               #add-point:單身page4修改中 name="input.body2.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten2_d[l_ac].* = g_sten2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stke_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten2_d[l_ac].* = g_sten2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d_t.stke001
               CALL astt806_update_b('stke_t',gs_keys,gs_keys_bak,"'4'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stke_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT (g_sten2_d[g_detail_idx].stke001 = g_sten2_d_t.stke001 
                  ) THEN
                  LET gs_keys[01] = g_stem_m.stemdocno
                  LET gs_keys[gs_keys.getLength()+1] = g_sten2_d_t.stke001
                  CALL astt806_key_update_b(gs_keys,'stke_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten2_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten2_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page4修改後 name="input.body2.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkeunit
            #add-point:BEFORE FIELD stkeunit name="input.b.page2.stkeunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkeunit
            
            #add-point:AFTER FIELD stkeunit name="input.a.page2.stkeunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkeunit
            #add-point:ON CHANGE stkeunit name="input.g.page2.stkeunit"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkesite
            
            #add-point:AFTER FIELD stkesite name="input.a.page2.stkesite"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stkesite
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stkesite_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stkesite_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkesite
            #add-point:BEFORE FIELD stkesite name="input.b.page2.stkesite"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkesite
            #add-point:ON CHANGE stkesite name="input.g.page2.stkesite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkedocdt
            #add-point:BEFORE FIELD stkedocdt name="input.b.page2.stkedocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkedocdt
            
            #add-point:AFTER FIELD stkedocdt name="input.a.page2.stkedocdt"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkedocdt
            #add-point:ON CHANGE stkedocdt name="input.g.page2.stkedocdt"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke001
            
            #add-point:AFTER FIELD stke001 name="input.a.page2.stke001"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d_t.stke001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stke_t WHERE "||"stkeent = '" ||g_enterprise|| "' AND "||"stkedocno = '"||g_stem_m.stemdocno ||"' AND "|| "stke001 = '"||g_sten2_d[g_detail_idx].stke001 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            IF (g_sten2_d[g_detail_idx].stke001 != g_sten2_d_t.stke001 AND g_sten2_d_t.stke001 IS NOT NULL) OR g_sten2_d_t.stke001 IS NULL THEN 
               IF NOT cl_null(g_sten2_d[l_ac].stke001) THEN 
                  IF NOT astt806_stke001_chk(g_sten2_d[l_ac].stke001) THEN
                     LET g_sten2_d[l_ac].stke001 = g_sten2_d_t.stke001
                     NEXT FIELD stke001
                  END IF
                  IF NOT s_astt805_chk_stem('',g_sten2_d[l_ac].stke001) THEN
                     LET g_sten2_d[l_ac].stke001 = g_sten2_d_t.stke001
                     NEXT FIELD stke001
                  END IF
                  CALL astt806_stke001_other()
               END IF   
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke001
            #add-point:BEFORE FIELD stke001 name="input.b.page2.stke001"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke001
            #add-point:ON CHANGE stke001 name="input.g.page2.stke001"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke000
            #add-point:BEFORE FIELD stke000 name="input.b.page2.stke000"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke000
            
            #add-point:AFTER FIELD stke000 name="input.a.page2.stke000"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke000
            #add-point:ON CHANGE stke000 name="input.g.page2.stke000"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke002
            #add-point:BEFORE FIELD stke002 name="input.b.page2.stke002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke002
            
            #add-point:AFTER FIELD stke002 name="input.a.page2.stke002"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke002
            #add-point:ON CHANGE stke002 name="input.g.page2.stke002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke003
            
            #add-point:AFTER FIELD stke003 name="input.a.page2.stke003"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke003
            CALL ap_ref_array2(g_ref_fields,"SELECT sthal003 FROM sthal_t WHERE sthalent='"||g_enterprise||"' AND sthal001=? AND sthal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke003_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke003_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke003
            #add-point:BEFORE FIELD stke003 name="input.b.page2.stke003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke003
            #add-point:ON CHANGE stke003 name="input.g.page2.stke003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke004
            #add-point:BEFORE FIELD stke004 name="input.b.page2.stke004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke004
            
            #add-point:AFTER FIELD stke004 name="input.a.page2.stke004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke004
            #add-point:ON CHANGE stke004 name="input.g.page2.stke004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke005
            #add-point:BEFORE FIELD stke005 name="input.b.page2.stke005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke005
            
            #add-point:AFTER FIELD stke005 name="input.a.page2.stke005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke005
            #add-point:ON CHANGE stke005 name="input.g.page2.stke005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke006
            #add-point:BEFORE FIELD stke006 name="input.b.page2.stke006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke006
            
            #add-point:AFTER FIELD stke006 name="input.a.page2.stke006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke006
            #add-point:ON CHANGE stke006 name="input.g.page2.stke006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke007
            
            #add-point:AFTER FIELD stke007 name="input.a.page2.stke007"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke007
            CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke007_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke007_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke007
            #add-point:BEFORE FIELD stke007 name="input.b.page2.stke007"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke007
            #add-point:ON CHANGE stke007 name="input.g.page2.stke007"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke008
            
            #add-point:AFTER FIELD stke008 name="input.a.page2.stke008"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke008
            CALL ap_ref_array2(g_ref_fields,"SELECT mhbel003 FROM mhbel_t WHERE mhbelent='"||g_enterprise||"' AND mhbel001=? AND mhbel002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke008_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke008_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke008
            #add-point:BEFORE FIELD stke008 name="input.b.page2.stke008"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke008
            #add-point:ON CHANGE stke008 name="input.g.page2.stke008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke009
            #add-point:BEFORE FIELD stke009 name="input.b.page2.stke009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke009
            
            #add-point:AFTER FIELD stke009 name="input.a.page2.stke009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke009
            #add-point:ON CHANGE stke009 name="input.g.page2.stke009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke010
            #add-point:BEFORE FIELD stke010 name="input.b.page2.stke010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke010
            
            #add-point:AFTER FIELD stke010 name="input.a.page2.stke010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke010
            #add-point:ON CHANGE stke010 name="input.g.page2.stke010"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke011
            #add-point:BEFORE FIELD stke011 name="input.b.page2.stke011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke011
            
            #add-point:AFTER FIELD stke011 name="input.a.page2.stke011"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke011
            #add-point:ON CHANGE stke011 name="input.g.page2.stke011"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke012
            #add-point:BEFORE FIELD stke012 name="input.b.page2.stke012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke012
            
            #add-point:AFTER FIELD stke012 name="input.a.page2.stke012"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke012
            #add-point:ON CHANGE stke012 name="input.g.page2.stke012"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke013
            #add-point:BEFORE FIELD stke013 name="input.b.page2.stke013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke013
            
            #add-point:AFTER FIELD stke013 name="input.a.page2.stke013"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke013
            #add-point:ON CHANGE stke013 name="input.g.page2.stke013"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke014
            #add-point:BEFORE FIELD stke014 name="input.b.page2.stke014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke014
            
            #add-point:AFTER FIELD stke014 name="input.a.page2.stke014"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke014
            #add-point:ON CHANGE stke014 name="input.g.page2.stke014"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke015
            #add-point:BEFORE FIELD stke015 name="input.b.page2.stke015"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke015
            
            #add-point:AFTER FIELD stke015 name="input.a.page2.stke015"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke015
            #add-point:ON CHANGE stke015 name="input.g.page2.stke015"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke016
            #add-point:BEFORE FIELD stke016 name="input.b.page2.stke016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke016
            
            #add-point:AFTER FIELD stke016 name="input.a.page2.stke016"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke016
            #add-point:ON CHANGE stke016 name="input.g.page2.stke016"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke017
            
            #add-point:AFTER FIELD stke017 name="input.a.page2.stke017"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke017
            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke017_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke017_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke017
            #add-point:BEFORE FIELD stke017 name="input.b.page2.stke017"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke017
            #add-point:ON CHANGE stke017 name="input.g.page2.stke017"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke018
            
            #add-point:AFTER FIELD stke018 name="input.a.page2.stke018"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke018
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke018_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke018_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke018
            #add-point:BEFORE FIELD stke018 name="input.b.page2.stke018"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke018
            #add-point:ON CHANGE stke018 name="input.g.page2.stke018"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke019
            
            #add-point:AFTER FIELD stke019 name="input.a.page2.stke019"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
            CALL ap_ref_array2(g_ref_fields,"SELECT mhaal003 FROM mhaal_t WHERE mhaalent='"||g_enterprise||"' AND mhaal001=? AND mhaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke019_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke019_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke019
            #add-point:BEFORE FIELD stke019 name="input.b.page2.stke019"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke019
            #add-point:ON CHANGE stke019 name="input.g.page2.stke019"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke020
            
            #add-point:AFTER FIELD stke020 name="input.a.page2.stke020"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
            LET g_ref_fields[2] = g_sten2_d[l_ac].stke020
            CALL ap_ref_array2(g_ref_fields,"SELECT mhabl004 FROM mhabl_t WHERE mhablent='"||g_enterprise||"' AND mhabl001=? AND mhabl002=? AND mhabl003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke020_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke020_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke020
            #add-point:BEFORE FIELD stke020 name="input.b.page2.stke020"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke020
            #add-point:ON CHANGE stke020 name="input.g.page2.stke020"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke021
            
            #add-point:AFTER FIELD stke021 name="input.a.page2.stke021"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
            LET g_ref_fields[2] = g_sten2_d[l_ac].stke020
            LET g_ref_fields[3] = g_sten2_d[l_ac].stke021
            CALL ap_ref_array2(g_ref_fields,"SELECT mhacl005 FROM mhacl_t WHERE mhaclent='"||g_enterprise||"' AND mhacl001=? AND mhacl002=? AND mhacl003=? AND mhacl004='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke021_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke021_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke021
            #add-point:BEFORE FIELD stke021 name="input.b.page2.stke021"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke021
            #add-point:ON CHANGE stke021 name="input.g.page2.stke021"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke022
            
            #add-point:AFTER FIELD stke022 name="input.a.page2.stke022"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke022
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2144' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke022_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke022_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke022
            #add-point:BEFORE FIELD stke022 name="input.b.page2.stke022"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke022
            #add-point:ON CHANGE stke022 name="input.g.page2.stke022"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke023
            #add-point:BEFORE FIELD stke023 name="input.b.page2.stke023"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke023
            
            #add-point:AFTER FIELD stke023 name="input.a.page2.stke023"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke023
            #add-point:ON CHANGE stke023 name="input.g.page2.stke023"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke024
            #add-point:BEFORE FIELD stke024 name="input.b.page2.stke024"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke024
            
            #add-point:AFTER FIELD stke024 name="input.a.page2.stke024"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke024
            #add-point:ON CHANGE stke024 name="input.g.page2.stke024"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke025
            #add-point:BEFORE FIELD stke025 name="input.b.page2.stke025"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke025
            
            #add-point:AFTER FIELD stke025 name="input.a.page2.stke025"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke025
            #add-point:ON CHANGE stke025 name="input.g.page2.stke025"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke026
            #add-point:BEFORE FIELD stke026 name="input.b.page2.stke026"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke026
            
            #add-point:AFTER FIELD stke026 name="input.a.page2.stke026"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke026
            #add-point:ON CHANGE stke026 name="input.g.page2.stke026"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke028
            
            #add-point:AFTER FIELD stke028 name="input.a.page2.stke028"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke028
            CALL ap_ref_array2(g_ref_fields,"SELECT rtaxl003 FROM rtaxl_t WHERE rtaxlent='"||g_enterprise||"' AND rtaxl001=? AND rtaxl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke028_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke028_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke028
            #add-point:BEFORE FIELD stke028 name="input.b.page2.stke028"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke028
            #add-point:ON CHANGE stke028 name="input.g.page2.stke028"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke029
            
            #add-point:AFTER FIELD stke029 name="input.a.page2.stke029"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke029
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2002' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke029_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke029_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke029
            #add-point:BEFORE FIELD stke029 name="input.b.page2.stke029"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke029
            #add-point:ON CHANGE stke029 name="input.g.page2.stke029"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke030
            
            #add-point:AFTER FIELD stke030 name="input.a.page2.stke030"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke030
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke030_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke030_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke030
            #add-point:BEFORE FIELD stke030 name="input.b.page2.stke030"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke030
            #add-point:ON CHANGE stke030 name="input.g.page2.stke030"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke031
            
            #add-point:AFTER FIELD stke031 name="input.a.page2.stke031"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke031
            CALL ap_ref_array2(g_ref_fields,"SELECT staal003 FROM staal_t WHERE staalent='"||g_enterprise||"' AND staal001=? AND staal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke031_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke031_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke031
            #add-point:BEFORE FIELD stke031 name="input.b.page2.stke031"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke031
            #add-point:ON CHANGE stke031 name="input.g.page2.stke031"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke032
            
            #add-point:AFTER FIELD stke032 name="input.a.page2.stke032"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke032
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2060' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke032_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke032_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke032
            #add-point:BEFORE FIELD stke032 name="input.b.page2.stke032"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke032
            #add-point:ON CHANGE stke032 name="input.g.page2.stke032"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke033
            #add-point:BEFORE FIELD stke033 name="input.b.page2.stke033"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke033
            
            #add-point:AFTER FIELD stke033 name="input.a.page2.stke033"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke033
            #add-point:ON CHANGE stke033 name="input.g.page2.stke033"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke034
            
            #add-point:AFTER FIELD stke034 name="input.a.page2.stke034"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke034
            CALL ap_ref_array2(g_ref_fields,"SELECT ooibl004 FROM ooibl_t WHERE ooiblent='"||g_enterprise||"' AND ooibl002=? AND ooibl003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke034_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke034_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke034
            #add-point:BEFORE FIELD stke034 name="input.b.page2.stke034"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke034
            #add-point:ON CHANGE stke034 name="input.g.page2.stke034"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke035
            
            #add-point:AFTER FIELD stke035 name="input.a.page2.stke035"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke035
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='238' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke035_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke035_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke035
            #add-point:BEFORE FIELD stke035 name="input.b.page2.stke035"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke035
            #add-point:ON CHANGE stke035 name="input.g.page2.stke035"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke036
            
            #add-point:AFTER FIELD stke036 name="input.a.page2.stke036"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten2_d[l_ac].stke036
            CALL ap_ref_array2(g_ref_fields,"SELECT ooail003 FROM ooail_t WHERE ooailent='"||g_enterprise||"' AND ooail001=? AND ooail002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten2_d[l_ac].stke036_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten2_d[l_ac].stke036_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke036
            #add-point:BEFORE FIELD stke036 name="input.b.page2.stke036"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke036
            #add-point:ON CHANGE stke036 name="input.g.page2.stke036"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke037
            #add-point:BEFORE FIELD stke037 name="input.b.page2.stke037"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke037
            
            #add-point:AFTER FIELD stke037 name="input.a.page2.stke037"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke037
            #add-point:ON CHANGE stke037 name="input.g.page2.stke037"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke038
            
            #add-point:AFTER FIELD stke038 name="input.a.page2.stke038"
            SELECT oodbl004 INTO g_sten2_d[l_ac].stke038_desc
              FROM oodbl_t,ooef_t
             WHERE oodblent = g_enterprise
               AND oodbl001 = ooef019 
               AND oodbl002 = g_sten2_d[l_ac].stke038
               AND oodbl003 = g_dlang
               AND ooefent = g_enterprise
               AND ooef001 = g_sten2_d[l_ac].stkesite  
             DISPLAY BY NAME g_sten2_d[l_ac].stke038_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke038
            #add-point:BEFORE FIELD stke038 name="input.b.page2.stke038"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke038
            #add-point:ON CHANGE stke038 name="input.g.page2.stke038"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke039
            #add-point:BEFORE FIELD stke039 name="input.b.page2.stke039"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke039
            
            #add-point:AFTER FIELD stke039 name="input.a.page2.stke039"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke039
            #add-point:ON CHANGE stke039 name="input.g.page2.stke039"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke040
            #add-point:BEFORE FIELD stke040 name="input.b.page2.stke040"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke040
            
            #add-point:AFTER FIELD stke040 name="input.a.page2.stke040"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke040
            #add-point:ON CHANGE stke040 name="input.g.page2.stke040"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke041
            #add-point:BEFORE FIELD stke041 name="input.b.page2.stke041"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke041
            
            #add-point:AFTER FIELD stke041 name="input.a.page2.stke041"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke041
            #add-point:ON CHANGE stke041 name="input.g.page2.stke041"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke042
            #add-point:BEFORE FIELD stke042 name="input.b.page2.stke042"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke042
            
            #add-point:AFTER FIELD stke042 name="input.a.page2.stke042"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke042
            #add-point:ON CHANGE stke042 name="input.g.page2.stke042"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke043
            #add-point:BEFORE FIELD stke043 name="input.b.page2.stke043"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke043
            
            #add-point:AFTER FIELD stke043 name="input.a.page2.stke043"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke043
            #add-point:ON CHANGE stke043 name="input.g.page2.stke043"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke044
            #add-point:BEFORE FIELD stke044 name="input.b.page2.stke044"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke044
            
            #add-point:AFTER FIELD stke044 name="input.a.page2.stke044"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke044
            #add-point:ON CHANGE stke044 name="input.g.page2.stke044"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke045
            #add-point:BEFORE FIELD stke045 name="input.b.page2.stke045"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke045
            
            #add-point:AFTER FIELD stke045 name="input.a.page2.stke045"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke045
            #add-point:ON CHANGE stke045 name="input.g.page2.stke045"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke046
            #add-point:BEFORE FIELD stke046 name="input.b.page2.stke046"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke046
            
            #add-point:AFTER FIELD stke046 name="input.a.page2.stke046"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke046
            #add-point:ON CHANGE stke046 name="input.g.page2.stke046"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke047
            #add-point:BEFORE FIELD stke047 name="input.b.page2.stke047"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke047
            
            #add-point:AFTER FIELD stke047 name="input.a.page2.stke047"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke047
            #add-point:ON CHANGE stke047 name="input.g.page2.stke047"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke048
            #add-point:BEFORE FIELD stke048 name="input.b.page2.stke048"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke048
            
            #add-point:AFTER FIELD stke048 name="input.a.page2.stke048"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke048
            #add-point:ON CHANGE stke048 name="input.g.page2.stke048"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke049
            #add-point:BEFORE FIELD stke049 name="input.b.page2.stke049"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke049
            
            #add-point:AFTER FIELD stke049 name="input.a.page2.stke049"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke049
            #add-point:ON CHANGE stke049 name="input.g.page2.stke049"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke050
            #add-point:BEFORE FIELD stke050 name="input.b.page2.stke050"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke050
            
            #add-point:AFTER FIELD stke050 name="input.a.page2.stke050"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke050
            #add-point:ON CHANGE stke050 name="input.g.page2.stke050"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke051
            #add-point:BEFORE FIELD stke051 name="input.b.page2.stke051"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke051
            
            #add-point:AFTER FIELD stke051 name="input.a.page2.stke051"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke051
            #add-point:ON CHANGE stke051 name="input.g.page2.stke051"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke052
            #add-point:BEFORE FIELD stke052 name="input.b.page2.stke052"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke052
            
            #add-point:AFTER FIELD stke052 name="input.a.page2.stke052"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke052
            #add-point:ON CHANGE stke052 name="input.g.page2.stke052"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke053
            #add-point:BEFORE FIELD stke053 name="input.b.page2.stke053"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke053
            
            #add-point:AFTER FIELD stke053 name="input.a.page2.stke053"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke053
            #add-point:ON CHANGE stke053 name="input.g.page2.stke053"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke200
            #add-point:BEFORE FIELD stke200 name="input.b.page2.stke200"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke200
            
            #add-point:AFTER FIELD stke200 name="input.a.page2.stke200"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke200
            #add-point:ON CHANGE stke200 name="input.g.page2.stke200"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke223
            #add-point:BEFORE FIELD stke223 name="input.b.page2.stke223"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke223
            
            #add-point:AFTER FIELD stke223 name="input.a.page2.stke223"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke223
            #add-point:ON CHANGE stke223 name="input.g.page2.stke223"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke224
            #add-point:BEFORE FIELD stke224 name="input.b.page2.stke224"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke224
            
            #add-point:AFTER FIELD stke224 name="input.a.page2.stke224"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke224
            #add-point:ON CHANGE stke224 name="input.g.page2.stke224"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stke225
            #add-point:BEFORE FIELD stke225 name="input.b.page2.stke225"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stke225
            
            #add-point:AFTER FIELD stke225 name="input.a.page2.stke225"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stke225
            #add-point:ON CHANGE stke225 name="input.g.page2.stke225"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkestus
            #add-point:BEFORE FIELD stkestus name="input.b.page2.stkestus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkestus
            
            #add-point:AFTER FIELD stkestus name="input.a.page2.stkestus"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkestus
            #add-point:ON CHANGE stkestus name="input.g.page2.stkestus"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page2.stkeunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkeunit
            #add-point:ON ACTION controlp INFIELD stkeunit name="input.c.page2.stkeunit"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stkesite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkesite
            #add-point:ON ACTION controlp INFIELD stkesite name="input.c.page2.stkesite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stkedocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkedocdt
            #add-point:ON ACTION controlp INFIELD stkedocdt name="input.c.page2.stkedocdt"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke001
            #add-point:ON ACTION controlp INFIELD stke001 name="input.c.page2.stke001"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten2_d[l_ac].stke001             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #s
            #批量续签,延期
            IF g_stem_m.stem035 = '1' OR g_stem_m.stem035 = '2' THEN
               LET g_qryparam.where = " stje012 < '",g_stem_m.stem036,"' AND stjestus = 'Y' AND stje005 IN ('2','3','4','5') AND stjesite = '",g_stem_m.stemsite,"' "
            END IF
            #批量优惠变更
            IF g_stem_m.stem035 = '3' THEN
               LET g_qryparam.where = " stje012 >= '",g_stem_m.stem036,"' AND stje011 <= '",g_stem_m.stem036,"' AND stjestus = 'Y' AND stje005 IN ('2','3','4','5') AND stjesite = '",g_stem_m.stemsite,"'  "
            END IF
            IF g_qryparam.where IS NOT NULL THEN
               LET g_qryparam.where = g_qryparam.where," AND NOT EXISTS (SELECT 1 FROM stke_t,stem_t WHERE stement = stkeent AND stkedocno = stemdocno AND stkeent = stjeent AND stje001 = stke001 AND stemstus = 'N') "
            ELSE
               LET g_qryparam.where = " NOT EXISTS (SELECT 1 FROM stke_t,stem_t WHERE stement = stkeent AND stkedocno = stemdocno AND stkeent = stjeent AND stje001 = stke001 AND stemstus = 'N') "
            END IF
            CALL q_stje001()                                #呼叫開窗
 
            LET g_sten2_d[l_ac].stke001 = g_qryparam.return1              

            DISPLAY g_sten2_d[l_ac].stke001 TO stke001              #

            NEXT FIELD stke001                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page2.stke000
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke000
            #add-point:ON ACTION controlp INFIELD stke000 name="input.c.page2.stke000"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke002
            #add-point:ON ACTION controlp INFIELD stke002 name="input.c.page2.stke002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke003
            #add-point:ON ACTION controlp INFIELD stke003 name="input.c.page2.stke003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke004
            #add-point:ON ACTION controlp INFIELD stke004 name="input.c.page2.stke004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke005
            #add-point:ON ACTION controlp INFIELD stke005 name="input.c.page2.stke005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke006
            #add-point:ON ACTION controlp INFIELD stke006 name="input.c.page2.stke006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke007
            #add-point:ON ACTION controlp INFIELD stke007 name="input.c.page2.stke007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke008
            #add-point:ON ACTION controlp INFIELD stke008 name="input.c.page2.stke008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke009
            #add-point:ON ACTION controlp INFIELD stke009 name="input.c.page2.stke009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke010
            #add-point:ON ACTION controlp INFIELD stke010 name="input.c.page2.stke010"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke011
            #add-point:ON ACTION controlp INFIELD stke011 name="input.c.page2.stke011"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke012
            #add-point:ON ACTION controlp INFIELD stke012 name="input.c.page2.stke012"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke013
            #add-point:ON ACTION controlp INFIELD stke013 name="input.c.page2.stke013"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke014
            #add-point:ON ACTION controlp INFIELD stke014 name="input.c.page2.stke014"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke015
            #add-point:ON ACTION controlp INFIELD stke015 name="input.c.page2.stke015"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke016
            #add-point:ON ACTION controlp INFIELD stke016 name="input.c.page2.stke016"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke017
            #add-point:ON ACTION controlp INFIELD stke017 name="input.c.page2.stke017"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke018
            #add-point:ON ACTION controlp INFIELD stke018 name="input.c.page2.stke018"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke019
            #add-point:ON ACTION controlp INFIELD stke019 name="input.c.page2.stke019"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke020
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke020
            #add-point:ON ACTION controlp INFIELD stke020 name="input.c.page2.stke020"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke021
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke021
            #add-point:ON ACTION controlp INFIELD stke021 name="input.c.page2.stke021"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke022
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke022
            #add-point:ON ACTION controlp INFIELD stke022 name="input.c.page2.stke022"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke023
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke023
            #add-point:ON ACTION controlp INFIELD stke023 name="input.c.page2.stke023"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke024
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke024
            #add-point:ON ACTION controlp INFIELD stke024 name="input.c.page2.stke024"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke025
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke025
            #add-point:ON ACTION controlp INFIELD stke025 name="input.c.page2.stke025"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke026
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke026
            #add-point:ON ACTION controlp INFIELD stke026 name="input.c.page2.stke026"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke028
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke028
            #add-point:ON ACTION controlp INFIELD stke028 name="input.c.page2.stke028"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke029
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke029
            #add-point:ON ACTION controlp INFIELD stke029 name="input.c.page2.stke029"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke030
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke030
            #add-point:ON ACTION controlp INFIELD stke030 name="input.c.page2.stke030"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke031
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke031
            #add-point:ON ACTION controlp INFIELD stke031 name="input.c.page2.stke031"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke032
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke032
            #add-point:ON ACTION controlp INFIELD stke032 name="input.c.page2.stke032"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke033
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke033
            #add-point:ON ACTION controlp INFIELD stke033 name="input.c.page2.stke033"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke034
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke034
            #add-point:ON ACTION controlp INFIELD stke034 name="input.c.page2.stke034"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke035
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke035
            #add-point:ON ACTION controlp INFIELD stke035 name="input.c.page2.stke035"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke036
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke036
            #add-point:ON ACTION controlp INFIELD stke036 name="input.c.page2.stke036"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke037
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke037
            #add-point:ON ACTION controlp INFIELD stke037 name="input.c.page2.stke037"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke038
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke038
            #add-point:ON ACTION controlp INFIELD stke038 name="input.c.page2.stke038"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke039
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke039
            #add-point:ON ACTION controlp INFIELD stke039 name="input.c.page2.stke039"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke040
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke040
            #add-point:ON ACTION controlp INFIELD stke040 name="input.c.page2.stke040"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke041
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke041
            #add-point:ON ACTION controlp INFIELD stke041 name="input.c.page2.stke041"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke042
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke042
            #add-point:ON ACTION controlp INFIELD stke042 name="input.c.page2.stke042"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke043
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke043
            #add-point:ON ACTION controlp INFIELD stke043 name="input.c.page2.stke043"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke044
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke044
            #add-point:ON ACTION controlp INFIELD stke044 name="input.c.page2.stke044"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke045
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke045
            #add-point:ON ACTION controlp INFIELD stke045 name="input.c.page2.stke045"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke046
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke046
            #add-point:ON ACTION controlp INFIELD stke046 name="input.c.page2.stke046"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke047
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke047
            #add-point:ON ACTION controlp INFIELD stke047 name="input.c.page2.stke047"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke048
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke048
            #add-point:ON ACTION controlp INFIELD stke048 name="input.c.page2.stke048"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke049
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke049
            #add-point:ON ACTION controlp INFIELD stke049 name="input.c.page2.stke049"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke050
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke050
            #add-point:ON ACTION controlp INFIELD stke050 name="input.c.page2.stke050"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke051
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke051
            #add-point:ON ACTION controlp INFIELD stke051 name="input.c.page2.stke051"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke052
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke052
            #add-point:ON ACTION controlp INFIELD stke052 name="input.c.page2.stke052"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke053
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke053
            #add-point:ON ACTION controlp INFIELD stke053 name="input.c.page2.stke053"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke200
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke200
            #add-point:ON ACTION controlp INFIELD stke200 name="input.c.page2.stke200"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke223
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke223
            #add-point:ON ACTION controlp INFIELD stke223 name="input.c.page2.stke223"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke224
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke224
            #add-point:ON ACTION controlp INFIELD stke224 name="input.c.page2.stke224"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stke225
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stke225
            #add-point:ON ACTION controlp INFIELD stke225 name="input.c.page2.stke225"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.stkestus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkestus
            #add-point:ON ACTION controlp INFIELD stkestus name="input.c.page2.stkestus"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page4 after_row name="input.body2.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten2_d[l_ac].* = g_sten2_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stke_t","'4'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page4 after_row2 name="input.body2.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body2.after_input"
            
            #end add-point   
    
         ON ACTION controlo
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten2_d[li_reproduce_target].* = g_sten2_d[li_reproduce].*
 
               LET g_sten2_d[li_reproduce_target].stke001 = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten2_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten2_d.getLength()+1
            END IF
            
      END INPUT
 
      
      INPUT ARRAY g_sten15_d FROM s_detail15.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_2)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body15.before_input2"
            ACCEPT DIALOG
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten15_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'4',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten15_d.getLength()
            #add-point:資料輸入前 name="input.body15.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten15_d[l_ac].* TO NULL 
            INITIALIZE g_sten15_d_t.* TO NULL 
            INITIALIZE g_sten15_d_o.* TO NULL 
            #公用欄位給值(單身2)
            
            #自定義預設值(單身2)
            
            #add-point:modify段before備份 name="input.body15.insert.before_bak"
            
            #end add-point
            LET g_sten15_d_t.* = g_sten15_d[l_ac].*     #新輸入資料
            LET g_sten15_d_o.* = g_sten15_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body15.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten15_d[li_reproduce_target].* = g_sten15_d[li_reproduce].*
 
               LET g_sten15_d[li_reproduce_target].stknseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body15.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body15.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[2] = l_ac
            LET g_current_page = 2
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten15_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten15_d[l_ac].stknseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten15_d_t.* = g_sten15_d[l_ac].*  #BACKUP
               LET g_sten15_d_o.* = g_sten15_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body15.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkn_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl3 INTO g_sten15_d[l_ac].stknsite,g_sten15_d[l_ac].stknunit,g_sten15_d[l_ac].stknseq, 
                      g_sten15_d[l_ac].stkn002,g_sten15_d[l_ac].stkn003,g_sten15_d[l_ac].stkn004,g_sten15_d[l_ac].stkn005, 
                      g_sten15_d[l_ac].stkn006,g_sten15_d[l_ac].stkn007,g_sten15_d[l_ac].stkn008,g_sten15_d[l_ac].stkn009, 
                      g_sten15_d[l_ac].stkn010
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten15_d_mask_o[l_ac].* =  g_sten15_d[l_ac].*
                  CALL astt806_stkn_t_mask()
                  LET g_sten15_d_mask_n[l_ac].* =  g_sten15_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body15.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body15.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body15.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身2刪除前 name="input.body15.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten15_d_t.stknseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkn_t',gs_keys,"'2'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身2刪除中 name="input.body15.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身2刪除後 name="input.body15.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body15.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten15_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身2新增前 name="input.body15.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkn_t 
             WHERE stknent = g_enterprise AND stkndocno = g_stem_m.stemdocno AND stkn001 = g_sten2_d[g_detail_idx].stke001  
                 AND stknseq = g_sten15_d[g_detail_idx2].stknseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身2新增前 name="input.body15.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten15_d[g_detail_idx2].stknseq
               CALL astt806_insert_b('stkn_t',gs_keys,"'2'")
                           
               #add-point:單身新增後2 name="input.body15.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body15.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten15_d[l_ac].* = g_sten15_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl3
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten15_d[l_ac].* = g_sten15_d_t.*
            ELSE
               #add-point:單身page2修改前 name="input.body15.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身2)
               
               
               #將遮罩欄位還原
               CALL astt806_stkn_t_mask_restore('restore_mask_o')
               
               UPDATE stkn_t SET (stkndocno,stkn001,stknsite,stknunit,stknseq,stkn002,stkn003,stkn004, 
                   stkn005,stkn006,stkn007,stkn008,stkn009,stkn010) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten15_d[l_ac].stknsite,g_sten15_d[l_ac].stknunit,g_sten15_d[l_ac].stknseq,g_sten15_d[l_ac].stkn002, 
                   g_sten15_d[l_ac].stkn003,g_sten15_d[l_ac].stkn004,g_sten15_d[l_ac].stkn005,g_sten15_d[l_ac].stkn006, 
                   g_sten15_d[l_ac].stkn007,g_sten15_d[l_ac].stkn008,g_sten15_d[l_ac].stkn009,g_sten15_d[l_ac].stkn010)  
                   #自訂欄位頁簽
                WHERE stknent = g_enterprise AND stkndocno = g_stemdocno_t AND stkn001 = g_sten2_d[g_detail_idx].stke001  
                    AND stknseq = g_sten15_d_t.stknseq
                  
               #add-point:單身page2修改中 name="input.body15.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten15_d[l_ac].* = g_sten15_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkn_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten15_d[l_ac].* = g_sten15_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten15_d[g_detail_idx2].stknseq
               LET gs_keys_bak[3] = g_sten15_d_t.stknseq
               CALL astt806_update_b('stkn_t',gs_keys,gs_keys_bak,"'2'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkn_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten15_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten15_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page2修改後 name="input.body15.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stknsite
            #add-point:BEFORE FIELD stknsite name="input.b.page15.stknsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stknsite
            
            #add-point:AFTER FIELD stknsite name="input.a.page15.stknsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stknsite
            #add-point:ON CHANGE stknsite name="input.g.page15.stknsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stknunit
            #add-point:BEFORE FIELD stknunit name="input.b.page15.stknunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stknunit
            
            #add-point:AFTER FIELD stknunit name="input.a.page15.stknunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stknunit
            #add-point:ON CHANGE stknunit name="input.g.page15.stknunit"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stknseq
            #add-point:BEFORE FIELD stknseq name="input.b.page15.stknseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stknseq
            
            #add-point:AFTER FIELD stknseq name="input.a.page15.stknseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten15_d[g_detail_idx2].stknseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten15_d[g_detail_idx2].stknseq != g_sten15_d_t.stknseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkn_t WHERE "||"stknent = '" ||g_enterprise|| "' AND "||"stkndocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkn001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stknseq = '"||g_sten15_d[g_detail_idx2].stknseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stknseq
            #add-point:ON CHANGE stknseq name="input.g.page15.stknseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn002
            #add-point:BEFORE FIELD stkn002 name="input.b.page15.stkn002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn002
            
            #add-point:AFTER FIELD stkn002 name="input.a.page15.stkn002"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn002
            #add-point:ON CHANGE stkn002 name="input.g.page15.stkn002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn003
            #add-point:BEFORE FIELD stkn003 name="input.b.page15.stkn003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn003
            
            #add-point:AFTER FIELD stkn003 name="input.a.page15.stkn003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn003
            #add-point:ON CHANGE stkn003 name="input.g.page15.stkn003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn004
            #add-point:BEFORE FIELD stkn004 name="input.b.page15.stkn004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn004
            
            #add-point:AFTER FIELD stkn004 name="input.a.page15.stkn004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn004
            #add-point:ON CHANGE stkn004 name="input.g.page15.stkn004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn005
            #add-point:BEFORE FIELD stkn005 name="input.b.page15.stkn005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn005
            
            #add-point:AFTER FIELD stkn005 name="input.a.page15.stkn005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn005
            #add-point:ON CHANGE stkn005 name="input.g.page15.stkn005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn006
            #add-point:BEFORE FIELD stkn006 name="input.b.page15.stkn006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn006
            
            #add-point:AFTER FIELD stkn006 name="input.a.page15.stkn006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn006
            #add-point:ON CHANGE stkn006 name="input.g.page15.stkn006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn007
            #add-point:BEFORE FIELD stkn007 name="input.b.page15.stkn007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn007
            
            #add-point:AFTER FIELD stkn007 name="input.a.page15.stkn007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn007
            #add-point:ON CHANGE stkn007 name="input.g.page15.stkn007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn008
            #add-point:BEFORE FIELD stkn008 name="input.b.page15.stkn008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn008
            
            #add-point:AFTER FIELD stkn008 name="input.a.page15.stkn008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn008
            #add-point:ON CHANGE stkn008 name="input.g.page15.stkn008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn009
            #add-point:BEFORE FIELD stkn009 name="input.b.page15.stkn009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn009
            
            #add-point:AFTER FIELD stkn009 name="input.a.page15.stkn009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn009
            #add-point:ON CHANGE stkn009 name="input.g.page15.stkn009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkn010
            #add-point:BEFORE FIELD stkn010 name="input.b.page15.stkn010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkn010
            
            #add-point:AFTER FIELD stkn010 name="input.a.page15.stkn010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkn010
            #add-point:ON CHANGE stkn010 name="input.g.page15.stkn010"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page15.stknsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stknsite
            #add-point:ON ACTION controlp INFIELD stknsite name="input.c.page15.stknsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stknunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stknunit
            #add-point:ON ACTION controlp INFIELD stknunit name="input.c.page15.stknunit"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stknseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stknseq
            #add-point:ON ACTION controlp INFIELD stknseq name="input.c.page15.stknseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn002
            #add-point:ON ACTION controlp INFIELD stkn002 name="input.c.page15.stkn002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn003
            #add-point:ON ACTION controlp INFIELD stkn003 name="input.c.page15.stkn003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn004
            #add-point:ON ACTION controlp INFIELD stkn004 name="input.c.page15.stkn004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn005
            #add-point:ON ACTION controlp INFIELD stkn005 name="input.c.page15.stkn005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn006
            #add-point:ON ACTION controlp INFIELD stkn006 name="input.c.page15.stkn006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn007
            #add-point:ON ACTION controlp INFIELD stkn007 name="input.c.page15.stkn007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn008
            #add-point:ON ACTION controlp INFIELD stkn008 name="input.c.page15.stkn008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn009
            #add-point:ON ACTION controlp INFIELD stkn009 name="input.c.page15.stkn009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page15.stkn010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkn010
            #add-point:ON ACTION controlp INFIELD stkn010 name="input.c.page15.stkn010"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page2_after_row name="input.body15.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten15_d[l_ac].* = g_sten15_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl3
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkn_t","'2'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page2_after_row2 name="input.body15.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body15.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten15_d[li_reproduce_target].* = g_sten15_d[li_reproduce].*
 
               LET g_sten15_d[li_reproduce_target].stknseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten15_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten15_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten16_d FROM s_detail16.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_3)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body16.before_input2"
            ACCEPT DIALOG
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten16_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten16_d.getLength()
            #add-point:資料輸入前 name="input.body16.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten16_d[l_ac].* TO NULL 
            INITIALIZE g_sten16_d_t.* TO NULL 
            INITIALIZE g_sten16_d_o.* TO NULL 
            #公用欄位給值(單身3)
            
            #自定義預設值(單身3)
            
            #add-point:modify段before備份 name="input.body16.insert.before_bak"
            
            #end add-point
            LET g_sten16_d_t.* = g_sten16_d[l_ac].*     #新輸入資料
            LET g_sten16_d_o.* = g_sten16_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body16.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten16_d[li_reproduce_target].* = g_sten16_d[li_reproduce].*
 
               LET g_sten16_d[li_reproduce_target].stkoseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body16.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body16.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[3] = l_ac
            LET g_current_page = 3
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten16_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten16_d[l_ac].stkoseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten16_d_t.* = g_sten16_d[l_ac].*  #BACKUP
               LET g_sten16_d_o.* = g_sten16_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body16.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stko_t","'3'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl4 INTO g_sten16_d[l_ac].stkosite,g_sten16_d[l_ac].stkounit,g_sten16_d[l_ac].stkoseq, 
                      g_sten16_d[l_ac].stko002,g_sten16_d[l_ac].stko003,g_sten16_d[l_ac].stko004,g_sten16_d[l_ac].stko005, 
                      g_sten16_d[l_ac].stko006,g_sten16_d[l_ac].stko007
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten16_d_mask_o[l_ac].* =  g_sten16_d[l_ac].*
                  CALL astt806_stko_t_mask()
                  LET g_sten16_d_mask_n[l_ac].* =  g_sten16_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body16.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body16.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body16.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身3刪除前 name="input.body16.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten16_d_t.stkoseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stko_t',gs_keys,"'3'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身3刪除中 name="input.body16.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身3刪除後 name="input.body16.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body16.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten16_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身3新增前 name="input.body16.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stko_t 
             WHERE stkoent = g_enterprise AND stkodocno = g_stem_m.stemdocno AND stko001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkoseq = g_sten16_d[g_detail_idx2].stkoseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身3新增前 name="input.body16.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten16_d[g_detail_idx2].stkoseq
               CALL astt806_insert_b('stko_t',gs_keys,"'3'")
                           
               #add-point:單身新增後3 name="input.body16.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body16.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten16_d[l_ac].* = g_sten16_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl4
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten16_d[l_ac].* = g_sten16_d_t.*
            ELSE
               #add-point:單身page3修改前 name="input.body16.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身3)
               
               
               #將遮罩欄位還原
               CALL astt806_stko_t_mask_restore('restore_mask_o')
               
               UPDATE stko_t SET (stkodocno,stko001,stkosite,stkounit,stkoseq,stko002,stko003,stko004, 
                   stko005,stko006,stko007) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten16_d[l_ac].stkosite, 
                   g_sten16_d[l_ac].stkounit,g_sten16_d[l_ac].stkoseq,g_sten16_d[l_ac].stko002,g_sten16_d[l_ac].stko003, 
                   g_sten16_d[l_ac].stko004,g_sten16_d[l_ac].stko005,g_sten16_d[l_ac].stko006,g_sten16_d[l_ac].stko007)  
                   #自訂欄位頁簽
                WHERE stkoent = g_enterprise AND stkodocno = g_stemdocno_t AND stko001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkoseq = g_sten16_d_t.stkoseq
                  
               #add-point:單身page3修改中 name="input.body16.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten16_d[l_ac].* = g_sten16_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stko_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten16_d[l_ac].* = g_sten16_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten16_d[g_detail_idx2].stkoseq
               LET gs_keys_bak[3] = g_sten16_d_t.stkoseq
               CALL astt806_update_b('stko_t',gs_keys,gs_keys_bak,"'3'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stko_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten16_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten16_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page3修改後 name="input.body16.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkosite
            #add-point:BEFORE FIELD stkosite name="input.b.page16.stkosite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkosite
            
            #add-point:AFTER FIELD stkosite name="input.a.page16.stkosite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkosite
            #add-point:ON CHANGE stkosite name="input.g.page16.stkosite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkounit
            #add-point:BEFORE FIELD stkounit name="input.b.page16.stkounit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkounit
            
            #add-point:AFTER FIELD stkounit name="input.a.page16.stkounit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkounit
            #add-point:ON CHANGE stkounit name="input.g.page16.stkounit"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkoseq
            #add-point:BEFORE FIELD stkoseq name="input.b.page16.stkoseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkoseq
            
            #add-point:AFTER FIELD stkoseq name="input.a.page16.stkoseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten16_d[g_detail_idx2].stkoseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten16_d[g_detail_idx2].stkoseq != g_sten16_d_t.stkoseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stko_t WHERE "||"stkoent = '" ||g_enterprise|| "' AND "||"stkodocno = '"||g_stem_m.stemdocno ||"' AND "|| "stko001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkoseq = '"||g_sten16_d[g_detail_idx2].stkoseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkoseq
            #add-point:ON CHANGE stkoseq name="input.g.page16.stkoseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko002
            #add-point:BEFORE FIELD stko002 name="input.b.page16.stko002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko002
            
            #add-point:AFTER FIELD stko002 name="input.a.page16.stko002"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko002
            #add-point:ON CHANGE stko002 name="input.g.page16.stko002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko003
            #add-point:BEFORE FIELD stko003 name="input.b.page16.stko003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko003
            
            #add-point:AFTER FIELD stko003 name="input.a.page16.stko003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko003
            #add-point:ON CHANGE stko003 name="input.g.page16.stko003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko004
            #add-point:BEFORE FIELD stko004 name="input.b.page16.stko004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko004
            
            #add-point:AFTER FIELD stko004 name="input.a.page16.stko004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko004
            #add-point:ON CHANGE stko004 name="input.g.page16.stko004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko005
            #add-point:BEFORE FIELD stko005 name="input.b.page16.stko005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko005
            
            #add-point:AFTER FIELD stko005 name="input.a.page16.stko005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko005
            #add-point:ON CHANGE stko005 name="input.g.page16.stko005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko006
            #add-point:BEFORE FIELD stko006 name="input.b.page16.stko006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko006
            
            #add-point:AFTER FIELD stko006 name="input.a.page16.stko006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko006
            #add-point:ON CHANGE stko006 name="input.g.page16.stko006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stko007
            #add-point:BEFORE FIELD stko007 name="input.b.page16.stko007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stko007
            
            #add-point:AFTER FIELD stko007 name="input.a.page16.stko007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stko007
            #add-point:ON CHANGE stko007 name="input.g.page16.stko007"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page16.stkosite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkosite
            #add-point:ON ACTION controlp INFIELD stkosite name="input.c.page16.stkosite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stkounit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkounit
            #add-point:ON ACTION controlp INFIELD stkounit name="input.c.page16.stkounit"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stkoseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkoseq
            #add-point:ON ACTION controlp INFIELD stkoseq name="input.c.page16.stkoseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko002
            #add-point:ON ACTION controlp INFIELD stko002 name="input.c.page16.stko002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko003
            #add-point:ON ACTION controlp INFIELD stko003 name="input.c.page16.stko003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko004
            #add-point:ON ACTION controlp INFIELD stko004 name="input.c.page16.stko004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko005
            #add-point:ON ACTION controlp INFIELD stko005 name="input.c.page16.stko005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko006
            #add-point:ON ACTION controlp INFIELD stko006 name="input.c.page16.stko006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page16.stko007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stko007
            #add-point:ON ACTION controlp INFIELD stko007 name="input.c.page16.stko007"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page3_after_row name="input.body16.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten16_d[l_ac].* = g_sten16_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl4
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stko_t","'3'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page3_after_row2 name="input.body16.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body16.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten16_d[li_reproduce_target].* = g_sten16_d[li_reproduce].*
 
               LET g_sten16_d[li_reproduce_target].stkoseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten16_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten16_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten3_d FROM s_detail3.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_5)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body3.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten3_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'5',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten3_d.getLength()
            #add-point:資料輸入前 name="input.body3.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten3_d[l_ac].* TO NULL 
            INITIALIZE g_sten3_d_t.* TO NULL 
            INITIALIZE g_sten3_d_o.* TO NULL 
            #公用欄位給值(單身5)
            
            #自定義預設值(單身5)
                  LET g_sten3_d[l_ac].stkf017 = "0"
      LET g_sten3_d[l_ac].stkf020 = "Y"
 
            #add-point:modify段before備份 name="input.body3.insert.before_bak"
            SELECT MAX(stkfseq) INTO g_sten3_d[l_ac].stkfseq
              FROM stkf_t
             WHERE stkfent= g_enterprise
               AND stkfdocno= g_stem_m.stemdocno
               AND stkf001 = g_sten2_d[g_detail_idx].stke001
            IF cl_null(g_sten3_d[l_ac].stkfseq) THEN
               LET g_sten3_d[l_ac].stkfseq=1
            ELSE
               LET g_sten3_d[l_ac].stkfseq=g_sten3_d[l_ac].stkfseq+1
            END IF 
            LET g_sten3_d[l_ac].stkfunit = g_sten2_d[g_detail_idx].stkesite
            LET g_sten3_d[l_ac].stkfsite = g_sten2_d[g_detail_idx].stkesite
            LET g_sten3_d[l_ac].stkf025 = g_sten2_d[g_detail_idx].stke002
            #end add-point
            LET g_sten3_d_t.* = g_sten3_d[l_ac].*     #新輸入資料
            LET g_sten3_d_o.* = g_sten3_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body3.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten3_d[li_reproduce_target].* = g_sten3_d[li_reproduce].*
 
               LET g_sten3_d[li_reproduce_target].stkfseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body3.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body3.before_row2"
   
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[5] = l_ac
            LET g_current_page = 5
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten3_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten3_d[l_ac].stkfseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten3_d_t.* = g_sten3_d[l_ac].*  #BACKUP
               LET g_sten3_d_o.* = g_sten3_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body3.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkf_t","'5'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl5 INTO g_sten3_d[l_ac].stkfseq,g_sten3_d[l_ac].stkf002,g_sten3_d[l_ac].stkf003, 
                      g_sten3_d[l_ac].stkf021,g_sten3_d[l_ac].stkf004,g_sten3_d[l_ac].stkf022,g_sten3_d[l_ac].stkf005, 
                      g_sten3_d[l_ac].stkf006,g_sten3_d[l_ac].stkf007,g_sten3_d[l_ac].stkf008,g_sten3_d[l_ac].stkf009, 
                      g_sten3_d[l_ac].stkf010,g_sten3_d[l_ac].stkf011,g_sten3_d[l_ac].stkf018,g_sten3_d[l_ac].stkf016, 
                      g_sten3_d[l_ac].stkf017,g_sten3_d[l_ac].stkf020,g_sten3_d[l_ac].stkf023,g_sten3_d[l_ac].stkf024, 
                      g_sten3_d[l_ac].stkf025,g_sten3_d[l_ac].stkfsite,g_sten3_d[l_ac].stkfunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten3_d_mask_o[l_ac].* =  g_sten3_d[l_ac].*
                  CALL astt806_stkf_t_mask()
                  LET g_sten3_d_mask_n[l_ac].* =  g_sten3_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body3.before_row"

            CALL astt806_b_fill3()
            IF g_sten3_d[l_ac].stkf016 = '1' THEN
               CALL cl_set_comp_visible('group_8',FALSE)
            ELSE
               CALL cl_set_comp_visible('group_8',TRUE)
            END IF 
            IF l_cmd='u' THEN
               NEXT FIELD stkfseq
            END IF            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body3.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body3.b_delete_ask"
               IF g_sten3_d[l_ac].stkf003 IS NOT NULL THEN 
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00702"
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()                  
                  CANCEL DELETE 
               END IF
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身5刪除前 name="input.body3.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten3_d_t.stkfseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkf_t',gs_keys,"'5'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身5刪除中 name="input.body3.m_delete"
                   #刪除下層單身
               IF NOT astt806_key_delete_b(gs_keys,'stkf_B') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身5刪除後 name="input.body3.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body3.after_delete"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF 
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten3_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身5新增前 name="input.body3.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkf_t 
             WHERE stkfent = g_enterprise AND stkfdocno = g_stem_m.stemdocno AND stkf001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkfseq = g_sten3_d[g_detail_idx2].stkfseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身5新增前 name="input.body3.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten3_d[g_detail_idx2].stkfseq
               CALL astt806_insert_b('stkf_t',gs_keys,"'5'")
                           
               #add-point:單身新增後5 name="input.body3.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body3.after_insert"
               
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF 
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten3_d[l_ac].* = g_sten3_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl5
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten3_d[l_ac].* = g_sten3_d_t.*
            ELSE
               #add-point:單身page5修改前 name="input.body3.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身5)
               
               
               #將遮罩欄位還原
               CALL astt806_stkf_t_mask_restore('restore_mask_o')
               
               UPDATE stkf_t SET (stkfdocno,stkf001,stkfseq,stkf002,stkf003,stkf021,stkf004,stkf022, 
                   stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020, 
                   stkf023,stkf024,stkf025,stkfsite,stkfunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten3_d[l_ac].stkfseq,g_sten3_d[l_ac].stkf002,g_sten3_d[l_ac].stkf003,g_sten3_d[l_ac].stkf021, 
                   g_sten3_d[l_ac].stkf004,g_sten3_d[l_ac].stkf022,g_sten3_d[l_ac].stkf005,g_sten3_d[l_ac].stkf006, 
                   g_sten3_d[l_ac].stkf007,g_sten3_d[l_ac].stkf008,g_sten3_d[l_ac].stkf009,g_sten3_d[l_ac].stkf010, 
                   g_sten3_d[l_ac].stkf011,g_sten3_d[l_ac].stkf018,g_sten3_d[l_ac].stkf016,g_sten3_d[l_ac].stkf017, 
                   g_sten3_d[l_ac].stkf020,g_sten3_d[l_ac].stkf023,g_sten3_d[l_ac].stkf024,g_sten3_d[l_ac].stkf025, 
                   g_sten3_d[l_ac].stkfsite,g_sten3_d[l_ac].stkfunit) #自訂欄位頁簽
                WHERE stkfent = g_enterprise AND stkfdocno = g_stemdocno_t AND stkf001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkfseq = g_sten3_d_t.stkfseq
                  
               #add-point:單身page5修改中 name="input.body3.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten3_d[l_ac].* = g_sten3_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkf_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten3_d[l_ac].* = g_sten3_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten3_d[g_detail_idx2].stkfseq
               LET gs_keys_bak[3] = g_sten3_d_t.stkfseq
               CALL astt806_update_b('stkf_t',gs_keys,gs_keys_bak,"'5'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkf_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten3_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten3_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page5修改後 name="input.body3.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF 
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkfseq
            #add-point:BEFORE FIELD stkfseq name="input.b.page3.stkfseq"
            #标准否为Y并且方案编号不为空的资料是自动根据 费用标准方案带出，不可以维护（根据aoos020参数设置，标准费用可以调整，Y，可以修改，N不可以调整）
            LET l_sys = cl_get_para(g_enterprise,g_sten2_d[g_detail_idx].stkesite,"S-CIR-2019") 
            IF l_sys = 'N' AND g_sten3_d[l_ac].stkf002 = 'Y' THEN
               NEXT FIELD stkf018 
            ELSE
               NEXT FIELD stkf004 
            END IF
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkfseq
            
            #add-point:AFTER FIELD stkfseq name="input.a.page3.stkfseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten3_d[g_detail_idx2].stkfseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten3_d[g_detail_idx2].stkfseq != g_sten3_d_t.stkfseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkf_t WHERE "||"stkfent = '" ||g_enterprise|| "' AND "||"stkfdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkf001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkfseq = '"||g_sten3_d[g_detail_idx2].stkfseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkfseq
            #add-point:ON CHANGE stkfseq name="input.g.page3.stkfseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf002
            #add-point:BEFORE FIELD stkf002 name="input.b.page3.stkf002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf002
            
            #add-point:AFTER FIELD stkf002 name="input.a.page3.stkf002"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf002
            #add-point:ON CHANGE stkf002 name="input.g.page3.stkf002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf003
            #add-point:BEFORE FIELD stkf003 name="input.b.page3.stkf003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf003
            
            #add-point:AFTER FIELD stkf003 name="input.a.page3.stkf003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf003
            #add-point:ON CHANGE stkf003 name="input.g.page3.stkf003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf021
            #add-point:BEFORE FIELD stkf021 name="input.b.page3.stkf021"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf021
            
            #add-point:AFTER FIELD stkf021 name="input.a.page3.stkf021"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf021
            #add-point:ON CHANGE stkf021 name="input.g.page3.stkf021"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf004
            
            #add-point:AFTER FIELD stkf004 name="input.a.page3.stkf004"
            IF NOT cl_null(g_sten3_d[l_ac].stkf004) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten3_d[l_ac].stkf004

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
                  #判断该费用编号要存在于单头的费用合同项里面
                  LET l_cnt = 0
                  SELECT COUNT(*) INTO l_cnt 
                    FROM sthb_t
                   WHERE sthbent = g_enterprise
                     AND sthb001 = g_sten2_d[g_detail_idx].stke003
                     AND sthb002 = g_sten3_d[l_ac].stkf004
                  IF l_cnt <= 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00607"
                     LET g_errparam.extend = g_sten3_d[l_ac].stkf004
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten3_d[l_ac].stkf004=  g_sten3_d_t.stkf004
                     NEXT FIELD CURRENT  
                  END IF
                  #同一个费用只能是固定或者变动的
                  LET l_cnt = 0 
                  SELECT COUNT(*) INTO l_cnt 
                    FROM stkf_t
                   WHERE stkfent = g_enterprise
                     AND stkf004 = g_sten3_d[l_ac].stkf004
                     AND stkfdocno = g_stem_m.stemdocno
                     AND stkf001 = g_sten2_d[g_detail_idx].stke001
                     AND stkf009 = '2'
                  IF l_cnt > 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00608"
                     LET g_errparam.extend = g_sten3_d[l_ac].stkf004
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten3_d[l_ac].stkf004=  g_sten3_d_t.stkf004
                     NEXT FIELD CURRENT  
                  END IF
                  #根据参数判断标准的费用是否可录入
                  SELECT sthb006 INTO l_sthb006
                    FROM sthb_t
                   WHERE sthbent = g_enterprise
                     AND sthb001 = g_sten2_d[g_detail_idx].stke003
                     AND sthb002 = g_sten3_d[l_ac].stkf004
                  LET l_sys = cl_get_para(g_enterprise,g_sten2_d[g_detail_idx].stkesite,"S-CIR-2019") 
                  IF l_sys = 'N' AND l_sthb006 = 'Y' THEN 
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00701"
                     LET g_errparam.extend = g_sten3_d[l_ac].stkf004
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten3_d[l_ac].stkf004=  g_sten3_d_t.stkf004
                     NEXT FIELD CURRENT  
                  END IF      
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            #带出标准否
            SELECT sthb006 INTO g_sten3_d[l_ac].stkf002
              FROM sthb_t
             WHERE sthbent = g_enterprise
               AND sthb001 = g_sten2_d[g_detail_idx].stke003
               AND sthb002 = g_sten3_d[l_ac].stkf004
               
            SELECT stae004 INTO g_sten3_d[l_ac].stae004
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten3_d[l_ac].stkf004
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)    
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten3_d[l_ac].stkf004
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten3_d[l_ac].stkf004_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten3_d[l_ac].stkf004_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf004
            #add-point:BEFORE FIELD stkf004 name="input.b.page3.stkf004"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf004
            #add-point:ON CHANGE stkf004 name="input.g.page3.stkf004"
            IF g_sten3_d[l_ac].stkf004 IS NOT NULL THEN
               SELECT sthb009,sthb010 INTO g_sten3_d[l_ac].stkf023, g_sten3_d[l_ac].stkf024
                 FROM sthb_t
                WHERE sthbent = g_enterprise
                  AND sthb001 = g_sten2_d[g_detail_idx].stke003
                  AND sthb002 = g_sten3_d[l_ac].stkf004
               SELECT stkf023,stkf024 INTO g_sten3_d[l_ac].stkf023, g_sten3_d[l_ac].stkf024
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkf004 = g_sten3_d[l_ac].stkf004
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkfseq <> g_sten3_d[l_ac].stkfseq   
            END IF
            IF g_sten3_d[l_ac].stkf023 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            END IF           
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stae004
            #add-point:BEFORE FIELD stae004 name="input.b.page3.stae004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stae004
            
            #add-point:AFTER FIELD stae004 name="input.a.page3.stae004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stae004
            #add-point:ON CHANGE stae004 name="input.g.page3.stae004"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf022
            
            #add-point:AFTER FIELD stkf022 name="input.a.page3.stkf022"
            IF NOT cl_null(g_sten3_d[l_ac].stkf022) THEN 
               #检查场地是否存在
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM mhad_t
                WHERE mhadent=g_enterprise
                  AND mhad004 = g_sten3_d[l_ac].stkf022
               IF l_cnt <= 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "art-00147"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf022
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf022=  g_sten3_d_t.stkf022
                  NEXT FIELD CURRENT  
               END IF     
               #检查场地是否有效的资料
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM mhad_t
                WHERE mhadent=g_enterprise
                  AND mhad004 = g_sten3_d[l_ac].stkf022
                  AND mhadstus = 'Y'
               IF l_cnt <= 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "art-00148"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf022
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf022=  g_sten3_d_t.stkf022
                  NEXT FIELD CURRENT  
               END IF     
               #判断该费用编号要存在于场地信息单身
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkj_t
                WHERE stkjent=g_enterprise
                  AND stkjdocno = g_stem_m.stemdocno
                  AND stkj001 = g_sten2_d[g_detail_idx].stke001
                  AND stkj002 = g_sten3_d[l_ac].stkf022
               IF l_cnt <= 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00745"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf022
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf022=  g_sten3_d_t.stkf022
                  NEXT FIELD CURRENT  
               END IF                  
            END IF
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten3_d[l_ac].stkf022
            CALL ap_ref_array2(g_ref_fields,"SELECT mhadl006 FROM mhadl_t WHERE mhadlent='"||g_enterprise||"' AND mhadl004=? AND mhadl005='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten3_d[l_ac].stkf022_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten3_d[l_ac].stkf022_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf022
            #add-point:BEFORE FIELD stkf022 name="input.b.page3.stkf022"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf022
            #add-point:ON CHANGE stkf022 name="input.g.page3.stkf022"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf005
            #add-point:BEFORE FIELD stkf005 name="input.b.page3.stkf005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf005
            
            #add-point:AFTER FIELD stkf005 name="input.a.page3.stkf005"
            IF g_sten3_d[l_ac].stkf005 IS NOT NULL THEN
               IF g_sten3_d[l_ac].stkf005 < g_sten2_d[g_detail_idx].stke042 OR g_sten3_d[l_ac].stkf005 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf005
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf005=  g_sten3_d_t.stkf005
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten3_d[l_ac].stkf006 IS NOT NULL THEN
                  IF g_sten3_d[l_ac].stkf005 > g_sten3_d[l_ac].stkf006 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "amm-00080"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf005
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf005=  g_sten3_d_t.stkf005
                  NEXT FIELD CURRENT 
               END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf005
            #add-point:ON CHANGE stkf005 name="input.g.page3.stkf005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf006
            #add-point:BEFORE FIELD stkf006 name="input.b.page3.stkf006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf006
            
            #add-point:AFTER FIELD stkf006 name="input.a.page3.stkf006"
            IF g_sten3_d[l_ac].stkf006 IS NOT NULL THEN
               IF g_sten3_d[l_ac].stkf006 < g_sten2_d[g_detail_idx].stke042 OR g_sten3_d[l_ac].stkf006 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf006
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf006=  g_sten3_d_t.stkf006
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten3_d[l_ac].stkf005 IS NOT NULL THEN
                  IF g_sten3_d[l_ac].stkf005 > g_sten3_d[l_ac].stkf006 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "amm-00080"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf006
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf006=  g_sten3_d_t.stkf006
                  NEXT FIELD CURRENT 
               END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf006
            #add-point:ON CHANGE stkf006 name="input.g.page3.stkf006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf007
            #add-point:BEFORE FIELD stkf007 name="input.b.page3.stkf007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf007
            
            #add-point:AFTER FIELD stkf007 name="input.a.page3.stkf007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf007
            #add-point:ON CHANGE stkf007 name="input.g.page3.stkf007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf008
            #add-point:BEFORE FIELD stkf008 name="input.b.page3.stkf008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf008
            
            #add-point:AFTER FIELD stkf008 name="input.a.page3.stkf008"
            IF NOT cl_ap_chk_range(g_sten3_d[l_ac].stkf008,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkf008
            END IF 
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf008
            #add-point:ON CHANGE stkf008 name="input.g.page3.stkf008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf009
            #add-point:BEFORE FIELD stkf009 name="input.b.page3.stkf009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf009
            
            #add-point:AFTER FIELD stkf009 name="input.a.page3.stkf009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf009
            #add-point:ON CHANGE stkf009 name="input.g.page3.stkf009"
            IF g_sten3_d[l_ac].stkf009 ='3' THEN 
               IF g_sten3_d[l_ac].stkf010 = '4' THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00613"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf009
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf009 = g_sten3_d_t.stkf009
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 <> '4'  THEN
                  LET g_sten3_d[l_ac].stkf016 =''
               END IF   
            END IF
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 = '4'  THEN
                  LET g_sten3_d[l_ac].stkf016 ='1'
               END IF   
            END IF
            IF g_sten3_d[l_ac].stkf016 = '1' THEN
               CALL cl_set_comp_visible('group_8',FALSE)
               #删除单身
            ELSE
               CALL cl_set_comp_visible('group_8',TRUE)
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf010
            #add-point:BEFORE FIELD stkf010 name="input.b.page3.stkf010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf010
            
            #add-point:AFTER FIELD stkf010 name="input.a.page3.stkf010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf010
            #add-point:ON CHANGE stkf010 name="input.g.page3.stkf010"
            IF g_sten3_d[l_ac].stkf009 ='3' THEN 
               IF g_sten3_d[l_ac].stkf010 = '4' THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00613"
                  LET g_errparam.extend = g_sten3_d[l_ac].stkf010
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten3_d[l_ac].stkf010=  g_sten3_d_t.stkf010
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 <> '4'  THEN
                  LET g_sten3_d[l_ac].stkf016 =''
               END IF   
            END IF
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 = '4'  THEN
                  LET g_sten3_d[l_ac].stkf016 ='1'
               END IF   
            END IF
            IF g_sten3_d[l_ac].stkf016 = '1' THEN
               CALL cl_set_comp_visible('group_8',FALSE)
               #删除单身
            ELSE
               CALL cl_set_comp_visible('group_8',TRUE)
            END IF
            #计算方式不是经营面积或者测量面积的时候关闭费用单身场地栏位
            IF g_sten3_d[l_ac].stkf010 NOT MATCHES "[12]" THEN
               LET g_sten3_d[l_ac].stkf022 = '' 
               LET g_sten3_d[l_ac].stkf022_desc = ''
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)  
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf011
            #add-point:BEFORE FIELD stkf011 name="input.b.page3.stkf011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf011
            
            #add-point:AFTER FIELD stkf011 name="input.a.page3.stkf011"
            IF NOT cl_ap_chk_range(g_sten3_d[l_ac].stkf011,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkf011
            END IF 
 
 
 
            #add-point:AFTER FIELD stkf011 name="input.a.page1.stkf011"
            IF NOT cl_null(g_sten3_d[l_ac].stkf011) THEN 
               CALL s_asti800_curr_round(g_sten2_d[g_detail_idx].stkesite,'',g_sten3_d[l_ac].stkf011,'1')
                  RETURNING g_sten3_d[l_ac].stkf011
               LET g_sten3_d[l_ac].stkf018 = g_sten3_d[l_ac].stkf011
            END IF 

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf011
            #add-point:ON CHANGE stkf011 name="input.g.page3.stkf011"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf018
            #add-point:BEFORE FIELD stkf018 name="input.b.page3.stkf018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf018
            
            #add-point:AFTER FIELD stkf018 name="input.a.page3.stkf018"
            IF NOT cl_ap_chk_range(g_sten3_d[l_ac].stkf018,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkf018
            END IF 
 
 
 
            #add-point:AFTER FIELD stkf018 name="input.a.page1.stkf018"
            IF NOT cl_null(g_sten3_d[l_ac].stkf018) THEN 
               CALL s_asti800_curr_round(g_sten2_d[g_detail_idx].stkesite,'',g_sten3_d[l_ac].stkf018,'1')
                  RETURNING g_sten3_d[l_ac].stkf018
            END IF 
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf018
            #add-point:ON CHANGE stkf018 name="input.g.page3.stkf018"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf016
            #add-point:BEFORE FIELD stkf016 name="input.b.page3.stkf016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf016
            
            #add-point:AFTER FIELD stkf016 name="input.a.page3.stkf016"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf016
            #add-point:ON CHANGE stkf016 name="input.g.page3.stkf016"
            IF g_sten3_d[l_ac].stkf016 IS NOT NULL THEN
               IF g_sten3_d[l_ac].stkf016 <> '1' THEN
                  LET g_sten3_d[l_ac].stkf011 = ''
                  LET g_sten3_d[l_ac].stkf018 = ''
               END IF 
            END IF
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 ='1' OR g_sten3_d[l_ac].stkf010 ='2' OR g_sten3_d[l_ac].stkf010 ='3' THEN
                  IF g_sten3_d[l_ac].stkf016 = '1'  THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00614"
                     LET g_errparam.extend = g_sten3_d[l_ac].stkf016
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                     LET g_sten3_d[l_ac].stkf016 =''
                     NEXT FIELD CURRENT
                  END IF  
               END IF               
            END IF 
            IF g_sten3_d[l_ac].stkf009 ='1'  THEN
               IF g_sten3_d[l_ac].stkf010 = '4' THEN
                  IF g_sten3_d[l_ac].stkf016 <> '1'  THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00623"
                     LET g_errparam.extend = g_sten3_d[l_ac].stkf016
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                     LET g_sten3_d[l_ac].stkf016 =''
                     NEXT FIELD CURRENT
                  END IF  
               END IF               
            END IF             
            IF g_sten3_d[l_ac].stkf016 = '1' THEN
               CALL cl_set_comp_visible('group_8',FALSE)
               #删除单身
            ELSE
               CALL cl_set_comp_visible('group_8',TRUE)
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf017
            #add-point:BEFORE FIELD stkf017 name="input.b.page3.stkf017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf017
            
            #add-point:AFTER FIELD stkf017 name="input.a.page3.stkf017"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf017
            #add-point:ON CHANGE stkf017 name="input.g.page3.stkf017"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf020
            #add-point:BEFORE FIELD stkf020 name="input.b.page3.stkf020"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf020
            
            #add-point:AFTER FIELD stkf020 name="input.a.page3.stkf020"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf020
            #add-point:ON CHANGE stkf020 name="input.g.page3.stkf020"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf023
            #add-point:BEFORE FIELD stkf023 name="input.b.page3.stkf023"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf023
            
            #add-point:AFTER FIELD stkf023 name="input.a.page3.stkf023"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf023
            #add-point:ON CHANGE stkf023 name="input.g.page3.stkf023"
            #如果费用编号不为空，则同一个费用编号的费用所属类型和所用所属组织要一样
            IF g_sten3_d[l_ac].stkf004 IS NOT NULL AND g_sten3_d[l_ac].stkf023 IS NOT NULL THEN
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten3_d[l_ac].stkf004
                  AND stkf023 <> g_sten3_d[l_ac].stkf023
               IF l_cnt > 0 THEN
                  IF NOT cl_ask_confirm('ast-00748') THEN 
                     LET g_sten3_d[l_ac].stkf023 = g_sten3_d_t.stkf023
                  ELSE
                     #更新此费用编号的费用所属类型
                     UPDATE stkf_t SET stkf023 = g_sten3_d[l_ac].stkf023,stkf024 = ''
                      WHERE stkfent = g_enterprise
                        AND stkfdocno = g_stem_m.stemdocno
                        AND stkf001 = g_sten2_d[g_detail_idx].stke001
                        AND stkf004 = g_sten3_d[l_ac].stkf004
                     IF SQLCA.sqlcode THEN
                        INITIALIZE g_errparam TO NULL 
                        LET g_errparam.extend = "upd stkf_t" 
                        LET g_errparam.code   = SQLCA.sqlcode 
                        LET g_errparam.popup  = TRUE 
                        CALL cl_err()
                        LET g_sten3_d[l_ac].stkf023 = g_sten3_d_t.stkf023
                        NEXT FIELD CURRENT
                     END IF   
                     #更新此费用编号的费用所属类型
                     IF g_sten3_d[l_ac].stkf023 = '1' THEN
                        UPDATE stkf_t SET stkf024 = g_sten2_d[g_detail_idx].stkesite
                         WHERE stkfent = g_enterprise
                           AND stkfdocno = g_stem_m.stemdocno
                           AND stkf001 = g_sten2_d[g_detail_idx].stke001
                           AND stkf004 = g_sten3_d[l_ac].stkf004
                        IF SQLCA.sqlcode THEN
                           INITIALIZE g_errparam TO NULL 
                           LET g_errparam.extend = "upd stkf_t" 
                           LET g_errparam.code   = SQLCA.sqlcode 
                           LET g_errparam.popup  = TRUE 
                           CALL cl_err()
                           LET g_sten3_d[l_ac].stkf023 = g_sten3_d_t.stkf023
                           NEXT FIELD CURRENT
                        END IF
                     END IF                     
                  END IF
               END IF
            END IF
            IF g_sten3_d[l_ac].stkf023 IS NOT NULL THEN
               IF g_sten3_d[l_ac].stkf023 <> '1' THEN
                  LET g_sten3_d[l_ac].stkf024 = ''
                  LET g_sten3_d[l_ac].stkf024_desc = ''
               END IF 
               IF g_sten3_d[l_ac].stkf023 = '1' THEN
                  LET g_sten3_d[l_ac].stkf024 = g_sten2_d[g_detail_idx].stkesite
                  CALL s_desc_get_department_desc(g_sten3_d[l_ac].stkf024) RETURNING g_sten3_d[l_ac].stkf024_desc
               END IF
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf024
            
            #add-point:AFTER FIELD stkf024 name="input.a.page3.stkf024"
            IF NOT cl_null(g_sten3_d[l_ac].stkf024) THEN 
               IF g_sten3_d[l_ac].stkf023 = '2' THEN
                  #應用 a17 樣板自動產生(Version:3)
                  IF s_aooi500_setpoint(g_prog,'stkf024') THEN
                     CALL s_aooi500_chk(g_prog,'stkf024',g_sten3_d[l_ac].stkf024,g_sten2_d[g_detail_idx].stkesite) RETURNING l_success,l_errno
                     IF NOT l_success THEN
                        INITIALIZE g_errparam TO NULL
                        LET g_errparam.extend = g_sten3_d[l_ac].stkf024
                        LET g_errparam.code   = l_errno
                        LET g_errparam.popup  = TRUE
                        CALL cl_err()
                        
                        LET g_sten3_d[l_ac].stkf024= g_sten3_d_t.stkf024
                        CALL s_desc_get_department_desc(g_sten3_d[l_ac].stkf024) RETURNING g_sten3_d[l_ac].stkf024_desc
                        DISPLAY BY NAME g_sten3_d[l_ac].stkf024,g_sten3_d[l_ac].stkf024_desc
                        NEXT FIELD CURRENT
                     END IF
                  ELSE
                     #欄位存在檢查
                     #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
                     INITIALIZE g_chkparam.* TO NULL
                     
                     #設定g_chkparam.*的參數
                     LET g_chkparam.arg1 = g_sten3_d[l_ac].stkf024
                     
                        
                     #呼叫檢查存在並帶值的library
                     IF cl_chk_exist("v_ooef001_13") THEN
                        #檢查成功時後續處理
                     ELSE
                        #檢查失敗時後續處理
                        LET g_sten3_d[l_ac].stkf024= g_sten3_d_t.stkf024
                        CALL s_desc_get_department_desc(g_sten3_d[l_ac].stkf024) RETURNING g_sten3_d[l_ac].stkf024_desc
                        DISPLAY BY NAME g_sten3_d[l_ac].stkf024,g_sten3_d[l_ac].stkf024_desc
                        NEXT FIELD CURRENT
                     END IF
                  END IF                  
               ELSE
                  #欄位存在檢查
                   #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
                   INITIALIZE g_chkparam.* TO NULL
                   
                   #設定g_chkparam.*的參數
                   LET g_chkparam.arg1 = g_sten3_d[l_ac].stkf024
                   
                      
                   #呼叫檢查存在並帶值的library
                   IF cl_chk_exist("v_pmaa001_1") THEN
                      #檢查成功時後續處理
                   ELSE
                      #檢查失敗時後續處理
                      LET g_sten3_d[l_ac].stkf024= g_sten3_d_t.stkf024
                      CALL s_desc_get_trading_partner_full_desc(g_sten3_d[l_ac].stkf024) RETURNING g_sten3_d[l_ac].stkf024_desc
                      DISPLAY BY NAME g_sten3_d[l_ac].stkf024,g_sten3_d[l_ac].stkf024_desc
                      NEXT FIELD CURRENT
                   END IF
               END IF
            END IF 
            #如果费用编号不为空，则同一个费用编号的费用所属类型和所用所属组织要一样
            IF g_sten3_d[l_ac].stkf004 IS NOT NULL AND g_sten3_d[l_ac].stkf024 IS NOT NULL THEN
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten3_d[l_ac].stkf004
                  AND ( stkf024 <> g_sten3_d[l_ac].stkf024 OR stkf024 IS NULL )
               IF l_cnt > 0 THEN
                  IF NOT cl_ask_confirm('ast-00748') THEN 
                     LET g_sten3_d[l_ac].stkf024 = g_sten3_d_t.stkf024
                  ELSE
                     #更新此费用编号的费用所属类型
                     UPDATE stkf_t SET stkf024 = g_sten3_d[l_ac].stkf024
                      WHERE stkfent = g_enterprise
                        AND stkfdocno = g_stem_m.stemdocno
                        AND stkf001 = g_sten2_d[g_detail_idx].stke001
                        AND stkf004 = g_sten3_d[l_ac].stkf004
                     IF SQLCA.sqlcode THEN
                        INITIALIZE g_errparam TO NULL 
                        LET g_errparam.extend = "upd stkf_t" 
                        LET g_errparam.code   = SQLCA.sqlcode 
                        LET g_errparam.popup  = TRUE 
                        CALL cl_err()
                        LET g_sten3_d[l_ac].stkf024 = g_sten3_d_t.stkf024
                        NEXT FIELD CURRENT
                     END IF                            
                  END IF
               END IF
            END IF
            IF g_sten3_d[l_ac].stkf023 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf024
            #add-point:BEFORE FIELD stkf024 name="input.b.page3.stkf024"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf024
            #add-point:ON CHANGE stkf024 name="input.g.page3.stkf024"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf025
            #add-point:BEFORE FIELD stkf025 name="input.b.page3.stkf025"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf025
            
            #add-point:AFTER FIELD stkf025 name="input.a.page3.stkf025"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf025
            #add-point:ON CHANGE stkf025 name="input.g.page3.stkf025"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkfsite
            #add-point:BEFORE FIELD stkfsite name="input.b.page3.stkfsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkfsite
            
            #add-point:AFTER FIELD stkfsite name="input.a.page3.stkfsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkfsite
            #add-point:ON CHANGE stkfsite name="input.g.page3.stkfsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkfunit
            #add-point:BEFORE FIELD stkfunit name="input.b.page3.stkfunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkfunit
            
            #add-point:AFTER FIELD stkfunit name="input.a.page3.stkfunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkfunit
            #add-point:ON CHANGE stkfunit name="input.g.page3.stkfunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page3.stkfseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkfseq
            #add-point:ON ACTION controlp INFIELD stkfseq name="input.c.page3.stkfseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf002
            #add-point:ON ACTION controlp INFIELD stkf002 name="input.c.page3.stkf002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf003
            #add-point:ON ACTION controlp INFIELD stkf003 name="input.c.page3.stkf003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf021
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf021
            #add-point:ON ACTION controlp INFIELD stkf021 name="input.c.page3.stkf021"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf004
            #add-point:ON ACTION controlp INFIELD stkf004 name="input.c.page3.stkf004"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten3_d[l_ac].stkf004             #給予default值
            LET g_qryparam.default2 = "" #g_sten3_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten3_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.where = " EXISTS (SELECT 1 FROM sthb_t WHERE sthbent = staeent AND sthb001 = '",g_sten2_d[g_detail_idx].stke003,"' AND stae001 = sthb002)" #s

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten3_d[l_ac].stkf004 = g_qryparam.return1              
            #LET g_sten3_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten3_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten3_d[l_ac].stkf004 TO stkf004              #
            #DISPLAY g_sten3_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten3_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stkf004                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page3.stae004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stae004
            #add-point:ON ACTION controlp INFIELD stae004 name="input.c.page3.stae004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf022
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf022
            #add-point:ON ACTION controlp INFIELD stkf022 name="input.c.page3.stkf022"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten3_d[l_ac].stkf022           #給予default值

            #給予arg
            LET g_qryparam.where = " EXISTS (SELECT 1 FROM stkj_t WHERE stkjent = mhadent AND mhad004 = stkj002 AND stkj001 = '",g_sten2_d[g_detail_idx].stke001,"' AND stkjdocno = '",g_stem_m.stemdocno,"')"
 
            CALL q_mhad001()                                #呼叫開窗
 
            LET g_sten3_d[l_ac].stkf022     = g_qryparam.return1              

            DISPLAY g_sten3_d[l_ac].stkf022     TO stkf022              #

            NEXT FIELD stkf022 
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf005
            #add-point:ON ACTION controlp INFIELD stkf005 name="input.c.page3.stkf005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf006
            #add-point:ON ACTION controlp INFIELD stkf006 name="input.c.page3.stkf006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf007
            #add-point:ON ACTION controlp INFIELD stkf007 name="input.c.page3.stkf007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf008
            #add-point:ON ACTION controlp INFIELD stkf008 name="input.c.page3.stkf008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf009
            #add-point:ON ACTION controlp INFIELD stkf009 name="input.c.page3.stkf009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf010
            #add-point:ON ACTION controlp INFIELD stkf010 name="input.c.page3.stkf010"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf011
            #add-point:ON ACTION controlp INFIELD stkf011 name="input.c.page3.stkf011"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf018
            #add-point:ON ACTION controlp INFIELD stkf018 name="input.c.page3.stkf018"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf016
            #add-point:ON ACTION controlp INFIELD stkf016 name="input.c.page3.stkf016"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf017
            #add-point:ON ACTION controlp INFIELD stkf017 name="input.c.page3.stkf017"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf020
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf020
            #add-point:ON ACTION controlp INFIELD stkf020 name="input.c.page3.stkf020"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf023
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf023
            #add-point:ON ACTION controlp INFIELD stkf023 name="input.c.page3.stkf023"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf024
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf024
            #add-point:ON ACTION controlp INFIELD stkf024 name="input.c.page3.stkf024"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten3_d[l_ac].stkf024             #給予default值

            #給予arg
            IF g_sten3_d[l_ac].stkf023 = '2' THEN
               IF s_aooi500_setpoint(g_prog,'stkf024') THEN
                  LET g_qryparam.where = s_aooi500_q_where(g_prog,'stkf024',g_sten2_d[g_detail_idx].stkesite,'i')
                  CALL q_ooef001_24() 
               ELSE
                  CALL q_ooef001_12()                           #呼叫開窗
               END IF
            ELSE
               LET g_qryparam.arg1 = "('1','3')" 
               CALL q_pmaa001_1()               
            END IF
            LET g_sten3_d[l_ac].stkf024 = g_qryparam.return1              

            DISPLAY g_sten3_d[l_ac].stkf024  TO stkf024              #
            
            IF g_sten3_d[l_ac].stkf023 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten3_d[l_ac].stkf024
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten3_d[l_ac].stkf024_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten3_d[l_ac].stkf024_desc
            END IF
            
            NEXT FIELD stkf024    
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkf025
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf025
            #add-point:ON ACTION controlp INFIELD stkf025 name="input.c.page3.stkf025"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkfsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkfsite
            #add-point:ON ACTION controlp INFIELD stkfsite name="input.c.page3.stkfsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.stkfunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkfunit
            #add-point:ON ACTION controlp INFIELD stkfunit name="input.c.page3.stkfunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page5_after_row name="input.body3.after_row"
            IF g_sten3_d[l_ac].stkf016 = '1' THEN
               #删除单身
               DELETE FROM stkg_t
                WHERE stkgent = g_enterprise 
                  AND stkgdocno = g_stem_m.stemdocno
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten3_d[l_ac].stkfseq
                   
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CLOSE astt806_bcl5
                  CALL s_transaction_end('N','0')
                  EXIT DIALOG 
               END IF
            END IF    
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten3_d[l_ac].* = g_sten3_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl5
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkf_t","'5'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page5_after_row2 name="input.body3.after_row2"
            CALL astt806_b_fill2('5')
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body3.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten3_d[li_reproduce_target].* = g_sten3_d[li_reproduce].*
 
               LET g_sten3_d[li_reproduce_target].stkfseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten3_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten3_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten4_d FROM s_detail4.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_6)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body4.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten4_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'6',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten4_d.getLength()
            #add-point:資料輸入前 name="input.body4.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten4_d[l_ac].* TO NULL 
            INITIALIZE g_sten4_d_t.* TO NULL 
            INITIALIZE g_sten4_d_o.* TO NULL 
            #公用欄位給值(單身6)
            
            #自定義預設值(單身6)
            
            #add-point:modify段before備份 name="input.body4.insert.before_bak"
            SELECT MAX(stkhseq) INTO g_sten4_d[l_ac].stkhseq
              FROM stkh_t
             WHERE stkhent= g_enterprise
               AND stkhdocno= g_stem_m.stemdocno
               AND stkh001 = g_sten2_d[g_detail_idx].stke001
            IF cl_null(g_sten4_d[l_ac].stkhseq) THEN
               LET g_sten4_d[l_ac].stkhseq=1
            ELSE
               LET g_sten4_d[l_ac].stkhseq=g_sten4_d[l_ac].stkhseq+1
            END IF
            LET g_sten4_d[l_ac].stkh004 = g_sten2_d[g_detail_idx].stke042  
            LET g_sten4_d[l_ac].stkh005 = g_sten2_d[g_detail_idx].stke012  
            LET g_sten4_d[l_ac].stkh007 = g_sten2_d[g_detail_idx].stke002  
            #end add-point
            LET g_sten4_d_t.* = g_sten4_d[l_ac].*     #新輸入資料
            LET g_sten4_d_o.* = g_sten4_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body4.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten4_d[li_reproduce_target].* = g_sten4_d[li_reproduce].*
 
               LET g_sten4_d[li_reproduce_target].stkhseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body4.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body4.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[6] = l_ac
            LET g_current_page = 6
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten4_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten4_d[l_ac].stkhseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten4_d_t.* = g_sten4_d[l_ac].*  #BACKUP
               LET g_sten4_d_o.* = g_sten4_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body4.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkh_t","'6'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl6 INTO g_sten4_d[l_ac].stkhseq,g_sten4_d[l_ac].stkh002,g_sten4_d[l_ac].stkh003, 
                      g_sten4_d[l_ac].stkh008,g_sten4_d[l_ac].stkh004,g_sten4_d[l_ac].stkh005,g_sten4_d[l_ac].stkh006, 
                      g_sten4_d[l_ac].stkh007,g_sten4_d[l_ac].stkhsite,g_sten4_d[l_ac].stkhunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten4_d_mask_o[l_ac].* =  g_sten4_d[l_ac].*
                  CALL astt806_stkh_t_mask()
                  LET g_sten4_d_mask_n[l_ac].* =  g_sten4_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body4.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body4.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body4.b_delete_ask"
               IF g_sten4_d[l_ac].stkh003 IS NOT NULL THEN 
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00828"
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()                  
                  CANCEL DELETE 
               END IF
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身6刪除前 name="input.body4.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten4_d_t.stkhseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkh_t',gs_keys,"'6'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身6刪除中 name="input.body4.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身6刪除後 name="input.body4.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body4.after_delete"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF 
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten4_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身6新增前 name="input.body4.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkh_t 
             WHERE stkhent = g_enterprise AND stkhdocno = g_stem_m.stemdocno AND stkh001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkhseq = g_sten4_d[g_detail_idx2].stkhseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身6新增前 name="input.body4.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten4_d[g_detail_idx2].stkhseq
               CALL astt806_insert_b('stkh_t',gs_keys,"'6'")
                           
               #add-point:單身新增後6 name="input.body4.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body4.after_insert"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten4_d[l_ac].* = g_sten4_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl6
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten4_d[l_ac].* = g_sten4_d_t.*
            ELSE
               #add-point:單身page6修改前 name="input.body4.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身6)
               
               
               #將遮罩欄位還原
               CALL astt806_stkh_t_mask_restore('restore_mask_o')
               
               UPDATE stkh_t SET (stkhdocno,stkh001,stkhseq,stkh002,stkh003,stkh008,stkh004,stkh005, 
                   stkh006,stkh007,stkhsite,stkhunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten4_d[l_ac].stkhseq,g_sten4_d[l_ac].stkh002,g_sten4_d[l_ac].stkh003,g_sten4_d[l_ac].stkh008, 
                   g_sten4_d[l_ac].stkh004,g_sten4_d[l_ac].stkh005,g_sten4_d[l_ac].stkh006,g_sten4_d[l_ac].stkh007, 
                   g_sten4_d[l_ac].stkhsite,g_sten4_d[l_ac].stkhunit) #自訂欄位頁簽
                WHERE stkhent = g_enterprise AND stkhdocno = g_stemdocno_t AND stkh001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkhseq = g_sten4_d_t.stkhseq
                  
               #add-point:單身page6修改中 name="input.body4.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten4_d[l_ac].* = g_sten4_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkh_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten4_d[l_ac].* = g_sten4_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten4_d[g_detail_idx2].stkhseq
               LET gs_keys_bak[3] = g_sten4_d_t.stkhseq
               CALL astt806_update_b('stkh_t',gs_keys,gs_keys_bak,"'6'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkh_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten4_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten4_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page6修改後 name="input.body4.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkhseq
            #add-point:BEFORE FIELD stkhseq name="input.b.page4.stkhseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkhseq
            
            #add-point:AFTER FIELD stkhseq name="input.a.page4.stkhseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten4_d[g_detail_idx2].stkhseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten4_d[g_detail_idx2].stkhseq != g_sten4_d_t.stkhseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkh_t WHERE "||"stkhent = '" ||g_enterprise|| "' AND "||"stkhdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkh001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkhseq = '"||g_sten4_d[g_detail_idx2].stkhseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkhseq
            #add-point:ON CHANGE stkhseq name="input.g.page4.stkhseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh002
            
            #add-point:AFTER FIELD stkh002 name="input.a.page4.stkh002"
            IF NOT cl_null(g_sten4_d[l_ac].stkh002) THEN 
               #應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten4_d[l_ac].stkh002

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
               #判断是否存在于合同对应费用明细档中
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten4_d[l_ac].stkh002
               IF l_cnt < 1 THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = ""
                  LET g_errparam.code   = 'ast-00829'
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  LET g_sten4_d[l_ac].stkh002 = g_sten4_d_t.stkh002
                  NEXT FIELD CURRENT
               END IF
               IF g_sten4_d[l_ac].stkh002 <> g_sten4_d_t.stkh002 OR g_sten4_d_t.stkh002 IS NULL THEN
                  SELECT stae004 INTO  g_sten4_d[l_ac].stae004
                    FROM stae_t
                   WHERE staeent = g_enterprise
                     AND stae001 = g_sten4_d[l_ac].stkh002
               END IF

            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten4_d[l_ac].stkh002
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten4_d[l_ac].stkh002_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten4_d[l_ac].stkh002_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh002
            #add-point:BEFORE FIELD stkh002 name="input.b.page4.stkh002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh002
            #add-point:ON CHANGE stkh002 name="input.g.page4.stkh002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stae004_3
            #add-point:BEFORE FIELD stae004_3 name="input.b.page4.stae004_3"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stae004_3
            
            #add-point:AFTER FIELD stae004_3 name="input.a.page4.stae004_3"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stae004_3
            #add-point:ON CHANGE stae004_3 name="input.g.page4.stae004_3"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh003
            #add-point:BEFORE FIELD stkh003 name="input.b.page4.stkh003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh003
            
            #add-point:AFTER FIELD stkh003 name="input.a.page4.stkh003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh003
            #add-point:ON CHANGE stkh003 name="input.g.page4.stkh003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh008
            #add-point:BEFORE FIELD stkh008 name="input.b.page4.stkh008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh008
            
            #add-point:AFTER FIELD stkh008 name="input.a.page4.stkh008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh008
            #add-point:ON CHANGE stkh008 name="input.g.page4.stkh008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh004
            #add-point:BEFORE FIELD stkh004 name="input.b.page4.stkh004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh004
            
            #add-point:AFTER FIELD stkh004 name="input.a.page4.stkh004"
            IF g_sten4_d[l_ac].stkh004 IS NOT NULL THEN
               IF g_sten4_d[l_ac].stkh004 < g_sten2_d[g_detail_idx].stke042 OR g_sten4_d[l_ac].stkh004 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten4_d[l_ac].stkh004
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten4_d[l_ac].stkh004=  g_sten4_d_t.stkh004
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten4_d[l_ac].stkh005 IS NOT NULL THEN
                  IF g_sten4_d[l_ac].stkh004 > g_sten4_d[l_ac].stkh005 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "amm-00080"
                     LET g_errparam.extend = g_sten4_d[l_ac].stkh004
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten4_d[l_ac].stkh004 =  g_sten4_d_t.stkh004
                     NEXT FIELD CURRENT  
                  END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh004
            #add-point:ON CHANGE stkh004 name="input.g.page4.stkh004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh005
            #add-point:BEFORE FIELD stkh005 name="input.b.page4.stkh005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh005
            
            #add-point:AFTER FIELD stkh005 name="input.a.page4.stkh005"
            IF g_sten4_d[l_ac].stkh005 IS NOT NULL THEN
               IF g_sten4_d[l_ac].stkh005 < g_sten2_d[g_detail_idx].stke042 OR g_sten4_d[l_ac].stkh005 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten4_d[l_ac].stkh005
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten4_d[l_ac].stkh005=  g_sten4_d_t.stkh005
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten4_d[l_ac].stkh004 IS NOT NULL THEN
                  IF g_sten4_d[l_ac].stkh004 > g_sten4_d[l_ac].stkh005 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "amm-00080"
                     LET g_errparam.extend = g_sten4_d[l_ac].stkh005
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten4_d[l_ac].stkh005 =  g_sten4_d_t.stkh005
                     NEXT FIELD CURRENT  
                  END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh005
            #add-point:ON CHANGE stkh005 name="input.g.page4.stkh005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh006
            #add-point:BEFORE FIELD stkh006 name="input.b.page4.stkh006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh006
            
            #add-point:AFTER FIELD stkh006 name="input.a.page4.stkh006"
            IF NOT cl_null(g_sten4_d[l_ac].stkh006) THEN
               IF g_sten4_d[l_ac].stkh006 = 0 THEN 
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = ""
                  LET g_errparam.code   = 'ast-00705' 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  LET g_sten4_d[l_ac].stkh006 = g_sten4_d_t.stkh006
               
                  NEXT FIELD stkh006
               END IF 
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh006
            #add-point:ON CHANGE stkh006 name="input.g.page4.stkh006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkh007
            #add-point:BEFORE FIELD stkh007 name="input.b.page4.stkh007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkh007
            
            #add-point:AFTER FIELD stkh007 name="input.a.page4.stkh007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkh007
            #add-point:ON CHANGE stkh007 name="input.g.page4.stkh007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkhsite
            #add-point:BEFORE FIELD stkhsite name="input.b.page4.stkhsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkhsite
            
            #add-point:AFTER FIELD stkhsite name="input.a.page4.stkhsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkhsite
            #add-point:ON CHANGE stkhsite name="input.g.page4.stkhsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkhunit
            #add-point:BEFORE FIELD stkhunit name="input.b.page4.stkhunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkhunit
            
            #add-point:AFTER FIELD stkhunit name="input.a.page4.stkhunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkhunit
            #add-point:ON CHANGE stkhunit name="input.g.page4.stkhunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page4.stkhseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkhseq
            #add-point:ON ACTION controlp INFIELD stkhseq name="input.c.page4.stkhseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh002
            #add-point:ON ACTION controlp INFIELD stkh002 name="input.c.page4.stkh002"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten4_d[l_ac].stkh002             #給予default值
            LET g_qryparam.default2 = "" #g_sten4_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten4_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.where=" stae001 IN  (SELECT stkf004 FROM stkf_t WHERE stkfent ='" ,g_enterprise ,"' AND stkf001 = '",g_sten2_d[g_detail_idx].stke001,"' AND stkfdocno='",g_stem_m.stemdocno,"' )"

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten4_d[l_ac].stkh002 = g_qryparam.return1              
            #LET g_sten4_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten4_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten4_d[l_ac].stkh002 TO stkh002              #
            #DISPLAY g_sten4_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten4_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stkh002                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page4.stae004_3
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stae004_3
            #add-point:ON ACTION controlp INFIELD stae004_3 name="input.c.page4.stae004_3"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh003
            #add-point:ON ACTION controlp INFIELD stkh003 name="input.c.page4.stkh003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh008
            #add-point:ON ACTION controlp INFIELD stkh008 name="input.c.page4.stkh008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh004
            #add-point:ON ACTION controlp INFIELD stkh004 name="input.c.page4.stkh004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh005
            #add-point:ON ACTION controlp INFIELD stkh005 name="input.c.page4.stkh005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh006
            #add-point:ON ACTION controlp INFIELD stkh006 name="input.c.page4.stkh006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkh007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkh007
            #add-point:ON ACTION controlp INFIELD stkh007 name="input.c.page4.stkh007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkhsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkhsite
            #add-point:ON ACTION controlp INFIELD stkhsite name="input.c.page4.stkhsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page4.stkhunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkhunit
            #add-point:ON ACTION controlp INFIELD stkhunit name="input.c.page4.stkhunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page6_after_row name="input.body4.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten4_d[l_ac].* = g_sten4_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl6
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkh_t","'6'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page6_after_row2 name="input.body4.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body4.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten4_d[li_reproduce_target].* = g_sten4_d[li_reproduce].*
 
               LET g_sten4_d[li_reproduce_target].stkhseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten4_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten4_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten5_d FROM s_detail5.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = FALSE, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = FALSE,
                 APPEND ROW = FALSE)
                 
         #自訂ACTION(detail_input,page_7)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body5.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten5_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'7',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten5_d.getLength()
            #add-point:資料輸入前 name="input.body5.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten5_d[l_ac].* TO NULL 
            INITIALIZE g_sten5_d_t.* TO NULL 
            INITIALIZE g_sten5_d_o.* TO NULL 
            #公用欄位給值(單身7)
            
            #自定義預設值(單身7)
            
            #add-point:modify段before備份 name="input.body5.insert.before_bak"
 
            #end add-point
            LET g_sten5_d_t.* = g_sten5_d[l_ac].*     #新輸入資料
            LET g_sten5_d_o.* = g_sten5_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body5.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten5_d[li_reproduce_target].* = g_sten5_d[li_reproduce].*
 
               LET g_sten5_d[li_reproduce_target].stkiseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body5.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body5.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[7] = l_ac
            LET g_current_page = 7
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten5_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten5_d[l_ac].stkiseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten5_d_t.* = g_sten5_d[l_ac].*  #BACKUP
               LET g_sten5_d_o.* = g_sten5_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body5.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stki_t","'7'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl7 INTO g_sten5_d[l_ac].stkiseq,g_sten5_d[l_ac].stki002,g_sten5_d[l_ac].stki003, 
                      g_sten5_d[l_ac].stki010,g_sten5_d[l_ac].stki004,g_sten5_d[l_ac].stki005,g_sten5_d[l_ac].stki006, 
                      g_sten5_d[l_ac].stki007,g_sten5_d[l_ac].stki008,g_sten5_d[l_ac].stki009,g_sten5_d[l_ac].stkisite, 
                      g_sten5_d[l_ac].stkiunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten5_d_mask_o[l_ac].* =  g_sten5_d[l_ac].*
                  CALL astt806_stki_t_mask()
                  LET g_sten5_d_mask_n[l_ac].* =  g_sten5_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body5.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body5.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body5.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身7刪除前 name="input.body5.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten5_d_t.stkiseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stki_t',gs_keys,"'7'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身7刪除中 name="input.body5.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身7刪除後 name="input.body5.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body5.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten5_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身7新增前 name="input.body5.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stki_t 
             WHERE stkient = g_enterprise AND stkidocno = g_stem_m.stemdocno AND stki001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkiseq = g_sten5_d[g_detail_idx2].stkiseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身7新增前 name="input.body5.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten5_d[g_detail_idx2].stkiseq
               CALL astt806_insert_b('stki_t',gs_keys,"'7'")
                           
               #add-point:單身新增後7 name="input.body5.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body5.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten5_d[l_ac].* = g_sten5_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl7
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten5_d[l_ac].* = g_sten5_d_t.*
            ELSE
               #add-point:單身page7修改前 name="input.body5.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身7)
               
               
               #將遮罩欄位還原
               CALL astt806_stki_t_mask_restore('restore_mask_o')
               
               UPDATE stki_t SET (stkidocno,stki001,stkiseq,stki002,stki003,stki010,stki004,stki005, 
                   stki006,stki007,stki008,stki009,stkisite,stkiunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten5_d[l_ac].stkiseq,g_sten5_d[l_ac].stki002,g_sten5_d[l_ac].stki003,g_sten5_d[l_ac].stki010, 
                   g_sten5_d[l_ac].stki004,g_sten5_d[l_ac].stki005,g_sten5_d[l_ac].stki006,g_sten5_d[l_ac].stki007, 
                   g_sten5_d[l_ac].stki008,g_sten5_d[l_ac].stki009,g_sten5_d[l_ac].stkisite,g_sten5_d[l_ac].stkiunit)  
                   #自訂欄位頁簽
                WHERE stkient = g_enterprise AND stkidocno = g_stemdocno_t AND stki001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkiseq = g_sten5_d_t.stkiseq
                  
               #add-point:單身page7修改中 name="input.body5.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten5_d[l_ac].* = g_sten5_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stki_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten5_d[l_ac].* = g_sten5_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten5_d[g_detail_idx2].stkiseq
               LET gs_keys_bak[3] = g_sten5_d_t.stkiseq
               CALL astt806_update_b('stki_t',gs_keys,gs_keys_bak,"'7'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stki_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten5_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten5_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page7修改後 name="input.body5.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkiseq
            #add-point:BEFORE FIELD stkiseq name="input.b.page5.stkiseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkiseq
            
            #add-point:AFTER FIELD stkiseq name="input.a.page5.stkiseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten5_d[g_detail_idx2].stkiseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten5_d[g_detail_idx2].stkiseq != g_sten5_d_t.stkiseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stki_t WHERE "||"stkient = '" ||g_enterprise|| "' AND "||"stkidocno = '"||g_stem_m.stemdocno ||"' AND "|| "stki001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkiseq = '"||g_sten5_d[g_detail_idx2].stkiseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkiseq
            #add-point:ON CHANGE stkiseq name="input.g.page5.stkiseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki002
            
            #add-point:AFTER FIELD stki002 name="input.a.page5.stki002"
            IF NOT cl_null(g_sten5_d[l_ac].stki002) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten5_d[l_ac].stki002

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten5_d[l_ac].stki002
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten5_d[l_ac].stki002_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten5_d[l_ac].stki002_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki002
            #add-point:BEFORE FIELD stki002 name="input.b.page5.stki002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki002
            #add-point:ON CHANGE stki002 name="input.g.page5.stki002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stae004_4
            #add-point:BEFORE FIELD stae004_4 name="input.b.page5.stae004_4"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stae004_4
            
            #add-point:AFTER FIELD stae004_4 name="input.a.page5.stae004_4"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stae004_4
            #add-point:ON CHANGE stae004_4 name="input.g.page5.stae004_4"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki003
            
            #add-point:AFTER FIELD stki003 name="input.a.page5.stki003"
            IF NOT cl_null(g_sten5_d[l_ac].stki003) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten5_d[l_ac].stki003

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_staa001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten5_d[l_ac].stki003
            CALL ap_ref_array2(g_ref_fields,"SELECT staal003 FROM staal_t WHERE staalent='"||g_enterprise||"' AND staal001=? AND staal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten5_d[l_ac].stki003_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten5_d[l_ac].stki003_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki003
            #add-point:BEFORE FIELD stki003 name="input.b.page5.stki003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki003
            #add-point:ON CHANGE stki003 name="input.g.page5.stki003"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki010
            
            #add-point:AFTER FIELD stki010 name="input.a.page5.stki010"
            IF NOT cl_null(g_sten5_d[l_ac].stki010) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten2_d[g_detail_idx].stkesite
               LET g_chkparam.arg2 = g_sten5_d[l_ac].stki010
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_oodb002") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten5_d[l_ac].stki010
            CALL ap_ref_array2(g_ref_fields,"SELECT oodbl004 FROM oodbl_t WHERE oodblent='"||g_enterprise||"' AND oodbl002=? AND oodbl003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten5_d[l_ac].stki010_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten5_d[l_ac].stki010_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki010
            #add-point:BEFORE FIELD stki010 name="input.b.page5.stki010"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki010
            #add-point:ON CHANGE stki010 name="input.g.page5.stki010"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki004
            #add-point:BEFORE FIELD stki004 name="input.b.page5.stki004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki004
            
            #add-point:AFTER FIELD stki004 name="input.a.page5.stki004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki004
            #add-point:ON CHANGE stki004 name="input.g.page5.stki004"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki005
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten5_d[l_ac].stki005,"0","0","31","1","azz-00087",1) THEN
               NEXT FIELD stki005
            END IF 
 
 
 
            #add-point:AFTER FIELD stki005 name="input.a.page5.stki005"
            IF NOT cl_null(g_sten5_d[l_ac].stki005) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki005
            #add-point:BEFORE FIELD stki005 name="input.b.page5.stki005"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki005
            #add-point:ON CHANGE stki005 name="input.g.page5.stki005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki006
            #add-point:BEFORE FIELD stki006 name="input.b.page5.stki006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki006
            
            #add-point:AFTER FIELD stki006 name="input.a.page5.stki006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki006
            #add-point:ON CHANGE stki006 name="input.g.page5.stki006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki007
            #add-point:BEFORE FIELD stki007 name="input.b.page5.stki007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki007
            
            #add-point:AFTER FIELD stki007 name="input.a.page5.stki007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki007
            #add-point:ON CHANGE stki007 name="input.g.page5.stki007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki008
            #add-point:BEFORE FIELD stki008 name="input.b.page5.stki008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki008
            
            #add-point:AFTER FIELD stki008 name="input.a.page5.stki008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki008
            #add-point:ON CHANGE stki008 name="input.g.page5.stki008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stki009
            #add-point:BEFORE FIELD stki009 name="input.b.page5.stki009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stki009
            
            #add-point:AFTER FIELD stki009 name="input.a.page5.stki009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stki009
            #add-point:ON CHANGE stki009 name="input.g.page5.stki009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkisite
            #add-point:BEFORE FIELD stkisite name="input.b.page5.stkisite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkisite
            
            #add-point:AFTER FIELD stkisite name="input.a.page5.stkisite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkisite
            #add-point:ON CHANGE stkisite name="input.g.page5.stkisite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkiunit
            #add-point:BEFORE FIELD stkiunit name="input.b.page5.stkiunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkiunit
            
            #add-point:AFTER FIELD stkiunit name="input.a.page5.stkiunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkiunit
            #add-point:ON CHANGE stkiunit name="input.g.page5.stkiunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page5.stkiseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkiseq
            #add-point:ON ACTION controlp INFIELD stkiseq name="input.c.page5.stkiseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki002
            #add-point:ON ACTION controlp INFIELD stki002 name="input.c.page5.stki002"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten5_d[l_ac].stki002             #給予default值
            LET g_qryparam.default2 = "" #g_sten5_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten5_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten5_d[l_ac].stki002 = g_qryparam.return1              
            #LET g_sten5_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten5_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten5_d[l_ac].stki002 TO stki002              #
            #DISPLAY g_sten5_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten5_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stki002                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page5.stae004_4
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stae004_4
            #add-point:ON ACTION controlp INFIELD stae004_4 name="input.c.page5.stae004_4"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki003
            #add-point:ON ACTION controlp INFIELD stki003 name="input.c.page5.stki003"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten5_d[l_ac].stki003             #給予default值
            LET g_qryparam.default2 = "" #g_sten5_d[l_ac].staal003 #說明
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_staa001()                                #呼叫開窗
 
            LET g_sten5_d[l_ac].stki003 = g_qryparam.return1              
            #LET g_sten5_d[l_ac].staal003 = g_qryparam.return2 
            DISPLAY g_sten5_d[l_ac].stki003 TO stki003              #
            #DISPLAY g_sten5_d[l_ac].staal003 TO staal003 #說明
            NEXT FIELD stki003                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page5.stki010
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki010
            #add-point:ON ACTION controlp INFIELD stki010 name="input.c.page5.stki010"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten5_d[l_ac].stki010             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_sten2_d[g_detail_idx].stkesite

 
            CALL q_oodb002_1()                                #呼叫開窗
 
            LET g_sten5_d[l_ac].stki010 = g_qryparam.return1              

            DISPLAY g_sten5_d[l_ac].stki010 TO stki010              #

            NEXT FIELD stki010                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page5.stki004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki004
            #add-point:ON ACTION controlp INFIELD stki004 name="input.c.page5.stki004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki005
            #add-point:ON ACTION controlp INFIELD stki005 name="input.c.page5.stki005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki006
            #add-point:ON ACTION controlp INFIELD stki006 name="input.c.page5.stki006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki007
            #add-point:ON ACTION controlp INFIELD stki007 name="input.c.page5.stki007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki008
            #add-point:ON ACTION controlp INFIELD stki008 name="input.c.page5.stki008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stki009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stki009
            #add-point:ON ACTION controlp INFIELD stki009 name="input.c.page5.stki009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stkisite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkisite
            #add-point:ON ACTION controlp INFIELD stkisite name="input.c.page5.stkisite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page5.stkiunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkiunit
            #add-point:ON ACTION controlp INFIELD stkiunit name="input.c.page5.stkiunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page7_after_row name="input.body5.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten5_d[l_ac].* = g_sten5_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl7
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stki_t","'7'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page7_after_row2 name="input.body5.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body5.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten5_d[li_reproduce_target].* = g_sten5_d[li_reproduce].*
 
               LET g_sten5_d[li_reproduce_target].stkiseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten5_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten5_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten6_d FROM s_detail6.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_8)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body6.before_input2"
            ACCEPT DIALOG
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten6_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'8',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten6_d.getLength()
            #add-point:資料輸入前 name="input.body6.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten6_d[l_ac].* TO NULL 
            INITIALIZE g_sten6_d_t.* TO NULL 
            INITIALIZE g_sten6_d_o.* TO NULL 
            #公用欄位給值(單身8)
            
            #自定義預設值(單身8)
            
            #add-point:modify段before備份 name="input.body6.insert.before_bak"
            
            #end add-point
            LET g_sten6_d_t.* = g_sten6_d[l_ac].*     #新輸入資料
            LET g_sten6_d_o.* = g_sten6_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body6.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten6_d[li_reproduce_target].* = g_sten6_d[li_reproduce].*
 
               LET g_sten6_d[li_reproduce_target].stkjseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body6.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body6.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[8] = l_ac
            LET g_current_page = 8
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten6_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten6_d[l_ac].stkjseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten6_d_t.* = g_sten6_d[l_ac].*  #BACKUP
               LET g_sten6_d_o.* = g_sten6_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body6.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkj_t","'8'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl8 INTO g_sten6_d[l_ac].stkjacti,g_sten6_d[l_ac].stkjseq,g_sten6_d[l_ac].stkj002, 
                      g_sten6_d[l_ac].stkj003,g_sten6_d[l_ac].stkj004,g_sten6_d[l_ac].stkj005,g_sten6_d[l_ac].stkj006, 
                      g_sten6_d[l_ac].stkj007,g_sten6_d[l_ac].stkj008,g_sten6_d[l_ac].stkj009,g_sten6_d[l_ac].stkjsite, 
                      g_sten6_d[l_ac].stkjunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten6_d_mask_o[l_ac].* =  g_sten6_d[l_ac].*
                  CALL astt806_stkj_t_mask()
                  LET g_sten6_d_mask_n[l_ac].* =  g_sten6_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body6.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body6.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body6.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身8刪除前 name="input.body6.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten6_d_t.stkjseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkj_t',gs_keys,"'8'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身8刪除中 name="input.body6.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身8刪除後 name="input.body6.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body6.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten6_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身8新增前 name="input.body6.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkj_t 
             WHERE stkjent = g_enterprise AND stkjdocno = g_stem_m.stemdocno AND stkj001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkjseq = g_sten6_d[g_detail_idx2].stkjseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身8新增前 name="input.body6.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten6_d[g_detail_idx2].stkjseq
               CALL astt806_insert_b('stkj_t',gs_keys,"'8'")
                           
               #add-point:單身新增後8 name="input.body6.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body6.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten6_d[l_ac].* = g_sten6_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl8
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten6_d[l_ac].* = g_sten6_d_t.*
            ELSE
               #add-point:單身page8修改前 name="input.body6.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身8)
               
               
               #將遮罩欄位還原
               CALL astt806_stkj_t_mask_restore('restore_mask_o')
               
               UPDATE stkj_t SET (stkjdocno,stkj001,stkjacti,stkjseq,stkj002,stkj003,stkj004,stkj005, 
                   stkj006,stkj007,stkj008,stkj009,stkjsite,stkjunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten6_d[l_ac].stkjacti,g_sten6_d[l_ac].stkjseq,g_sten6_d[l_ac].stkj002,g_sten6_d[l_ac].stkj003, 
                   g_sten6_d[l_ac].stkj004,g_sten6_d[l_ac].stkj005,g_sten6_d[l_ac].stkj006,g_sten6_d[l_ac].stkj007, 
                   g_sten6_d[l_ac].stkj008,g_sten6_d[l_ac].stkj009,g_sten6_d[l_ac].stkjsite,g_sten6_d[l_ac].stkjunit)  
                   #自訂欄位頁簽
                WHERE stkjent = g_enterprise AND stkjdocno = g_stemdocno_t AND stkj001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkjseq = g_sten6_d_t.stkjseq
                  
               #add-point:單身page8修改中 name="input.body6.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten6_d[l_ac].* = g_sten6_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkj_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten6_d[l_ac].* = g_sten6_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten6_d[g_detail_idx2].stkjseq
               LET gs_keys_bak[3] = g_sten6_d_t.stkjseq
               CALL astt806_update_b('stkj_t',gs_keys,gs_keys_bak,"'8'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkj_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten6_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten6_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page8修改後 name="input.body6.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkjacti
            #add-point:BEFORE FIELD stkjacti name="input.b.page6.stkjacti"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkjacti
            
            #add-point:AFTER FIELD stkjacti name="input.a.page6.stkjacti"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkjacti
            #add-point:ON CHANGE stkjacti name="input.g.page6.stkjacti"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkjseq
            #add-point:BEFORE FIELD stkjseq name="input.b.page6.stkjseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkjseq
            
            #add-point:AFTER FIELD stkjseq name="input.a.page6.stkjseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten6_d[g_detail_idx2].stkjseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten6_d[g_detail_idx2].stkjseq != g_sten6_d_t.stkjseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkj_t WHERE "||"stkjent = '" ||g_enterprise|| "' AND "||"stkjdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkj001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkjseq = '"||g_sten6_d[g_detail_idx2].stkjseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkjseq
            #add-point:ON CHANGE stkjseq name="input.g.page6.stkjseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj002
            
            #add-point:AFTER FIELD stkj002 name="input.a.page6.stkj002"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten6_d[l_ac].stkj002
            CALL ap_ref_array2(g_ref_fields,"SELECT mhadl006 FROM mhadl_t WHERE mhadlent='"||g_enterprise||"' AND mhadl004=? AND mhadl005='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten6_d[l_ac].stkj002_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten6_d[l_ac].stkj002_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj002
            #add-point:BEFORE FIELD stkj002 name="input.b.page6.stkj002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj002
            #add-point:ON CHANGE stkj002 name="input.g.page6.stkj002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj003
            #add-point:BEFORE FIELD stkj003 name="input.b.page6.stkj003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj003
            
            #add-point:AFTER FIELD stkj003 name="input.a.page6.stkj003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj003
            #add-point:ON CHANGE stkj003 name="input.g.page6.stkj003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj004
            #add-point:BEFORE FIELD stkj004 name="input.b.page6.stkj004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj004
            
            #add-point:AFTER FIELD stkj004 name="input.a.page6.stkj004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj004
            #add-point:ON CHANGE stkj004 name="input.g.page6.stkj004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj005
            #add-point:BEFORE FIELD stkj005 name="input.b.page6.stkj005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj005
            
            #add-point:AFTER FIELD stkj005 name="input.a.page6.stkj005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj005
            #add-point:ON CHANGE stkj005 name="input.g.page6.stkj005"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj006
            
            #add-point:AFTER FIELD stkj006 name="input.a.page6.stkj006"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten6_d[l_ac].stkj006
            CALL ap_ref_array2(g_ref_fields,"SELECT mhaal003 FROM mhaal_t WHERE mhaalent='"||g_enterprise||"' AND mhaal001=? AND mhaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten6_d[l_ac].stkj006_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten6_d[l_ac].stkj006_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj006
            #add-point:BEFORE FIELD stkj006 name="input.b.page6.stkj006"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj006
            #add-point:ON CHANGE stkj006 name="input.g.page6.stkj006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj007
            
            #add-point:AFTER FIELD stkj007 name="input.a.page6.stkj007"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten6_d[l_ac].stkj006
            LET g_ref_fields[2] = g_sten6_d[l_ac].stkj007
            CALL ap_ref_array2(g_ref_fields,"SELECT mhabl004 FROM mhabl_t WHERE mhablent='"||g_enterprise||"' AND mhabl001=? AND mhabl002=? AND mhabl003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten6_d[l_ac].stkj007_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten6_d[l_ac].stkj007_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj007
            #add-point:BEFORE FIELD stkj007 name="input.b.page6.stkj007"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj007
            #add-point:ON CHANGE stkj007 name="input.g.page6.stkj007"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj008
            
            #add-point:AFTER FIELD stkj008 name="input.a.page6.stkj008"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten6_d[l_ac].stkj006
            LET g_ref_fields[2] = g_sten6_d[l_ac].stkj007
            LET g_ref_fields[3] = g_sten6_d[l_ac].stkj008
            CALL ap_ref_array2(g_ref_fields,"SELECT mhacl005 FROM mhacl_t WHERE mhaclent='"||g_enterprise||"' AND mhacl001=? AND mhacl002=? AND mhacl003=? AND mhacl004='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten6_d[l_ac].stkj008_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten6_d[l_ac].stkj008_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj008
            #add-point:BEFORE FIELD stkj008 name="input.b.page6.stkj008"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj008
            #add-point:ON CHANGE stkj008 name="input.g.page6.stkj008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkj009
            #add-point:BEFORE FIELD stkj009 name="input.b.page6.stkj009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkj009
            
            #add-point:AFTER FIELD stkj009 name="input.a.page6.stkj009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkj009
            #add-point:ON CHANGE stkj009 name="input.g.page6.stkj009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkjsite
            #add-point:BEFORE FIELD stkjsite name="input.b.page6.stkjsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkjsite
            
            #add-point:AFTER FIELD stkjsite name="input.a.page6.stkjsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkjsite
            #add-point:ON CHANGE stkjsite name="input.g.page6.stkjsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkjunit
            #add-point:BEFORE FIELD stkjunit name="input.b.page6.stkjunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkjunit
            
            #add-point:AFTER FIELD stkjunit name="input.a.page6.stkjunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkjunit
            #add-point:ON CHANGE stkjunit name="input.g.page6.stkjunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page6.stkjacti
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkjacti
            #add-point:ON ACTION controlp INFIELD stkjacti name="input.c.page6.stkjacti"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkjseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkjseq
            #add-point:ON ACTION controlp INFIELD stkjseq name="input.c.page6.stkjseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj002
            #add-point:ON ACTION controlp INFIELD stkj002 name="input.c.page6.stkj002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj003
            #add-point:ON ACTION controlp INFIELD stkj003 name="input.c.page6.stkj003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj004
            #add-point:ON ACTION controlp INFIELD stkj004 name="input.c.page6.stkj004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj005
            #add-point:ON ACTION controlp INFIELD stkj005 name="input.c.page6.stkj005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj006
            #add-point:ON ACTION controlp INFIELD stkj006 name="input.c.page6.stkj006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj007
            #add-point:ON ACTION controlp INFIELD stkj007 name="input.c.page6.stkj007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj008
            #add-point:ON ACTION controlp INFIELD stkj008 name="input.c.page6.stkj008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkj009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkj009
            #add-point:ON ACTION controlp INFIELD stkj009 name="input.c.page6.stkj009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkjsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkjsite
            #add-point:ON ACTION controlp INFIELD stkjsite name="input.c.page6.stkjsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page6.stkjunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkjunit
            #add-point:ON ACTION controlp INFIELD stkjunit name="input.c.page6.stkjunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page8_after_row name="input.body6.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten6_d[l_ac].* = g_sten6_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl8
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkj_t","'8'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page8_after_row2 name="input.body6.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body6.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten6_d[li_reproduce_target].* = g_sten6_d[li_reproduce].*
 
               LET g_sten6_d[li_reproduce_target].stkjseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten6_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten6_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten7_d FROM s_detail7.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_9)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body7.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten7_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'9',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten7_d.getLength()
            #add-point:資料輸入前 name="input.body7.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten7_d[l_ac].* TO NULL 
            INITIALIZE g_sten7_d_t.* TO NULL 
            INITIALIZE g_sten7_d_o.* TO NULL 
            #公用欄位給值(單身9)
            
            #自定義預設值(單身9)
                  LET g_sten7_d[l_ac].stkkacti = "Y"
 
            #add-point:modify段before備份 name="input.body7.insert.before_bak"
            SELECT MAX(stkkseq) INTO g_sten7_d[l_ac].stkkseq
              FROM stkk_t
             WHERE stkkent= g_enterprise
               AND stkkdocno= g_stem_m.stemdocno
               AND stkk001 = g_sten2_d[g_detail_idx].stke001
            IF cl_null(g_sten7_d[l_ac].stkkseq) THEN
               LET g_sten7_d[l_ac].stkkseq=1
            ELSE
               LET g_sten7_d[l_ac].stkkseq=g_sten7_d[l_ac].stkkseq+1
            END IF 
            LET g_sten7_d[l_ac].stkk004 = "N"
            LET g_sten7_d[l_ac].stkk005 = "N"
            #end add-point
            LET g_sten7_d_t.* = g_sten7_d[l_ac].*     #新輸入資料
            LET g_sten7_d_o.* = g_sten7_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body7.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten7_d[li_reproduce_target].* = g_sten7_d[li_reproduce].*
 
               LET g_sten7_d[li_reproduce_target].stkkseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body7.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body7.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[9] = l_ac
            LET g_current_page = 9
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten7_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten7_d[l_ac].stkkseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten7_d_t.* = g_sten7_d[l_ac].*  #BACKUP
               LET g_sten7_d_o.* = g_sten7_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body7.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkk_t","'9'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl9 INTO g_sten7_d[l_ac].stkkacti,g_sten7_d[l_ac].stkkseq,g_sten7_d[l_ac].stkk002, 
                      g_sten7_d[l_ac].stkk004,g_sten7_d[l_ac].stkk003,g_sten7_d[l_ac].stkk005,g_sten7_d[l_ac].stkksite, 
                      g_sten7_d[l_ac].stkkunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten7_d_mask_o[l_ac].* =  g_sten7_d[l_ac].*
                  CALL astt806_stkk_t_mask()
                  LET g_sten7_d_mask_n[l_ac].* =  g_sten7_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body7.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body7.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body7.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身9刪除前 name="input.body7.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten7_d_t.stkkseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkk_t',gs_keys,"'9'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身9刪除中 name="input.body7.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身9刪除後 name="input.body7.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body7.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten7_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身9新增前 name="input.body7.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkk_t 
             WHERE stkkent = g_enterprise AND stkkdocno = g_stem_m.stemdocno AND stkk001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkkseq = g_sten7_d[g_detail_idx2].stkkseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身9新增前 name="input.body7.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten7_d[g_detail_idx2].stkkseq
               CALL astt806_insert_b('stkk_t',gs_keys,"'9'")
                           
               #add-point:單身新增後9 name="input.body7.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body7.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten7_d[l_ac].* = g_sten7_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl9
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten7_d[l_ac].* = g_sten7_d_t.*
            ELSE
               #add-point:單身page9修改前 name="input.body7.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身9)
               
               
               #將遮罩欄位還原
               CALL astt806_stkk_t_mask_restore('restore_mask_o')
               
               UPDATE stkk_t SET (stkkdocno,stkk001,stkkacti,stkkseq,stkk002,stkk004,stkk003,stkk005, 
                   stkksite,stkkunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten7_d[l_ac].stkkacti, 
                   g_sten7_d[l_ac].stkkseq,g_sten7_d[l_ac].stkk002,g_sten7_d[l_ac].stkk004,g_sten7_d[l_ac].stkk003, 
                   g_sten7_d[l_ac].stkk005,g_sten7_d[l_ac].stkksite,g_sten7_d[l_ac].stkkunit) #自訂欄位頁簽 
 
                WHERE stkkent = g_enterprise AND stkkdocno = g_stemdocno_t AND stkk001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkkseq = g_sten7_d_t.stkkseq
                  
               #add-point:單身page9修改中 name="input.body7.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten7_d[l_ac].* = g_sten7_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkk_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten7_d[l_ac].* = g_sten7_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten7_d[g_detail_idx2].stkkseq
               LET gs_keys_bak[3] = g_sten7_d_t.stkkseq
               CALL astt806_update_b('stkk_t',gs_keys,gs_keys_bak,"'9'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkk_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten7_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten7_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page9修改後 name="input.body7.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkkacti
            #add-point:BEFORE FIELD stkkacti name="input.b.page7.stkkacti"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkkacti
            
            #add-point:AFTER FIELD stkkacti name="input.a.page7.stkkacti"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkkacti
            #add-point:ON CHANGE stkkacti name="input.g.page7.stkkacti"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkkseq
            #add-point:BEFORE FIELD stkkseq name="input.b.page7.stkkseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkkseq
            
            #add-point:AFTER FIELD stkkseq name="input.a.page7.stkkseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten7_d[g_detail_idx2].stkkseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten7_d[g_detail_idx2].stkkseq != g_sten7_d_t.stkkseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkk_t WHERE "||"stkkent = '" ||g_enterprise|| "' AND "||"stkkdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkk001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkkseq = '"||g_sten7_d[g_detail_idx2].stkkseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkkseq
            #add-point:ON CHANGE stkkseq name="input.g.page7.stkkseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkk002
            
            #add-point:AFTER FIELD stkk002 name="input.a.page7.stkk002"
            IF NOT cl_null(g_sten7_d[l_ac].stkk002) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten7_d[l_ac].stkk002
               LET g_chkparam.arg2 = cl_get_para(g_enterprise,g_site,'E-CIR-0001')
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_rtax001_2") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten7_d[l_ac].stkk002
            CALL ap_ref_array2(g_ref_fields,"SELECT rtaxl003 FROM rtaxl_t WHERE rtaxlent='"||g_enterprise||"' AND rtaxl001=? AND rtaxl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten7_d[l_ac].stkk002_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten7_d[l_ac].stkk002_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkk002
            #add-point:BEFORE FIELD stkk002 name="input.b.page7.stkk002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkk002
            #add-point:ON CHANGE stkk002 name="input.g.page7.stkk002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkk004
            #add-point:BEFORE FIELD stkk004 name="input.b.page7.stkk004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkk004
            
            #add-point:AFTER FIELD stkk004 name="input.a.page7.stkk004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkk004
            #add-point:ON CHANGE stkk004 name="input.g.page7.stkk004"
            IF NOT cl_null(g_sten7_d[l_ac].stkk004) THEN
               IF g_sten7_d[l_ac].stkk004 = 'Y' THEN
                  #整单必须有且仅有一个主品类
                  LET l_cnt = 0
                  SELECT COUNT(*) INTO l_cnt 
                    FROM stkk_t 
                   WHERE stkkent = g_enterprise 
                     AND stkkdocno = g_stem_m.stemdocno
                     AND stkk001 = g_sten2_d[g_detail_idx].stke001
                     AND stkk004 = 'Y'
                  IF l_cnt > 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'ast-00597'
                     LET g_errparam.extend = ''
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                     LET g_sten7_d[l_ac].stkk004 = 'N'
                     NEXT FIELD stkk004                          
                  END IF             
               END IF      
            END IF   
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkk003
            
            #add-point:AFTER FIELD stkk003 name="input.a.page7.stkk003"
            IF NOT cl_null(g_sten7_d[l_ac].stkk003) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten7_d[l_ac].stkk003

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_oocq002_2002") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten7_d[l_ac].stkk003
            CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2002' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten7_d[l_ac].stkk003_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten7_d[l_ac].stkk003_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkk003
            #add-point:BEFORE FIELD stkk003 name="input.b.page7.stkk003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkk003
            #add-point:ON CHANGE stkk003 name="input.g.page7.stkk003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkk005
            #add-point:BEFORE FIELD stkk005 name="input.b.page7.stkk005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkk005
            
            #add-point:AFTER FIELD stkk005 name="input.a.page7.stkk005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkk005
            #add-point:ON CHANGE stkk005 name="input.g.page7.stkk005"
            IF NOT cl_null(g_sten7_d[l_ac].stkk005) THEN
               IF g_sten7_d[l_ac].stkk005 = 'Y' THEN
                  #整单必须有且仅有一个主品类
                  LET l_cnt = 0
                  SELECT COUNT(*) INTO l_cnt 
                    FROM stkk_t 
                   WHERE stkkent = g_enterprise 
                     AND stkkdocno = g_stem_m.stemdocno
                     AND stkk001 = g_sten2_d[g_detail_idx].stke001
                     AND stkk005 = 'Y'
                  IF l_cnt > 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'ast-00598'
                     LET g_errparam.extend = ''
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                     LET g_sten7_d[l_ac].stkk005 = 'N'
                     NEXT FIELD  stkk005                          
                  END IF             
               END IF      
            END IF   
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkksite
            #add-point:BEFORE FIELD stkksite name="input.b.page7.stkksite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkksite
            
            #add-point:AFTER FIELD stkksite name="input.a.page7.stkksite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkksite
            #add-point:ON CHANGE stkksite name="input.g.page7.stkksite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkkunit
            #add-point:BEFORE FIELD stkkunit name="input.b.page7.stkkunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkkunit
            
            #add-point:AFTER FIELD stkkunit name="input.a.page7.stkkunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkkunit
            #add-point:ON CHANGE stkkunit name="input.g.page7.stkkunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page7.stkkacti
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkkacti
            #add-point:ON ACTION controlp INFIELD stkkacti name="input.c.page7.stkkacti"
            
            #END add-point
 
 
         #Ctrlp:input.c.page7.stkkseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkkseq
            #add-point:ON ACTION controlp INFIELD stkkseq name="input.c.page7.stkkseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page7.stkk002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkk002
            #add-point:ON ACTION controlp INFIELD stkk002 name="input.c.page7.stkk002"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten7_d[l_ac].stkk002             #給予default值

            #給予arg
            LET g_qryparam.arg1 = cl_get_para(g_enterprise,g_site,'E-CIR-0001')

 
            CALL q_rtax001_3()                                #呼叫開窗
 
            LET g_sten7_d[l_ac].stkk002 = g_qryparam.return1              

            DISPLAY g_sten7_d[l_ac].stkk002 TO stkk002              #

            NEXT FIELD stkk002                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page7.stkk004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkk004
            #add-point:ON ACTION controlp INFIELD stkk004 name="input.c.page7.stkk004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page7.stkk003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkk003
            #add-point:ON ACTION controlp INFIELD stkk003 name="input.c.page7.stkk003"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten7_d[l_ac].stkk003             #給予default值
            LET g_qryparam.default2 = "" #g_sten7_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_oocq002_2002()                                #呼叫開窗
 
            LET g_sten7_d[l_ac].stkk003 = g_qryparam.return1              
            #LET g_sten7_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_sten7_d[l_ac].stkk003 TO stkk003              #
            #DISPLAY g_sten7_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD stkk003                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page7.stkk005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkk005
            #add-point:ON ACTION controlp INFIELD stkk005 name="input.c.page7.stkk005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page7.stkksite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkksite
            #add-point:ON ACTION controlp INFIELD stkksite name="input.c.page7.stkksite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page7.stkkunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkkunit
            #add-point:ON ACTION controlp INFIELD stkkunit name="input.c.page7.stkkunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page9_after_row name="input.body7.after_row"
            #根据单身的主品类和主品牌更新单头的品类和品牌
            IF g_sten7_d[l_ac].stkk004 = 'Y' THEN
               UPDATE stke_t SET stke027 = '',
                                 stke028 = g_sten7_d[l_ac].stkk002
                WHERE stkeent = g_enterprise
                  AND stkedocno = g_stem_m.stemdocno
                  AND stke001 = g_sten2_d[g_detail_idx].stke001
                IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "upd_stke"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  CLOSE astt806_bcl9
                  CLOSE astt806_bcl2
                  CALL s_transaction_end('N','0')
                  EXIT DIALOG 
                END IF 
            END IF  
            IF g_sten7_d[l_ac].stkk005 = 'Y' THEN
               UPDATE stke_t SET stke029 = g_sten7_d[l_ac].stkk003
                WHERE stkeent = g_enterprise
                  AND stkedocno = g_stem_m.stemdocno
                  AND stke001 = g_sten2_d[g_detail_idx].stke001
                IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "upd_stke"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  CLOSE astt806_bcl9
                  CLOSE astt806_bcl2
                  CALL s_transaction_end('N','0')
                  EXIT DIALOG 
                END IF 
            END IF     
            CALL astt806_b_fill()
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten7_d[l_ac].* = g_sten7_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl9
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkk_t","'9'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page9_after_row2 name="input.body7.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body7.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten7_d[li_reproduce_target].* = g_sten7_d[li_reproduce].*
 
               LET g_sten7_d[li_reproduce_target].stkkseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten7_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten7_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten8_d FROM s_detail8.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_10)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body8.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten8_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'10',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten8_d.getLength()
            #add-point:資料輸入前 name="input.body8.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten8_d[l_ac].* TO NULL 
            INITIALIZE g_sten8_d_t.* TO NULL 
            INITIALIZE g_sten8_d_o.* TO NULL 
            #公用欄位給值(單身10)
            
            #自定義預設值(單身10)
            
            #add-point:modify段before備份 name="input.body8.insert.before_bak"
            SELECT MAX(stklseq) INTO g_sten8_d[l_ac].stklseq
              FROM stkl_t
             WHERE stklent= g_enterprise
               AND stkldocno= g_stem_m.stemdocno
               AND stkl001 = g_sten2_d[g_detail_idx].stke001
            IF cl_null(g_sten8_d[l_ac].stklseq) THEN
               LET g_sten8_d[l_ac].stklseq=1
            ELSE
               LET g_sten8_d[l_ac].stklseq=g_sten8_d[l_ac].stklseq+1
            END IF
            #end add-point
            LET g_sten8_d_t.* = g_sten8_d[l_ac].*     #新輸入資料
            LET g_sten8_d_o.* = g_sten8_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body8.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten8_d[li_reproduce_target].* = g_sten8_d[li_reproduce].*
 
               LET g_sten8_d[li_reproduce_target].stklseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body8.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body8.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[10] = l_ac
            LET g_current_page = 10
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten8_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten8_d[l_ac].stklseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten8_d_t.* = g_sten8_d[l_ac].*  #BACKUP
               LET g_sten8_d_o.* = g_sten8_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body8.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkl_t","'10'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl10 INTO g_sten8_d[l_ac].stklseq,g_sten8_d[l_ac].stkl002,g_sten8_d[l_ac].stkl003, 
                      g_sten8_d[l_ac].stkl004,g_sten8_d[l_ac].stkl005,g_sten8_d[l_ac].stkl006,g_sten8_d[l_ac].stkl007, 
                      g_sten8_d[l_ac].stkl008,g_sten8_d[l_ac].stklsite,g_sten8_d[l_ac].stklunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten8_d_mask_o[l_ac].* =  g_sten8_d[l_ac].*
                  CALL astt806_stkl_t_mask()
                  LET g_sten8_d_mask_n[l_ac].* =  g_sten8_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body8.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body8.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body8.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身10刪除前 name="input.body8.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten8_d_t.stklseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkl_t',gs_keys,"'10'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身10刪除中 name="input.body8.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身10刪除後 name="input.body8.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body8.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten8_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身10新增前 name="input.body8.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkl_t 
             WHERE stklent = g_enterprise AND stkldocno = g_stem_m.stemdocno AND stkl001 = g_sten2_d[g_detail_idx].stke001  
                 AND stklseq = g_sten8_d[g_detail_idx2].stklseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身10新增前 name="input.body8.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten8_d[g_detail_idx2].stklseq
               CALL astt806_insert_b('stkl_t',gs_keys,"'10'")
                           
               #add-point:單身新增後10 name="input.body8.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body8.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten8_d[l_ac].* = g_sten8_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl10
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten8_d[l_ac].* = g_sten8_d_t.*
            ELSE
               #add-point:單身page10修改前 name="input.body8.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身10)
               
               
               #將遮罩欄位還原
               CALL astt806_stkl_t_mask_restore('restore_mask_o')
               
               UPDATE stkl_t SET (stkldocno,stkl001,stklseq,stkl002,stkl003,stkl004,stkl005,stkl006, 
                   stkl007,stkl008,stklsite,stklunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten8_d[l_ac].stklseq,g_sten8_d[l_ac].stkl002,g_sten8_d[l_ac].stkl003,g_sten8_d[l_ac].stkl004, 
                   g_sten8_d[l_ac].stkl005,g_sten8_d[l_ac].stkl006,g_sten8_d[l_ac].stkl007,g_sten8_d[l_ac].stkl008, 
                   g_sten8_d[l_ac].stklsite,g_sten8_d[l_ac].stklunit) #自訂欄位頁簽
                WHERE stklent = g_enterprise AND stkldocno = g_stemdocno_t AND stkl001 = g_sten2_d[g_detail_idx].stke001  
                    AND stklseq = g_sten8_d_t.stklseq
                  
               #add-point:單身page10修改中 name="input.body8.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten8_d[l_ac].* = g_sten8_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkl_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten8_d[l_ac].* = g_sten8_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten8_d[g_detail_idx2].stklseq
               LET gs_keys_bak[3] = g_sten8_d_t.stklseq
               CALL astt806_update_b('stkl_t',gs_keys,gs_keys_bak,"'10'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkl_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten8_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten8_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page10修改後 name="input.body8.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stklseq
            #add-point:BEFORE FIELD stklseq name="input.b.page8.stklseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stklseq
            
            #add-point:AFTER FIELD stklseq name="input.a.page8.stklseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten8_d[g_detail_idx2].stklseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten8_d[g_detail_idx2].stklseq != g_sten8_d_t.stklseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkl_t WHERE "||"stklent = '" ||g_enterprise|| "' AND "||"stkldocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkl001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stklseq = '"||g_sten8_d[g_detail_idx2].stklseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stklseq
            #add-point:ON CHANGE stklseq name="input.g.page8.stklseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl002
            #add-point:BEFORE FIELD stkl002 name="input.b.page8.stkl002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl002
            
            #add-point:AFTER FIELD stkl002 name="input.a.page8.stkl002"



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl002
            #add-point:ON CHANGE stkl002 name="input.g.page8.stkl002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl003
            
            #add-point:AFTER FIELD stkl003 name="input.a.page8.stkl003"
            IF NOT cl_null(g_sten8_d[l_ac].stkl003) THEN 
#應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_sten8_d[l_ac].stkl003

                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
 


            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten8_d[l_ac].stkl003
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten8_d[l_ac].stkl003_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten8_d[l_ac].stkl003_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl003
            #add-point:BEFORE FIELD stkl003 name="input.b.page8.stkl003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl003
            #add-point:ON CHANGE stkl003 name="input.g.page8.stkl003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl004
            #add-point:BEFORE FIELD stkl004 name="input.b.page8.stkl004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl004
            
            #add-point:AFTER FIELD stkl004 name="input.a.page8.stkl004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl004
            #add-point:ON CHANGE stkl004 name="input.g.page8.stkl004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl005
            #add-point:BEFORE FIELD stkl005 name="input.b.page8.stkl005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl005
            
            #add-point:AFTER FIELD stkl005 name="input.a.page8.stkl005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl005
            #add-point:ON CHANGE stkl005 name="input.g.page8.stkl005"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl006
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten8_d[l_ac].stkl006,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkl006
            END IF 
 
 
 
            #add-point:AFTER FIELD stkl006 name="input.a.page8.stkl006"
            IF NOT cl_null(g_sten8_d[l_ac].stkl006) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl006
            #add-point:BEFORE FIELD stkl006 name="input.b.page8.stkl006"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl006
            #add-point:ON CHANGE stkl006 name="input.g.page8.stkl006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl007
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten8_d[l_ac].stkl007,"0","1","","","azz-00079",1) THEN
               NEXT FIELD stkl007
            END IF 
 
 
 
            #add-point:AFTER FIELD stkl007 name="input.a.page8.stkl007"
            IF NOT cl_null(g_sten8_d[l_ac].stkl007) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl007
            #add-point:BEFORE FIELD stkl007 name="input.b.page8.stkl007"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl007
            #add-point:ON CHANGE stkl007 name="input.g.page8.stkl007"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkl008
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten8_d[l_ac].stkl008,"0","1","","","azz-00079",1) THEN
               NEXT FIELD stkl008
            END IF 
 
 
 
            #add-point:AFTER FIELD stkl008 name="input.a.page8.stkl008"
            IF NOT cl_null(g_sten8_d[l_ac].stkl008) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkl008
            #add-point:BEFORE FIELD stkl008 name="input.b.page8.stkl008"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkl008
            #add-point:ON CHANGE stkl008 name="input.g.page8.stkl008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stklsite
            #add-point:BEFORE FIELD stklsite name="input.b.page8.stklsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stklsite
            
            #add-point:AFTER FIELD stklsite name="input.a.page8.stklsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stklsite
            #add-point:ON CHANGE stklsite name="input.g.page8.stklsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stklunit
            #add-point:BEFORE FIELD stklunit name="input.b.page8.stklunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stklunit
            
            #add-point:AFTER FIELD stklunit name="input.a.page8.stklunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stklunit
            #add-point:ON CHANGE stklunit name="input.g.page8.stklunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page8.stklseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stklseq
            #add-point:ON ACTION controlp INFIELD stklseq name="input.c.page8.stklseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl002
            #add-point:ON ACTION controlp INFIELD stkl002 name="input.c.page8.stkl002"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten8_d[l_ac].stkl002             #給予default值
            LET g_qryparam.default2 = "" #g_sten8_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten8_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten8_d[l_ac].stkl002 = g_qryparam.return1              
            #LET g_sten8_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten8_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten8_d[l_ac].stkl002 TO stkl002              #
            #DISPLAY g_sten8_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten8_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stkl002                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl003
            #add-point:ON ACTION controlp INFIELD stkl003 name="input.c.page8.stkl003"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten8_d[l_ac].stkl003             #給予default值
            LET g_qryparam.default2 = "" #g_sten8_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_sten8_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.arg1 = "" #s

 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten8_d[l_ac].stkl003 = g_qryparam.return1              
            #LET g_sten8_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_sten8_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten8_d[l_ac].stkl003 TO stkl003              #
            #DISPLAY g_sten8_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_sten8_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stkl003                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl004
            #add-point:ON ACTION controlp INFIELD stkl004 name="input.c.page8.stkl004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl005
            #add-point:ON ACTION controlp INFIELD stkl005 name="input.c.page8.stkl005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl006
            #add-point:ON ACTION controlp INFIELD stkl006 name="input.c.page8.stkl006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl007
            #add-point:ON ACTION controlp INFIELD stkl007 name="input.c.page8.stkl007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stkl008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkl008
            #add-point:ON ACTION controlp INFIELD stkl008 name="input.c.page8.stkl008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stklsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stklsite
            #add-point:ON ACTION controlp INFIELD stklsite name="input.c.page8.stklsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page8.stklunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stklunit
            #add-point:ON ACTION controlp INFIELD stklunit name="input.c.page8.stklunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page10_after_row name="input.body8.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten8_d[l_ac].* = g_sten8_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl10
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkl_t","'10'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page10_after_row2 name="input.body8.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body8.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten8_d[li_reproduce_target].* = g_sten8_d[li_reproduce].*
 
               LET g_sten8_d[li_reproduce_target].stklseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten8_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten8_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten9_d FROM s_detail9.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_11)
         
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body9.before_input2"
            ACCEPT DIALOG
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten9_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'11',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten9_d.getLength()
            #add-point:資料輸入前 name="input.body9.before_input"
            
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten9_d[l_ac].* TO NULL 
            INITIALIZE g_sten9_d_t.* TO NULL 
            INITIALIZE g_sten9_d_o.* TO NULL 
            #公用欄位給值(單身11)
            
            #自定義預設值(單身11)
                  LET g_sten9_d[l_ac].stkm007 = "0"
      LET g_sten9_d[l_ac].stkm008 = "0"
      LET g_sten9_d[l_ac].stkm009 = "0"
      LET g_sten9_d[l_ac].stkm010 = "0"
      LET g_sten9_d[l_ac].stkm011 = "0"
      LET g_sten9_d[l_ac].stkm012 = "0"
      LET g_sten9_d[l_ac].stkm013 = "0"
      LET g_sten9_d[l_ac].stkm014 = "0"
 
            #add-point:modify段before備份 name="input.body9.insert.before_bak"
            
            #end add-point
            LET g_sten9_d_t.* = g_sten9_d[l_ac].*     #新輸入資料
            LET g_sten9_d_o.* = g_sten9_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body9.insert.after_set_entry_b"
            
            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten9_d[li_reproduce_target].* = g_sten9_d[li_reproduce].*
 
               LET g_sten9_d[li_reproduce_target].stkmseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body9.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body9.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[11] = l_ac
            LET g_current_page = 11
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten9_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten9_d[l_ac].stkmseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten9_d_t.* = g_sten9_d[l_ac].*  #BACKUP
               LET g_sten9_d_o.* = g_sten9_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body9.after_set_entry_b"
               
               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkm_t","'11'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl11 INTO g_sten9_d[l_ac].stkmseq,g_sten9_d[l_ac].stkm002,g_sten9_d[l_ac].stkm003, 
                      g_sten9_d[l_ac].stkm004,g_sten9_d[l_ac].stkm005,g_sten9_d[l_ac].stkm006,g_sten9_d[l_ac].stkm007, 
                      g_sten9_d[l_ac].stkm008,g_sten9_d[l_ac].stkm009,g_sten9_d[l_ac].stkm010,g_sten9_d[l_ac].stkm011, 
                      g_sten9_d[l_ac].stkm012,g_sten9_d[l_ac].stkm013,g_sten9_d[l_ac].stkm014,g_sten9_d[l_ac].stkm015, 
                      g_sten9_d[l_ac].stkm016,g_sten9_d[l_ac].stkm017,g_sten9_d[l_ac].stkm018,g_sten9_d[l_ac].stkm019, 
                      g_sten9_d[l_ac].stkmsite,g_sten9_d[l_ac].stkmunit
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten9_d_mask_o[l_ac].* =  g_sten9_d[l_ac].*
                  CALL astt806_stkm_t_mask()
                  LET g_sten9_d_mask_n[l_ac].* =  g_sten9_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body9.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body9.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body9.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身11刪除前 name="input.body9.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten9_d_t.stkmseq
 
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkm_t',gs_keys,"'11'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身11刪除中 name="input.body9.m_delete"
               
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身11刪除後 name="input.body9.a_delete"
               
               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body9.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten9_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身11新增前 name="input.body9.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkm_t 
             WHERE stkment = g_enterprise AND stkmdocno = g_stem_m.stemdocno AND stkm001 = g_sten2_d[g_detail_idx].stke001  
                 AND stkmseq = g_sten9_d[g_detail_idx2].stkmseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身11新增前 name="input.body9.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten9_d[g_detail_idx2].stkmseq
               CALL astt806_insert_b('stkm_t',gs_keys,"'11'")
                           
               #add-point:單身新增後11 name="input.body9.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt806_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body9.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten9_d[l_ac].* = g_sten9_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl11
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_sten9_d[l_ac].* = g_sten9_d_t.*
            ELSE
               #add-point:單身page11修改前 name="input.body9.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身11)
               
               
               #將遮罩欄位還原
               CALL astt806_stkm_t_mask_restore('restore_mask_o')
               
               UPDATE stkm_t SET (stkmdocno,stkm001,stkmseq,stkm002,stkm003,stkm004,stkm005,stkm006, 
                   stkm007,stkm008,stkm009,stkm010,stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017, 
                   stkm018,stkm019,stkmsite,stkmunit) = (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001, 
                   g_sten9_d[l_ac].stkmseq,g_sten9_d[l_ac].stkm002,g_sten9_d[l_ac].stkm003,g_sten9_d[l_ac].stkm004, 
                   g_sten9_d[l_ac].stkm005,g_sten9_d[l_ac].stkm006,g_sten9_d[l_ac].stkm007,g_sten9_d[l_ac].stkm008, 
                   g_sten9_d[l_ac].stkm009,g_sten9_d[l_ac].stkm010,g_sten9_d[l_ac].stkm011,g_sten9_d[l_ac].stkm012, 
                   g_sten9_d[l_ac].stkm013,g_sten9_d[l_ac].stkm014,g_sten9_d[l_ac].stkm015,g_sten9_d[l_ac].stkm016, 
                   g_sten9_d[l_ac].stkm017,g_sten9_d[l_ac].stkm018,g_sten9_d[l_ac].stkm019,g_sten9_d[l_ac].stkmsite, 
                   g_sten9_d[l_ac].stkmunit) #自訂欄位頁簽
                WHERE stkment = g_enterprise AND stkmdocno = g_stemdocno_t AND stkm001 = g_sten2_d[g_detail_idx].stke001  
                    AND stkmseq = g_sten9_d_t.stkmseq
                  
               #add-point:單身page11修改中 name="input.body9.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_sten9_d[l_ac].* = g_sten9_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkm_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_sten9_d[l_ac].* = g_sten9_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys_bak[1] = g_stemdocno_t
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten9_d[g_detail_idx2].stkmseq
               LET gs_keys_bak[3] = g_sten9_d_t.stkmseq
               CALL astt806_update_b('stkm_t',gs_keys,gs_keys_bak,"'11'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL astt806_stkm_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten9_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten9_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page11修改後 name="input.body9.a_update"
               
               #end add-point
            END IF
         
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkmseq
            #add-point:BEFORE FIELD stkmseq name="input.b.page9.stkmseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkmseq
            
            #add-point:AFTER FIELD stkmseq name="input.a.page9.stkmseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten9_d[g_detail_idx2].stkmseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten9_d[g_detail_idx2].stkmseq != g_sten9_d_t.stkmseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkm_t WHERE "||"stkment = '" ||g_enterprise|| "' AND "||"stkmdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkm001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkmseq = '"||g_sten9_d[g_detail_idx2].stkmseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkmseq
            #add-point:ON CHANGE stkmseq name="input.g.page9.stkmseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm002
            #add-point:BEFORE FIELD stkm002 name="input.b.page9.stkm002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm002
            
            #add-point:AFTER FIELD stkm002 name="input.a.page9.stkm002"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm002
            #add-point:ON CHANGE stkm002 name="input.g.page9.stkm002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm003
            
            #add-point:AFTER FIELD stkm003 name="input.a.page9.stkm003"
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten9_d[l_ac].stkm003
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten9_d[l_ac].stkm003_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten9_d[l_ac].stkm003_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm003
            #add-point:BEFORE FIELD stkm003 name="input.b.page9.stkm003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm003
            #add-point:ON CHANGE stkm003 name="input.g.page9.stkm003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm004
            #add-point:BEFORE FIELD stkm004 name="input.b.page9.stkm004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm004
            
            #add-point:AFTER FIELD stkm004 name="input.a.page9.stkm004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm004
            #add-point:ON CHANGE stkm004 name="input.g.page9.stkm004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm005
            #add-point:BEFORE FIELD stkm005 name="input.b.page9.stkm005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm005
            
            #add-point:AFTER FIELD stkm005 name="input.a.page9.stkm005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm005
            #add-point:ON CHANGE stkm005 name="input.g.page9.stkm005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm006
            #add-point:BEFORE FIELD stkm006 name="input.b.page9.stkm006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm006
            
            #add-point:AFTER FIELD stkm006 name="input.a.page9.stkm006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm006
            #add-point:ON CHANGE stkm006 name="input.g.page9.stkm006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm007
            #add-point:BEFORE FIELD stkm007 name="input.b.page9.stkm007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm007
            
            #add-point:AFTER FIELD stkm007 name="input.a.page9.stkm007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm007
            #add-point:ON CHANGE stkm007 name="input.g.page9.stkm007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm008
            #add-point:BEFORE FIELD stkm008 name="input.b.page9.stkm008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm008
            
            #add-point:AFTER FIELD stkm008 name="input.a.page9.stkm008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm008
            #add-point:ON CHANGE stkm008 name="input.g.page9.stkm008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm009
            #add-point:BEFORE FIELD stkm009 name="input.b.page9.stkm009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm009
            
            #add-point:AFTER FIELD stkm009 name="input.a.page9.stkm009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm009
            #add-point:ON CHANGE stkm009 name="input.g.page9.stkm009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm010
            #add-point:BEFORE FIELD stkm010 name="input.b.page9.stkm010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm010
            
            #add-point:AFTER FIELD stkm010 name="input.a.page9.stkm010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm010
            #add-point:ON CHANGE stkm010 name="input.g.page9.stkm010"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm011
            #add-point:BEFORE FIELD stkm011 name="input.b.page9.stkm011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm011
            
            #add-point:AFTER FIELD stkm011 name="input.a.page9.stkm011"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm011
            #add-point:ON CHANGE stkm011 name="input.g.page9.stkm011"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm012
            #add-point:BEFORE FIELD stkm012 name="input.b.page9.stkm012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm012
            
            #add-point:AFTER FIELD stkm012 name="input.a.page9.stkm012"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm012
            #add-point:ON CHANGE stkm012 name="input.g.page9.stkm012"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm013
            #add-point:BEFORE FIELD stkm013 name="input.b.page9.stkm013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm013
            
            #add-point:AFTER FIELD stkm013 name="input.a.page9.stkm013"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm013
            #add-point:ON CHANGE stkm013 name="input.g.page9.stkm013"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm014
            #add-point:BEFORE FIELD stkm014 name="input.b.page9.stkm014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm014
            
            #add-point:AFTER FIELD stkm014 name="input.a.page9.stkm014"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm014
            #add-point:ON CHANGE stkm014 name="input.g.page9.stkm014"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm015
            #add-point:BEFORE FIELD stkm015 name="input.b.page9.stkm015"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm015
            
            #add-point:AFTER FIELD stkm015 name="input.a.page9.stkm015"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm015
            #add-point:ON CHANGE stkm015 name="input.g.page9.stkm015"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm016
            #add-point:BEFORE FIELD stkm016 name="input.b.page9.stkm016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm016
            
            #add-point:AFTER FIELD stkm016 name="input.a.page9.stkm016"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm016
            #add-point:ON CHANGE stkm016 name="input.g.page9.stkm016"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm017
            #add-point:BEFORE FIELD stkm017 name="input.b.page9.stkm017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm017
            
            #add-point:AFTER FIELD stkm017 name="input.a.page9.stkm017"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm017
            #add-point:ON CHANGE stkm017 name="input.g.page9.stkm017"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm018
            #add-point:BEFORE FIELD stkm018 name="input.b.page9.stkm018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm018
            
            #add-point:AFTER FIELD stkm018 name="input.a.page9.stkm018"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm018
            #add-point:ON CHANGE stkm018 name="input.g.page9.stkm018"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkm019
            #add-point:BEFORE FIELD stkm019 name="input.b.page9.stkm019"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkm019
            
            #add-point:AFTER FIELD stkm019 name="input.a.page9.stkm019"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkm019
            #add-point:ON CHANGE stkm019 name="input.g.page9.stkm019"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkmsite
            #add-point:BEFORE FIELD stkmsite name="input.b.page9.stkmsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkmsite
            
            #add-point:AFTER FIELD stkmsite name="input.a.page9.stkmsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkmsite
            #add-point:ON CHANGE stkmsite name="input.g.page9.stkmsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkmunit
            #add-point:BEFORE FIELD stkmunit name="input.b.page9.stkmunit"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkmunit
            
            #add-point:AFTER FIELD stkmunit name="input.a.page9.stkmunit"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkmunit
            #add-point:ON CHANGE stkmunit name="input.g.page9.stkmunit"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page9.stkmseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkmseq
            #add-point:ON ACTION controlp INFIELD stkmseq name="input.c.page9.stkmseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm002
            #add-point:ON ACTION controlp INFIELD stkm002 name="input.c.page9.stkm002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm003
            #add-point:ON ACTION controlp INFIELD stkm003 name="input.c.page9.stkm003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm004
            #add-point:ON ACTION controlp INFIELD stkm004 name="input.c.page9.stkm004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm005
            #add-point:ON ACTION controlp INFIELD stkm005 name="input.c.page9.stkm005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm006
            #add-point:ON ACTION controlp INFIELD stkm006 name="input.c.page9.stkm006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm007
            #add-point:ON ACTION controlp INFIELD stkm007 name="input.c.page9.stkm007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm008
            #add-point:ON ACTION controlp INFIELD stkm008 name="input.c.page9.stkm008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm009
            #add-point:ON ACTION controlp INFIELD stkm009 name="input.c.page9.stkm009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm010
            #add-point:ON ACTION controlp INFIELD stkm010 name="input.c.page9.stkm010"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm011
            #add-point:ON ACTION controlp INFIELD stkm011 name="input.c.page9.stkm011"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm012
            #add-point:ON ACTION controlp INFIELD stkm012 name="input.c.page9.stkm012"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm013
            #add-point:ON ACTION controlp INFIELD stkm013 name="input.c.page9.stkm013"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm014
            #add-point:ON ACTION controlp INFIELD stkm014 name="input.c.page9.stkm014"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm015
            #add-point:ON ACTION controlp INFIELD stkm015 name="input.c.page9.stkm015"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm016
            #add-point:ON ACTION controlp INFIELD stkm016 name="input.c.page9.stkm016"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm017
            #add-point:ON ACTION controlp INFIELD stkm017 name="input.c.page9.stkm017"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm018
            #add-point:ON ACTION controlp INFIELD stkm018 name="input.c.page9.stkm018"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkm019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkm019
            #add-point:ON ACTION controlp INFIELD stkm019 name="input.c.page9.stkm019"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkmsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkmsite
            #add-point:ON ACTION controlp INFIELD stkmsite name="input.c.page9.stkmsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page9.stkmunit
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkmunit
            #add-point:ON ACTION controlp INFIELD stkmunit name="input.c.page9.stkmunit"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page11_after_row name="input.body9.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten9_d[l_ac].* = g_sten9_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE astt806_bcl11
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkm_t","'11'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page11_after_row2 name="input.body9.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body9.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten9_d[li_reproduce_target].* = g_sten9_d[li_reproduce].*
 
               LET g_sten9_d[li_reproduce_target].stkmseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten9_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten9_d.getLength()+1
            END IF
        
      END INPUT
 
 
 
 
{</section>}
 
{<section id="astt806.input.other" >}
      
      #add-point:自定義input name="input.more_input"
      INPUT ARRAY g_sten12_d FROM s_detail12.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[4]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #add-point:資料輸入前 name="input.body3.before_input2"
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten12_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'12',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten12_d.getLength()
            #add-point:資料輸入前 name="input.body3.before_input"

            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body3.before_row2"

            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[12] = l_ac
            LET g_current_page = 12
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
            IF STATUS THEN
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten12_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten12_d[l_ac].stkfseq_2 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten12_d_t.* = g_sten12_d[l_ac].*  #BACKUP
               LET g_sten12_d_o.* = g_sten12_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body3.after_set_entry_b"

               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkf_B","'12'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl12 INTO g_sten12_d[l_ac].stkfseq_2,g_sten12_d[l_ac].stkf002_2, 
                                           g_sten12_d[l_ac].stkf003_2,g_sten12_d[l_ac].stkf004_2,g_sten12_d[l_ac].stkf005_2,
                                           g_sten12_d[l_ac].stkf006_2,g_sten12_d[l_ac].stkf007_2,g_sten12_d[l_ac].stkf008_2,
                                           g_sten12_d[l_ac].stkf009_2,g_sten12_d[l_ac].stkf010_2,g_sten12_d[l_ac].stkf012_2,
                                           g_sten12_d[l_ac].stkf019_2,
                                           g_sten12_d[l_ac].stkf013_2,g_sten12_d[l_ac].stkf014_2,g_sten12_d[l_ac].stkf015_2,
                                           g_sten12_d[l_ac].stkf016_2,g_sten12_d[l_ac].stkf020_2,g_sten12_d[l_ac].stkf021_2,
                                           g_sten12_d[l_ac].stkf023_2,g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf025_2
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten12_d_mask_o[l_ac].* =  g_sten12_d[l_ac].*
                  CALL astt806_stkf_t_mask()
                  LET g_sten12_d_mask_n[l_ac].* =  g_sten12_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL astt806_b_fill3()
            IF g_sten12_d[l_ac].stkf016_2 = '1' THEN
               CALL cl_set_comp_visible('group_10',FALSE)
            ELSE
               CALL cl_set_comp_visible('group_10',TRUE)
            END IF 
            IF l_cmd='u' THEN
               NEXT FIELD stkfseq_2
            END IF
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT  
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten12_d[l_ac].* TO NULL 
            INITIALIZE g_sten12_d_t.* TO NULL 
            INITIALIZE g_sten12_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
            LET g_sten12_d[l_ac].stkf002_2 = "N"
            LET g_sten12_d[l_ac].stkf009_2 = "2"
            LET g_sten12_d[l_ac].stkf010_2 = "5"
            LET g_sten12_d[l_ac].stkf016_2 = '1'
            LET g_sten12_d[l_ac].stkf020_2 = "Y"
            LET g_sten12_d[l_ac].stkf007_2 = "1"
            LET g_sten12_d[l_ac].stkf008_2 = "1"
            LET g_sten12_d[l_ac].stkf013_2 = "1"
            LET g_sten12_d[l_ac].stkf025_2 = g_sten2_d[g_detail_idx].stke002
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            SELECT MAX(stkfseq) INTO g_sten12_d[l_ac].stkfseq_2
              FROM stkf_t
             WHERE stkfent= g_enterprise
               AND stkfdocno= g_stem_m.stemdocno
               AND stkf001 = g_sten2_d[g_detail_idx].stke001
            IF cl_null(g_sten12_d[l_ac].stkfseq_2) THEN
               LET g_sten12_d[l_ac].stkfseq_2=1
            ELSE
               LET g_sten12_d[l_ac].stkfseq_2=g_sten12_d[l_ac].stkfseq_2+1
            END IF 
            IF g_sten12_d[l_ac].stkfseq_2 = '1' THEN
               CALL cl_set_comp_visible('group_13',FALSE)
            ELSE
               CALL cl_set_comp_visible('group_13',TRUE)
            END IF 
            #end add-point
            LET g_sten12_d_t.* = g_sten12_d[l_ac].*     #新輸入資料
            LET g_sten12_d_o.* = g_sten12_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"

            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten12_d[li_reproduce_target].* = g_sten12_d[li_reproduce].*
 
               LET g_sten12_d[li_reproduce_target].stkfseq_2 = NULL
 
            END IF
            
            #add-point:modify段before insert name="input.body.before_insert"

            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = TRUE
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"

            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkf_t 
             WHERE stkfent = g_enterprise AND stkfdocno = g_stem_m.stemdocno
               AND stkf001 = g_sten2_d[g_detail_idx].stke001 
               AND stkfseq = g_sten12_d[l_ac].stkfseq_2
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"

               #end add-point
            
               #同步新增到同層的table
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten2_d[g_detail_idx].stkesite
               LET gs_keys[4] = g_sten12_d[l_ac].stkfseq_2
               CALL astt806_insert_b('stkf_t',gs_keys,"'A'")
                           
               #add-point:單身新增後 name="input.body.a_insert"

               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               INITIALIZE g_sten12_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt801_b_fill()
               #資料多語言用-增/改
               #add-point:input段-after_insert name="input.body.a_insert2"

               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            LET l_recount = 'Y'
            IF cl_null(l_string) THEN
               LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
            ELSE
               LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
            END IF            
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"

               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               #自动产生的费用不能删除
               IF g_sten12_d[l_ac].stkf003_2 IS NOT NULL THEN 
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00702"
                  LET g_errparam.extend = ''
                  LET g_errparam.popup = TRUE
                  CALL cl_err()                  
                  CANCEL DELETE 
               END IF
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"

               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten12_d_t.stkfseq_2
 
            
               #刪除同層單身
               IF NOT astt806_delete_b('stkf_t',gs_keys,"'A'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl12
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT astt806_key_delete_b(gs_keys,'stkf_B') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl12
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
               
               #add-point:單身刪除中 name="input.body.m_delete"
               
               #add-point:delete_b段刪除中 name="delete_b.m_delete"
               
               #end add-point    
              
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl12
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"

               #end add-point
               LET l_count = g_sten12_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
            
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten12_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
            LET l_recount = 'Y'
            IF cl_null(l_string) THEN
               LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
            ELSE
               LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
            END IF
         
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkfseq_2
            #add-point:BEFORE FIELD stkfseq name="input.b.page1.stkfseq"
            #标准否为Y并且方案编号不为空的资料是自动根据 费用标准方案带出，不可以维护（根据aoos020参数设置，标准费用可以调整，Y，可以修改，N不可以调整）
            LET l_sys = cl_get_para(g_enterprise,g_sten2_d[g_detail_idx].stkesite,"S-CIR-2019") 
            IF l_sys = 'N' AND g_sten12_d[l_ac].stkf002_2 = 'Y' THEN
               NEXT FIELD stkf019_2 
            ELSE
               NEXT FIELD stkf004_2
            END IF
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkfseq_2
            
            #add-point:AFTER FIELD stkfseq name="input.a.page1.stkfseq"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF  g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten12_d[g_detail_idx2].stkfseq_2 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten12_d[g_detail_idx2].stkfseq_2 != g_sten12_d_t.stkfseq_2)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkf_t WHERE "||"stkfent = '" ||g_enterprise|| "' AND "||"stkfdocno = '"||g_stem_m.stemdocno ||"' AND "|| "stkf001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkfseq = '"||g_sten3_d[g_detail_idx2].stkfseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkfseq_2
            #add-point:ON CHANGE stkfseq name="input.g.page1.stkfseq"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf002_2
            #add-point:BEFORE FIELD stkf002 name="input.b.page1.stkf002"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf002_2
            
            #add-point:AFTER FIELD stkf002 name="input.a.page1.stkf002"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf002_2
            #add-point:ON CHANGE stkf002 name="input.g.page1.stkf002"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf003_2
            #add-point:BEFORE FIELD stkf003 name="input.b.page1.stkf003"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf003_2
            
            #add-point:AFTER FIELD stkf003 name="input.a.page1.stkf003"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf003_2
            #add-point:ON CHANGE stkf003 name="input.g.page1.stkf003"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf004_2
            
            #add-point:AFTER FIELD stkf004 name="input.a.page1.stkf004"
            IF NOT cl_null(g_sten12_d[l_ac].stkf004_2) THEN 
               #應用 a17 樣板自動產生(Version:3)
               #欄位存在檢查
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
 
               #設定g_chkparam.*的參數              
               LET g_chkparam.arg1 = g_sten12_d[l_ac].stkf004_2
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_stae001") THEN
                  #檢查成功時後續處理
                  #判断该费用编号要存在于单头的费用合同项里面
                  LET l_cnt = 0
                  SELECT COUNT(*) INTO l_cnt 
                    FROM sthb_t
                   WHERE sthbent = g_enterprise
                     AND sthb001 = g_sten2_d[g_detail_idx].stke003
                     AND sthb002 = g_sten12_d[l_ac].stkf004_2
                  IF l_cnt <= 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00607"
                     LET g_errparam.extend = g_sten12_d[l_ac].stkf004_2
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten12_d[l_ac].stkf004_2=  g_sten12_d_t.stkf004_2
                     NEXT FIELD CURRENT  
                  END IF
                  #同一个费用只能是固定或者变动的
                  LET l_cnt = 0 
                  SELECT COUNT(*) INTO l_cnt 
                    FROM stkf_t
                   WHERE stkfent = g_enterprise
                     AND stkf004 = g_sten12_d[l_ac].stkf004_2
                     AND stkf001 = g_sten2_d[g_detail_idx].stke001
                     AND stkfdocno = g_stem_m.stemdocno
                     AND stkf009 IN ('1','3')
                  IF l_cnt > 0 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00612"
                     LET g_errparam.extend = g_sten12_d[l_ac].stkf004_2
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten12_d[l_ac].stkf004_2 = g_sten12_d_t.stkf004_2
                     NEXT FIELD CURRENT  
                  END IF
                  #根据参数判断标准的费用是否可录入
                  SELECT sthb006 INTO l_sthb006
                    FROM sthb_t
                   WHERE sthbent = g_enterprise
                     AND sthb001 = g_sten2_d[g_detail_idx].stke003
                     AND sthb002 = g_sten12_d[l_ac].stkf004_2
                  LET l_sys = cl_get_para(g_enterprise,g_sten2_d[g_detail_idx].stkesite,"S-CIR-2019") 
                  IF l_sys = 'N' AND l_sthb006 = 'Y' THEN 
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = "ast-00701"
                     LET g_errparam.extend = g_sten12_d[l_ac].stkf004_2
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                      
                     LET g_sten12_d[l_ac].stkf004_2=  g_sten12_d_t.stkf004_2
                     NEXT FIELD CURRENT  
                  END IF
                  #同一个费用，日期区间不能重叠
#                  IF NOT cl_null(g_sten12_d[l_ac].stkf004_2) AND NOT cl_null(g_sten12_d[l_ac].stkf005_2) AND NOT cl_null(g_sten12_d[l_ac].stkf006_2) THEN
#                     LET l_cnt = 0 
#                     SELECT COUNT(*) INTO l_cnt 
#                       FROM stkf_t
#                      WHERE stkfent = g_enterprise
#                        AND stkf004 = g_sten12_d[l_ac].stkf004_2
#                        AND ((stkf005 >= g_sten12_d[l_ac].stkf005_2 AND stkf005 <= g_sten12_d[l_ac].stkf006_2) 
#                         OR ( stkf006 <= g_sten12_d[l_ac].stkf005_2 AND stkf006 >= g_sten12_d[l_ac].stkf006_2))
#                        AND stkfseq <> g_stkf_d[l_ac].stkfseq
#                        AND stkf009 IN ('2')
#                     IF l_cnt > 0 THEN
#                        INITIALIZE g_errparam TO NULL
#                        LET g_errparam.code = "ast-00609"
#                        LET g_errparam.extend = g_sten12_d[l_ac].stkf004_2
#                        LET g_errparam.popup = TRUE
#                        CALL cl_err()
#                         
#                        LET g_sten12_d[l_ac].stkf004_2 =  g_sten12_d_t.stkf004_2
#                        NEXT FIELD CURRENT  
#                     END IF                     
#                  END IF   
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
            END IF  
            SELECT sthb006 INTO g_sten12_d[l_ac].stkf002_2
              FROM sthb_t
             WHERE sthbent = g_enterprise
               AND sthb001 = g_sten2_d[g_detail_idx].stke003
               AND sthb002 = g_sten12_d[l_ac].stkf004_2            
            SELECT stae004 INTO g_sten12_d[l_ac].stae004_2
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten12_d[l_ac].stkf004_2
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)    
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_sten12_d[l_ac].stkf004_2
            CALL ap_ref_array2(g_ref_fields,"SELECT stael003 FROM stael_t WHERE staelent='"||g_enterprise||"' AND stael001=? AND stael002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_sten12_d[l_ac].stkf004_2_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_sten12_d[l_ac].stkf004_2_desc


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf004_2
            #add-point:BEFORE FIELD stkf004 name="input.b.page1.stkf004"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf004_2
            #add-point:ON CHANGE stkf004 name="input.g.page1.stkf004"
            IF g_sten12_d[l_ac].stkf004_2 IS NOT NULL THEN
               SELECT sthb009,sthb010 INTO g_sten12_d[l_ac].stkf023_2,g_sten12_d[l_ac].stkf024_2
                 FROM sthb_t
                WHERE sthbent = g_enterprise
                  AND sthb001 = g_sten2_d[g_detail_idx].stke003
                  AND sthb002 = g_sten12_d[l_ac].stkf004_2
               SELECT stkf023,stkf024 INTO g_sten12_d[l_ac].stkf023_2,g_sten12_d[l_ac].stkf024_2
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten12_d[l_ac].stkf004_2
                  AND stkfseq <> g_sten12_d[l_ac].stkfseq_2   
            END IF   
            IF g_sten12_d[l_ac].stkf023_2 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            END IF
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf005_2
            #add-point:BEFORE FIELD stkf005 name="input.b.page1.stkf005"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf005_2
            
            #add-point:AFTER FIELD stkf005 name="input.a.page1.stkf005"
            IF g_sten12_d[l_ac].stkf005_2 IS NOT NULL THEN
               IF g_sten12_d[l_ac].stkf005_2 < g_sten2_d[g_detail_idx].stke042 OR g_sten12_d[l_ac].stkf005_2 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten12_d[l_ac].stkf005_2
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten12_d[l_ac].stkf005_2 =  g_sten12_d_t.stkf005_2
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten12_d[l_ac].stkf006_2 IS NOT NULL THEN
                  IF g_sten12_d[l_ac].stkf005_2 > g_sten12_d[l_ac].stkf006_2 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "amm-00080"
                  LET g_errparam.extend = g_sten12_d[l_ac].stkf005_2
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten12_d[l_ac].stkf005_2 = g_sten12_d_t.stkf005_2
                  NEXT FIELD CURRENT 
               END IF
               END IF
            END IF
#            #同一个费用，日期区间不能重叠
#            IF NOT cl_null(g_sten12_d[l_ac].stkf004_2 ) AND NOT cl_null(g_sten12_d[l_ac].stkf005_2 ) AND NOT cl_null(g_sten12_d[l_ac].stkf006_2 ) THEN
#               LET l_cnt = 0 
#               SELECT COUNT(*) INTO l_cnt 
#                 FROM stkf_t
#                WHERE stkfent = g_enterprise
#                  AND stkf004 = g_sten12_d[l_ac].stkf004_2 
#                  AND ((stkf005 >= g_sten12_d[l_ac].stkf005_2  AND stkf005 <= g_sten12_d[l_ac].stkf006_2 ) 
#                   OR ( stkf006 <= g_sten12_d[l_ac].stkf006_2  AND stkf006 >= g_sten12_d[l_ac].stkf005_2 ))
#                  AND stkfseq <> g_sten12_d[l_ac].stkfseq_2 
#                  AND stkf009 IN ('2')
#               IF l_cnt > 0 THEN
#                  INITIALIZE g_errparam TO NULL
#                  LET g_errparam.code = "ast-00609"
#                  LET g_errparam.extend = g_sten12_d[l_ac].stkf005_2
#                  LET g_errparam.popup = TRUE
#                  CALL cl_err()
#                   
#                  LET g_sten12_d[l_ac].stkf005_2 = g_sten12_d_t.stkf005_2
#                  NEXT FIELD CURRENT  
#               END IF
#            END IF   
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf005_2
            #add-point:ON CHANGE stkf005 name="input.g.page1.stkf005"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf006_2
            #add-point:BEFORE FIELD stkf006 name="input.b.page1.stkf006"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf006_2
            
            #add-point:AFTER FIELD stkf006 name="input.a.page1.stkf006"
            IF g_sten12_d[l_ac].stkf006_2 IS NOT NULL THEN
               IF g_sten12_d[l_ac].stkf006_2 < g_sten2_d[g_detail_idx].stke042 OR g_sten12_d[l_ac].stkf006_2 > g_sten2_d[g_detail_idx].stke012 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00610"
                  LET g_errparam.extend = g_sten12_d[l_ac].stkf006_2
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten12_d[l_ac].stkf006_2 =  g_sten12_d_t.stkf006_2
                  NEXT FIELD CURRENT 
               END IF
               IF g_sten12_d[l_ac].stkf005_2 IS NOT NULL THEN
                  IF g_sten12_d[l_ac].stkf005_2 > g_sten12_d[l_ac].stkf006_2 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "amm-00080"
                  LET g_errparam.extend = g_sten12_d[l_ac].stkf006_2
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten12_d[l_ac].stkf006_2 = g_sten12_d_t.stkf006_2
                  NEXT FIELD CURRENT 
               END IF
               END IF
            END IF
#            #同一个费用，日期区间不能重叠
#            IF NOT cl_null(g_sten12_d[l_ac].stkf004_2 ) AND NOT cl_null(g_sten12_d[l_ac].stkf005_2 ) AND NOT cl_null(g_sten12_d[l_ac].stkf006_2 ) THEN
#               LET l_cnt = 0 
#               SELECT COUNT(*) INTO l_cnt 
#                 FROM stkf_t
#                WHERE stkfent = g_enterprise
#                  AND stkf004 = g_sten12_d[l_ac].stkf004_2 
#                  AND ((stkf005 >= g_sten12_d[l_ac].stkf005_2  AND stkf005 <= g_sten12_d[l_ac].stkf006_2 ) 
#                   OR ( stkf006 <= g_sten12_d[l_ac].stkf006_2  AND stkf006 >= g_sten12_d[l_ac].stkf005_2 ))
#                  AND stkfseq <> g_sten12_d[l_ac].stkfseq_2 
#                  AND stkf009 IN ('2')
#               IF l_cnt > 0 THEN
#                  INITIALIZE g_errparam TO NULL
#                  LET g_errparam.code = "ast-00609"
#                  LET g_errparam.extend = g_sten12_d[l_ac].stkf006_2
#                  LET g_errparam.popup = TRUE
#                  CALL cl_err()
#                   
#                  LET g_sten12_d[l_ac].stkf006_2 = g_sten12_d_t.stkf006_2
#                  NEXT FIELD CURRENT  
#               END IF
#            END IF  
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf006_2
            #add-point:ON CHANGE stkf006 name="input.g.page1.stkf006"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf007_2
            #add-point:BEFORE FIELD stkf007 name="input.b.page1.stkf007"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf007_2
            
            #add-point:AFTER FIELD stkf007 name="input.a.page1.stkf007"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf007_2
            #add-point:ON CHANGE stkf007 name="input.g.page1.stkf007"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf008_2
            #add-point:BEFORE FIELD stkf008 name="input.b.page1.stkf008"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf008_2
            
            #add-point:AFTER FIELD stkf008 name="input.a.page1.stkf008"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf008_2
            #add-point:ON CHANGE stkf008 name="input.g.page1.stkf008"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf009_2
            #add-point:BEFORE FIELD stkf009 name="input.b.page1.stkf009"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf009_2
            
            #add-point:AFTER FIELD stkf009 name="input.a.page1.stkf009"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf009_2
            #add-point:ON CHANGE stkf009 name="input.g.page1.stkf009"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf010_2
            
            #add-point:AFTER FIELD stkf010 name="input.a.page1.stkf010"


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf010_2
            #add-point:BEFORE FIELD stkf010 name="input.b.page1.stkf010"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf010_2
            #add-point:ON CHANGE stkf010 name="input.g.page1.stkf010"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf012_2
            #add-point:BEFORE FIELD stkf011 name="input.b.page1.stkf011"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf012_2
            
            #add-point:AFTER FIELD stkf011 name="input.a.page1.stkf011"
            IF NOT cl_ap_chk_range(g_sten12_d[l_ac].stkf012_2,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkf012_2
            END IF 
 
 
 
            #add-point:AFTER FIELD stkf011 name="input.a.page1.stkf011"
            IF NOT cl_null(g_sten12_d[l_ac].stkf012_2) THEN 
               LET g_sten12_d[l_ac].stkf019_2 = g_sten12_d[l_ac].stkf012_2
            END IF 
            
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf012_2
            #add-point:ON CHANGE stkf011 name="input.g.page1.stkf011"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf013_2
            #add-point:BEFORE FIELD stkf016 name="input.b.page1.stkf016"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf013_2
            
            #add-point:AFTER FIELD stkf016 name="input.a.page1.stkf016"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf013_2
            #add-point:ON CHANGE stkf016 name="input.g.page1.stkf016"
            IF g_sten12_d[l_ac].stkf013_2 IS NOT NULL THEN
               IF g_sten12_d[l_ac].stkf013_2 = '1' THEN
                  LET g_sten12_d[l_ac].stkf014_2 = ''
                  LET g_sten12_d[l_ac].stkf015_2 = ''
               END IF 
               IF g_sten12_d[l_ac].stkf013_2 = '3' THEN
                  LET g_sten12_d[l_ac].stkf015_2 = ''
               END IF
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf014_2
            #add-point:BEFORE FIELD stkf017 name="input.b.page1.stkf017"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf014_2
            
            #add-point:AFTER FIELD stkf017 name="input.a.page1.stkf017"
            IF NOT cl_null(g_sten12_d[l_ac].stkf014_2) THEN 
               CALL s_asti800_curr_round(g_sten2_d[g_detail_idx].stkesite,'',g_sten12_d[l_ac].stkf014_2,'1')
                  RETURNING g_sten12_d[l_ac].stkf014_2
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf014_2
            #add-point:ON CHANGE stkf017 name="input.g.page1.stkf017"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf015_2
            #add-point:BEFORE FIELD stkfsite name="input.b.page1.stkfsite"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf015_2
            
            #add-point:AFTER FIELD stkfsite name="input.a.page1.stkfsite"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf015_2
            #add-point:ON CHANGE stkfsite name="input.g.page1.stkfsite"

            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf016_2
            #add-point:BEFORE FIELD stkfunit name="input.b.page1.stkfunit"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf016_2
            
            #add-point:AFTER FIELD stkfunit name="input.a.page1.stkfunit"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf016_2
            #add-point:ON CHANGE stkfunit name="input.g.page1.stkfunit"
            IF g_sten12_d[l_ac].stkf016_2 IS NOT NULL THEN
               IF g_sten12_d[l_ac].stkf016_2 <> '1' THEN
                  LET g_sten12_d[l_ac].stkf012_2 = ''
                  LET g_sten12_d[l_ac].stkf019_2 = ''
               END IF 
            END IF 
            IF g_sten12_d[l_ac].stkf016_2 = '1' THEN
               CALL cl_set_comp_visible('group_28',FALSE)
            ELSE
               CALL cl_set_comp_visible('group_28',TRUE)
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf023_2
            #add-point:BEFORE FIELD stkfunit name="input.b.page1.stkfunit"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf023_2
            
            #add-point:AFTER FIELD stkfunit name="input.a.page1.stkfunit"

            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf023_2
            #add-point:ON CHANGE stkfunit name="input.g.page1.stkfunit"
            #如果费用编号不为空，则同一个费用编号的费用所属类型和所用所属组织要一样
            IF g_sten12_d[l_ac].stkf004_2 IS NOT NULL AND g_sten12_d[l_ac].stkf023_2 IS NOT NULL THEN
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten12_d[l_ac].stkf004_2
                  AND stkf023 <> g_sten12_d[l_ac].stkf023_2
               IF l_cnt > 0 THEN
                  IF NOT cl_ask_confirm('ast-00748') THEN 
                     LET g_sten12_d[l_ac].stkf023_2 = g_sten12_d_t.stkf023_2
                  ELSE
                     #更新此费用编号的费用所属类型
                     UPDATE stkf_t SET stkf023 = g_sten12_d[l_ac].stkf023_2,stkf024 = ''
                      WHERE stkfent = g_enterprise
                        AND stkfdocno = g_stem_m.stemdocno
                        AND stkf001 = g_sten2_d[g_detail_idx].stke001
                        AND stkf004 = g_sten12_d[l_ac].stkf004_2
                     IF SQLCA.sqlcode THEN
                        INITIALIZE g_errparam TO NULL 
                        LET g_errparam.extend = "upd stkf_t" 
                        LET g_errparam.code   = SQLCA.sqlcode 
                        LET g_errparam.popup  = TRUE 
                        CALL cl_err()
                        LET g_sten12_d[l_ac].stkf023_2 = g_sten12_d_t.stkf023_2
                        NEXT FIELD CURRENT
                     END IF
                     #更新此费用编号的费用所属类型
                     IF g_sten12_d[l_ac].stkf023_2 = '1' THEN
                        UPDATE stkf_t SET stkf024 = g_sten2_d[g_detail_idx].stkesite
                         WHERE stkfent = g_enterprise
                           AND stkfdocno = g_stem_m.stemdocno
                           AND stkf001 = g_sten2_d[g_detail_idx].stke001
                           AND stkf004 = g_sten12_d[l_ac].stkf004_2
                        IF SQLCA.sqlcode THEN
                           INITIALIZE g_errparam TO NULL 
                           LET g_errparam.extend = "upd stkf_t" 
                           LET g_errparam.code   = SQLCA.sqlcode 
                           LET g_errparam.popup  = TRUE 
                           CALL cl_err()
                           LET g_sten12_d[l_ac].stkf023_2 = g_sten12_d_t.stkf023_2
                           NEXT FIELD CURRENT
                        END IF
                     END IF                            
                  END IF
               END IF
            END IF
            IF g_sten12_d[l_ac].stkf023_2 IS NOT NULL THEN
               IF g_sten12_d[l_ac].stkf023_2 <> '1' THEN
                  LET g_sten12_d[l_ac].stkf024_2 = ''
                  LET g_sten12_d[l_ac].stkf024_2_desc = ''
               END IF 
               IF g_sten12_d[l_ac].stkf023_2 = '1' THEN
                  LET g_sten12_d[l_ac].stkf024_2 = g_sten2_d[g_detail_idx].stkesite
                  CALL s_desc_get_department_desc(g_sten12_d[l_ac].stkf024_2) RETURNING g_sten12_d[l_ac].stkf024_2_desc
               END IF
            END IF 
            CALL astt806_set_entry_b(l_cmd)
            CALL astt806_set_no_entry_b(l_cmd)
            #END add-point 
         
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkf024_2
            #add-point:BEFORE FIELD stkfunit name="input.b.page1.stkfunit"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkf024_2
            
            #add-point:AFTER FIELD stkfunit name="input.a.page1.stkfunit"
            IF NOT cl_null(g_sten12_d[l_ac].stkf024_2) THEN 
               #應用 a17 樣板自動產生(Version:3)
               IF g_sten12_d[l_ac].stkf023_2 = '2' THEN
                  IF s_aooi500_setpoint(g_prog,'stkf024') THEN
                     CALL s_aooi500_chk(g_prog,'stkf024',g_sten12_d[l_ac].stkf024_2,g_sten2_d[g_detail_idx].stkesite) RETURNING l_success,l_errno
                     IF NOT l_success THEN
                        INITIALIZE g_errparam TO NULL
                        LET g_errparam.extend = g_sten12_d[l_ac].stkf024_2
                        LET g_errparam.code   = l_errno
                        LET g_errparam.popup  = TRUE
                        CALL cl_err()
                        
                        LET g_sten12_d[l_ac].stkf024_2 = g_sten12_d_t.stkf024_2
                        CALL s_desc_get_department_desc(g_sten12_d[l_ac].stkf024_2) RETURNING g_sten12_d[l_ac].stkf024_2_desc
                        DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf024_2_desc
                        NEXT FIELD CURRENT
                     END IF
                  ELSE
                     #欄位存在檢查
                     #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
                     INITIALIZE g_chkparam.* TO NULL
                     
                     #設定g_chkparam.*的參數
                     LET g_chkparam.arg1 = g_sten12_d[l_ac].stkf024_2
                     
                        
                     #呼叫檢查存在並帶值的library
                     IF cl_chk_exist("v_ooef001_13") THEN
                        #檢查成功時後續處理
                     ELSE
                        #檢查失敗時後續處理
                        LET g_sten12_d[l_ac].stkf024_2 = g_sten12_d_t.stkf024_2
                        CALL s_desc_get_department_desc(g_sten12_d[l_ac].stkf024_2) RETURNING g_sten12_d[l_ac].stkf024_2_desc
                        DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf024_2_desc
                        NEXT FIELD CURRENT
                     END IF
                  END IF
               ELSE
                  #欄位存在檢查
                   #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
                   INITIALIZE g_chkparam.* TO NULL
                   
                   #設定g_chkparam.*的參數
                   LET g_chkparam.arg1 = g_sten12_d[l_ac].stkf024_2
                   
                      
                   #呼叫檢查存在並帶值的library
                   IF cl_chk_exist("v_pmaa001_1") THEN
                      #檢查成功時後續處理
                   ELSE
                      #檢查失敗時後續處理
                      LET g_sten12_d[l_ac].stkf024_2= g_sten12_d_t.stkf024_2
                      CALL s_desc_get_trading_partner_full_desc(g_sten12_d[l_ac].stkf024_2) RETURNING g_sten12_d[l_ac].stkf024_2_desc
                      DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf024_2_desc
                      NEXT FIELD CURRENT
                   END IF
               END IF
            END IF  
            #如果费用编号不为空，则同一个费用编号的费用所属类型和所用所属组织要一样
            IF g_sten12_d[l_ac].stkf004_2 IS NOT NULL AND g_sten12_d[l_ac].stkf024_2 IS NOT NULL THEN
               LET l_cnt = 0
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkf_t
                WHERE stkfent = g_enterprise
                  AND stkfdocno = g_stem_m.stemdocno
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkf004 = g_sten12_d[l_ac].stkf004_2
                  AND (stkf024 <> g_sten12_d[l_ac].stkf024_2 OR stkf024 IS NULL )
               IF l_cnt > 0 THEN
                  IF NOT cl_ask_confirm('ast-00748') THEN 
                     LET g_sten12_d[l_ac].stkf024_2 = g_sten12_d_t.stkf024_2
                  ELSE
                     #更新此费用编号的费用所属类型
                     UPDATE stkf_t SET stkf024 = g_sten12_d[l_ac].stkf024_2
                      WHERE stkfent = g_enterprise
                        AND stkfdocno = g_stem_m.stemdocno
                        AND stkf001 = g_sten2_d[g_detail_idx].stke001
                        AND stkf004 = g_sten12_d[l_ac].stkf004_2
                     IF SQLCA.sqlcode THEN
                        INITIALIZE g_errparam TO NULL 
                        LET g_errparam.extend = "upd stkf_t" 
                        LET g_errparam.code   = SQLCA.sqlcode 
                        LET g_errparam.popup  = TRUE 
                        CALL cl_err()
                        LET g_sten12_d[l_ac].stkf024_2 = g_sten12_d_t.stkf024_2
                        NEXT FIELD CURRENT
                     END IF                            
                  END IF
               END IF
            END IF
            
            IF g_sten12_d[l_ac].stkf023_2 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkf024_2
            #add-point:ON CHANGE stkfunit name="input.g.page1.stkfunit"

            #END add-point 
            
         #Ctrlp:input.c.page1.stkfseq
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkfseq_2
            #add-point:ON ACTION controlp INFIELD stkfseq name="input.c.page1.stkfseq"

            #END add-point
 
 
 
         #Ctrlp:input.c.page1.stkf002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf002_2
            #add-point:ON ACTION controlp INFIELD stkf002 name="input.c.page1.stkf002"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf003_2
            #add-point:ON ACTION controlp INFIELD stkf003 name="input.c.page1.stkf003"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf004_2
            #add-point:ON ACTION controlp INFIELD stkf004 name="input.c.page1.stkf004"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten12_d[l_ac].stkf004_2             #給予default值
            LET g_qryparam.default2 = "" #g_stkf_d[l_ac].stael003 #說明
            LET g_qryparam.default3 = "" #g_stkf_d[l_ac].stael004 #助記碼
            #給予arg
            LET g_qryparam.where = " EXISTS (SELECT 1 FROM sthb_t WHERE sthbent = staeent AND sthb001 = '",g_sten2_d[g_detail_idx].stke003,"' AND stae001 = sthb002)" #s


 
            CALL q_stae001()                                #呼叫開窗
 
            LET g_sten12_d[l_ac].stkf004_2 = g_qryparam.return1              
            #LET g_stkf_d[l_ac].stael003 = g_qryparam.return2 
            #LET g_stkf_d[l_ac].stael004 = g_qryparam.return3 
            DISPLAY g_sten12_d[l_ac].stkf004_2 TO stkf004_2              #
            #DISPLAY g_stkf_d[l_ac].stael003 TO stael003 #說明
            #DISPLAY g_stkf_d[l_ac].stael004 TO stael004 #助記碼
            NEXT FIELD stkf004_2                          #返回原欄位



            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf005_2
            #add-point:ON ACTION controlp INFIELD stkf005 name="input.c.page1.stkf005"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf006
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf006_2
            #add-point:ON ACTION controlp INFIELD stkf006 name="input.c.page1.stkf006"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf007_2
            #add-point:ON ACTION controlp INFIELD stkf007 name="input.c.page1.stkf007"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf008_2
            #add-point:ON ACTION controlp INFIELD stkf008 name="input.c.page1.stkf008"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf009_2
            #add-point:ON ACTION controlp INFIELD stkf009 name="input.c.page1.stkf009"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf010
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf010_2
            #add-point:ON ACTION controlp INFIELD stkf010 name="input.c.page1.stkf010"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf011
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf012_2
            #add-point:ON ACTION controlp INFIELD stkf011 name="input.c.page1.stkf011"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf016
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf013_2
            #add-point:ON ACTION controlp INFIELD stkf016 name="input.c.page1.stkf016"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkf017
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf014_2
            #add-point:ON ACTION controlp INFIELD stkf017 name="input.c.page1.stkf017"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkfsite
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf015_2
            #add-point:ON ACTION controlp INFIELD stkfsite name="input.c.page1.stkfsite"

            #END add-point
 
 
         #Ctrlp:input.c.page1.stkfunit
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkf016_2
            #add-point:ON ACTION controlp INFIELD stkfunit name="input.c.page1.stkfunit"

            #END add-point
 
         ON ACTION controlp INFIELD stkf024_2
            #add-point:ON ACTION controlp INFIELD stkf024 name="input.c.page1.stkf024"
            #應用 a07 樣板自動產生(Version:3)   
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
 
            LET g_qryparam.default1 = g_sten12_d[l_ac].stkf024_2             #給予default值

            #給予arg
            IF g_sten12_d[l_ac].stkf023_2 = '2' THEN
               IF s_aooi500_setpoint(g_prog,'stkf024') THEN
                  LET g_qryparam.where = s_aooi500_q_where(g_prog,'stkf024',g_sten2_d[g_detail_idx].stkesite,'i')
                  CALL q_ooef001_24() 
               ELSE
                  CALL q_ooef001_12()                           #呼叫開窗
               END IF
            ELSE
               LET g_qryparam.arg1 = "('1','3')" 
               CALL q_pmaa001_1()               
            END IF
       
            LET g_sten12_d[l_ac].stkf024_2 = g_qryparam.return1              

            DISPLAY g_sten12_d[l_ac].stkf024_2 TO stkf024_2              #
            
            IF g_sten12_d[l_ac].stkf023_2 <> '3' THEN
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            ELSE
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_sten12_d[l_ac].stkf024_2
               CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_sten12_d[l_ac].stkf024_2_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_sten12_d[l_ac].stkf024_2_desc
            END IF
            
            NEXT FIELD stkf024_2 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = TRUE
               CALL cl_err()
               LET INT_FLAG = 0
               LET g_sten12_d[l_ac].* = g_sten12_d_t.*
               CLOSE astt806_bcl12
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_sten12_d[l_ac].stkfseq_2 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_sten12_d[l_ac].* = g_sten12_d_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"

               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               #CALL astt801_stkf_t_mask_restore('restore_mask_o')
      
               UPDATE stkf_t SET (stkfdocno,stkfseq,stkf001,stkf002,stkf003,stkf004,stkf005,stkf006, 
                   stkf007,stkf008,stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf021,stkf023,stkf024,stkf025,stkfsite,stkfunit) = (g_stem_m.stemdocno, 
                   g_sten12_d[l_ac].stkfseq_2,g_sten2_d[g_detail_idx].stke001,g_sten12_d[l_ac].stkf002_2,g_sten12_d[l_ac].stkf003_2, 
                   g_sten12_d[l_ac].stkf004_2,g_sten12_d[l_ac].stkf005_2,g_sten12_d[l_ac].stkf006_2,g_sten12_d[l_ac].stkf007_2, 
                   g_sten12_d[l_ac].stkf008_2,g_sten12_d[l_ac].stkf009_2,g_sten12_d[l_ac].stkf010_2,g_sten12_d[l_ac].stkf012_2,g_sten12_d[l_ac].stkf019_2, 
                   g_sten12_d[l_ac].stkf013_2,g_sten12_d[l_ac].stkf014_2,g_sten12_d[l_ac].stkf015_2,g_sten12_d[l_ac].stkf016_2,g_sten12_d[l_ac].stkf020_2,
                   g_sten12_d[l_ac].stkf021_2,g_sten12_d[l_ac].stkf023_2,g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf025_2,g_sten2_d[g_detail_idx].stkesite,
                   g_sten2_d[g_detail_idx].stkesite) 

                WHERE stkfent = g_enterprise AND stkfdocno = g_stem_m.stemdocno 
                  AND stkf001 = g_sten2_d[g_detail_idx].stke001
                  AND stkfseq = g_sten12_d_t.stkfseq_2 #項次   
 
                  
               #add-point:單身修改中 name="input.body.m_update"

               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkf_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     CALL s_transaction_end('N','0')
                     LET g_sten12_d[l_ac].* = g_sten12_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()                   
                     CALL s_transaction_end('N','0')
                     LET g_sten12_d[l_ac].* = g_sten12_d_t.*  
                  OTHERWISE
                     INITIALIZE gs_keys TO NULL 
                     LET gs_keys[1] = g_stem_m.stemdocno
                     LET gs_keys_bak[1] = g_stemdocno_t
                     LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys[3] = g_sten12_d[g_detail_idx2].stkfseq_2
                     LET gs_keys_bak[3] = g_sten12_d_t.stkfseq_2
                     CALL astt806_update_b('stkf_t',gs_keys,gs_keys_bak,"'A'")
                  END CASE
 
               #將遮罩欄位進行遮蔽
               CALL astt806_stkf_t_mask_restore('restore_mask_n')
                
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten12_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten12_d[l_ac]) 
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            IF g_sten12_d[l_ac].stkf016_2 = '1' THEN
               #删除单身
               DELETE FROM stkg_t
                WHERE stkgent = g_enterprise 
                  AND stkgdocno = g_stem_m.stemdocno 
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten12_d[l_ac].stkfseq_2
                   
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE
                  CALL cl_err()
                  CLOSE astt806_bcl12
                  CALL s_transaction_end('N','0')
                  EXIT DIALOG 
               END IF
            END IF  
            #end add-point
            CALL astt806_unlock_b("stkf_t","'12'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            CALL astt806_b_fill2('0') 
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"            
            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten12_d[li_reproduce_target].* = g_sten12_d[li_reproduce].*
 
               LET g_sten12_d[li_reproduce_target].stkfseq_2 = NULL
 
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten12_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten12_d.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      INPUT ARRAY g_sten11_d FROM s_detail11.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_10)
         
        
         BEFORE INPUT
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx2_tmp = g_detail_idx2
            LET g_detail_idx = g_detail_idx_list[4]
            LET g_detail_idx2 = g_detail_idx_list[5]
            #檢查合同单头單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #檢查合同固定费用單身是否為空
            IF g_detail_idx2 = 0 OR g_sten3_d.getLength() = 0 THEN
               NEXT FIELD stkfseq
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten3_d[g_detail_idx2].stkfseq) THEN
               NEXT FIELD stkfseq
            END IF
            #add-point:資料輸入前 name="input.body9.before_input2"
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten11_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'13',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten11_d.getLength()
            #add-point:資料輸入前 name="input.body9.before_input"

            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten11_d[l_ac].* TO NULL 
            INITIALIZE g_sten11_d_t.* TO NULL 
            INITIALIZE g_sten11_d_o.* TO NULL 
            #公用欄位給值(單身10)
            
            #自定義預設值(單身10)
            
            #add-point:modify段before備份 name="input.body9.insert.before_bak"
            SELECT MAX(stkgseq1) INTO g_sten11_d[l_ac].stkgseq1
              FROM stkg_t
             WHERE stkgent= g_enterprise
               AND stkgdocno= g_stem_m.stemdocno 
               AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq
            IF cl_null(g_sten11_d[l_ac].stkgseq1) THEN
               LET g_sten11_d[l_ac].stkgseq1=1
            ELSE
               LET g_sten11_d[l_ac].stkgseq1=g_sten11_d[l_ac].stkgseq1+1
            END IF 
            SELECT MAX(stkg003) INTO g_sten11_d[l_ac].stkg002
              FROM stkg_t
             WHERE stkgent= g_enterprise
               AND stkgdocno= g_stem_m.stemdocno 
               AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq
            IF cl_null(g_sten11_d[l_ac].stkg002) THEN
               LET g_sten11_d[l_ac].stkg002=1
            ELSE
               LET g_sten11_d[l_ac].stkg002=g_sten11_d[l_ac].stkg002+1
            END IF 
            #end add-point
            LET g_sten11_d_t.* = g_sten11_d[l_ac].*     #新輸入資料
            LET g_sten11_d_o.* = g_sten11_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body9.insert.after_set_entry_b"

            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten11_d[li_reproduce_target].* = g_sten11_d[li_reproduce].*
 
               LET g_sten11_d[li_reproduce_target].stkgseq1 = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body9.before_insert"

            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body9.before_row2"

            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx3 = l_ac
            LET g_detail_idx_list[13] = l_ac
            LET g_current_page = 13
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001            
            OPEN astt806_bcl5 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten3_d[g_detail_idx2].stkfseq
            IF STATUS THEN
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CLOSE astt806_bcl5
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten11_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten11_d[l_ac].stkgseq1 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten11_d_t.* = g_sten11_d[l_ac].*  #BACKUP
               LET g_sten11_d_o.* = g_sten11_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body9.after_set_entry_b"

               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkg_t","'13'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl13 INTO  g_sten11_d[l_ac].stkgseq1,g_sten11_d[l_ac].stkg002,g_sten11_d[l_ac].stkg003,
                                            g_sten11_d[l_ac].stkg004,g_sten11_d[l_ac].stkg006
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten11_d_mask_o[l_ac].* =  g_sten11_d[l_ac].*
                  #CALL astt806_stkg_t_mask()
                  LET g_sten11_d_mask_n[l_ac].* =  g_sten11_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body9.before_row"

            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body9.after_delete_d"

               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body9.b_delete_ask"

               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身10刪除前 name="input.body9.b_delete"

               #end add-point    
 
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten3_d[g_detail_idx2].stkfseq
               LET gs_keys[4] = g_sten11_d_t.stkgseq1
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkg_t',gs_keys,"'B'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身10刪除中 name="input.body9.m_delete"

               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身10刪除後 name="input.body9.a_delete"

               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body9.after_delete"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten11_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身10新增前 name="input.body9.b_a_insert"

            #end add-point
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkg_t 
             WHERE stkgent = g_enterprise AND stkgdocno = g_stem_m.stemdocno AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq  AND stkgseq1 = g_sten11_d[g_detail_idx3].stkgseq1
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身10新增前 name="input.body9.b_insert"

               #end add-point
            
                              INITIALIZE gs_keys TO NULL
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten2_d[g_detail_idx].stkesite
               LET gs_keys[4] = g_sten3_d[g_detail_idx2].stkfseq                              
               LET gs_keys[5] = g_sten11_d[g_detail_idx3].stkgseq1
               CALL astt806_insert_b('stkg_t',gs_keys,"'B'")
                           
               #add-point:單身新增後10 name="input.body9.a_insert"

               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL s_transaction_end('N','0')                    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt801_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body9.after_insert"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            LET g_detail_idx2 = g_detail_idx2_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten11_d[l_ac].* = g_sten11_d_t.*
               CLOSE astt806_bcl13
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_sten11_d[l_ac].* = g_sten11_d_t.*
            ELSE
               #add-point:單身page10修改前 name="input.body9.b_update"

               #end add-point
               
               #寫入修改者/修改日期資訊(單身10)
               
               
               #將遮罩欄位還原
               #CALL astt806_stkg_t_mask_restore('restore_mask_o')
               
               UPDATE stkg_t SET (stkgdocno,stkgseq,stkgsite,stkgunit,stkgseq1,stkg001,stkg002,stkg003, 
                   stkg004,stkg006) = (g_stem_m.stemdocno,g_sten3_d[g_detail_idx2].stkfseq,g_sten2_d[g_detail_idx].stkesite, 
                   g_sten2_d[g_detail_idx].stkesite,g_sten11_d[l_ac].stkgseq1,g_sten2_d[g_detail_idx].stke001,g_sten11_d[l_ac].stkg002, 
                   g_sten11_d[l_ac].stkg003,g_sten11_d[l_ac].stkg004,g_sten11_d[l_ac].stkg006) #自訂欄位頁簽 

                WHERE stkgent = g_enterprise AND stkgdocno = g_stemdocno_t AND stkg001 = g_sten2_d[g_detail_idx].stke001 
                  AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq  AND stkgseq1 = g_sten11_d_t.stkgseq1        
               #add-point:單身page10修改中 name="input.body9.m_update"

               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL s_transaction_end('N','0')
                     LET g_sten11_d[l_ac].* = g_sten11_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkg_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     
                  WHEN SQLCA.sqlcode #其他錯誤
                     CALL s_transaction_end('N','0')
                     LET g_sten11_d[l_ac].* = g_sten11_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     INITIALIZE gs_keys TO NULL 
                     LET gs_keys[1] = g_stem_m.stemdocno
                     LET gs_keys_bak[1] = g_stemdocno_t
                     LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys[3] = g_sten3_d[g_detail_idx2].stkfseq
                     LET gs_keys_bak[3] = g_sten3_d[g_detail_idx2].stkfseq
                     LET gs_keys[4] = g_sten11_d[g_detail_idx3].stkgseq1
                     LET gs_keys_bak[4] = g_sten11_d_t.stkgseq1
                     CALL astt806_update_b('stkg_t',gs_keys,gs_keys_bak,"'B'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               #CALL astt806_stkg_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten11_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten11_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page10修改後 name="input.body9.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
            END IF
          
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkgseq1
            #add-point:BEFORE FIELD stkgseq1 name="input.b.page9.stkgseq1"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkgseq1
            
            #add-point:AFTER FIELD stkgseq1 name="input.a.page9.stkgseq1"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten3_d[g_detail_idx2].stkfseq IS NOT NULL AND g_sten11_d[g_detail_idx3].stkgseq1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten3_d[g_detail_idx2].stkfseq != g_sten3_d[g_detail_idx2].stkfseq OR  g_sten11_d[g_detail_idx3].stkgseq1 != g_sten11_d_t.stkgseq1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkg_t WHERE "||"stkgent = '" ||g_enterprise|| "' AND "||"stkgdocno = '"||g_stem_m.stemdocno ||"' AND "||"stkg001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkgseq = '"||g_sten3_d[g_detail_idx2].stkfseq ||"' AND "|| "stkgseq1 = '"||g_sten11_d[g_detail_idx3].stkgseq1 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
                  
                  
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkgseq1
            #add-point:ON CHANGE stkgseq1 name="input.g.page9.stkgseq1"

            #END add-point 
  
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg002
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten11_d[g_detail_idx3].stkg002,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg002
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg002 name="input.a.page9.stkg002"
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg002) THEN 
               LET l_cnt = 0 
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkg_t
                WHERE stkgent = g_enterprise
                  AND stkgdocno = g_stem_m.stemdocno
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq
                  AND ((stkg002 <= g_sten11_d[g_detail_idx3].stkg002 AND stkg003 >= g_sten11_d[g_detail_idx3].stkg002))
                  AND stkgseq1 <> g_sten11_d[g_detail_idx3].stkgseq1
               IF l_cnt > 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00611"
                  LET g_errparam.extend = g_sten11_d[g_detail_idx3].stkg002
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten11_d[g_detail_idx3].stkg002=  g_sten11_d_t.stkg002
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg002) AND NOT cl_null(g_sten11_d[g_detail_idx3].stkg003) THEN
               IF g_sten11_d[g_detail_idx3].stkg002 > g_sten11_d[g_detail_idx3].stkg003 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00017"
                  LET g_errparam.extend = g_sten11_d[g_detail_idx3].stkg002
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten11_d[g_detail_idx3].stkg002=  g_sten11_d_t.stkg002
                  NEXT FIELD CURRENT  
               END IF
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg002
            #add-point:BEFORE FIELD stkg002 name="input.b.page9.stkg002"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg002
            #add-point:ON CHANGE stkg002 name="input.g.page9.stkg002"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg003
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten11_d[g_detail_idx3].stkg003,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg003
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg003 name="input.a.page9.stkg003"
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg003) THEN 
               LET l_cnt = 0 
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkg_t
                WHERE stkgent = g_enterprise
                  AND stkgdocno = g_stem_m.stemdocno
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq
                  AND ((stkg002 <= g_sten11_d[g_detail_idx3].stkg003 AND stkg003 >= g_sten11_d[g_detail_idx3].stkg003))
                  AND stkgseq1 <> g_sten11_d[g_detail_idx3].stkgseq1
               IF l_cnt > 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00611"
                  LET g_errparam.extend = g_sten11_d[g_detail_idx3].stkg003
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten11_d[g_detail_idx3].stkg003=  g_sten11_d_t.stkg003
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg002) AND NOT cl_null(g_sten11_d[g_detail_idx3].stkg003) THEN
               IF g_sten11_d[g_detail_idx3].stkg002 > g_sten11_d[g_detail_idx3].stkg003 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00017"
                  LET g_errparam.extend = g_sten11_d[g_detail_idx3].stkg003
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten11_d[g_detail_idx3].stkg003 =  g_sten11_d_t.stkg003
                  NEXT FIELD CURRENT  
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg003
            #add-point:BEFORE FIELD stkg003 name="input.b.page9.stkg003"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg003
            #add-point:ON CHANGE stkg003 name="input.g.page9.stkg003"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg004
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten11_d[g_detail_idx3].stkg004,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg004
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg004 name="input.a.page9.stkg004"
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg004) THEN 
               CALL s_asti800_curr_round(g_sten2_d[g_detail_idx].stkesite,'',g_sten11_d[g_detail_idx3].stkg004,'1')
                  RETURNING g_sten11_d[g_detail_idx3].stkg004
               LET g_sten11_d[g_detail_idx3].stkg006 = g_sten11_d[g_detail_idx3].stkg004
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg004
            #add-point:BEFORE FIELD stkg004 name="input.b.page9.stkg004"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg004
            #add-point:ON CHANGE stkg004 name="input.g.page9.stkg004"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg006
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten11_d[g_detail_idx3].stkg006,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg006
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg006 name="input.a.page9.stkg006"
            IF NOT cl_null(g_sten11_d[g_detail_idx3].stkg006) THEN 
               CALL s_asti800_curr_round(g_sten2_d[g_detail_idx].stkesite,'',g_sten11_d[g_detail_idx3].stkg006,'1')
                  RETURNING g_sten11_d[g_detail_idx3].stkg006
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg006
            #add-point:BEFORE FIELD stkg006 name="input.b.page9.stkg006"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg006
            #add-point:ON CHANGE stkg006 name="input.g.page9.stkg006"

            #END add-point 
 
         #Ctrlp:input.c.page9.stkgseq1
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkgseq1
            #add-point:ON ACTION controlp INFIELD stkgseq1 name="input.c.page9.stkgseq1"

            #END add-point
 
         #Ctrlp:input.c.page9.stkg002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg002
            #add-point:ON ACTION controlp INFIELD stkg002 name="input.c.page9.stkg002"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg003
            #add-point:ON ACTION controlp INFIELD stkg003 name="input.c.page9.stkg003"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg004
            #add-point:ON ACTION controlp INFIELD stkg004 name="input.c.page9.stkg004"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg006
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg006
            #add-point:ON ACTION controlp INFIELD stkg006 name="input.c.page9.stkg006"

            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page10_after_row name="input.body9.after_row"

            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten11_d[l_ac].* = g_sten11_d_t.*
               END IF
               CLOSE astt806_bcl13
               CLOSE astt806_bcl5
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkg_t","'13'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page10_after_row2 name="input.body9.after_row2"

            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body9.after_input"

            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten11_d[li_reproduce_target].* = g_sten11_d[li_reproduce].*
 
               LET g_sten11_d[li_reproduce_target].stkgseq1 = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten11_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten11_d.getLength()+1
            END IF
        
      END INPUT
      INPUT ARRAY g_sten13_d FROM s_detail13.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_10)
         
        
         BEFORE INPUT
            IF g_stem_m.stem035 <> '1' THEN    
               ACCEPT DIALOG
            END IF
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx2_tmp = g_detail_idx2
            LET g_detail_idx = g_detail_idx_list[4]
            LET g_detail_idx2 = g_detail_idx_list[12]
            #檢查合同单头單身是否為空
            IF g_detail_idx = 0 OR g_sten2_d.getLength() = 0 THEN
               NEXT FIELD stke001
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten2_d[g_detail_idx].stke001) THEN
               NEXT FIELD stke001
            END IF
            #檢查合同固定费用單身是否為空
            IF g_detail_idx2 = 0 OR g_sten12_d.getLength() = 0 THEN
               NEXT FIELD stkfseq_2
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_sten12_d[g_detail_idx2].stkfseq_2) THEN
               NEXT FIELD stkfseq_2
            END IF
            #add-point:資料輸入前 name="input.body9.before_input2"
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sten13_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'14',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_sten13_d.getLength()
            #add-point:資料輸入前 name="input.body9.before_input"

            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sten13_d[l_ac].* TO NULL 
            INITIALIZE g_sten13_d_t.* TO NULL 
            INITIALIZE g_sten13_d_o.* TO NULL 
            #公用欄位給值(單身10)
            
            #自定義預設值(單身10)
            
            #add-point:modify段before備份 name="input.body9.insert.before_bak"
            SELECT MAX(stkgseq1) INTO g_sten13_d[l_ac].stkgseq1_1
              FROM stkg_t
             WHERE stkgent= g_enterprise
               AND stkgdocno= g_stem_m.stemdocno 
               AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten12_d[g_detail_idx2].stkfseq_2
            IF cl_null(g_sten13_d[l_ac].stkgseq1_1) THEN
               LET g_sten13_d[l_ac].stkgseq1_1=1
            ELSE
               LET g_sten13_d[l_ac].stkgseq1_1=g_sten13_d[l_ac].stkgseq1_1+1
            END IF 
            SELECT MAX(stkg003) INTO g_sten13_d[l_ac].stkg002_1
              FROM stkg_t
             WHERE stkgent= g_enterprise
               AND stkgdocno= g_stem_m.stemdocno 
               AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten12_d[g_detail_idx2].stkfseq_2
            IF cl_null(g_sten13_d[l_ac].stkg002_1) THEN
               LET g_sten13_d[l_ac].stkg002_1=1
            ELSE
               LET g_sten13_d[l_ac].stkg002_1=g_sten13_d[l_ac].stkg002_1+1
            END IF 
            #end add-point
            LET g_sten13_d_t.* = g_sten13_d[l_ac].*     #新輸入資料
            LET g_sten13_d_o.* = g_sten13_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL astt806_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body9.insert.after_set_entry_b"

            #end add-point
            CALL astt806_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sten13_d[li_reproduce_target].* = g_sten13_d[li_reproduce].*
 
               LET g_sten13_d[li_reproduce_target].stkgseq1_1 = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body9.before_insert"

            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body9.before_row2"

            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx3 = l_ac
            LET g_detail_idx_list[14] = l_ac
            LET g_current_page = 14
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
            OPEN astt806_bcl2 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001            
            OPEN astt806_bcl12 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten12_d[g_detail_idx2].stkfseq_2
            IF STATUS THEN
               CLOSE astt806_cl
               CLOSE astt806_bcl2
               CLOSE astt806_bcl12
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN astt806_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_sten13_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sten13_d[l_ac].stkgseq1_1 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_sten13_d_t.* = g_sten13_d[l_ac].*  #BACKUP
               LET g_sten13_d_o.* = g_sten13_d[l_ac].*  #BACKUP
               CALL astt806_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body9.after_set_entry_b"

               #end add-point  
               CALL astt806_set_no_entry_b(l_cmd)
               IF NOT astt806_lock_b("stkg_B","'14'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH astt806_bcl14 INTO  g_sten13_d[l_ac].stkgseq1_1,g_sten13_d[l_ac].stkg002_1,g_sten13_d[l_ac].stkg003_1,
                                            g_sten13_d[l_ac].stkg005_1,g_sten13_d[l_ac].stkg007_1
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_sten13_d_mask_o[l_ac].* =  g_sten13_d[l_ac].*
                  #CALL astt806_stkg_t_mask()
                  LET g_sten13_d_mask_n[l_ac].* =  g_sten13_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL astt806_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body9.before_row"

            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body9.after_delete_d"

               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body9.b_delete_ask"

               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身10刪除前 name="input.body9.b_delete"

               #end add-point    
 
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten12_d[g_detail_idx2].stkfseq_2
               LET gs_keys[4] = g_sten13_d_t.stkgseq1_1
 
               #刪除同層單身
               IF NOT astt806_delete_b('stkg_t',gs_keys,"'C'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE astt806_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身10刪除中 name="input.body9.m_delete"

               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE astt806_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身10刪除後 name="input.body9.a_delete"

               #end add-point
 
               LET l_count = g_sten_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body9.after_delete"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_sten13_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身10新增前 name="input.body9.b_a_insert"

            #end add-point
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM stkg_t 
             WHERE stkgent = g_enterprise AND stkgdocno = g_stem_m.stemdocno AND stkg001 = g_sten2_d[g_detail_idx].stke001
               AND stkgseq = g_sten12_d[g_detail_idx2].stkfseq_2  AND stkgseq1 = g_sten13_d[g_detail_idx3].stkgseq1_1
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身10新增前 name="input.body9.b_insert"

               #end add-point
            
                              INITIALIZE gs_keys TO NULL
               LET gs_keys[1] = g_stem_m.stemdocno
               LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
               LET gs_keys[3] = g_sten2_d[g_detail_idx].stkesite
               LET gs_keys[4] = g_sten12_d[g_detail_idx2].stkfseq_2                              
               LET gs_keys[5] = g_sten13_d[g_detail_idx3].stkgseq1_1
               CALL astt806_insert_b('stkg_t',gs_keys,"'C'")
                           
               #add-point:單身新增後10 name="input.body9.a_insert"

               #end add-point
            ELSE    
               INITIALIZE g_sten_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL s_transaction_end('N','0')                    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL astt801_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body9.after_insert"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            LET g_detail_idx2 = g_detail_idx2_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_sten13_d[l_ac].* = g_sten13_d_t.*
               CLOSE astt806_bcl14
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_sten13_d[l_ac].* = g_sten13_d_t.*
            ELSE
               #add-point:單身page10修改前 name="input.body9.b_update"

               #end add-point
               
               #寫入修改者/修改日期資訊(單身10)
               
               
               #將遮罩欄位還原
               #CALL astt806_stkg_t_mask_restore('restore_mask_o')
               
               UPDATE stkg_t SET (stkgdocno,stkgseq,stkgsite,stkgunit,stkgseq1,stkg001,stkg002,stkg003, 
                   stkg005,stkg007) = (g_stem_m.stemdocno,g_sten12_d[g_detail_idx2].stkfseq_2,g_sten2_d[g_detail_idx].stkesite, 
                   g_sten2_d[g_detail_idx].stkesite,g_sten13_d[l_ac].stkgseq1_1,g_sten2_d[g_detail_idx].stke001,g_sten13_d[l_ac].stkg002_1, 
                   g_sten13_d[l_ac].stkg003_1,g_sten13_d[l_ac].stkg005_1,g_sten13_d[l_ac].stkg007_1) #自訂欄位頁簽 

                WHERE stkgent = g_enterprise AND stkgdocno = g_stemdocno_t AND stkg001 = g_sten2_d[g_detail_idx].stke001 
                  AND stkgseq = g_sten12_d[g_detail_idx2].stkfseq_2  AND stkgseq1 = g_sten13_d_t.stkgseq1_1        
               #add-point:單身page10修改中 name="input.body9.m_update"

               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL s_transaction_end('N','0')
                     LET g_sten13_d[l_ac].* = g_sten13_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkg_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     
                  WHEN SQLCA.sqlcode #其他錯誤
                     CALL s_transaction_end('N','0')
                     LET g_sten13_d[l_ac].* = g_sten13_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     INITIALIZE gs_keys TO NULL 
                     LET gs_keys[1] = g_stem_m.stemdocno
                     LET gs_keys_bak[1] = g_stemdocno_t
                     LET gs_keys[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys_bak[2] = g_sten2_d[g_detail_idx].stke001
                     LET gs_keys[3] = g_sten12_d[g_detail_idx2].stkfseq_2
                     LET gs_keys_bak[3] = g_sten3_d[g_detail_idx2].stkfseq
                     LET gs_keys[4] = g_sten13_d[g_detail_idx3].stkgseq1_1
                     LET gs_keys_bak[4] = g_sten13_d_t.stkgseq1_1
                     CALL astt806_update_b('stkg_t',gs_keys,gs_keys_bak,"'C'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               #CALL astt806_stkg_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten13_d_t)
               LET g_log2 = util.JSON.stringify(g_stem_m),util.JSON.stringify(g_sten13_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page10修改後 name="input.body9.a_update"
               LET l_recount = 'Y'
               IF cl_null(l_string) THEN
                  LET l_string = " stke001 IN (","'",g_sten2_d[g_detail_idx].stke001,"'"
               ELSE
                  LET l_string = l_string CLIPPED,",'",g_sten2_d[g_detail_idx].stke001,"'"  
               END IF
               #end add-point
            END IF
          
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkgseq1_1
            #add-point:BEFORE FIELD stkgseq1 name="input.b.page9.stkgseq1"

            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkgseq1_1
            
            #add-point:AFTER FIELD stkgseq1 name="input.a.page9.stkgseq1"
            #應用 a05 樣板自動產生(Version:3)
            #確認資料無重複
            IF g_stem_m.stemdocno IS NOT NULL AND g_sten2_d[g_detail_idx].stke001 IS NOT NULL AND g_sten12_d[g_detail_idx2].stkfseq_2 IS NOT NULL AND g_sten13_d[g_detail_idx3].stkgseq1_1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_stem_m.stemdocno != g_stemdocno_t OR g_sten2_d[g_detail_idx].stke001 != g_sten2_d[g_detail_idx].stke001 OR g_sten12_d[g_detail_idx2].stkfseq_2 != g_sten12_d[g_detail_idx2].stkfseq_2 OR  g_sten13_d[g_detail_idx3].stkgseq1_1 != g_sten13_d_t.stkgseq1_1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM stkg_t WHERE "||"stkgent = '" ||g_enterprise|| "' AND "||"stkgdocno = '"||g_stem_m.stemdocno ||"' AND "||"stkg001 = '"||g_sten2_d[g_detail_idx].stke001 ||"' AND "|| "stkgseq = '"||g_sten12_d[g_detail_idx2].stkfseq_2 ||"' AND "|| "stkgseq1 = '"||g_sten13_d[g_detail_idx3].stkgseq1_1 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
                  
                  
               END IF
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkgseq1_1
            #add-point:ON CHANGE stkgseq1 name="input.g.page9.stkgseq1"

            #END add-point 
  
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg002_1
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten13_d[g_detail_idx3].stkg002_1,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg002_1
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg002 name="input.a.page9.stkg002"
            IF NOT cl_null(g_sten13_d[g_detail_idx3].stkg002_1) THEN 
               LET l_cnt = 0 
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkg_t
                WHERE stkgent = g_enterprise
                  AND stkgdocno = g_stem_m.stemdocno
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten3_d[g_detail_idx2].stkfseq
                  AND ((stkg002 <= g_sten13_d[g_detail_idx3].stkg002_1 AND stkg003 >= g_sten13_d[g_detail_idx3].stkg002_1))
                  AND stkgseq1 <> g_sten13_d[g_detail_idx3].stkgseq1_1
               IF l_cnt > 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00611"
                  LET g_errparam.extend = g_sten13_d[g_detail_idx3].stkg002_1
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten13_d[g_detail_idx3].stkg002_1=  g_sten13_d_t.stkg002_1
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF NOT cl_null(g_sten13_d[g_detail_idx3].stkg002_1) AND NOT cl_null(g_sten13_d[g_detail_idx3].stkg003_1) THEN
               IF g_sten13_d[g_detail_idx3].stkg002_1 > g_sten13_d[g_detail_idx3].stkg003_1 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00017"
                  LET g_errparam.extend = g_sten13_d[g_detail_idx3].stkg002_1
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten13_d[g_detail_idx3].stkg002_1=  g_sten13_d_t.stkg002_1
                  NEXT FIELD CURRENT  
               END IF
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg002_1
            #add-point:BEFORE FIELD stkg002 name="input.b.page9.stkg002"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg002_1
            #add-point:ON CHANGE stkg002 name="input.g.page9.stkg002"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg003_1
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten13_d[g_detail_idx3].stkg003_1,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg003_1
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg003 name="input.a.page9.stkg003"
            IF NOT cl_null(g_sten13_d[g_detail_idx3].stkg003_1) THEN 
               LET l_cnt = 0 
               SELECT COUNT(*) INTO l_cnt 
                 FROM stkg_t
                WHERE stkgent = g_enterprise
                  AND stkgdocno = g_stem_m.stemdocno
                  AND stkg001 = g_sten2_d[g_detail_idx].stke001
                  AND stkgseq = g_sten12_d[g_detail_idx2].stkfseq_2
                  AND ((stkg002 <= g_sten13_d[g_detail_idx3].stkg003_1 AND stkg003 >= g_sten13_d[g_detail_idx3].stkg003_1))
                  AND stkgseq1 <> g_sten13_d[g_detail_idx3].stkgseq1_1
               IF l_cnt > 0 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00611"
                  LET g_errparam.extend = g_sten13_d[g_detail_idx3].stkg003_1
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten13_d[g_detail_idx3].stkg003_1=  g_sten13_d_t.stkg003_1
                  NEXT FIELD CURRENT  
               END IF
            END IF 
            IF NOT cl_null(g_sten13_d[g_detail_idx3].stkg002_1) AND NOT cl_null(g_sten13_d[g_detail_idx3].stkg003_1) THEN
               IF g_sten13_d[g_detail_idx3].stkg002_1 > g_sten13_d[g_detail_idx3].stkg003_1 THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = "ast-00017"
                  LET g_errparam.extend = g_sten13_d[g_detail_idx3].stkg003_1
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                   
                  LET g_sten13_d[g_detail_idx3].stkg003_1 =  g_sten13_d_t.stkg003_1
                  NEXT FIELD CURRENT  
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg003_1
            #add-point:BEFORE FIELD stkg003 name="input.b.page9.stkg003"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg003_1
            #add-point:ON CHANGE stkg003 name="input.g.page9.stkg003"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg005_1
            IF NOT cl_ap_chk_range(g_sten13_d[g_detail_idx3].stkg005_1,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg005_1
            END IF 
 
 
 
            #add-point:AFTER FIELD stkg004 name="input.a.page9.stkg004"
            IF NOT cl_null(g_sten13_d[g_detail_idx3].stkg005_1) THEN 
               LET g_sten13_d[g_detail_idx3].stkg007_1=g_sten13_d[g_detail_idx3].stkg005_1
            END IF
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg005_1
            #add-point:BEFORE FIELD stkg004 name="input.b.page9.stkg004"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg005_1
            #add-point:ON CHANGE stkg004 name="input.g.page9.stkg004"

            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD stkg007_1
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sten13_d[g_detail_idx3].stkg007_1,"0","0","","","azz-00079",1) THEN
               NEXT FIELD stkg007_1
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD stkg007_1
            #add-point:BEFORE FIELD stkg006 name="input.b.page9.stkg006"

            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE stkg007_1
            #add-point:ON CHANGE stkg006 name="input.g.page9.stkg006"

            #END add-point 
 
         #Ctrlp:input.c.page9.stkgseq1
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkgseq1_1
            #add-point:ON ACTION controlp INFIELD stkgseq1 name="input.c.page9.stkgseq1"

            #END add-point
 
         #Ctrlp:input.c.page9.stkg002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg002_1
            #add-point:ON ACTION controlp INFIELD stkg002 name="input.c.page9.stkg002"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg003_1
            #add-point:ON ACTION controlp INFIELD stkg003 name="input.c.page9.stkg003"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg005_1
            #add-point:ON ACTION controlp INFIELD stkg004 name="input.c.page9.stkg004"

            #END add-point
 
 
         #Ctrlp:input.c.page9.stkg006
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD stkg007_1
            #add-point:ON ACTION controlp INFIELD stkg006 name="input.c.page9.stkg006"

            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page10_after_row name="input.body9.after_row"

            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_sten13_d[l_ac].* = g_sten13_d_t.*
               END IF
               CLOSE astt806_bcl14
               CLOSE astt806_bcl12
               CLOSE astt806_bcl2
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL astt806_unlock_b("stkg_t","'13'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page10_after_row2 name="input.body9.after_row2"

            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body9.after_input"

            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_sten13_d[li_reproduce_target].* = g_sten13_d[li_reproduce].*
 
               LET g_sten13_d[li_reproduce_target].stkgseq1_1 = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_sten13_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_sten13_d.getLength()+1
            END IF
        
      END INPUT
      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog name="input.before_dialog"
         LET l_recount = 'N'
         LET l_string = ''
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_idx_group.getValue("'1',"))      
         CALL DIALOG.setCurrentRow("s_detail15",g_idx_group.getValue("'4',"))
         CALL DIALOG.setCurrentRow("s_detail16",g_idx_group.getValue("'2',"))
         CALL DIALOG.setCurrentRow("s_detail2",g_idx_group.getValue("'3',"))
         CALL DIALOG.setCurrentRow("s_detail3",g_idx_group.getValue("'5',"))
         CALL DIALOG.setCurrentRow("s_detail4",g_idx_group.getValue("'6',"))
         CALL DIALOG.setCurrentRow("s_detail5",g_idx_group.getValue("'7',"))
         CALL DIALOG.setCurrentRow("s_detail6",g_idx_group.getValue("'8',"))
         CALL DIALOG.setCurrentRow("s_detail7",g_idx_group.getValue("'9',"))
         CALL DIALOG.setCurrentRow("s_detail8",g_idx_group.getValue("'10',"))
         CALL DIALOG.setCurrentRow("s_detail9",g_idx_group.getValue("'11',"))
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field name="input.next_field"
            NEXT FIELD stemsite
            #end add-point  
            NEXT FIELD stemdocno
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD stenseq
               WHEN "s_detail15"
                  NEXT FIELD stknsite
               WHEN "s_detail16"
                  NEXT FIELD stkosite
               WHEN "s_detail2"
                  NEXT FIELD stkeunit
               WHEN "s_detail3"
                  NEXT FIELD stkfseq
               WHEN "s_detail4"
                  NEXT FIELD stkhseq
               WHEN "s_detail5"
                  NEXT FIELD stkiseq
               WHEN "s_detail6"
                  NEXT FIELD stkjacti
               WHEN "s_detail7"
                  NEXT FIELD stkkacti
               WHEN "s_detail8"
                  NEXT FIELD stklseq
               WHEN "s_detail9"
                  NEXT FIELD stkmseq
 
               #add-point:input段modify_detail  name="input.modify_detail.other"
               
               #end add-point  
            END CASE
         END IF
      
      AFTER DIALOG
         #add-point:input段after_dialog name="input.after_dialog"
         IF l_recount = 'Y' THEN
            LET l_stke001 =''
            LET l_stke011 =''
            LET l_stke012 =''
            LET l_stke042 =''
            LET l_sql = "SELECT stke001,stke011,stke012,stke042 FROM stke_t WHERE stkeent = ",g_enterprise," AND stkedocno = '",g_stem_m.stemdocno,"' "
            IF l_string IS NOT NULL THEN
               LET l_string = l_string CLIPPED,")"
               LET l_sql = l_sql," AND ",l_string
            END IF
            PREPARE astt806_stkn_pre FROM l_sql
            DECLARE astt806_stkn_cs CURSOR WITH HOLD FOR astt806_stkn_pre
            FOREACH astt806_stkn_cs INTO l_stke001,l_stke011,l_stke012,l_stke042
               INITIALIZE l_current_row TO NULL
               #重新计算
               CALL s_transaction_begin()
               CALL s_astt806_stki_insert(l_stke001,g_stem_m.stemdocno) RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0') 
                  #EXIT DIALOG   
                  CONTINUE FOREACH                  
               END IF
               LET l_type = ''
               IF g_stem_m.stem035 = '1' THEN
                  LET l_type = 'R'
               END IF
               IF g_stem_m.stem035 = '2' THEN
                  LET l_type = 'B'
               END IF
               IF g_stem_m.stem035 = '3' THEN
                  LET l_type = 'A'
               END IF
               CALL s_astt806_day_account(l_type,g_stem_m.stemdocno,l_stke042,l_stke012,l_stke001) RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0') 
                  #EXIT DIALOG 
                  CONTINUE FOREACH    
               END IF
               CALL s_astt806_produce_period(l_type,g_stem_m.stemdocno,l_stke011,l_stke012,l_stke042,l_stke001) RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0') 
                  #EXIT DIALOG
                  CONTINUE FOREACH                      
               END IF
               CALL s_transaction_end('Y','0') 

            END FOREACH
            CALL astt806_b_fill() #單身填充
            CALL astt806_b_fill2('0') #單身填充              
         END IF
 
         LET l_recount = 'N'
         LET l_string = '' 
         LET l_current_row = g_sten2_d.getLength()
         IF l_current_row >= 1 THEN
            IF g_sten2_d[1].stke001 IS NOT NULL THEN
               LET l_ac = 1
               LET g_detail_idx = 1
               LET g_detail_idx_list[4] = 1               
               CALL astt806_b_fill() #單身填充
               CALL astt806_b_fill2('0') #單身填充 
            END IF
         END IF            
         #end add-point    
         
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept  name="input.accept"
         
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         #add-point:input段cancel name="input.cancel"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
         LET g_detail_idx_list[4] = 1
         LET g_detail_idx_list[5] = 1
         LET g_detail_idx_list[6] = 1
         LET g_detail_idx_list[7] = 1
         LET g_detail_idx_list[8] = 1
         LET g_detail_idx_list[9] = 1
         LET g_detail_idx_list[10] = 1
         LET g_detail_idx_list[11] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail15",1)
         CALL g_curr_diag.setCurrentRow("s_detail16",1)
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
         CALL g_curr_diag.setCurrentRow("s_detail4",1)
         CALL g_curr_diag.setCurrentRow("s_detail5",1)
         CALL g_curr_diag.setCurrentRow("s_detail6",1)
         CALL g_curr_diag.setCurrentRow("s_detail7",1)
         CALL g_curr_diag.setCurrentRow("s_detail8",1)
         CALL g_curr_diag.setCurrentRow("s_detail9",1)
 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         #add-point:input段close name="input.close"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         #add-point:input段exit name="input.exit"
         
         #end add-point
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
         LET g_detail_idx_list[4] = 1
         LET g_detail_idx_list[5] = 1
         LET g_detail_idx_list[6] = 1
         LET g_detail_idx_list[7] = 1
         LET g_detail_idx_list[8] = 1
         LET g_detail_idx_list[9] = 1
         LET g_detail_idx_list[10] = 1
         LET g_detail_idx_list[11] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail15",1)
         CALL g_curr_diag.setCurrentRow("s_detail16",1)
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
         CALL g_curr_diag.setCurrentRow("s_detail4",1)
         CALL g_curr_diag.setCurrentRow("s_detail5",1)
         CALL g_curr_diag.setCurrentRow("s_detail6",1)
         CALL g_curr_diag.setCurrentRow("s_detail7",1)
         CALL g_curr_diag.setCurrentRow("s_detail8",1)
         CALL g_curr_diag.setCurrentRow("s_detail9",1)
 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input  name="input.after_input"
   
   #end add-point    
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION astt806_show()
   #add-point:show段define(客製用) name="show.define_customerization"
   
   #end add-point  
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="show.before"
   
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL astt806_b_fill() #單身填充
      CALL astt806_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #應用 a12 樣板自動產生(Version:4)
 
 
 
   
   #顯示followup圖示
   #應用 a48 樣板自動產生(Version:3)
   CALL astt806_set_pk_array()
   #add-point:ON ACTION agendum name="show.follow_pic"
   
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference name="show.head.reference"
   
   #end add-point
   
   #遮罩相關處理
   LET g_stem_m_mask_o.* =  g_stem_m.*
   CALL astt806_stem_t_mask()
   LET g_stem_m_mask_n.* =  g_stem_m.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
       g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem012_desc,g_stem_m.stem013,g_stem_m.stem013_desc, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemownid_desc,g_stem_m.stemowndp, 
       g_stem_m.stemowndp_desc,g_stem_m.stemcrtid,g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp,g_stem_m.stemcrtdp_desc, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmodid_desc,g_stem_m.stemmoddt,g_stem_m.stemcnfid, 
       g_stem_m.stemcnfid_desc,g_stem_m.stemcnfdt
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_stem_m.stemstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_sten_d.getLength()
      #add-point:show段單身reference name="show.body.reference"
      
      #end add-point
   END FOR
   
   FOR l_ac = 1 TO g_sten15_d.getLength()
      #add-point:show段單身reference name="show.body15.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten16_d.getLength()
      #add-point:show段單身reference name="show.body16.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten2_d.getLength()
      #add-point:show段單身reference name="show.body2.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten3_d.getLength()
      #add-point:show段單身reference name="show.body3.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten4_d.getLength()
      #add-point:show段單身reference name="show.body4.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten5_d.getLength()
      #add-point:show段單身reference name="show.body5.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten6_d.getLength()
      #add-point:show段單身reference name="show.body6.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten7_d.getLength()
      #add-point:show段單身reference name="show.body7.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten8_d.getLength()
      #add-point:show段單身reference name="show.body8.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_sten9_d.getLength()
      #add-point:show段單身reference name="show.body9.reference"
      
      #end add-point
   END FOR
 
   
    
   
   #add-point:show段other name="show.other"
   
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL astt806_detail_show()
 
   #add-point:show段之後 name="show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION astt806_detail_show()
   #add-point:detail_show段define(客製用) name="detail_show.define_customerization"
   
   #end add-point  
   #add-point:detail_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="detail_show.before"
   
   #end add-point
   
   #add-point:detail_show段之後 name="detail_show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION astt806_reproduce()
   #add-point:reproduce段define(客製用) name="reproduce.define_customerization"
   
   #end add-point   
   DEFINE l_newno     LIKE stem_t.stemdocno 
   DEFINE l_oldno     LIKE stem_t.stemdocno 
 
   DEFINE l_master    RECORD LIKE stem_t.* #此變數樣板目前無使用
   DEFINE l_detail    RECORD LIKE sten_t.* #此變數樣板目前無使用
   DEFINE l_detail2    RECORD LIKE stke_t.* #此變數樣板目前無使用
 
 
   DEFINE l_detail3    RECORD LIKE stkn_t.* #此變數樣板目前無使用
 
   DEFINE l_detail4    RECORD LIKE stko_t.* #此變數樣板目前無使用
 
   DEFINE l_detail5    RECORD LIKE stkf_t.* #此變數樣板目前無使用
 
   DEFINE l_detail6    RECORD LIKE stkh_t.* #此變數樣板目前無使用
 
   DEFINE l_detail7    RECORD LIKE stki_t.* #此變數樣板目前無使用
 
   DEFINE l_detail8    RECORD LIKE stkj_t.* #此變數樣板目前無使用
 
   DEFINE l_detail9    RECORD LIKE stkk_t.* #此變數樣板目前無使用
 
   DEFINE l_detail10    RECORD LIKE stkl_t.* #此變數樣板目前無使用
 
   DEFINE l_detail11    RECORD LIKE stkm_t.* #此變數樣板目前無使用
 
 
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="reproduce.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="reproduce.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   LET g_master_insert = FALSE
   
   IF g_stem_m.stemdocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_stemdocno_t = g_stem_m.stemdocno
 
    
   LET g_stem_m.stemdocno = ""
 
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_stem_m.stemownid = g_user
      LET g_stem_m.stemowndp = g_dept
      LET g_stem_m.stemcrtid = g_user
      LET g_stem_m.stemcrtdp = g_dept 
      LET g_stem_m.stemcrtdt = cl_get_current()
      LET g_stem_m.stemmodid = g_user
      LET g_stem_m.stemmoddt = cl_get_current()
      LET g_stem_m.stemstus = 'N'
 
 
 
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前 name="reproduce.head.b_input"
   
   #end add-point
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_stem_m.stemstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #清空key欄位的desc
   
   
   CALL astt806_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_stem_m.* TO NULL
      INITIALIZE g_sten_d TO NULL
      INITIALIZE g_sten15_d TO NULL
      INITIALIZE g_sten16_d TO NULL
      INITIALIZE g_sten2_d TO NULL
      INITIALIZE g_sten3_d TO NULL
      INITIALIZE g_sten4_d TO NULL
      INITIALIZE g_sten5_d TO NULL
      INITIALIZE g_sten6_d TO NULL
      INITIALIZE g_sten7_d TO NULL
      INITIALIZE g_sten8_d TO NULL
      INITIALIZE g_sten9_d TO NULL
 
      #add-point:複製取消後 name="reproduce.cancel"
      
      #end add-point
      CALL astt806_show()
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code = 9001 
      LET g_errparam.popup = FALSE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL astt806_set_act_visible()   
   CALL astt806_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_stemdocno_t = g_stem_m.stemdocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " stement = " ||g_enterprise|| " AND",
                      " stemdocno = '", g_stem_m.stemdocno, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL astt806_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後 name="reproduce.after_reproduce"
   
   #end add-point
   
   CALL astt806_idx_chk()
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #功能已完成,通報訊息中心
   CALL astt806_msgcentre_notify('reproduce')
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION astt806_detail_reproduce()
   #add-point:delete段define(客製用) name="detail_reproduce.define_customerization"
   
   #end add-point    
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE sten_t.* #此變數樣板目前無使用
   DEFINE l_detail2    RECORD LIKE stke_t.* #此變數樣板目前無使用
 
 
   DEFINE l_detail3    RECORD LIKE stkn_t.* #此變數樣板目前無使用
 
   DEFINE l_detail4    RECORD LIKE stko_t.* #此變數樣板目前無使用
 
   DEFINE l_detail5    RECORD LIKE stkf_t.* #此變數樣板目前無使用
 
   DEFINE l_detail6    RECORD LIKE stkh_t.* #此變數樣板目前無使用
 
   DEFINE l_detail7    RECORD LIKE stki_t.* #此變數樣板目前無使用
 
   DEFINE l_detail8    RECORD LIKE stkj_t.* #此變數樣板目前無使用
 
   DEFINE l_detail9    RECORD LIKE stkk_t.* #此變數樣板目前無使用
 
   DEFINE l_detail10    RECORD LIKE stkl_t.* #此變數樣板目前無使用
 
   DEFINE l_detail11    RECORD LIKE stkm_t.* #此變數樣板目前無使用
 
 
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_reproduce.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="detail_reproduce.pre_function"
   
   #end add-point
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE astt806_detail
   
   #add-point:單身複製前1 name="detail_reproduce.body.table1.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM sten_t
    WHERE stenent = g_enterprise AND stendocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail 
      #更新key欄位
      SET stendocno = g_stem_m.stemdocno
 
      #更新共用欄位
      #應用 a13 樣板自動產生(Version:4)
      #, stkestus = "Y" 
 
 
 
 
   #add-point:單身修改前 name="detail_reproduce.body.table1.b_update"
   
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO sten_t SELECT * FROM astt806_detail
   
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1 name="detail_reproduce.body.table1.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   #add-point:單身複製後1 name="detail_reproduce.body.table1.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table2.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stke_t 
    WHERE stkeent = g_enterprise AND stkedocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkedocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table2.b_update"
   
   #end add-point    
 
   #將資料塞回原table   
   INSERT INTO stke_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table2.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   #add-point:單身複製後 name="detail_reproduce.body.table2.a_insert"
   
   #end add-point
 
 
   
   #add-point:單身複製前 name="detail_reproduce.body.table3.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkn_t 
    WHERE stknent = g_enterprise AND stkndocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkndocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table3.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkn_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table3.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table3.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table4.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stko_t 
    WHERE stkoent = g_enterprise AND stkodocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkodocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table4.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stko_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table4.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table4.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table5.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkf_t 
    WHERE stkfent = g_enterprise AND stkfdocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkfdocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table5.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkf_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table5.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table5.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table6.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkh_t 
    WHERE stkhent = g_enterprise AND stkhdocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkhdocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table6.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkh_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table6.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table6.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table7.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stki_t 
    WHERE stkient = g_enterprise AND stkidocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkidocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table7.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stki_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table7.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table7.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table8.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkj_t 
    WHERE stkjent = g_enterprise AND stkjdocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkjdocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table8.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkj_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table8.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table8.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table9.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkk_t 
    WHERE stkkent = g_enterprise AND stkkdocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkkdocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table9.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkk_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table9.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table9.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table10.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkl_t 
    WHERE stklent = g_enterprise AND stkldocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkldocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table10.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkl_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table10.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table10.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table11.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM stkm_t 
    WHERE stkment = g_enterprise AND stkmdocno = g_stemdocno_t
 
    INTO TEMP astt806_detail
 
   #將key修正為調整後   
   UPDATE astt806_detail SET stkmdocno = g_stem_m.stemdocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table11.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO stkm_t SELECT * FROM astt806_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table11.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE astt806_detail
   
   LET g_data_owner = g_stem_m.stemownid      
   LET g_data_dept  = g_stem_m.stemowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table11.a_insert"
   
   #end add-point
 
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_stemdocno_t = g_stem_m.stemdocno
 
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.delete" >}
#+ 資料刪除
PRIVATE FUNCTION astt806_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   
   #end add-point     
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete.pre_function"
   
   #end add-point
   
   IF g_stem_m.stemdocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   
   
   CALL s_transaction_begin()
 
   OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astt806_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
   
   #檢查是否允許此動作
   IF NOT astt806_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_stem_m_mask_o.* =  g_stem_m.*
   CALL astt806_stem_t_mask()
   LET g_stem_m_mask_n.* =  g_stem_m.*
   
   CALL astt806_show()
   
   #add-point:delete段before ask name="delete.before_ask"
   
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前 name="delete.head.b_delete"
      
      #end add-point   
      
      #應用 a47 樣板自動產生(Version:4)
      #刪除相關文件
      CALL astt806_set_pk_array()
      #add-point:相關文件刪除前 name="delete.befroe.related_document_remove"
      
      #end add-point   
      CALL cl_doc_remove()  
 
 
 
  
  
      #資料備份
      LET g_stemdocno_t = g_stem_m.stemdocno
 
 
      DELETE FROM stem_t
       WHERE stement = g_enterprise AND stemdocno = g_stem_m.stemdocno
 
       
      #add-point:單頭刪除中 name="delete.head.m_delete"
      
      #end add-point
       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_stem_m.stemdocno,":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF
      
      #add-point:單頭刪除後 name="delete.head.a_delete"
      IF NOT s_aooi200_del_docno(g_stem_m.stemdocno,g_stem_m.stemdocdt) THEN
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      #end add-point
  
      #add-point:單身刪除前 name="delete.body.b_delete"
      
      #end add-point
      
      DELETE FROM sten_t
       WHERE stenent = g_enterprise AND stendocno = g_stem_m.stemdocno
 
 
      #add-point:單身刪除中 name="delete.body.m_delete"
      
      #end add-point
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF    
 
      #add-point:單身刪除後 name="delete.body.a_delete"
      
      #end add-point
      
            
                                                               
      #add-point:單身刪除前 name="delete.body.b_delete2"
      
      #end add-point
      DELETE FROM stke_t
       WHERE stkeent = g_enterprise AND
             stkedocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete2"
      
      #end add-point
 
 
 
      #add-point:單身刪除前 name="delete.body.b_delete3"
      
      #end add-point
      DELETE FROM stkn_t
       WHERE stknent = g_enterprise AND
             stkndocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete3"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete3"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete4"
      
      #end add-point
      DELETE FROM stko_t
       WHERE stkoent = g_enterprise AND
             stkodocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete4"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete4"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete5"
      
      #end add-point
      DELETE FROM stkf_t
       WHERE stkfent = g_enterprise AND
             stkfdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete5"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete5"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete6"
      
      #end add-point
      DELETE FROM stkh_t
       WHERE stkhent = g_enterprise AND
             stkhdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete6"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete6"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete7"
      
      #end add-point
      DELETE FROM stki_t
       WHERE stkient = g_enterprise AND
             stkidocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete7"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete7"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete8"
      
      #end add-point
      DELETE FROM stkj_t
       WHERE stkjent = g_enterprise AND
             stkjdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete8"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete8"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete9"
      
      #end add-point
      DELETE FROM stkk_t
       WHERE stkkent = g_enterprise AND
             stkkdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete9"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete9"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete10"
      
      #end add-point
      DELETE FROM stkl_t
       WHERE stklent = g_enterprise AND
             stkldocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete10"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete10"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete11"
      
      #end add-point
      DELETE FROM stkm_t
       WHERE stkment = g_enterprise AND
             stkmdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete11"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete11"
      DELETE FROM stkg_t
       WHERE stkgent = g_enterprise AND
             stkgdocno = g_stem_m.stemdocno
      #add-point:單身刪除中 name="delete.body.m_delete11"

      #end add-point
      IF SQLCA.sqlcode THEN
         CALL s_transaction_end('N','0')
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         RETURN
      END IF  
      #end add-point
 
 
      
      #修改歷程記錄(刪除)
      LET g_log1 = util.JSON.stringify(g_stem_m)   #(ver:78)
      IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:78)
         CLOSE astt806_cl
         CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL g_sten_d.clear() 
      CALL g_sten15_d.clear()       
      CALL g_sten16_d.clear()       
      CALL g_sten2_d.clear()       
      CALL g_sten3_d.clear()       
      CALL g_sten4_d.clear()       
      CALL g_sten5_d.clear()       
      CALL g_sten6_d.clear()       
      CALL g_sten7_d.clear()       
      CALL g_sten8_d.clear()       
      CALL g_sten9_d.clear()       
 
     
      CALL astt806_ui_browser_refresh()  
      #CALL astt806_ui_headershow()  
      #CALL astt806_ui_detailshow()
 
      #add-point:多語言刪除 name="delete.lang.before_delete"
      CALL g_sten11_d.clear()  
      CALL g_sten12_d.clear()
      CALL g_sten13_d.clear()   
      CALL g_sten14_d.clear() 
      #end add-point
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
      
      
      
      
      
      
      
      
      
      
 
   
      #add-point:多語言刪除 name="delete.lang.delete"
      
      #end add-point
      
      IF g_browser_cnt > 0 THEN 
         #CALL astt806_browser_fill("")
         CALL astt806_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
      
      CALL s_transaction_end('Y','0')
   ELSE
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE astt806_cl
 
   #功能已完成,通報訊息中心
   CALL astt806_msgcentre_notify('delete')
    
END FUNCTION
 
{</section>}
 
{<section id="astt806.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION astt806_b_fill()
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   
   #end add-point     
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="b_fill.pre_function"
   
   #end add-point
   
   #清空第一階單身
   CALL g_sten_d.clear()
   CALL g_sten2_d.clear()
 
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   IF l_ac = 0 THEN
      LET l_ac = 1
   END IF
   #end add-point
   
   #判斷是否填充
   IF astt806_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.long_sql_if"
      
      #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT stenseq,sten002,sten001,sten003,sten004,sten006,sten007,sten012, 
             sten005,sten008,sten009,sten010,sten011,stenacti,stensite,stenunit ,t1.stael003 ,t2.oocql004 FROM sten_t", 
                
                     " INNER JOIN stem_t ON stement = " ||g_enterprise|| " AND stemdocno = stendocno ",
 
                     #"",
                     
                     "",
                     #下層單身所需的join條件
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
                     " ",
 
 
                                    " LEFT JOIN stael_t t1 ON t1.staelent="||g_enterprise||" AND t1.stael001=sten002 AND t1.stael002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t2 ON t2.oocqlent="||g_enterprise||" AND t2.oocql001='2132' AND t2.oocql002=sten009 AND t2.oocql003='"||g_dlang||"' ",
 
                     " WHERE stenent=? AND stendocno=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body.fill_sql"
         
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY sten_t.stenseq"
         
         #add-point:單身填充控制 name="b_fill.sql"
         
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR astt806_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
   #  OPEN b_fill_cs USING g_enterprise,g_stem_m.stemdocno   #(ver:78)
                                               
      FOREACH b_fill_cs USING g_enterprise,g_stem_m.stemdocno INTO g_sten_d[l_ac].stenseq,g_sten_d[l_ac].sten002, 
          g_sten_d[l_ac].sten001,g_sten_d[l_ac].sten003,g_sten_d[l_ac].sten004,g_sten_d[l_ac].sten006, 
          g_sten_d[l_ac].sten007,g_sten_d[l_ac].sten012,g_sten_d[l_ac].sten005,g_sten_d[l_ac].sten008, 
          g_sten_d[l_ac].sten009,g_sten_d[l_ac].sten010,g_sten_d[l_ac].sten011,g_sten_d[l_ac].stenacti, 
          g_sten_d[l_ac].stensite,g_sten_d[l_ac].stenunit,g_sten_d[l_ac].sten002_desc,g_sten_d[l_ac].sten009_desc  
            #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill.fill"
         
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
    
   #判斷是否填充
   IF astt806_fill_chk(2) THEN
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
         #add-point:b_fill段long_sql_if name="b_fill.body2.long_sql_if"
         
         #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT stkeunit,stkesite,stkedocdt,stke001,stke000,stke002,stke003,stke004, 
             stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015, 
             stke016,stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026, 
             stke028,stke029,stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038, 
             stke039,stke040,stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049, 
             stke050,stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus ,t3.ooefl003 , 
             t4.sthal003 ,t5.pmaal003 ,t6.mhbel003 ,t7.ooag011 ,t8.ooefl003 ,t9.mhaal003 ,t10.mhabl004 , 
             t11.mhacl005 ,t12.oocql004 ,t13.rtaxl003 ,t14.oocql004 ,t15.ooefl003 ,t16.staal003 ,t17.oocql004 , 
             t18.ooibl004 ,t19.oocql004 ,t20.ooail003 ,t21.oodbl004 FROM stke_t",   
                     " INNER JOIN  stem_t ON stement = " ||g_enterprise|| " AND stemdocno = stkedocno ",
 
                     "",
                     " LEFT JOIN stkn_t ON stkeent = stknent AND stkedocno = stkndocno AND stke001 = stkn001 ",
               " LEFT JOIN stko_t ON stkeent = stkoent AND stkedocno = stkodocno AND stke001 = stko001 ",
               " LEFT JOIN stkf_t ON stkeent = stkfent AND stkedocno = stkfdocno AND stke001 = stkf001 ",
               " LEFT JOIN stkh_t ON stkeent = stkhent AND stkedocno = stkhdocno AND stke001 = stkh001 ",
               " LEFT JOIN stki_t ON stkeent = stkient AND stkedocno = stkidocno AND stke001 = stki001 ",
               " LEFT JOIN stkj_t ON stkeent = stkjent AND stkedocno = stkjdocno AND stke001 = stkj001 ",
               " LEFT JOIN stkk_t ON stkeent = stkkent AND stkedocno = stkkdocno AND stke001 = stkk001 ",
               " LEFT JOIN stkl_t ON stkeent = stklent AND stkedocno = stkldocno AND stke001 = stkl001 ",
               " LEFT JOIN stkm_t ON stkeent = stkment AND stkedocno = stkmdocno AND stke001 = stkm001 ",
                                    " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=stkesite AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN sthal_t t4 ON t4.sthalent="||g_enterprise||" AND t4.sthal001=stke003 AND t4.sthal002='"||g_dlang||"' ",
               " LEFT JOIN pmaal_t t5 ON t5.pmaalent="||g_enterprise||" AND t5.pmaal001=stke007 AND t5.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN mhbel_t t6 ON t6.mhbelent="||g_enterprise||" AND t6.mhbel001=stke008 AND t6.mhbel002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t7 ON t7.ooagent="||g_enterprise||" AND t7.ooag001=stke017  ",
               " LEFT JOIN ooefl_t t8 ON t8.ooeflent="||g_enterprise||" AND t8.ooefl001=stke018 AND t8.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN mhaal_t t9 ON t9.mhaalent="||g_enterprise||" AND t9.mhaal001=stke019 AND t9.mhaal002='"||g_dlang||"' ",
               " LEFT JOIN mhabl_t t10 ON t10.mhablent="||g_enterprise||" AND t10.mhabl001=stke019 AND t10.mhabl002=stke020 AND t10.mhabl003='"||g_dlang||"' ",
               " LEFT JOIN mhacl_t t11 ON t11.mhaclent="||g_enterprise||" AND t11.mhacl001=stke019 AND t11.mhacl002=stke020 AND t11.mhacl003=stke021 AND t11.mhacl004='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t12 ON t12.oocqlent="||g_enterprise||" AND t12.oocql001='2144' AND t12.oocql002=stke022 AND t12.oocql003='"||g_dlang||"' ",
               " LEFT JOIN rtaxl_t t13 ON t13.rtaxlent="||g_enterprise||" AND t13.rtaxl001=stke028 AND t13.rtaxl002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t14 ON t14.oocqlent="||g_enterprise||" AND t14.oocql001='2002' AND t14.oocql002=stke029 AND t14.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooefl_t t15 ON t15.ooeflent="||g_enterprise||" AND t15.ooefl001=stke030 AND t15.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN staal_t t16 ON t16.staalent="||g_enterprise||" AND t16.staal001=stke031 AND t16.staal002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t17 ON t17.oocqlent="||g_enterprise||" AND t17.oocql001='2060' AND t17.oocql002=stke032 AND t17.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooibl_t t18 ON t18.ooiblent="||g_enterprise||" AND t18.ooibl002=stke034 AND t18.ooibl003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t19 ON t19.oocqlent="||g_enterprise||" AND t19.oocql001='238' AND t19.oocql002=stke035 AND t19.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooail_t t20 ON t20.ooailent="||g_enterprise||" AND t20.ooail001=stke036 AND t20.ooail002='"||g_dlang||"' ",
               " LEFT JOIN oodbl_t t21 ON t21.oodblent="||g_enterprise||" AND t21.oodbl002=stke038 AND t21.oodbl003='"||g_dlang||"' ",
 
                     " WHERE stkeent=? AND stkedocno=?"   
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段fill_sql name="b_fill.body2.fill_sql"
         
         #end add-point
         IF NOT cl_null(g_wc2_table2) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
         END IF
         
         #子單身的WC
            IF NOT cl_null(g_wc2_table3) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table3 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table4) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table4 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table5) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table5 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table6) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table6 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table7) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table7 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table8) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table8 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table9) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table9 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table10) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table10 CLIPPED
   END IF 
   IF NOT cl_null(g_wc2_table11) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table11 CLIPPED
   END IF 
 
         
         LET g_sql = g_sql, " ORDER BY stke_t.stke001"
         
         #add-point:單身填充控制 name="b_fill.sql2"
         LET g_sql = "SELECT  DISTINCT stkeunit,stkesite,stkedocdt,stke001,stke000,stke002,stke003,stke004, 
             stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015, 
             stke016,stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026, 
             stke028,stke029,stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038, 
             stke039,stke040,stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049, 
             stke050,stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus ,t3.ooefl003 , 
             t4.sthal003 ,t5.pmaal003 ,t6.mhbel003 ,t7.ooag011 ,t8.ooefl003 ,t9.mhaal003 ,t10.mhabl004 , 
             t11.mhacl005 ,t12.oocql004 ,t13.rtaxl003 ,t14.oocql004 ,t15.ooefl003 ,t16.staal003 ,t17.oocql004 , 
             t18.ooibl004 ,t19.oocql004 ,t20.ooail003 ,t21.oodbl004 FROM stke_t",   
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent='"||g_enterprise||"' AND t3.ooefl001=stkesite AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN sthal_t t4 ON t4.sthalent='"||g_enterprise||"' AND t4.sthal001=stke003 AND t4.sthal002='"||g_dlang||"' ",
               " LEFT JOIN pmaal_t t5 ON t5.pmaalent='"||g_enterprise||"' AND t5.pmaal001=stke007 AND t5.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN mhbel_t t6 ON t6.mhbelent='"||g_enterprise||"' AND t6.mhbel001=stke008 AND t6.mhbel002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t7 ON t7.ooagent='"||g_enterprise||"' AND t7.ooag001=stke017  ",
               " LEFT JOIN ooefl_t t8 ON t8.ooeflent='"||g_enterprise||"' AND t8.ooefl001=stke018 AND t8.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN mhaal_t t9 ON t9.mhaalent='"||g_enterprise||"' AND t9.mhaal001=stke019 AND t9.mhaal002='"||g_dlang||"' ",
               " LEFT JOIN mhabl_t t10 ON t10.mhablent='"||g_enterprise||"' AND t10.mhabl001=stke019 AND t10.mhabl002=stke020 AND t10.mhabl003='"||g_dlang||"' ",
               " LEFT JOIN mhacl_t t11 ON t11.mhaclent='"||g_enterprise||"' AND t11.mhacl001=stke019 AND t11.mhacl002=stke020 AND t11.mhacl003=stke021 AND t11.mhacl004='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t12 ON t12.oocqlent='"||g_enterprise||"' AND t12.oocql001='2144' AND t12.oocql002=stke022 AND t12.oocql003='"||g_dlang||"' ",
               " LEFT JOIN rtaxl_t t13 ON t13.rtaxlent='"||g_enterprise||"' AND t13.rtaxl001=stke028 AND t13.rtaxl002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t14 ON t14.oocqlent='"||g_enterprise||"' AND t14.oocql001='2002' AND t14.oocql002=stke029 AND t14.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooefl_t t15 ON t15.ooeflent='"||g_enterprise||"' AND t15.ooefl001=stke030 AND t15.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN staal_t t16 ON t16.staalent='"||g_enterprise||"' AND t16.staal001=stke031 AND t16.staal002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t17 ON t17.oocqlent='"||g_enterprise||"' AND t17.oocql001='2060' AND t17.oocql002=stke032 AND t17.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooibl_t t18 ON t18.ooiblent='"||g_enterprise||"' AND t18.ooibl002=stke034 AND t18.ooibl003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t19 ON t19.oocqlent='"||g_enterprise||"' AND t19.oocql001='238' AND t19.oocql002=stke035 AND t19.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooail_t t20 ON t20.ooailent='"||g_enterprise||"' AND t20.ooail001=stke036 AND t20.ooail002='"||g_dlang||"' ",
               " LEFT JOIN oodbl_t t21 ON t21.oodblent='"||g_enterprise||"' AND t21.oodbl002=stke038 AND t21.oodbl003='"||g_dlang||"' ",
 
                     " WHERE stkeent=? AND stkedocno=?"   
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body2.fill_sql"

         #end add-point
         IF NOT cl_null(g_wc2_table2) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
         END IF
         IF NOT cl_null(g_wc2_table3) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table3 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table4) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table4 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table5) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table5 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table6) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table6 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table7) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table7 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table8) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table8 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table9) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table9 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table10) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table10 CLIPPED
         END IF 
         IF NOT cl_null(g_wc2_table11) THEN 
            LET g_sql = g_sql CLIPPED," AND ", g_wc2_table11 CLIPPED
         END IF 
         LET g_sql = g_sql, " ORDER BY stke_t.stke001"
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb2 FROM g_sql
         DECLARE b_fill_cs2 CURSOR FOR astt806_pb2
      END IF
    
      LET l_ac = 1
      
   #  OPEN b_fill_cs2 USING g_enterprise,g_stem_m.stemdocno   #(ver:78)
                                               
      FOREACH b_fill_cs2 USING g_enterprise,g_stem_m.stemdocno INTO g_sten2_d[l_ac].stkeunit,g_sten2_d[l_ac].stkesite, 
          g_sten2_d[l_ac].stkedocdt,g_sten2_d[l_ac].stke001,g_sten2_d[l_ac].stke000,g_sten2_d[l_ac].stke002, 
          g_sten2_d[l_ac].stke003,g_sten2_d[l_ac].stke004,g_sten2_d[l_ac].stke005,g_sten2_d[l_ac].stke006, 
          g_sten2_d[l_ac].stke007,g_sten2_d[l_ac].stke008,g_sten2_d[l_ac].stke009,g_sten2_d[l_ac].stke010, 
          g_sten2_d[l_ac].stke011,g_sten2_d[l_ac].stke012,g_sten2_d[l_ac].stke013,g_sten2_d[l_ac].stke014, 
          g_sten2_d[l_ac].stke015,g_sten2_d[l_ac].stke016,g_sten2_d[l_ac].stke017,g_sten2_d[l_ac].stke018, 
          g_sten2_d[l_ac].stke019,g_sten2_d[l_ac].stke020,g_sten2_d[l_ac].stke021,g_sten2_d[l_ac].stke022, 
          g_sten2_d[l_ac].stke023,g_sten2_d[l_ac].stke024,g_sten2_d[l_ac].stke025,g_sten2_d[l_ac].stke026, 
          g_sten2_d[l_ac].stke028,g_sten2_d[l_ac].stke029,g_sten2_d[l_ac].stke030,g_sten2_d[l_ac].stke031, 
          g_sten2_d[l_ac].stke032,g_sten2_d[l_ac].stke033,g_sten2_d[l_ac].stke034,g_sten2_d[l_ac].stke035, 
          g_sten2_d[l_ac].stke036,g_sten2_d[l_ac].stke037,g_sten2_d[l_ac].stke038,g_sten2_d[l_ac].stke039, 
          g_sten2_d[l_ac].stke040,g_sten2_d[l_ac].stke041,g_sten2_d[l_ac].stke042,g_sten2_d[l_ac].stke043, 
          g_sten2_d[l_ac].stke044,g_sten2_d[l_ac].stke045,g_sten2_d[l_ac].stke046,g_sten2_d[l_ac].stke047, 
          g_sten2_d[l_ac].stke048,g_sten2_d[l_ac].stke049,g_sten2_d[l_ac].stke050,g_sten2_d[l_ac].stke051, 
          g_sten2_d[l_ac].stke052,g_sten2_d[l_ac].stke053,g_sten2_d[l_ac].stke200,g_sten2_d[l_ac].stke223, 
          g_sten2_d[l_ac].stke224,g_sten2_d[l_ac].stke225,g_sten2_d[l_ac].stkestus,g_sten2_d[l_ac].stkesite_desc, 
          g_sten2_d[l_ac].stke003_desc,g_sten2_d[l_ac].stke007_desc,g_sten2_d[l_ac].stke008_desc,g_sten2_d[l_ac].stke017_desc, 
          g_sten2_d[l_ac].stke018_desc,g_sten2_d[l_ac].stke019_desc,g_sten2_d[l_ac].stke020_desc,g_sten2_d[l_ac].stke021_desc, 
          g_sten2_d[l_ac].stke022_desc,g_sten2_d[l_ac].stke028_desc,g_sten2_d[l_ac].stke029_desc,g_sten2_d[l_ac].stke030_desc, 
          g_sten2_d[l_ac].stke031_desc,g_sten2_d[l_ac].stke032_desc,g_sten2_d[l_ac].stke034_desc,g_sten2_d[l_ac].stke035_desc, 
          g_sten2_d[l_ac].stke036_desc,g_sten2_d[l_ac].stke038_desc   #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill2.fill"
         
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
 
 
   
   #add-point:browser_fill段其他table處理 name="browser_fill.other_fill"
   
   #end add-point
   
   CALL g_sten_d.deleteElement(g_sten_d.getLength())
   CALL g_sten2_d.deleteElement(g_sten2_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE astt806_pb
   FREE astt806_pb2
 
 
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO g_sten_d.getLength()
      LET g_sten_d_mask_o[l_ac].* =  g_sten_d[l_ac].*
      CALL astt806_sten_t_mask()
      LET g_sten_d_mask_n[l_ac].* =  g_sten_d[l_ac].*
   END FOR
   
   LET g_sten15_d_mask_o.* =  g_sten15_d.*
   FOR l_ac = 1 TO g_sten15_d.getLength()
      LET g_sten15_d_mask_o[l_ac].* =  g_sten15_d[l_ac].*
      CALL astt806_stkn_t_mask()
      LET g_sten15_d_mask_n[l_ac].* =  g_sten15_d[l_ac].*
   END FOR
   LET g_sten16_d_mask_o.* =  g_sten16_d.*
   FOR l_ac = 1 TO g_sten16_d.getLength()
      LET g_sten16_d_mask_o[l_ac].* =  g_sten16_d[l_ac].*
      CALL astt806_stko_t_mask()
      LET g_sten16_d_mask_n[l_ac].* =  g_sten16_d[l_ac].*
   END FOR
   LET g_sten2_d_mask_o.* =  g_sten2_d.*
   FOR l_ac = 1 TO g_sten2_d.getLength()
      LET g_sten2_d_mask_o[l_ac].* =  g_sten2_d[l_ac].*
      CALL astt806_stke_t_mask()
      LET g_sten2_d_mask_n[l_ac].* =  g_sten2_d[l_ac].*
   END FOR
   LET g_sten3_d_mask_o.* =  g_sten3_d.*
   FOR l_ac = 1 TO g_sten3_d.getLength()
      LET g_sten3_d_mask_o[l_ac].* =  g_sten3_d[l_ac].*
      CALL astt806_stkf_t_mask()
      LET g_sten3_d_mask_n[l_ac].* =  g_sten3_d[l_ac].*
   END FOR
   LET g_sten4_d_mask_o.* =  g_sten4_d.*
   FOR l_ac = 1 TO g_sten4_d.getLength()
      LET g_sten4_d_mask_o[l_ac].* =  g_sten4_d[l_ac].*
      CALL astt806_stkh_t_mask()
      LET g_sten4_d_mask_n[l_ac].* =  g_sten4_d[l_ac].*
   END FOR
   LET g_sten5_d_mask_o.* =  g_sten5_d.*
   FOR l_ac = 1 TO g_sten5_d.getLength()
      LET g_sten5_d_mask_o[l_ac].* =  g_sten5_d[l_ac].*
      CALL astt806_stki_t_mask()
      LET g_sten5_d_mask_n[l_ac].* =  g_sten5_d[l_ac].*
   END FOR
   LET g_sten6_d_mask_o.* =  g_sten6_d.*
   FOR l_ac = 1 TO g_sten6_d.getLength()
      LET g_sten6_d_mask_o[l_ac].* =  g_sten6_d[l_ac].*
      CALL astt806_stkj_t_mask()
      LET g_sten6_d_mask_n[l_ac].* =  g_sten6_d[l_ac].*
   END FOR
   LET g_sten7_d_mask_o.* =  g_sten7_d.*
   FOR l_ac = 1 TO g_sten7_d.getLength()
      LET g_sten7_d_mask_o[l_ac].* =  g_sten7_d[l_ac].*
      CALL astt806_stkk_t_mask()
      LET g_sten7_d_mask_n[l_ac].* =  g_sten7_d[l_ac].*
   END FOR
   LET g_sten8_d_mask_o.* =  g_sten8_d.*
   FOR l_ac = 1 TO g_sten8_d.getLength()
      LET g_sten8_d_mask_o[l_ac].* =  g_sten8_d[l_ac].*
      CALL astt806_stkl_t_mask()
      LET g_sten8_d_mask_n[l_ac].* =  g_sten8_d[l_ac].*
   END FOR
   LET g_sten9_d_mask_o.* =  g_sten9_d.*
   FOR l_ac = 1 TO g_sten9_d.getLength()
      LET g_sten9_d_mask_o[l_ac].* =  g_sten9_d[l_ac].*
      CALL astt806_stkm_t_mask()
      LET g_sten9_d_mask_n[l_ac].* =  g_sten9_d[l_ac].*
   END FOR
 
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION astt806_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"
      
      #end add-point    
      DELETE FROM sten_t
       WHERE stenent = g_enterprise AND
         stendocno = ps_keys_bak[1] AND stenseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ":",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_sten_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
   LET ls_group = "'4',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete2"
      
      #end add-point    
      DELETE FROM stke_t
       WHERE stkeent = g_enterprise AND
             stkedocno = ps_keys_bak[1] AND stke001 = ps_keys_bak[2]
      #add-point:delete_b段刪除中 name="delete_b.m_delete2"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'4'" THEN 
         CALL g_sten2_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete2"
      
      #end add-point    
   END IF
 
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete3"
      
      #end add-point    
      DELETE FROM stkn_t
       WHERE stknent = g_enterprise AND
             stkndocno = ps_keys_bak[1] AND stkn001 = ps_keys_bak[2] AND stknseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete3"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'2'" THEN 
         CALL g_sten15_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete3"
      
      #end add-point    
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete4"
      
      #end add-point    
      DELETE FROM stko_t
       WHERE stkoent = g_enterprise AND
             stkodocno = ps_keys_bak[1] AND stko001 = ps_keys_bak[2] AND stkoseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete4"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'3'" THEN 
         CALL g_sten16_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete4"
      
      #end add-point    
   END IF
 
   LET ls_group = "'5',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete5"
      
      #end add-point    
      DELETE FROM stkf_t
       WHERE stkfent = g_enterprise AND
             stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2] AND stkfseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete5"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'5'" THEN 
         CALL g_sten3_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete5"
      
      #end add-point    
   END IF
 
   LET ls_group = "'6',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete6"
      
      #end add-point    
      DELETE FROM stkh_t
       WHERE stkhent = g_enterprise AND
             stkhdocno = ps_keys_bak[1] AND stkh001 = ps_keys_bak[2] AND stkhseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete6"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'6'" THEN 
         CALL g_sten4_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete6"
      
      #end add-point    
   END IF
 
   LET ls_group = "'7',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete7"
      
      #end add-point    
      DELETE FROM stki_t
       WHERE stkient = g_enterprise AND
             stkidocno = ps_keys_bak[1] AND stki001 = ps_keys_bak[2] AND stkiseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete7"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'7'" THEN 
         CALL g_sten5_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete7"
      
      #end add-point    
   END IF
 
   LET ls_group = "'8',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete8"
      
      #end add-point    
      DELETE FROM stkj_t
       WHERE stkjent = g_enterprise AND
             stkjdocno = ps_keys_bak[1] AND stkj001 = ps_keys_bak[2] AND stkjseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete8"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'8'" THEN 
         CALL g_sten6_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete8"
      
      #end add-point    
   END IF
 
   LET ls_group = "'9',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete9"
      
      #end add-point    
      DELETE FROM stkk_t
       WHERE stkkent = g_enterprise AND
             stkkdocno = ps_keys_bak[1] AND stkk001 = ps_keys_bak[2] AND stkkseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete9"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'9'" THEN 
         CALL g_sten7_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete9"
      
      #end add-point    
   END IF
 
   LET ls_group = "'10',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete10"
      
      #end add-point    
      DELETE FROM stkl_t
       WHERE stklent = g_enterprise AND
             stkldocno = ps_keys_bak[1] AND stkl001 = ps_keys_bak[2] AND stklseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete10"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'10'" THEN 
         CALL g_sten8_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete10"
      
      #end add-point    
   END IF
 
   LET ls_group = "'11',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete11"
      
      #end add-point    
      DELETE FROM stkm_t
       WHERE stkment = g_enterprise AND
             stkmdocno = ps_keys_bak[1] AND stkm001 = ps_keys_bak[2] AND stkmseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete11"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'11'" THEN 
         CALL g_sten9_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete11"
      
      #end add-point    
   END IF
 
 
   
   #add-point:delete_b段other name="delete_b.other"
   LET ls_group = "'A',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"

      #end add-point    
      DELETE FROM stkf_t
       WHERE stkfent = g_enterprise AND
             stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2] AND stkfseq = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete"

      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ":",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx2
      IF ps_page <> "'A'" THEN 
         CALL g_sten12_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
   LET ls_group = "'B',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete11"

      #end add-point    
      DELETE FROM stkg_t
       WHERE stkgent = g_enterprise AND
             stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2] AND stkgseq = ps_keys_bak[3] AND stkgseq1 = ps_keys_bak[4]
      #add-point:delete_b段刪除中 name="delete_b.m_delete11"

      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'B'" THEN 
         CALL g_sten11_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete11"

      #end add-point    
   END IF
   LET ls_group = "'C',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete11"

      #end add-point    
      DELETE FROM stkg_t
       WHERE stkgent = g_enterprise AND
             stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2] AND stkgseq = ps_keys_bak[3] AND stkgseq1 = ps_keys_bak[4]
      #add-point:delete_b段刪除中 name="delete_b.m_delete11"

      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'C'" THEN 
         CALL g_sten11_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete11"

      #end add-point    
   END IF
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION astt806_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="insert_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"
      
      #end add-point 
      INSERT INTO sten_t
                  (stenent,
                   stendocno,
                   stenseq
                   ,sten002,sten001,sten003,sten004,sten006,sten007,sten012,sten005,sten008,sten009,sten010,sten011,stenacti,stensite,stenunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_sten_d[g_detail_idx].sten002,g_sten_d[g_detail_idx].sten001,g_sten_d[g_detail_idx].sten003, 
                       g_sten_d[g_detail_idx].sten004,g_sten_d[g_detail_idx].sten006,g_sten_d[g_detail_idx].sten007, 
                       g_sten_d[g_detail_idx].sten012,g_sten_d[g_detail_idx].sten005,g_sten_d[g_detail_idx].sten008, 
                       g_sten_d[g_detail_idx].sten009,g_sten_d[g_detail_idx].sten010,g_sten_d[g_detail_idx].sten011, 
                       g_sten_d[g_detail_idx].stenacti,g_sten_d[g_detail_idx].stensite,g_sten_d[g_detail_idx].stenunit) 
 
      #add-point:insert_b段資料新增中 name="insert_b.m_insert"
      
      #end add-point 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_sten_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"
      
      #end add-point 
   END IF
   
   LET ls_group = "'4',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert2"
      
      #end add-point 
      INSERT INTO stke_t
                  (stkeent,
                   stkedocno,
                   stke001
                   ,stkeunit,stkesite,stkedocdt,stke000,stke002,stke003,stke004,stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015,stke016,stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029,stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040,stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050,stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_sten2_d[g_detail_idx].stkeunit,g_sten2_d[g_detail_idx].stkesite,g_sten2_d[g_detail_idx].stkedocdt, 
                       g_sten2_d[g_detail_idx].stke000,g_sten2_d[g_detail_idx].stke002,g_sten2_d[g_detail_idx].stke003, 
                       g_sten2_d[g_detail_idx].stke004,g_sten2_d[g_detail_idx].stke005,g_sten2_d[g_detail_idx].stke006, 
                       g_sten2_d[g_detail_idx].stke007,g_sten2_d[g_detail_idx].stke008,g_sten2_d[g_detail_idx].stke009, 
                       g_sten2_d[g_detail_idx].stke010,g_sten2_d[g_detail_idx].stke011,g_sten2_d[g_detail_idx].stke012, 
                       g_sten2_d[g_detail_idx].stke013,g_sten2_d[g_detail_idx].stke014,g_sten2_d[g_detail_idx].stke015, 
                       g_sten2_d[g_detail_idx].stke016,g_sten2_d[g_detail_idx].stke017,g_sten2_d[g_detail_idx].stke018, 
                       g_sten2_d[g_detail_idx].stke019,g_sten2_d[g_detail_idx].stke020,g_sten2_d[g_detail_idx].stke021, 
                       g_sten2_d[g_detail_idx].stke022,g_sten2_d[g_detail_idx].stke023,g_sten2_d[g_detail_idx].stke024, 
                       g_sten2_d[g_detail_idx].stke025,g_sten2_d[g_detail_idx].stke026,g_sten2_d[g_detail_idx].stke028, 
                       g_sten2_d[g_detail_idx].stke029,g_sten2_d[g_detail_idx].stke030,g_sten2_d[g_detail_idx].stke031, 
                       g_sten2_d[g_detail_idx].stke032,g_sten2_d[g_detail_idx].stke033,g_sten2_d[g_detail_idx].stke034, 
                       g_sten2_d[g_detail_idx].stke035,g_sten2_d[g_detail_idx].stke036,g_sten2_d[g_detail_idx].stke037, 
                       g_sten2_d[g_detail_idx].stke038,g_sten2_d[g_detail_idx].stke039,g_sten2_d[g_detail_idx].stke040, 
                       g_sten2_d[g_detail_idx].stke041,g_sten2_d[g_detail_idx].stke042,g_sten2_d[g_detail_idx].stke043, 
                       g_sten2_d[g_detail_idx].stke044,g_sten2_d[g_detail_idx].stke045,g_sten2_d[g_detail_idx].stke046, 
                       g_sten2_d[g_detail_idx].stke047,g_sten2_d[g_detail_idx].stke048,g_sten2_d[g_detail_idx].stke049, 
                       g_sten2_d[g_detail_idx].stke050,g_sten2_d[g_detail_idx].stke051,g_sten2_d[g_detail_idx].stke052, 
                       g_sten2_d[g_detail_idx].stke053,g_sten2_d[g_detail_idx].stke200,g_sten2_d[g_detail_idx].stke223, 
                       g_sten2_d[g_detail_idx].stke224,g_sten2_d[g_detail_idx].stke225,g_sten2_d[g_detail_idx].stkestus) 
 
      #add-point:insert_b段資料新增中 name="insert_b.m_insert2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'4'" THEN 
         CALL g_sten2_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert2"
      
      #end add-point
   END IF
 
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert3"
      
      #end add-point 
      INSERT INTO stkn_t
                  (stknent,
                   stkndocno,stkn001,
                   stknseq
                   ,stknsite,stknunit,stkn002,stkn003,stkn004,stkn005,stkn006,stkn007,stkn008,stkn009,stkn010) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten15_d[g_detail_idx2].stknsite,g_sten15_d[g_detail_idx2].stknunit,g_sten15_d[g_detail_idx2].stkn002, 
                       g_sten15_d[g_detail_idx2].stkn003,g_sten15_d[g_detail_idx2].stkn004,g_sten15_d[g_detail_idx2].stkn005, 
                       g_sten15_d[g_detail_idx2].stkn006,g_sten15_d[g_detail_idx2].stkn007,g_sten15_d[g_detail_idx2].stkn008, 
                       g_sten15_d[g_detail_idx2].stkn009,g_sten15_d[g_detail_idx2].stkn010)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert3"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'2'" THEN 
         CALL g_sten15_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert3"
      
      #end add-point
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert4"
      
      #end add-point 
      INSERT INTO stko_t
                  (stkoent,
                   stkodocno,stko001,
                   stkoseq
                   ,stkosite,stkounit,stko002,stko003,stko004,stko005,stko006,stko007) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten16_d[g_detail_idx2].stkosite,g_sten16_d[g_detail_idx2].stkounit,g_sten16_d[g_detail_idx2].stko002, 
                       g_sten16_d[g_detail_idx2].stko003,g_sten16_d[g_detail_idx2].stko004,g_sten16_d[g_detail_idx2].stko005, 
                       g_sten16_d[g_detail_idx2].stko006,g_sten16_d[g_detail_idx2].stko007)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert4"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'3'" THEN 
         CALL g_sten16_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert4"
      
      #end add-point
   END IF
 
   LET ls_group = "'5',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert5"
      
      #end add-point 
      INSERT INTO stkf_t
                  (stkfent,
                   stkfdocno,stkf001,
                   stkfseq
                   ,stkf002,stkf003,stkf021,stkf004,stkf022,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020,stkf023,stkf024,stkf025,stkfsite,stkfunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten3_d[g_detail_idx2].stkf002,g_sten3_d[g_detail_idx2].stkf003,g_sten3_d[g_detail_idx2].stkf021, 
                       g_sten3_d[g_detail_idx2].stkf004,g_sten3_d[g_detail_idx2].stkf022,g_sten3_d[g_detail_idx2].stkf005, 
                       g_sten3_d[g_detail_idx2].stkf006,g_sten3_d[g_detail_idx2].stkf007,g_sten3_d[g_detail_idx2].stkf008, 
                       g_sten3_d[g_detail_idx2].stkf009,g_sten3_d[g_detail_idx2].stkf010,g_sten3_d[g_detail_idx2].stkf011, 
                       g_sten3_d[g_detail_idx2].stkf018,g_sten3_d[g_detail_idx2].stkf016,g_sten3_d[g_detail_idx2].stkf017, 
                       g_sten3_d[g_detail_idx2].stkf020,g_sten3_d[g_detail_idx2].stkf023,g_sten3_d[g_detail_idx2].stkf024, 
                       g_sten3_d[g_detail_idx2].stkf025,g_sten3_d[g_detail_idx2].stkfsite,g_sten3_d[g_detail_idx2].stkfunit) 
 
      #add-point:insert_b段資料新增中 name="insert_b.m_insert5"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'5'" THEN 
         CALL g_sten3_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert5"
      
      #end add-point
   END IF
 
   LET ls_group = "'6',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert6"
      
      #end add-point 
      INSERT INTO stkh_t
                  (stkhent,
                   stkhdocno,stkh001,
                   stkhseq
                   ,stkh002,stkh003,stkh008,stkh004,stkh005,stkh006,stkh007,stkhsite,stkhunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten4_d[g_detail_idx2].stkh002,g_sten4_d[g_detail_idx2].stkh003,g_sten4_d[g_detail_idx2].stkh008, 
                       g_sten4_d[g_detail_idx2].stkh004,g_sten4_d[g_detail_idx2].stkh005,g_sten4_d[g_detail_idx2].stkh006, 
                       g_sten4_d[g_detail_idx2].stkh007,g_sten4_d[g_detail_idx2].stkhsite,g_sten4_d[g_detail_idx2].stkhunit) 
 
      #add-point:insert_b段資料新增中 name="insert_b.m_insert6"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'6'" THEN 
         CALL g_sten4_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert6"
      
      #end add-point
   END IF
 
   LET ls_group = "'7',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert7"
      
      #end add-point 
      INSERT INTO stki_t
                  (stkient,
                   stkidocno,stki001,
                   stkiseq
                   ,stki002,stki003,stki010,stki004,stki005,stki006,stki007,stki008,stki009,stkisite,stkiunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten5_d[g_detail_idx2].stki002,g_sten5_d[g_detail_idx2].stki003,g_sten5_d[g_detail_idx2].stki010, 
                       g_sten5_d[g_detail_idx2].stki004,g_sten5_d[g_detail_idx2].stki005,g_sten5_d[g_detail_idx2].stki006, 
                       g_sten5_d[g_detail_idx2].stki007,g_sten5_d[g_detail_idx2].stki008,g_sten5_d[g_detail_idx2].stki009, 
                       g_sten5_d[g_detail_idx2].stkisite,g_sten5_d[g_detail_idx2].stkiunit)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert7"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'7'" THEN 
         CALL g_sten5_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert7"
      
      #end add-point
   END IF
 
   LET ls_group = "'8',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert8"
      
      #end add-point 
      INSERT INTO stkj_t
                  (stkjent,
                   stkjdocno,stkj001,
                   stkjseq
                   ,stkjacti,stkj002,stkj003,stkj004,stkj005,stkj006,stkj007,stkj008,stkj009,stkjsite,stkjunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten6_d[g_detail_idx2].stkjacti,g_sten6_d[g_detail_idx2].stkj002,g_sten6_d[g_detail_idx2].stkj003, 
                       g_sten6_d[g_detail_idx2].stkj004,g_sten6_d[g_detail_idx2].stkj005,g_sten6_d[g_detail_idx2].stkj006, 
                       g_sten6_d[g_detail_idx2].stkj007,g_sten6_d[g_detail_idx2].stkj008,g_sten6_d[g_detail_idx2].stkj009, 
                       g_sten6_d[g_detail_idx2].stkjsite,g_sten6_d[g_detail_idx2].stkjunit)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert8"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'8'" THEN 
         CALL g_sten6_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert8"
      
      #end add-point
   END IF
 
   LET ls_group = "'9',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert9"
      
      #end add-point 
      INSERT INTO stkk_t
                  (stkkent,
                   stkkdocno,stkk001,
                   stkkseq
                   ,stkkacti,stkk002,stkk004,stkk003,stkk005,stkksite,stkkunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten7_d[g_detail_idx2].stkkacti,g_sten7_d[g_detail_idx2].stkk002,g_sten7_d[g_detail_idx2].stkk004, 
                       g_sten7_d[g_detail_idx2].stkk003,g_sten7_d[g_detail_idx2].stkk005,g_sten7_d[g_detail_idx2].stkksite, 
                       g_sten7_d[g_detail_idx2].stkkunit)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert9"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'9'" THEN 
         CALL g_sten7_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert9"
      
      #end add-point
   END IF
 
   LET ls_group = "'10',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert10"
      
      #end add-point 
      INSERT INTO stkl_t
                  (stklent,
                   stkldocno,stkl001,
                   stklseq
                   ,stkl002,stkl003,stkl004,stkl005,stkl006,stkl007,stkl008,stklsite,stklunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten8_d[g_detail_idx2].stkl002,g_sten8_d[g_detail_idx2].stkl003,g_sten8_d[g_detail_idx2].stkl004, 
                       g_sten8_d[g_detail_idx2].stkl005,g_sten8_d[g_detail_idx2].stkl006,g_sten8_d[g_detail_idx2].stkl007, 
                       g_sten8_d[g_detail_idx2].stkl008,g_sten8_d[g_detail_idx2].stklsite,g_sten8_d[g_detail_idx2].stklunit) 
 
      #add-point:insert_b段資料新增中 name="insert_b.m_insert10"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'10'" THEN 
         CALL g_sten8_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert10"
      
      #end add-point
   END IF
 
   LET ls_group = "'11',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert11"
      
      #end add-point 
      INSERT INTO stkm_t
                  (stkment,
                   stkmdocno,stkm001,
                   stkmseq
                   ,stkm002,stkm003,stkm004,stkm005,stkm006,stkm007,stkm008,stkm009,stkm010,stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017,stkm018,stkm019,stkmsite,stkmunit) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sten9_d[g_detail_idx2].stkm002,g_sten9_d[g_detail_idx2].stkm003,g_sten9_d[g_detail_idx2].stkm004, 
                       g_sten9_d[g_detail_idx2].stkm005,g_sten9_d[g_detail_idx2].stkm006,g_sten9_d[g_detail_idx2].stkm007, 
                       g_sten9_d[g_detail_idx2].stkm008,g_sten9_d[g_detail_idx2].stkm009,g_sten9_d[g_detail_idx2].stkm010, 
                       g_sten9_d[g_detail_idx2].stkm011,g_sten9_d[g_detail_idx2].stkm012,g_sten9_d[g_detail_idx2].stkm013, 
                       g_sten9_d[g_detail_idx2].stkm014,g_sten9_d[g_detail_idx2].stkm015,g_sten9_d[g_detail_idx2].stkm016, 
                       g_sten9_d[g_detail_idx2].stkm017,g_sten9_d[g_detail_idx2].stkm018,g_sten9_d[g_detail_idx2].stkm019, 
                       g_sten9_d[g_detail_idx2].stkmsite,g_sten9_d[g_detail_idx2].stkmunit)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert11"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'11'" THEN 
         CALL g_sten9_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert11"
      
      #end add-point
   END IF
 
 
   
   #add-point:insert_b段other name="insert_b.other"
   LET ls_group = "'A',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"

      #end add-point 
      INSERT INTO stkf_t
                  (stkfent,
                   stkfdocno,stkf001,stkfsite,stkfunit,
                   stkfseq,stkf002,stkf003,stkf004,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf021,stkf023,stkf024,stkf025) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[3],
                   ps_keys[4],g_sten12_d[g_detail_idx2].stkf002_2,g_sten12_d[g_detail_idx2].stkf003_2, 
                    g_sten12_d[g_detail_idx2].stkf004_2,g_sten12_d[g_detail_idx2].stkf005_2,g_sten12_d[g_detail_idx2].stkf006_2, 
                    g_sten12_d[g_detail_idx2].stkf007_2,g_sten12_d[g_detail_idx2].stkf008_2,g_sten12_d[g_detail_idx2].stkf009_2, 
                    g_sten12_d[g_detail_idx2].stkf010_2,g_sten12_d[g_detail_idx2].stkf012_2,g_sten12_d[g_detail_idx2].stkf019_2,g_sten12_d[g_detail_idx2].stkf013_2,
                    g_sten12_d[g_detail_idx2].stkf014_2,g_sten12_d[g_detail_idx2].stkf015_2,g_sten12_d[g_detail_idx2].stkf016_2,g_sten12_d[g_detail_idx2].stkf020_2,
                    g_sten12_d[g_detail_idx2].stkf021_2,g_sten12_d[g_detail_idx2].stkf023_2,g_sten12_d[g_detail_idx2].stkf024_2,g_sten12_d[g_detail_idx2].stkf025_2) 

      #add-point:insert_b段資料新增中 name="insert_b.m_insert"

      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'A'" THEN 
         CALL g_sten12_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"

      #end add-point 
   END IF
   LET ls_group = "'B',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert10"

      #end add-point 
      INSERT INTO stkg_t
                  (stkgent,
                   stkgdocno,stkg001,stkgsite,stkgunit,stkgseq,stkgseq1,
                   stkg002,stkg003,stkg004,stkg006) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[3],ps_keys[4],ps_keys[5],
                   g_sten11_d[g_detail_idx3].stkg002,g_sten11_d[g_detail_idx3].stkg003,
                   g_sten11_d[g_detail_idx3].stkg004,g_sten11_d[g_detail_idx3].stkg006)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert10"

      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'B'" THEN 
         CALL g_sten11_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert10"

      #end add-point
   END IF
   
   LET ls_group = "'C',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert10"

      #end add-point 
      INSERT INTO stkg_t
                  (stkgent,
                   stkgdocno,stkg001,stkgsite,stkgunit,stkgseq,stkgseq1,
                   stkg002,stkg003,stkg005,stkg007) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[3],ps_keys[4],ps_keys[5],
                   g_sten13_d[g_detail_idx3].stkg002_1,g_sten13_d[g_detail_idx3].stkg003_1,
                   g_sten13_d[g_detail_idx3].stkg005_1,g_sten13_d[g_detail_idx3].stkg007_1)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert10"

      #end add-point
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'C'" THEN 
         CALL g_sten13_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert10"

      #end add-point
   END IF
   #end add-point     
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION astt806_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   
   #end add-point   
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="update_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "sten_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update"
      
      #end add-point 
      
      #將遮罩欄位還原
      CALL astt806_sten_t_mask_restore('restore_mask_o')
               
      UPDATE sten_t 
         SET (stendocno,
              stenseq
              ,sten002,sten001,sten003,sten004,sten006,sten007,sten012,sten005,sten008,sten009,sten010,sten011,stenacti,stensite,stenunit) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_sten_d[g_detail_idx].sten002,g_sten_d[g_detail_idx].sten001,g_sten_d[g_detail_idx].sten003, 
                  g_sten_d[g_detail_idx].sten004,g_sten_d[g_detail_idx].sten006,g_sten_d[g_detail_idx].sten007, 
                  g_sten_d[g_detail_idx].sten012,g_sten_d[g_detail_idx].sten005,g_sten_d[g_detail_idx].sten008, 
                  g_sten_d[g_detail_idx].sten009,g_sten_d[g_detail_idx].sten010,g_sten_d[g_detail_idx].sten011, 
                  g_sten_d[g_detail_idx].stenacti,g_sten_d[g_detail_idx].stensite,g_sten_d[g_detail_idx].stenunit)  
 
         WHERE stenent = g_enterprise AND stendocno = ps_keys_bak[1] AND stenseq = ps_keys_bak[2]
      #add-point:update_b段修改中 name="update_b.m_update"
      
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "sten_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "sten_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_sten_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      
      #end add-point  
   END IF
   
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   
   LET ls_group = "'4',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stke_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update2"
      
      #end add-point  
      
      #將遮罩欄位還原
      CALL astt806_stke_t_mask_restore('restore_mask_o')
               
      UPDATE stke_t 
         SET (stkedocno,
              stke001
              ,stkeunit,stkesite,stkedocdt,stke000,stke002,stke003,stke004,stke005,stke006,stke007,stke008,stke009,stke010,stke011,stke012,stke013,stke014,stke015,stke016,stke017,stke018,stke019,stke020,stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029,stke030,stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040,stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050,stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_sten2_d[g_detail_idx].stkeunit,g_sten2_d[g_detail_idx].stkesite,g_sten2_d[g_detail_idx].stkedocdt, 
                  g_sten2_d[g_detail_idx].stke000,g_sten2_d[g_detail_idx].stke002,g_sten2_d[g_detail_idx].stke003, 
                  g_sten2_d[g_detail_idx].stke004,g_sten2_d[g_detail_idx].stke005,g_sten2_d[g_detail_idx].stke006, 
                  g_sten2_d[g_detail_idx].stke007,g_sten2_d[g_detail_idx].stke008,g_sten2_d[g_detail_idx].stke009, 
                  g_sten2_d[g_detail_idx].stke010,g_sten2_d[g_detail_idx].stke011,g_sten2_d[g_detail_idx].stke012, 
                  g_sten2_d[g_detail_idx].stke013,g_sten2_d[g_detail_idx].stke014,g_sten2_d[g_detail_idx].stke015, 
                  g_sten2_d[g_detail_idx].stke016,g_sten2_d[g_detail_idx].stke017,g_sten2_d[g_detail_idx].stke018, 
                  g_sten2_d[g_detail_idx].stke019,g_sten2_d[g_detail_idx].stke020,g_sten2_d[g_detail_idx].stke021, 
                  g_sten2_d[g_detail_idx].stke022,g_sten2_d[g_detail_idx].stke023,g_sten2_d[g_detail_idx].stke024, 
                  g_sten2_d[g_detail_idx].stke025,g_sten2_d[g_detail_idx].stke026,g_sten2_d[g_detail_idx].stke028, 
                  g_sten2_d[g_detail_idx].stke029,g_sten2_d[g_detail_idx].stke030,g_sten2_d[g_detail_idx].stke031, 
                  g_sten2_d[g_detail_idx].stke032,g_sten2_d[g_detail_idx].stke033,g_sten2_d[g_detail_idx].stke034, 
                  g_sten2_d[g_detail_idx].stke035,g_sten2_d[g_detail_idx].stke036,g_sten2_d[g_detail_idx].stke037, 
                  g_sten2_d[g_detail_idx].stke038,g_sten2_d[g_detail_idx].stke039,g_sten2_d[g_detail_idx].stke040, 
                  g_sten2_d[g_detail_idx].stke041,g_sten2_d[g_detail_idx].stke042,g_sten2_d[g_detail_idx].stke043, 
                  g_sten2_d[g_detail_idx].stke044,g_sten2_d[g_detail_idx].stke045,g_sten2_d[g_detail_idx].stke046, 
                  g_sten2_d[g_detail_idx].stke047,g_sten2_d[g_detail_idx].stke048,g_sten2_d[g_detail_idx].stke049, 
                  g_sten2_d[g_detail_idx].stke050,g_sten2_d[g_detail_idx].stke051,g_sten2_d[g_detail_idx].stke052, 
                  g_sten2_d[g_detail_idx].stke053,g_sten2_d[g_detail_idx].stke200,g_sten2_d[g_detail_idx].stke223, 
                  g_sten2_d[g_detail_idx].stke224,g_sten2_d[g_detail_idx].stke225,g_sten2_d[g_detail_idx].stkestus)  
 
         WHERE stkeent = g_enterprise AND stkedocno = ps_keys_bak[1] AND stke001 = ps_keys_bak[2]
      #add-point:update_b段修改中 name="update_b.m_update2"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stke_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stke_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
          
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stke_t_mask_restore('restore_mask_n')
 
      #add-point:update_b段修改後 name="update_b.after_update2"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkn_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update3"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkn_t_mask_restore('restore_mask_o')
               
      UPDATE stkn_t 
         SET (stkndocno,stkn001,
              stknseq
              ,stknsite,stknunit,stkn002,stkn003,stkn004,stkn005,stkn006,stkn007,stkn008,stkn009,stkn010) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten15_d[g_detail_idx2].stknsite,g_sten15_d[g_detail_idx2].stknunit,g_sten15_d[g_detail_idx2].stkn002, 
                  g_sten15_d[g_detail_idx2].stkn003,g_sten15_d[g_detail_idx2].stkn004,g_sten15_d[g_detail_idx2].stkn005, 
                  g_sten15_d[g_detail_idx2].stkn006,g_sten15_d[g_detail_idx2].stkn007,g_sten15_d[g_detail_idx2].stkn008, 
                  g_sten15_d[g_detail_idx2].stkn009,g_sten15_d[g_detail_idx2].stkn010) 
         WHERE stknent = g_enterprise AND stkndocno = ps_keys_bak[1] AND stkn001 = ps_keys_bak[2] AND stknseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update3"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkn_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkn_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update3"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stko_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update4"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stko_t_mask_restore('restore_mask_o')
               
      UPDATE stko_t 
         SET (stkodocno,stko001,
              stkoseq
              ,stkosite,stkounit,stko002,stko003,stko004,stko005,stko006,stko007) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten16_d[g_detail_idx2].stkosite,g_sten16_d[g_detail_idx2].stkounit,g_sten16_d[g_detail_idx2].stko002, 
                  g_sten16_d[g_detail_idx2].stko003,g_sten16_d[g_detail_idx2].stko004,g_sten16_d[g_detail_idx2].stko005, 
                  g_sten16_d[g_detail_idx2].stko006,g_sten16_d[g_detail_idx2].stko007) 
         WHERE stkoent = g_enterprise AND stkodocno = ps_keys_bak[1] AND stko001 = ps_keys_bak[2] AND stkoseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update4"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stko_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stko_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update4"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'5',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkf_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update5"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkf_t_mask_restore('restore_mask_o')
               
      UPDATE stkf_t 
         SET (stkfdocno,stkf001,
              stkfseq
              ,stkf002,stkf003,stkf021,stkf004,stkf022,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020,stkf023,stkf024,stkf025,stkfsite,stkfunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten3_d[g_detail_idx2].stkf002,g_sten3_d[g_detail_idx2].stkf003,g_sten3_d[g_detail_idx2].stkf021, 
                  g_sten3_d[g_detail_idx2].stkf004,g_sten3_d[g_detail_idx2].stkf022,g_sten3_d[g_detail_idx2].stkf005, 
                  g_sten3_d[g_detail_idx2].stkf006,g_sten3_d[g_detail_idx2].stkf007,g_sten3_d[g_detail_idx2].stkf008, 
                  g_sten3_d[g_detail_idx2].stkf009,g_sten3_d[g_detail_idx2].stkf010,g_sten3_d[g_detail_idx2].stkf011, 
                  g_sten3_d[g_detail_idx2].stkf018,g_sten3_d[g_detail_idx2].stkf016,g_sten3_d[g_detail_idx2].stkf017, 
                  g_sten3_d[g_detail_idx2].stkf020,g_sten3_d[g_detail_idx2].stkf023,g_sten3_d[g_detail_idx2].stkf024, 
                  g_sten3_d[g_detail_idx2].stkf025,g_sten3_d[g_detail_idx2].stkfsite,g_sten3_d[g_detail_idx2].stkfunit)  
 
         WHERE stkfent = g_enterprise AND stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2] AND stkfseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update5"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkf_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update5"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'6',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkh_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update6"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkh_t_mask_restore('restore_mask_o')
               
      UPDATE stkh_t 
         SET (stkhdocno,stkh001,
              stkhseq
              ,stkh002,stkh003,stkh008,stkh004,stkh005,stkh006,stkh007,stkhsite,stkhunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten4_d[g_detail_idx2].stkh002,g_sten4_d[g_detail_idx2].stkh003,g_sten4_d[g_detail_idx2].stkh008, 
                  g_sten4_d[g_detail_idx2].stkh004,g_sten4_d[g_detail_idx2].stkh005,g_sten4_d[g_detail_idx2].stkh006, 
                  g_sten4_d[g_detail_idx2].stkh007,g_sten4_d[g_detail_idx2].stkhsite,g_sten4_d[g_detail_idx2].stkhunit)  
 
         WHERE stkhent = g_enterprise AND stkhdocno = ps_keys_bak[1] AND stkh001 = ps_keys_bak[2] AND stkhseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update6"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkh_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkh_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update6"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'7',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stki_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update7"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stki_t_mask_restore('restore_mask_o')
               
      UPDATE stki_t 
         SET (stkidocno,stki001,
              stkiseq
              ,stki002,stki003,stki010,stki004,stki005,stki006,stki007,stki008,stki009,stkisite,stkiunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten5_d[g_detail_idx2].stki002,g_sten5_d[g_detail_idx2].stki003,g_sten5_d[g_detail_idx2].stki010, 
                  g_sten5_d[g_detail_idx2].stki004,g_sten5_d[g_detail_idx2].stki005,g_sten5_d[g_detail_idx2].stki006, 
                  g_sten5_d[g_detail_idx2].stki007,g_sten5_d[g_detail_idx2].stki008,g_sten5_d[g_detail_idx2].stki009, 
                  g_sten5_d[g_detail_idx2].stkisite,g_sten5_d[g_detail_idx2].stkiunit) 
         WHERE stkient = g_enterprise AND stkidocno = ps_keys_bak[1] AND stki001 = ps_keys_bak[2] AND stkiseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update7"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stki_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stki_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update7"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'8',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkj_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update8"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkj_t_mask_restore('restore_mask_o')
               
      UPDATE stkj_t 
         SET (stkjdocno,stkj001,
              stkjseq
              ,stkjacti,stkj002,stkj003,stkj004,stkj005,stkj006,stkj007,stkj008,stkj009,stkjsite,stkjunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten6_d[g_detail_idx2].stkjacti,g_sten6_d[g_detail_idx2].stkj002,g_sten6_d[g_detail_idx2].stkj003, 
                  g_sten6_d[g_detail_idx2].stkj004,g_sten6_d[g_detail_idx2].stkj005,g_sten6_d[g_detail_idx2].stkj006, 
                  g_sten6_d[g_detail_idx2].stkj007,g_sten6_d[g_detail_idx2].stkj008,g_sten6_d[g_detail_idx2].stkj009, 
                  g_sten6_d[g_detail_idx2].stkjsite,g_sten6_d[g_detail_idx2].stkjunit) 
         WHERE stkjent = g_enterprise AND stkjdocno = ps_keys_bak[1] AND stkj001 = ps_keys_bak[2] AND stkjseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update8"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkj_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkj_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update8"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'9',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkk_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update9"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkk_t_mask_restore('restore_mask_o')
               
      UPDATE stkk_t 
         SET (stkkdocno,stkk001,
              stkkseq
              ,stkkacti,stkk002,stkk004,stkk003,stkk005,stkksite,stkkunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten7_d[g_detail_idx2].stkkacti,g_sten7_d[g_detail_idx2].stkk002,g_sten7_d[g_detail_idx2].stkk004, 
                  g_sten7_d[g_detail_idx2].stkk003,g_sten7_d[g_detail_idx2].stkk005,g_sten7_d[g_detail_idx2].stkksite, 
                  g_sten7_d[g_detail_idx2].stkkunit) 
         WHERE stkkent = g_enterprise AND stkkdocno = ps_keys_bak[1] AND stkk001 = ps_keys_bak[2] AND stkkseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update9"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkk_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkk_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update9"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'10',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkl_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update10"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkl_t_mask_restore('restore_mask_o')
               
      UPDATE stkl_t 
         SET (stkldocno,stkl001,
              stklseq
              ,stkl002,stkl003,stkl004,stkl005,stkl006,stkl007,stkl008,stklsite,stklunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten8_d[g_detail_idx2].stkl002,g_sten8_d[g_detail_idx2].stkl003,g_sten8_d[g_detail_idx2].stkl004, 
                  g_sten8_d[g_detail_idx2].stkl005,g_sten8_d[g_detail_idx2].stkl006,g_sten8_d[g_detail_idx2].stkl007, 
                  g_sten8_d[g_detail_idx2].stkl008,g_sten8_d[g_detail_idx2].stklsite,g_sten8_d[g_detail_idx2].stklunit)  
 
         WHERE stklent = g_enterprise AND stkldocno = ps_keys_bak[1] AND stkl001 = ps_keys_bak[2] AND stklseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update10"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkl_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkl_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update10"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'11',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkm_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update11"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkm_t_mask_restore('restore_mask_o')
               
      UPDATE stkm_t 
         SET (stkmdocno,stkm001,
              stkmseq
              ,stkm002,stkm003,stkm004,stkm005,stkm006,stkm007,stkm008,stkm009,stkm010,stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017,stkm018,stkm019,stkmsite,stkmunit) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten9_d[g_detail_idx2].stkm002,g_sten9_d[g_detail_idx2].stkm003,g_sten9_d[g_detail_idx2].stkm004, 
                  g_sten9_d[g_detail_idx2].stkm005,g_sten9_d[g_detail_idx2].stkm006,g_sten9_d[g_detail_idx2].stkm007, 
                  g_sten9_d[g_detail_idx2].stkm008,g_sten9_d[g_detail_idx2].stkm009,g_sten9_d[g_detail_idx2].stkm010, 
                  g_sten9_d[g_detail_idx2].stkm011,g_sten9_d[g_detail_idx2].stkm012,g_sten9_d[g_detail_idx2].stkm013, 
                  g_sten9_d[g_detail_idx2].stkm014,g_sten9_d[g_detail_idx2].stkm015,g_sten9_d[g_detail_idx2].stkm016, 
                  g_sten9_d[g_detail_idx2].stkm017,g_sten9_d[g_detail_idx2].stkm018,g_sten9_d[g_detail_idx2].stkm019, 
                  g_sten9_d[g_detail_idx2].stkmsite,g_sten9_d[g_detail_idx2].stkmunit) 
         WHERE stkment = g_enterprise AND stkmdocno = ps_keys_bak[1] AND stkm001 = ps_keys_bak[2] AND stkmseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update11"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkm_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkm_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update11"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
 
   
   #add-point:update_b段other name="update_b.other"
   LET ls_group = "'A',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkf_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update5"

      #end add-point
      
      #將遮罩欄位還原
      CALL astt806_stkf_t_mask_restore('restore_mask_o')
               
      UPDATE stkf_t 
         SET (stkfdocno,stkf001,
              stkfseq
              ,stkf002,stkf003,stkf021,stkf004,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf023,stkf024,stkf025) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sten12_d[g_detail_idx2].stkf002_2,g_sten12_d[g_detail_idx2].stkf003_2,g_sten12_d[g_detail_idx2].stkf021_2, 
               g_sten12_d[g_detail_idx2].stkf004_2,g_sten12_d[g_detail_idx2].stkf005_2,g_sten12_d[g_detail_idx2].stkf006_2,
               g_sten12_d[g_detail_idx2].stkf007_2,g_sten12_d[g_detail_idx2].stkf008_2,g_sten12_d[g_detail_idx2].stkf009_2,
               g_sten12_d[g_detail_idx2].stkf010_2,g_sten12_d[g_detail_idx2].stkf012_2,g_sten12_d[g_detail_idx2].stkf019_2,
               g_sten12_d[g_detail_idx2].stkf013_2,g_sten12_d[g_detail_idx2].stkf014_2,g_sten12_d[g_detail_idx2].stkf015_2,
               g_sten12_d[g_detail_idx2].stkf016_2,g_sten12_d[g_detail_idx2].stkf020_2,g_sten12_d[g_detail_idx2].stkf023_2,
               g_sten12_d[g_detail_idx2].stkf024_2,g_sten12_d[g_detail_idx2].stkf025_2) 
         WHERE stkfent = g_enterprise AND stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2] AND stkfseq = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update5"

      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.sqlcode #其他錯誤
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL astt806_stkf_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update5"

      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   LET ls_group = "'B',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkg_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update5"

      #end add-point
      
      #將遮罩欄位還原
      #CALL astt806_stkg_t_mask_restore('restore_mask_o')
      UPDATE stkg_t 
         SET (stkgdocno,stkg001,
              stkgseq,stkgseq1,
              stkg002,stkg003,stkg004,stkg006) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4],
              g_sten11_d[g_detail_idx3].stkg002,g_sten11_d[g_detail_idx3].stkg003,g_sten11_d[g_detail_idx3].stkg004, 
              g_sten11_d[g_detail_idx3].stkg006) 
         WHERE stkgent = g_enterprise AND stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2] AND stkgseq = ps_keys_bak[3] AND stkgseq1 = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update5"

      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.sqlcode #其他錯誤
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      #CALL astt806_stkg_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update5"

      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   LET ls_group = "'C',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "stkg_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update5"

      #end add-point
      
      #將遮罩欄位還原
      #CALL astt806_stkg_t_mask_restore('restore_mask_o')
      UPDATE stkg_t 
         SET (stkgdocno,stkg001,
              stkgseq,stkgseq1,
              stkg002,stkg003,stkg005,stkg007) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4],
              g_sten13_d[g_detail_idx3].stkg002_1,g_sten13_d[g_detail_idx3].stkg003_1,g_sten13_d[g_detail_idx3].stkg005_1, 
              g_sten13_d[g_detail_idx3].stkg007_1) 
         WHERE stkgent = g_enterprise AND stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2] AND stkgseq = ps_keys_bak[3] AND stkgseq1 = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update5"

      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.sqlcode #其他錯誤
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      #CALL astt806_stkg_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update5"

      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.key_update_b" >}
#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION astt806_key_update_b(ps_keys_bak,ps_table)
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_key       DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_update_b.pre_function"
   
   #end add-point
   
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update3"
      
      #end add-point
      
      UPDATE stkn_t 
         SET (stkndocno,stkn001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stknent = g_enterprise AND
               stkndocno = ps_keys_bak[1] AND stkn001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update3"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update3"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update4"
      
      #end add-point
      
      UPDATE stko_t 
         SET (stkodocno,stko001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkoent = g_enterprise AND
               stkodocno = ps_keys_bak[1] AND stko001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update4"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update4"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update5"
      
      #end add-point
      
      UPDATE stkf_t 
         SET (stkfdocno,stkf001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkfent = g_enterprise AND
               stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update5"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update5"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update6"
      
      #end add-point
      
      UPDATE stkh_t 
         SET (stkhdocno,stkh001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkhent = g_enterprise AND
               stkhdocno = ps_keys_bak[1] AND stkh001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update6"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update6"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update7"
      
      #end add-point
      
      UPDATE stki_t 
         SET (stkidocno,stki001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkient = g_enterprise AND
               stkidocno = ps_keys_bak[1] AND stki001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update7"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update7"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update8"
      
      #end add-point
      
      UPDATE stkj_t 
         SET (stkjdocno,stkj001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkjent = g_enterprise AND
               stkjdocno = ps_keys_bak[1] AND stkj001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update8"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update8"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update9"
      
      #end add-point
      
      UPDATE stkk_t 
         SET (stkkdocno,stkk001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkkent = g_enterprise AND
               stkkdocno = ps_keys_bak[1] AND stkk001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update9"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update9"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update10"
      
      #end add-point
      
      UPDATE stkl_t 
         SET (stkldocno,stkl001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stklent = g_enterprise AND
               stkldocno = ps_keys_bak[1] AND stkl001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update10"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update10"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行update
   IF ps_table = 'stke_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update11"
      
      #end add-point
      
      UPDATE stkm_t 
         SET (stkmdocno,stkm001) 
              = 
             (g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001) 
         WHERE stkment = g_enterprise AND
               stkmdocno = ps_keys_bak[1] AND stkm001 = ps_keys_bak[2]
 
      #add-point:update_b段修改中 name="key_update_b.m_update11"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update11"
      
      #end add-point
   END IF
 
 
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.key_delete_b" >}
#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION astt806_key_delete_b(ps_keys_bak,ps_table)
   #add-point:delete_b段define(客製用) name="key_delete_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_delete_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_delete_b.pre_function"
   IF ps_table = 'stkf_B' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete10"

      #end add-point
      
      DELETE FROM stkg_t 
            WHERE stkgent = g_enterprise AND
                  stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2] AND stkgseq = ps_keys_bak[3]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete10"

      #end add-point
              
      CASE
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            CALL s_transaction_end('N','0')
            RETURN FALSE
         OTHERWISE
      END CASE
      
      #add-point:delete_b段修改後 name="key_delete_b.after_delete10"

      #end add-point
   END IF
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete3"

      #end add-point
      
      DELETE FROM stkg_t 
            WHERE stkgent = g_enterprise AND
                  stkgdocno = ps_keys_bak[1] AND stkg001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete3"

      #end add-point
              
      CASE
         WHEN SQLCA.sqlcode #其他錯誤
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkg_t:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete3"

      #end add-point
   END IF
   #end add-point
   
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete3"
      
      #end add-point
      
      DELETE FROM stkn_t 
            WHERE stknent = g_enterprise AND
                  stkndocno = ps_keys_bak[1] AND stkn001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete3"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkn_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete3"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete4"
      
      #end add-point
      
      DELETE FROM stko_t 
            WHERE stkoent = g_enterprise AND
                  stkodocno = ps_keys_bak[1] AND stko001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete4"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stko_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete4"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete5"
      
      #end add-point
      
      DELETE FROM stkf_t 
            WHERE stkfent = g_enterprise AND
                  stkfdocno = ps_keys_bak[1] AND stkf001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete5"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkf_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete5"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete6"
      
      #end add-point
      
      DELETE FROM stkh_t 
            WHERE stkhent = g_enterprise AND
                  stkhdocno = ps_keys_bak[1] AND stkh001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete6"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkh_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete6"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete7"
      
      #end add-point
      
      DELETE FROM stki_t 
            WHERE stkient = g_enterprise AND
                  stkidocno = ps_keys_bak[1] AND stki001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete7"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stki_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete7"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete8"
      
      #end add-point
      
      DELETE FROM stkj_t 
            WHERE stkjent = g_enterprise AND
                  stkjdocno = ps_keys_bak[1] AND stkj001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete8"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkj_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete8"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete9"
      
      #end add-point
      
      DELETE FROM stkk_t 
            WHERE stkkent = g_enterprise AND
                  stkkdocno = ps_keys_bak[1] AND stkk001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete9"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkk_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete9"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete10"
      
      #end add-point
      
      DELETE FROM stkl_t 
            WHERE stklent = g_enterprise AND
                  stkldocno = ps_keys_bak[1] AND stkl001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete10"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkl_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete10"
      
      #end add-point
   END IF
 
   #如果是上層單身則進行delete
   IF ps_table = 'stke_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete11"
      
      #end add-point
      
      DELETE FROM stkm_t 
            WHERE stkment = g_enterprise AND
                  stkmdocno = ps_keys_bak[1] AND stkm001 = ps_keys_bak[2]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete11"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "stkm_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete11"
      
      #end add-point
   END IF
 
 
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION astt806_lock_b(ps_table,ps_page)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   
   #end add-point   
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   
   #end add-point
    
   #先刷新資料
   #CALL astt806_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "sten_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN astt806_bcl USING g_enterprise,
                                       g_stem_m.stemdocno,g_sten_d[g_detail_idx].stenseq     
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
   #鎖定整組table
   #LET ls_group = "'4',"
   #僅鎖定自身table
   LET ls_group = "stke_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl2 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl2:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
 
   
   #鎖定整組table
   #LET ls_group = "'2',"
   #僅鎖定自身table
   LET ls_group = "stkn_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl3 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten15_d[g_detail_idx2].stknseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl3:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'3',"
   #僅鎖定自身table
   LET ls_group = "stko_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl4 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten16_d[g_detail_idx2].stkoseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl4:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'5',"
   #僅鎖定自身table
   LET ls_group = "stkf_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl5 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten3_d[g_detail_idx2].stkfseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl5:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'6',"
   #僅鎖定自身table
   LET ls_group = "stkh_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl6 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten4_d[g_detail_idx2].stkhseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl6:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'7',"
   #僅鎖定自身table
   LET ls_group = "stki_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl7 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten5_d[g_detail_idx2].stkiseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl7:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'8',"
   #僅鎖定自身table
   LET ls_group = "stkj_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl8 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten6_d[g_detail_idx2].stkjseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl8:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'9',"
   #僅鎖定自身table
   LET ls_group = "stkk_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl9 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten7_d[g_detail_idx2].stkkseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl9:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'10',"
   #僅鎖定自身table
   LET ls_group = "stkl_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl10 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten8_d[g_detail_idx2].stklseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl10:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'11',"
   #僅鎖定自身table
   LET ls_group = "stkm_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl11 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten9_d[g_detail_idx2].stkmseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl11:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
 
   
   #add-point:lock_b段other name="lock_b.other"
   #鎖定整組table
   #僅鎖定自身table
   LET ls_group = "stkf_B"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl12 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten12_d[g_detail_idx2].stkfseq_2
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl12:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #鎖定整組table
   #LET ls_group = "'13',"
   #僅鎖定自身table
   LET ls_group = "stkg_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl13 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten3_d[g_detail_idx2].stkfseq,g_sten11_d[g_detail_idx3].stkgseq1
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl13:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #鎖定整組table
   #LET ls_group = "'14',"
   #僅鎖定自身table
   LET ls_group = "stkg_B"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN astt806_bcl14 USING g_enterprise,
                                             g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,
                                             g_sten12_d[g_detail_idx2].stkfseq_2,g_sten13_d[g_detail_idx3].stkgseq1_1
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "astt806_bcl14:",SQLERRMESSAGE 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION astt806_unlock_b(ps_table,ps_page)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   
   #end add-point  
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   
   #end add-point
    
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl
   END IF
   
   LET ls_group = "'4',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl2
   END IF
 
 
   
   LET ls_group = "'2',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl3
   END IF
 
   LET ls_group = "'3',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl4
   END IF
 
   LET ls_group = "'5',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl5
   END IF
 
   LET ls_group = "'6',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl6
   END IF
 
   LET ls_group = "'7',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl7
   END IF
 
   LET ls_group = "'8',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl8
   END IF
 
   LET ls_group = "'9',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl9
   END IF
 
   LET ls_group = "'10',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl10
   END IF
 
   LET ls_group = "'11',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl11
   END IF
 
 
 
   #add-point:unlock_b段other name="unlock_b.other"
   LET ls_group = "'12',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl12
   END IF
   LET ls_group = "'13',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl13
   END IF
   LET ls_group = "'14',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE astt806_bcl14
   END IF
   #end add-point  
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION astt806_set_entry(p_cmd)
   #add-point:set_entry段define(客製用) name="set_entry.define_customerization"
   
   #end add-point       
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry.define"
   
   #end add-point       
   
   #add-point:Function前置處理  name="set_entry.pre_function"
   
   #end add-point
   
   CALL cl_set_comp_entry("stemdocno",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("stemdocno",TRUE)
      CALL cl_set_comp_entry("stemdocdt",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry段欄位控制 name="set_entry.field_control"
      CALL cl_set_comp_entry("stemsite",TRUE)
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後 name="set_entry.after_control"
   CALL cl_set_comp_entry("stem035,stem036",TRUE)
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION astt806_set_no_entry(p_cmd)
   #add-point:set_no_entry段define(客製用) name="set_no_entry.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry.define"
   DEFINE l_cnt             LIKE type_t.num5
   #end add-point     
   
   #add-point:Function前置處理  name="set_no_entry.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("stemdocno",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry段欄位控制 name="set_no_entry.field_control"
      
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("stemdocno",FALSE)
   END IF 
 
#  IF p_cmd = 'u' THEN  #docdt欄位依照設定關閉(FALSE則為設定不同意修正) #(ver:78)
      IF NOT cl_chk_update_docdt() THEN
         CALL cl_set_comp_entry("stemdocdt",FALSE)
      END IF
#  END IF 
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   IF NOT s_aooi500_comp_entry(g_prog,'stemsite') OR g_site_flag THEN
      CALL cl_set_comp_entry("stemsite",FALSE)
   END IF
   LET l_cnt = 0
   SELECT COUNT(*) INTO l_cnt
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
   IF l_cnt > 0 THEN   
      CALL cl_set_comp_entry("stem035",FALSE)
   END IF 
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("stem035,stem036",FALSE)
   END IF 
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION astt806_set_entry_b(p_cmd)
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   
   #end add-point
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制 name="set_entry_b.field_control"
      
      #end add-point  
   END IF
   
   #add-point:set_entry_b段 name="set_entry_b.set_entry_b"
   CALL cl_set_comp_entry('sten005,sten007,sten012',TRUE)
   CALL cl_set_comp_entry("stkesite,stke000,stke002,stke003,stke004,stke005,stke006,stke007,stke008,stke009,stke010",TRUE)
   CALL cl_set_comp_entry("stke011,stke012,stke013,stke014,stke015,stke016,stke017,stke018,stke019,stke020",TRUE)
   CALL cl_set_comp_entry("stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029,stke030",TRUE)
   CALL cl_set_comp_entry("stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040",TRUE)
   CALL cl_set_comp_entry("stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050",TRUE)
   CALL cl_set_comp_entry("stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus",TRUE)
   CALL cl_set_comp_entry("stkf011,stkf018",TRUE)
   CALL cl_set_comp_entry("stkf012_2,stkf019_2",TRUE)
   CALL cl_set_comp_entry("stkf014_2,stkf015_2",TRUE)
   CALL cl_set_comp_entry("stki008",TRUE)
   CALL cl_set_comp_entry("stkl005",TRUE)
   CALL cl_set_comp_entry("stkfseq,stkfseq_2",TRUE)
   CALL cl_set_comp_entry("stkf004,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf016,stkf022,stkf023,stkf024",TRUE)
   CALL cl_set_comp_entry("stkf004_2,stkf005_2,stkf006_2,stkf007_2,stkf008_2,stkf009_2,stkf010_2,stkf013_2,stkf014_2,stkf015_2,stkf016_2,stkf023_2,stkf024_2",TRUE)
   #end add-point  
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION astt806_set_no_entry_b(p_cmd)
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   
   #end add-point    
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   DEFINE  l_sys                 LIKE type_t.chr1 
   #end add-point    
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段 name="set_no_entry_b.set_no_entry_b"
   CASE g_sten_d[l_ac].sten001
      WHEN '1' CALL cl_set_comp_entry('sten007,sten012',FALSE)
      WHEN '2' CALL cl_set_comp_entry('sten005,sten007',FALSE)
      WHEN '3' CALL cl_set_comp_entry('sten005,sten007,sten012',FALSE)
      WHEN '4' CALL cl_set_comp_entry('sten005,sten012',FALSE)
   END CASE
   CALL cl_set_comp_entry('stkf025_2',FALSE)
   CALL cl_set_comp_entry("stkesite,stke000,stke002,stke003,stke004,stke005,stke006,stke007,stke008,stke009,stke010",FALSE)
   CALL cl_set_comp_entry("stke011,stke012,stke013,stke014,stke015,stke016,stke017,stke018,stke019,stke020",FALSE)
   CALL cl_set_comp_entry("stke021,stke022,stke023,stke024,stke025,stke026,stke028,stke029,stke030",FALSE)
   CALL cl_set_comp_entry("stke031,stke032,stke033,stke034,stke035,stke036,stke037,stke038,stke039,stke040",FALSE)
   CALL cl_set_comp_entry("stke041,stke042,stke043,stke044,stke045,stke046,stke047,stke048,stke049,stke050",FALSE)
   CALL cl_set_comp_entry("stke051,stke052,stke053,stke200,stke223,stke224,stke225,stkestus",FALSE)
   #标准否为Y并且方案编号不为空的资料是自动根据 费用标准方案带出，不可以维护（根据aoos020参数设置，标准费用可以调整，Y，可以修改，N不可以调整）
   LET l_sys = cl_get_para(g_enterprise,g_sten2_d[g_detail_idx].stkesite,"S-CIR-2019") 
   IF g_sten3_d.getLength() > 0 THEN
      IF l_sys = 'N' AND g_sten3_d[l_ac].stkf002 = 'Y' THEN 
         CALL cl_set_comp_entry("stkf004,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf016,stkf011,stkf018,stkf022,stkf023,stkf024",FALSE)
      END IF
      #标准否为Y的费用只能修改金额
      IF g_sten3_d[l_ac].stkf003 IS NOT NULL THEN
         CALL cl_set_comp_entry("stkf004,stkf005,stkf006,stkf007,stkf008,stkf009,stkf010,stkf016,stkf011,stkf022,stkf023,stkf024",FALSE)
      ELSE
         CALL cl_set_comp_entry("stkf018",FALSE)   
      END IF
      IF g_sten3_d[l_ac].stkf016 <> '1' THEN
         CALL cl_set_comp_entry("stkf011,stkf018",FALSE)
      END IF
      #计算方式不是经营面积或者测量面积的时候关闭费用单身场地栏位
      IF g_sten3_d[l_ac].stkf010 NOT MATCHES "[12]" THEN
         CALL cl_set_comp_entry("stkf022",FALSE)
      END IF
      #费用所属类型不为2，关闭费用所属组织栏位
      IF g_sten3_d[l_ac].stkf023 = '1' THEN
         CALL cl_set_comp_entry("stkf024",FALSE)
      END IF
   END IF  
   IF g_sten12_d.getLength() > 0 THEN   
      IF l_sys = 'N' AND g_sten12_d[l_ac].stkfseq_2 = 'Y' THEN 
         CALL cl_set_comp_entry("stkf004_2,stkf005_2,stkf006_2,stkf007_2,stkf008_2,stkf009_2,stkf010_2,stkf013_2,stkf014_2,stkf015_2,stkf016_2,stkf012_2,stkf019_2,stkf023_2,stkf024_2",FALSE)
      END IF   
      #标准否为Y的费用只能修改比例
      IF g_sten12_d[l_ac].stkf003_2 IS NOT NULL THEN
         CALL cl_set_comp_entry("stkf004_2,stkf005_2,stkf006_2,stkf007_2,stkf008_2,stkf009_2,stkf010_2,stkf012_2,stkf013_2,stkf014_2,stkf015_2,stkf016_2,stkf023_2,stkf024_2",FALSE)
      ELSE
         CALL cl_set_comp_entry("stkf019_2",FALSE)      
      END IF   
      
      IF g_sten12_d[l_ac].stkf016_2 <> '1' THEN
         CALL cl_set_comp_entry("stkf012_2,stkf019_2",FALSE)
      END IF
      IF g_sten12_d[l_ac].stkf013_2 = '1' THEN
         CALL cl_set_comp_entry("stkf014_2,stkf015_2",FALSE)
      END IF
      IF g_sten12_d[l_ac].stkf013_2 = '3' THEN
         CALL cl_set_comp_entry("stkf015_2",FALSE)
      END IF      
      #费用所属类型不为2，关闭费用所属组织栏位
      IF g_sten12_d[l_ac].stkf023_2 = '1' THEN
         CALL cl_set_comp_entry("stkf024_2",FALSE)
      END IF
   END IF      
   IF g_sten5_d[l_ac].stki007 = 'N' THEN
      CALL cl_set_comp_entry('stki008',FALSE)      
   END IF  
   IF g_sten8_d[l_ac].stkl004 = 'N' THEN
      CALL cl_set_comp_entry('stkl005',FALSE)      
   END IF  
   #end add-point     
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION astt806_set_act_visible()
   #add-point:set_act_visible段define(客製用) name="set_act_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible.define"
   
   #end add-point   
   #add-point:set_act_visible段 name="set_act_visible.set_act_visible"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION astt806_set_act_no_visible()
   #add-point:set_act_no_visible段define(客製用) name="set_act_no_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible.define"
   
   #end add-point   
   #add-point:set_act_no_visible段 name="set_act_no_visible.set_act_no_visible"
   #應用 a63 樣板自動產生(Version:2)
   IF g_stem_m.stemstus NOT MATCHES "[NDR]" THEN   # N未確認/D抽單/R已拒絕允許修改
      CALL cl_set_act_visible("modify,delete,modify_detail", FALSE)
   END IF



   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION astt806_set_act_visible_b()
   #add-point:set_act_visible_b段define(客製用) name="set_act_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible_b.define"
   
   #end add-point   
   #add-point:set_act_visible_b段 name="set_act_visible_b.set_act_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="astt806.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION astt806_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define(客製用) name="set_act_no_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible_b.define"
   
   #end add-point   
   #add-point:set_act_no_visible_b段 name="set_act_no_visible_b.set_act_no_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="astt806.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION astt806_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   
   #end add-point  
   DEFINE li_idx     LIKE type_t.num10
   DEFINE li_cnt     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE ls_where   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="default_search.before"
   
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " stemdocno = '", g_argv[01], "' AND "
   END IF
   
 
   
   #add-point:default_search段after sql name="default_search.after_sql"
   
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      
      #預設查詢條件
      CALL cl_qbe_get_default_qryplan() RETURNING ls_where
      IF NOT cl_null(ls_where) THEN
         CALL util.JSON.parse(ls_where, la_wc)
         INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
         INITIALIZE g_wc2_table2 TO NULL
 
 
         FOR li_idx = 1 TO la_wc.getLength()
            CASE
               WHEN la_wc[li_idx].tableid = "stem_t" 
                  LET g_wc = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "sten_t" 
                  LET g_wc2_table1 = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "stke_t" 
                  LET g_wc2_table2 = la_wc[li_idx].wc
 
 
               WHEN la_wc[li_idx].tableid = "EXTENDWC"
                  LET g_wc2_extend = la_wc[li_idx].wc
            END CASE
         END FOR
         IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
            OR NOT cl_null(g_wc2_table2)
 
 
            OR NOT cl_null(g_wc2_extend)
            THEN
            #組合g_wc2
            IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
               LET g_wc2 = g_wc2_table1
            END IF
            IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
            END IF
 
 
            IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
            END IF
         
            IF g_wc2.subString(1,5) = " AND " THEN
               LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
            END IF
         END IF
      END IF
    
      IF cl_null(g_wc) AND cl_null(g_wc2) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.state_change" >}
   #應用 a09 樣板自動產生(Version:17)
#+ 確認碼變更 
PRIVATE FUNCTION astt806_statechange()
   #add-point:statechange段define(客製用) name="statechange.define_customerization"
   
   #end add-point  
   DEFINE lc_state LIKE type_t.chr5
   #add-point:statechange段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="statechange.define"
   DEFINE l_success   LIKE type_t.num5
   #end add-point  
   
   #add-point:Function前置處理 name="statechange.before"
   IF g_stem_m.stemstus ='X' OR g_stem_m.stemstus='Y'  THEN
      RETURN
   END IF
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_stem_m.stemdocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   CALL s_transaction_begin()
   
   OPEN astt806_cl USING g_enterprise,g_stem_m.stemdocno
   IF STATUS THEN
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN astt806_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #顯示最新的資料
   EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
       g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid,g_stem_m.stemcrtdp, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfdt, 
       g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
       g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
   
 
   #檢查是否允許此動作
   IF NOT astt806_action_chk() THEN
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #將資料顯示到畫面上
   DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc,g_stem_m.stemdocdt,g_stem_m.stemdocno,g_stem_m.stem035, 
       g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem012_desc,g_stem_m.stem013,g_stem_m.stem013_desc, 
       g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemownid_desc,g_stem_m.stemowndp, 
       g_stem_m.stemowndp_desc,g_stem_m.stemcrtid,g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp,g_stem_m.stemcrtdp_desc, 
       g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmodid_desc,g_stem_m.stemmoddt,g_stem_m.stemcnfid, 
       g_stem_m.stemcnfid_desc,g_stem_m.stemcnfdt
 
   CASE g_stem_m.stemstus
      WHEN "N"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
      WHEN "Y"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
      WHEN "A"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
      WHEN "D"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
      WHEN "R"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
      WHEN "W"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
      WHEN "X"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
      
   END CASE
 
   #add-point:資料刷新後 name="statechange.after_refresh"
 
   #end add-point
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         HIDE OPTION "approved"
         HIDE OPTION "rejection"
         CASE g_stem_m.stemstus
            
            WHEN "N"
               HIDE OPTION "unconfirmed"
            WHEN "Y"
               HIDE OPTION "confirmed"
            WHEN "A"
               HIDE OPTION "approved"
            WHEN "D"
               HIDE OPTION "withdraw"
            WHEN "R"
               HIDE OPTION "rejection"
            WHEN "W"
               HIDE OPTION "signing"
            WHEN "X"
               HIDE OPTION "invalid"
         END CASE
     
      #add-point:menu前 name="statechange.before_menu"
      CALL cl_set_act_visible("unconfirmed,invalid,confirmed",TRUE)   #170117-00025#1 add by 08172
      CALL cl_set_act_visible("signing,withdraw",FALSE)
      CASE g_stem_m.stemstus
          WHEN "N"
            CALL cl_set_act_visible("unconfirmed",FALSE) #170117-00025#1 add by 08172
            #需提交至BPM時，則顯示「提交」功能並隱藏「確認」功能
            IF cl_bpm_chk() THEN
               CALL cl_set_act_visible("signing",TRUE)
               CALL cl_set_act_visible("confirmed",FALSE)
            END IF
         WHEN "R"    #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed",FALSE)
         WHEN "D"    #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed",FALSE)
         WHEN "X"
            HIDE OPTION "open"
            HIDE OPTION "valid"
            HIDE OPTION "invalid"     #170117-00025#1 add by 08172
            HIDE OPTION "confirmed"   #170117-00025#1 add by 08172
            HIDE OPTION "unconfirmed" #170117-00025#1 add by 08172
            RETURN
         WHEN "Y"
            HIDE OPTION "void"
            HIDE OPTION "invalid"  #add by geza 20160810 #160809-00026#1
            HIDE OPTION "confirmed" #170117-00025#1 add by 08172
         WHEN "W"    #只能顯示抽單;其餘應用功能皆隱藏
            CALL cl_set_act_visible("withdraw",TRUE)
            CALL cl_set_act_visible("unconfirmed,invalid,confirmed",FALSE)
         WHEN "A"    #只能顯示確認; 其餘應用功能皆隱藏
            CALL cl_set_act_visible("confirmed",TRUE)
            CALL cl_set_act_visible("unconfirmed,invalid",FALSE)
      END CASE
      #end add-point
      
      #應用 a36 樣板自動產生(Version:5)
      #提交
      ON ACTION signing
         IF cl_auth_chk_act("signing") THEN
            IF NOT astt806_send() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE astt806_cl
            RETURN
         END IF
    
      #抽單
      ON ACTION withdraw
         IF cl_auth_chk_act("withdraw") THEN
            IF NOT astt806_draw_out() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE astt806_cl
            RETURN
         END IF
 
 
 
	  
      ON ACTION unconfirmed
         IF cl_auth_chk_act("unconfirmed") THEN
            LET lc_state = "N"
            #add-point:action控制 name="statechange.unconfirmed"
            
            #end add-point
         END IF
         EXIT MENU
      ON ACTION confirmed
         IF cl_auth_chk_act("confirmed") THEN
            LET lc_state = "Y"
            #add-point:action控制 name="statechange.confirmed"
            CALL s_transaction_begin()
            CALL cl_err_collect_init()
            CALL s_astt806_conf_chk(g_stem_m.stemdocno) RETURNING l_success
            CALL cl_err_collect_show()             
            IF NOT l_success THEN
               CALL s_transaction_end('N','0')
               RETURN
            ELSE
               IF NOT cl_ask_confirm('aim-00108') THEN 
                  CALL s_transaction_end('N','0')
                  RETURN
               ELSE
                  CALL s_transaction_begin()
                  CALL s_astt806_conf_upd(g_stem_m.stemdocno) RETURNING l_success
                  CALL cl_err_collect_show()
                  IF NOT l_success THEN
                     CALL s_transaction_end('N','0')
                     RETURN
                  END IF
               END IF
            END IF
            #end add-point
         END IF
         EXIT MENU
      ON ACTION approved
         IF cl_auth_chk_act("approved") THEN
            LET lc_state = "A"
            #add-point:action控制 name="statechange.approved"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION withdraw
      #   IF cl_auth_chk_act("withdraw") THEN
      #      LET lc_state = "D"
      #      #add-point:action控制 name="statechange.withdraw"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION rejection
         IF cl_auth_chk_act("rejection") THEN
            LET lc_state = "R"
            #add-point:action控制 name="statechange.rejection"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION signing
      #   IF cl_auth_chk_act("signing") THEN
      #      LET lc_state = "W"
      #      #add-point:action控制 name="statechange.signing"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION invalid
         IF cl_auth_chk_act("invalid") THEN
            LET lc_state = "X"
            #add-point:action控制 name="statechange.invalid"
            CALL s_transaction_begin()
            CALL cl_err_collect_init()
            CALL s_astt806_void_chk(g_stem_m.stemdocno,g_stem_m.stemstus) RETURNING l_success
            CALL cl_err_collect_show()             
            IF NOT l_success THEN
               CALL s_transaction_end('N','0')
               RETURN
            ELSE
               IF NOT cl_ask_confirm('aim-00109') THEN 
                  CALL s_transaction_end('N','0')
                  RETURN
               ELSE
                  CALL s_astt806_void_upd(g_stem_m.stemdocno) RETURNING l_success
                  IF NOT l_success THEN
                     CALL s_transaction_end('N','0')
                     RETURN
                  END IF
               END IF
            END IF
            #end add-point
         END IF
         EXIT MENU
 
      #add-point:stus控制 name="statechange.more_control"
      
      #end add-point
      
   END MENU
   
   #確認被選取的狀態碼在清單中
   IF (lc_state <> "N" 
      AND lc_state <> "Y"
      AND lc_state <> "A"
      AND lc_state <> "D"
      AND lc_state <> "R"
      AND lc_state <> "W"
      AND lc_state <> "X"
      ) OR 
      g_stem_m.stemstus = lc_state OR cl_null(lc_state) THEN
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:stus修改前 name="statechange.b_update"
   
   #end add-point
   
   LET g_stem_m.stemmodid = g_user
   LET g_stem_m.stemmoddt = cl_get_current()
   LET g_stem_m.stemstus = lc_state
   
   #異動狀態碼欄位/修改人/修改日期
   UPDATE stem_t 
      SET (stemstus,stemmodid,stemmoddt) 
        = (g_stem_m.stemstus,g_stem_m.stemmodid,g_stem_m.stemmoddt)     
    WHERE stement = g_enterprise AND stemdocno = g_stem_m.stemdocno
 
    
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
    
      #撈取異動後的資料
      EXECUTE astt806_master_referesh USING g_stem_m.stemdocno INTO g_stem_m.stemsite,g_stem_m.stemdocdt, 
          g_stem_m.stemdocno,g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem013, 
          g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid,g_stem_m.stemowndp,g_stem_m.stemcrtid, 
          g_stem_m.stemcrtdp,g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmoddt,g_stem_m.stemcnfid, 
          g_stem_m.stemcnfdt,g_stem_m.stemsite_desc,g_stem_m.stem013_desc,g_stem_m.stemownid_desc,g_stem_m.stemowndp_desc, 
          g_stem_m.stemcrtid_desc,g_stem_m.stemcrtdp_desc,g_stem_m.stemmodid_desc,g_stem_m.stemcnfid_desc 
 
      
      #將資料顯示到畫面上
      DISPLAY BY NAME g_stem_m.stemsite,g_stem_m.stemsite_desc,g_stem_m.stemdocdt,g_stem_m.stemdocno, 
          g_stem_m.stem035,g_stem_m.stem036,g_stem_m.stem000,g_stem_m.stem012,g_stem_m.stem012_desc, 
          g_stem_m.stem013,g_stem_m.stem013_desc,g_stem_m.stem034,g_stem_m.stemstus,g_stem_m.stemownid, 
          g_stem_m.stemownid_desc,g_stem_m.stemowndp,g_stem_m.stemowndp_desc,g_stem_m.stemcrtid,g_stem_m.stemcrtid_desc, 
          g_stem_m.stemcrtdp,g_stem_m.stemcrtdp_desc,g_stem_m.stemcrtdt,g_stem_m.stemmodid,g_stem_m.stemmodid_desc, 
          g_stem_m.stemmoddt,g_stem_m.stemcnfid,g_stem_m.stemcnfid_desc,g_stem_m.stemcnfdt
   END IF
 
   #add-point:stus修改後 name="statechange.a_update"
   
   #end add-point
 
   #add-point:statechange段結束前 name="statechange.after"
   
   #end add-point  
 
   CLOSE astt806_cl
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL astt806_msgcentre_notify('statechange:'||lc_state)
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="astt806.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION astt806_idx_chk()
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   
   #end add-point  
   #add-point:idx_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_sten_d.getLength() THEN
         LET g_detail_idx = g_sten_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_sten_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_sten_d.getLength() TO FORMONLY.cnt
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail15")
      IF g_detail_idx2 > g_sten15_d.getLength() THEN
         LET g_detail_idx2 = g_sten15_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten15_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten15_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 3 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail16")
      IF g_detail_idx2 > g_sten16_d.getLength() THEN
         LET g_detail_idx2 = g_sten16_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten16_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten16_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 4 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx > g_sten2_d.getLength() THEN
         LET g_detail_idx = g_sten2_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_sten2_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_sten2_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 5 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail3")
      IF g_detail_idx2 > g_sten3_d.getLength() THEN
         LET g_detail_idx2 = g_sten3_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten3_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten3_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 6 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail4")
      IF g_detail_idx2 > g_sten4_d.getLength() THEN
         LET g_detail_idx2 = g_sten4_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten4_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten4_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 7 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail5")
      IF g_detail_idx2 > g_sten5_d.getLength() THEN
         LET g_detail_idx2 = g_sten5_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten5_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten5_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 8 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail6")
      IF g_detail_idx2 > g_sten6_d.getLength() THEN
         LET g_detail_idx2 = g_sten6_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten6_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten6_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 9 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail7")
      IF g_detail_idx2 > g_sten7_d.getLength() THEN
         LET g_detail_idx2 = g_sten7_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten7_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten7_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 10 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail8")
      IF g_detail_idx2 > g_sten8_d.getLength() THEN
         LET g_detail_idx2 = g_sten8_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten8_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten8_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 11 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail9")
      IF g_detail_idx2 > g_sten9_d.getLength() THEN
         LET g_detail_idx2 = g_sten9_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten9_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten9_d.getLength() TO FORMONLY.cnt
   END IF
 
   
   #add-point:idx_chk段other name="idx_chk.other"
   IF g_current_page = 12 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail12")
      IF g_detail_idx2 > g_sten12_d.getLength() THEN
         LET g_detail_idx2 = g_sten12_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten12_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten12_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 13 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail11")
      IF g_detail_idx2 > g_sten11_d.getLength() THEN
         LET g_detail_idx2 = g_sten11_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten11_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten11_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 14 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail13")
      IF g_detail_idx2 > g_sten13_d.getLength() THEN
         LET g_detail_idx2 = g_sten13_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten13_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten13_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 15 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail17")
      IF g_detail_idx2 > g_sten14_d.getLength() THEN
         LET g_detail_idx2 = g_sten14_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_sten14_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_sten14_d.getLength() TO FORMONLY.cnt
   END IF
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION astt806_b_fill2(pi_idx)
   #add-point:b_fill2段define(客製用) name="b_fill2.define_customerization"
   
   #end add-point
   DEFINE pi_idx                 LIKE type_t.num10
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"
   
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
   LET li_detail_idx_tmp = g_detail_idx
   
   IF astt806_fill_chk(3) THEN
      IF (pi_idx = 3 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten15_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stknsite,stknunit,stknseq,stkn002,stkn003,stkn004,stkn005,stkn006, 
             stkn007,stkn008,stkn009,stkn010  FROM stkn_t",    
                     "",
                     
                     " WHERE stknent=? AND stkndocno=? AND stkn001=?"
         
         IF NOT cl_null(g_wc2_table3) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table3 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkn_t.stknseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill3"
         
         #end add-point
         
         #先清空資料
               CALL g_sten15_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb3 FROM g_sql
         DECLARE b_fill_curs3 CURSOR FOR astt806_pb3
         
      #  OPEN b_fill_curs3 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs3 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten15_d[l_ac].stknsite, 
             g_sten15_d[l_ac].stknunit,g_sten15_d[l_ac].stknseq,g_sten15_d[l_ac].stkn002,g_sten15_d[l_ac].stkn003, 
             g_sten15_d[l_ac].stkn004,g_sten15_d[l_ac].stkn005,g_sten15_d[l_ac].stkn006,g_sten15_d[l_ac].stkn007, 
             g_sten15_d[l_ac].stkn008,g_sten15_d[l_ac].stkn009,g_sten15_d[l_ac].stkn010   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill3"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten15_d.deleteElement(g_sten15_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(4) THEN
      IF (pi_idx = 4 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten16_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkosite,stkounit,stkoseq,stko002,stko003,stko004,stko005,stko006, 
             stko007  FROM stko_t",    
                     "",
                     
                     " WHERE stkoent=? AND stkodocno=? AND stko001=?"
         
         IF NOT cl_null(g_wc2_table4) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table4 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stko_t.stkoseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill4"
         
         #end add-point
         
         #先清空資料
               CALL g_sten16_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb4 FROM g_sql
         DECLARE b_fill_curs4 CURSOR FOR astt806_pb4
         
      #  OPEN b_fill_curs4 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs4 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten16_d[l_ac].stkosite, 
             g_sten16_d[l_ac].stkounit,g_sten16_d[l_ac].stkoseq,g_sten16_d[l_ac].stko002,g_sten16_d[l_ac].stko003, 
             g_sten16_d[l_ac].stko004,g_sten16_d[l_ac].stko005,g_sten16_d[l_ac].stko006,g_sten16_d[l_ac].stko007  
               #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill4"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten16_d.deleteElement(g_sten16_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(5) THEN
      IF (pi_idx = 5 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten3_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkfseq,stkf002,stkf003,stkf021,stkf004,stkf022,stkf005,stkf006, 
             stkf007,stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020,stkf023,stkf024, 
             stkf025,stkfsite,stkfunit ,t22.stael003 ,t23.mhadl006 ,t24.ooefl003 FROM stkf_t",    
                     "",
                                    " LEFT JOIN stael_t t22 ON t22.staelent="||g_enterprise||" AND t22.stael001=stkf004 AND t22.stael002='"||g_dlang||"' ",
               " LEFT JOIN mhadl_t t23 ON t23.mhadlent="||g_enterprise||" AND t23.mhadl004=stkf022 AND t23.mhadl005='"||g_dlang||"' ",
               " LEFT JOIN ooefl_t t24 ON t24.ooeflent="||g_enterprise||" AND t24.ooefl001=stkf024 AND t24.ooefl002='"||g_dlang||"' ",
 
                     " WHERE stkfent=? AND stkfdocno=? AND stkf001=?"
         
         IF NOT cl_null(g_wc2_table5) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table5 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkf_t.stkfseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill5"
         LET g_sql = "SELECT  DISTINCT stkfseq,stkf002,stkf003,stkf021,stkf004,stkf022,stkf005,stkf006, 
             stkf007,stkf008,stkf009,stkf010,stkf011,stkf018,stkf016,stkf017,stkf020,stkf023,stkf024,stkf025, 
             stkfsite,stkfunit ,t22.stael003 ,t23.mhadl006 ,t24.ooefl003 FROM stkf_t",    
                     "",
                                    " LEFT JOIN stael_t t22 ON t22.staelent='"||g_enterprise||"' AND t22.stael001=stkf004 AND t22.stael002='"||g_dlang||"' ",
               " LEFT JOIN mhadl_t t23 ON t23.mhadlent='"||g_enterprise||"' AND t23.mhadl004=stkf022 AND t23.mhadl005='"||g_dlang||"' ",
               " LEFT JOIN ooefl_t t24 ON t24.ooeflent='"||g_enterprise||"' AND t24.ooefl001=stkf024 AND t24.ooefl002='"||g_dlang||"' ",
 
                     " WHERE stkfent=? AND stkfdocno=? AND stkf001=?"
         
         IF NOT cl_null(g_wc2_table5) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table5 CLIPPED
         END IF
         LET g_sql = g_sql CLIPPED," AND stkf009 IN ('1','3') "
         LET g_sql = g_sql, " ORDER BY  stkf_t.stkfseq" 
         #end add-point
         
         #先清空資料
               CALL g_sten3_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb5 FROM g_sql
         DECLARE b_fill_curs5 CURSOR FOR astt806_pb5
         
      #  OPEN b_fill_curs5 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs5 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten3_d[l_ac].stkfseq, 
             g_sten3_d[l_ac].stkf002,g_sten3_d[l_ac].stkf003,g_sten3_d[l_ac].stkf021,g_sten3_d[l_ac].stkf004, 
             g_sten3_d[l_ac].stkf022,g_sten3_d[l_ac].stkf005,g_sten3_d[l_ac].stkf006,g_sten3_d[l_ac].stkf007, 
             g_sten3_d[l_ac].stkf008,g_sten3_d[l_ac].stkf009,g_sten3_d[l_ac].stkf010,g_sten3_d[l_ac].stkf011, 
             g_sten3_d[l_ac].stkf018,g_sten3_d[l_ac].stkf016,g_sten3_d[l_ac].stkf017,g_sten3_d[l_ac].stkf020, 
             g_sten3_d[l_ac].stkf023,g_sten3_d[l_ac].stkf024,g_sten3_d[l_ac].stkf025,g_sten3_d[l_ac].stkfsite, 
             g_sten3_d[l_ac].stkfunit,g_sten3_d[l_ac].stkf004_desc,g_sten3_d[l_ac].stkf022_desc,g_sten3_d[l_ac].stkf024_desc  
               #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill5"
            #带出费用性质
            SELECT stae004 INTO g_sten3_d[l_ac].stae004
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten3_d[l_ac].stkf004
            IF g_sten3_d[l_ac].stkf023 = '3' THEN
               CALL s_desc_get_trading_partner_full_desc(g_sten3_d[l_ac].stkf024) RETURNING g_sten3_d[l_ac].stkf024_desc
            END IF
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten3_d.deleteElement(g_sten3_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(6) THEN
      IF (pi_idx = 6 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten4_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkhseq,stkh002,stkh003,stkh008,stkh004,stkh005,stkh006,stkh007, 
             stkhsite,stkhunit ,t25.stael003 FROM stkh_t",    
                     "",
                                    " LEFT JOIN stael_t t25 ON t25.staelent="||g_enterprise||" AND t25.stael001=stkh002 AND t25.stael002='"||g_dlang||"' ",
 
                     " WHERE stkhent=? AND stkhdocno=? AND stkh001=?"
         
         IF NOT cl_null(g_wc2_table6) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table6 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkh_t.stkhseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill6"
         
         #end add-point
         
         #先清空資料
               CALL g_sten4_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb6 FROM g_sql
         DECLARE b_fill_curs6 CURSOR FOR astt806_pb6
         
      #  OPEN b_fill_curs6 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs6 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten4_d[l_ac].stkhseq, 
             g_sten4_d[l_ac].stkh002,g_sten4_d[l_ac].stkh003,g_sten4_d[l_ac].stkh008,g_sten4_d[l_ac].stkh004, 
             g_sten4_d[l_ac].stkh005,g_sten4_d[l_ac].stkh006,g_sten4_d[l_ac].stkh007,g_sten4_d[l_ac].stkhsite, 
             g_sten4_d[l_ac].stkhunit,g_sten4_d[l_ac].stkh002_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill6"
            #带出费用性质
            SELECT stae004 INTO g_sten4_d[l_ac].stae004
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten4_d[l_ac].stkh002
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten4_d.deleteElement(g_sten4_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(7) THEN
      IF (pi_idx = 7 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten5_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkiseq,stki002,stki003,stki010,stki004,stki005,stki006,stki007, 
             stki008,stki009,stkisite,stkiunit ,t26.stael003 ,t27.staal003 ,t28.oodbl004 FROM stki_t", 
                 
                     "",
                                    " LEFT JOIN stael_t t26 ON t26.staelent="||g_enterprise||" AND t26.stael001=stki002 AND t26.stael002='"||g_dlang||"' ",
               " LEFT JOIN staal_t t27 ON t27.staalent="||g_enterprise||" AND t27.staal001=stki003 AND t27.staal002='"||g_dlang||"' ",
               " LEFT JOIN oodbl_t t28 ON t28.oodblent="||g_enterprise||" AND t28.oodbl002=stki010 AND t28.oodbl003='"||g_dlang||"' ",
 
                     " WHERE stkient=? AND stkidocno=? AND stki001=?"
         
         IF NOT cl_null(g_wc2_table7) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table7 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stki_t.stkiseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill7"
         LET g_sql = "SELECT  DISTINCT stkiseq,stki002,stki003,stki010,stki004,stki005,stki006,stki007, 
             stki008,stki009,stkisite,stkiunit ,t26.stael003 ,t27.staal003,''  FROM stki_t", 
                 
                     "",
                                    " LEFT JOIN stael_t t26 ON t26.staelent='"||g_enterprise||"' AND t26.stael001=stki002 AND t26.stael002='"||g_dlang||"' ",
               " LEFT JOIN staal_t t27 ON t27.staalent='"||g_enterprise||"' AND t27.staal001=stki003 AND t27.staal002='"||g_dlang||"' ",
 
                     " WHERE stkient=? AND stkidocno=? AND stki001=?"
         
         IF NOT cl_null(g_wc2_table7) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table7 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stki_t.stkiseq" 
         #end add-point
         
         #先清空資料
               CALL g_sten5_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb7 FROM g_sql
         DECLARE b_fill_curs7 CURSOR FOR astt806_pb7
         
      #  OPEN b_fill_curs7 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs7 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten5_d[l_ac].stkiseq, 
             g_sten5_d[l_ac].stki002,g_sten5_d[l_ac].stki003,g_sten5_d[l_ac].stki010,g_sten5_d[l_ac].stki004, 
             g_sten5_d[l_ac].stki005,g_sten5_d[l_ac].stki006,g_sten5_d[l_ac].stki007,g_sten5_d[l_ac].stki008, 
             g_sten5_d[l_ac].stki009,g_sten5_d[l_ac].stkisite,g_sten5_d[l_ac].stkiunit,g_sten5_d[l_ac].stki002_desc, 
             g_sten5_d[l_ac].stki003_desc,g_sten5_d[l_ac].stki010_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill7"
            #带出费用性质
            SELECT stae004 INTO g_sten5_d[l_ac].stae004
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten5_d[l_ac].stki002
            CALL s_desc_get_tax_desc1(g_sten2_d[g_detail_idx].stkesite,g_sten5_d[l_ac].stki010)  RETURNING g_sten5_d[l_ac].stki010_desc   
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten5_d.deleteElement(g_sten5_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(8) THEN
      IF (pi_idx = 8 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten6_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkjacti,stkjseq,stkj002,stkj003,stkj004,stkj005,stkj006,stkj007, 
             stkj008,stkj009,stkjsite,stkjunit ,t29.mhadl006 ,t30.mhaal003 ,t31.mhabl004 ,t32.mhacl005 FROM stkj_t", 
                 
                     "",
                                    " LEFT JOIN mhadl_t t29 ON t29.mhadlent="||g_enterprise||" AND t29.mhadl004=stkj002 AND t29.mhadl005='"||g_dlang||"' ",
               " LEFT JOIN mhaal_t t30 ON t30.mhaalent="||g_enterprise||" AND t30.mhaal001=stkj006 AND t30.mhaal002='"||g_dlang||"' ",
               " LEFT JOIN mhabl_t t31 ON t31.mhablent="||g_enterprise||" AND t31.mhabl001=stkj006 AND t31.mhabl002=stkj007 AND t31.mhabl003='"||g_dlang||"' ",
               " LEFT JOIN mhacl_t t32 ON t32.mhaclent="||g_enterprise||" AND t32.mhacl001=stkj006 AND t32.mhacl002=stkj007 AND t32.mhacl003=stkj008 AND t32.mhacl004='"||g_dlang||"' ",
 
                     " WHERE stkjent=? AND stkjdocno=? AND stkj001=?"
         
         IF NOT cl_null(g_wc2_table8) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table8 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkj_t.stkjseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill8"
         
         #end add-point
         
         #先清空資料
               CALL g_sten6_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb8 FROM g_sql
         DECLARE b_fill_curs8 CURSOR FOR astt806_pb8
         
      #  OPEN b_fill_curs8 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs8 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten6_d[l_ac].stkjacti, 
             g_sten6_d[l_ac].stkjseq,g_sten6_d[l_ac].stkj002,g_sten6_d[l_ac].stkj003,g_sten6_d[l_ac].stkj004, 
             g_sten6_d[l_ac].stkj005,g_sten6_d[l_ac].stkj006,g_sten6_d[l_ac].stkj007,g_sten6_d[l_ac].stkj008, 
             g_sten6_d[l_ac].stkj009,g_sten6_d[l_ac].stkjsite,g_sten6_d[l_ac].stkjunit,g_sten6_d[l_ac].stkj002_desc, 
             g_sten6_d[l_ac].stkj006_desc,g_sten6_d[l_ac].stkj007_desc,g_sten6_d[l_ac].stkj008_desc  
               #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill8"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten6_d.deleteElement(g_sten6_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(9) THEN
      IF (pi_idx = 9 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten7_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkkacti,stkkseq,stkk002,stkk004,stkk003,stkk005,stkksite,stkkunit , 
             t33.rtaxl003 ,t34.oocql004 FROM stkk_t",    
                     "",
                                    " LEFT JOIN rtaxl_t t33 ON t33.rtaxlent="||g_enterprise||" AND t33.rtaxl001=stkk002 AND t33.rtaxl002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t34 ON t34.oocqlent="||g_enterprise||" AND t34.oocql001='2002' AND t34.oocql002=stkk003 AND t34.oocql003='"||g_dlang||"' ",
 
                     " WHERE stkkent=? AND stkkdocno=? AND stkk001=?"
         
         IF NOT cl_null(g_wc2_table9) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table9 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkk_t.stkkseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill9"
         
         #end add-point
         
         #先清空資料
               CALL g_sten7_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb9 FROM g_sql
         DECLARE b_fill_curs9 CURSOR FOR astt806_pb9
         
      #  OPEN b_fill_curs9 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001   #(ver:78) 
 
         LET l_ac = 1
         FOREACH b_fill_curs9 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten7_d[l_ac].stkkacti, 
             g_sten7_d[l_ac].stkkseq,g_sten7_d[l_ac].stkk002,g_sten7_d[l_ac].stkk004,g_sten7_d[l_ac].stkk003, 
             g_sten7_d[l_ac].stkk005,g_sten7_d[l_ac].stkksite,g_sten7_d[l_ac].stkkunit,g_sten7_d[l_ac].stkk002_desc, 
             g_sten7_d[l_ac].stkk003_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill9"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten7_d.deleteElement(g_sten7_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(10) THEN
      IF (pi_idx = 10 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten8_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stklseq,stkl002,stkl003,stkl004,stkl005,stkl006,stkl007,stkl008, 
             stklsite,stklunit ,t35.stael003 FROM stkl_t",    
                     "",
                                    " LEFT JOIN stael_t t35 ON t35.staelent="||g_enterprise||" AND t35.stael001=stkl003 AND t35.stael002='"||g_dlang||"' ",
 
                     " WHERE stklent=? AND stkldocno=? AND stkl001=?"
         
         IF NOT cl_null(g_wc2_table10) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table10 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkl_t.stklseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill10"
         
         #end add-point
         
         #先清空資料
               CALL g_sten8_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb10 FROM g_sql
         DECLARE b_fill_curs10 CURSOR FOR astt806_pb10
         
      #  OPEN b_fill_curs10 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001    
      #    #(ver:78)
         LET l_ac = 1
         FOREACH b_fill_curs10 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten8_d[l_ac].stklseq, 
             g_sten8_d[l_ac].stkl002,g_sten8_d[l_ac].stkl003,g_sten8_d[l_ac].stkl004,g_sten8_d[l_ac].stkl005, 
             g_sten8_d[l_ac].stkl006,g_sten8_d[l_ac].stkl007,g_sten8_d[l_ac].stkl008,g_sten8_d[l_ac].stklsite, 
             g_sten8_d[l_ac].stklunit,g_sten8_d[l_ac].stkl003_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill10"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten8_d.deleteElement(g_sten8_d.getLength())
 
      END IF
   END IF
 
   IF astt806_fill_chk(11) THEN
      IF (pi_idx = 11 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten9_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql = "SELECT  DISTINCT stkmseq,stkm002,stkm003,stkm004,stkm005,stkm006,stkm007,stkm008, 
             stkm009,stkm010,stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017,stkm018,stkm019, 
             stkmsite,stkmunit ,t36.stael003 FROM stkm_t",    
                     "",
                                    " LEFT JOIN stael_t t36 ON t36.staelent="||g_enterprise||" AND t36.stael001=stkm003 AND t36.stael002='"||g_dlang||"' ",
 
                     " WHERE stkment=? AND stkmdocno=? AND stkm001=?"
         
         IF NOT cl_null(g_wc2_table11) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table11 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  stkm_t.stkmseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill11"
         
         #end add-point
         
         #先清空資料
               CALL g_sten9_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb11 FROM g_sql
         DECLARE b_fill_curs11 CURSOR FOR astt806_pb11
         
      #  OPEN b_fill_curs11 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001    
      #    #(ver:78)
         LET l_ac = 1
         FOREACH b_fill_curs11 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001 INTO g_sten9_d[l_ac].stkmseq, 
             g_sten9_d[l_ac].stkm002,g_sten9_d[l_ac].stkm003,g_sten9_d[l_ac].stkm004,g_sten9_d[l_ac].stkm005, 
             g_sten9_d[l_ac].stkm006,g_sten9_d[l_ac].stkm007,g_sten9_d[l_ac].stkm008,g_sten9_d[l_ac].stkm009, 
             g_sten9_d[l_ac].stkm010,g_sten9_d[l_ac].stkm011,g_sten9_d[l_ac].stkm012,g_sten9_d[l_ac].stkm013, 
             g_sten9_d[l_ac].stkm014,g_sten9_d[l_ac].stkm015,g_sten9_d[l_ac].stkm016,g_sten9_d[l_ac].stkm017, 
             g_sten9_d[l_ac].stkm018,g_sten9_d[l_ac].stkm019,g_sten9_d[l_ac].stkmsite,g_sten9_d[l_ac].stkmunit, 
             g_sten9_d[l_ac].stkm003_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill11"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_sten9_d.deleteElement(g_sten9_d.getLength())
 
      END IF
   END IF
 
 
      
   LET g_sten15_d_mask_o.* =  g_sten15_d.*
   FOR l_ac = 1 TO g_sten15_d.getLength()
      LET g_sten15_d_mask_o[l_ac].* =  g_sten15_d[l_ac].*
      CALL astt806_stkn_t_mask()
      LET g_sten15_d_mask_n[l_ac].* =  g_sten15_d[l_ac].*
   END FOR
   LET g_sten16_d_mask_o.* =  g_sten16_d.*
   FOR l_ac = 1 TO g_sten16_d.getLength()
      LET g_sten16_d_mask_o[l_ac].* =  g_sten16_d[l_ac].*
      CALL astt806_stko_t_mask()
      LET g_sten16_d_mask_n[l_ac].* =  g_sten16_d[l_ac].*
   END FOR
   LET g_sten3_d_mask_o.* =  g_sten3_d.*
   FOR l_ac = 1 TO g_sten3_d.getLength()
      LET g_sten3_d_mask_o[l_ac].* =  g_sten3_d[l_ac].*
      CALL astt806_stkf_t_mask()
      LET g_sten3_d_mask_n[l_ac].* =  g_sten3_d[l_ac].*
   END FOR
   LET g_sten4_d_mask_o.* =  g_sten4_d.*
   FOR l_ac = 1 TO g_sten4_d.getLength()
      LET g_sten4_d_mask_o[l_ac].* =  g_sten4_d[l_ac].*
      CALL astt806_stkh_t_mask()
      LET g_sten4_d_mask_n[l_ac].* =  g_sten4_d[l_ac].*
   END FOR
   LET g_sten5_d_mask_o.* =  g_sten5_d.*
   FOR l_ac = 1 TO g_sten5_d.getLength()
      LET g_sten5_d_mask_o[l_ac].* =  g_sten5_d[l_ac].*
      CALL astt806_stki_t_mask()
      LET g_sten5_d_mask_n[l_ac].* =  g_sten5_d[l_ac].*
   END FOR
   LET g_sten6_d_mask_o.* =  g_sten6_d.*
   FOR l_ac = 1 TO g_sten6_d.getLength()
      LET g_sten6_d_mask_o[l_ac].* =  g_sten6_d[l_ac].*
      CALL astt806_stkj_t_mask()
      LET g_sten6_d_mask_n[l_ac].* =  g_sten6_d[l_ac].*
   END FOR
   LET g_sten7_d_mask_o.* =  g_sten7_d.*
   FOR l_ac = 1 TO g_sten7_d.getLength()
      LET g_sten7_d_mask_o[l_ac].* =  g_sten7_d[l_ac].*
      CALL astt806_stkk_t_mask()
      LET g_sten7_d_mask_n[l_ac].* =  g_sten7_d[l_ac].*
   END FOR
   LET g_sten8_d_mask_o.* =  g_sten8_d.*
   FOR l_ac = 1 TO g_sten8_d.getLength()
      LET g_sten8_d_mask_o[l_ac].* =  g_sten8_d[l_ac].*
      CALL astt806_stkl_t_mask()
      LET g_sten8_d_mask_n[l_ac].* =  g_sten8_d[l_ac].*
   END FOR
   LET g_sten9_d_mask_o.* =  g_sten9_d.*
   FOR l_ac = 1 TO g_sten9_d.getLength()
      LET g_sten9_d_mask_o[l_ac].* =  g_sten9_d[l_ac].*
      CALL astt806_stkm_t_mask()
      LET g_sten9_d_mask_n[l_ac].* =  g_sten9_d[l_ac].*
   END FOR
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"
   IF astt806_fill_chk(12) THEN
      IF (pi_idx = 12 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
               CALL g_sten12_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[4]
         
         LET g_sql =  "SELECT  DISTINCT stkfseq,stkf002,stkf003,stkf021,stkf004,stkf005,stkf006,stkf007, 
                      stkf008,stkf009,stkf010,stkf012,stkf019,stkf013,stkf014,stkf015,stkf016,stkf020,stkf023,stkf024,stkf025,t1.stael003,t24.ooefl003  FROM stkf_t",   
                      "  LEFT JOIN stael_t t1 ON t1.staelent='"||g_enterprise||"' AND t1.stael001=stkf004 AND t1.stael002='"||g_dlang||"' ",
                      "  LEFT JOIN ooefl_t t24 ON t24.ooeflent='"||g_enterprise||"' AND t24.ooefl001=stkf024 AND t24.ooefl002='"||g_dlang||"' ",
                      " WHERE stkfent=? AND stkfdocno=? AND stkf001=?"
         
         IF NOT cl_null(g_wc2_table12) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table12 CLIPPED
         END IF
         LET g_sql = g_sql CLIPPED, " AND stkf009 = '2' "
         LET g_sql = g_sql, " ORDER BY  stkf_t.stkfseq" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill5"

         #end add-point
         
         #先清空資料
         CALL g_sten12_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb12 FROM g_sql
         DECLARE b_fill_curs12 CURSOR FOR astt806_pb12
         
         OPEN b_fill_curs12 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
         LET l_ac = 1
         FOREACH b_fill_curs12 INTO g_sten12_d[l_ac].stkfseq_2,g_sten12_d[l_ac].stkf002_2,g_sten12_d[l_ac].stkf003_2,g_sten12_d[l_ac].stkf021_2, 
                                    g_sten12_d[l_ac].stkf004_2,g_sten12_d[l_ac].stkf005_2,g_sten12_d[l_ac].stkf006_2,g_sten12_d[l_ac].stkf007_2, 
                                    g_sten12_d[l_ac].stkf008_2,g_sten12_d[l_ac].stkf009_2,g_sten12_d[l_ac].stkf010_2,g_sten12_d[l_ac].stkf012_2,g_sten12_d[l_ac].stkf019_2, 
                                    g_sten12_d[l_ac].stkf013_2,g_sten12_d[l_ac].stkf014_2,g_sten12_d[l_ac].stkf015_2,g_sten12_d[l_ac].stkf016_2,g_sten12_d[l_ac].stkf020_2, 
                                    g_sten12_d[l_ac].stkf023_2,g_sten12_d[l_ac].stkf024_2,g_sten12_d[l_ac].stkf025_2,g_sten12_d[l_ac].stkf004_2_desc,g_sten12_d[l_ac].stkf024_2_desc

            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill5"
            SELECT stae004 INTO g_sten12_d[l_ac].stae004_2
              FROM stae_t
             WHERE staeent = g_enterprise
               AND stae001 = g_sten12_d[l_ac].stkf004_2
            IF g_sten12_d[l_ac].stkf023_2= '3' THEN
               CALL s_desc_get_trading_partner_full_desc(g_sten12_d[l_ac].stkf024_2) RETURNING g_sten12_d[l_ac].stkf024_2_desc
            END IF  
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code   = 9035 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
         CALL g_sten12_d.deleteElement(g_sten12_d.getLength())
 
      END IF
   END IF
   LET g_sten12_d_mask_o.* =  g_sten12_d.*
   FOR l_ac = 1 TO g_sten12_d.getLength()
      LET g_sten12_d_mask_o[l_ac].* =  g_sten12_d[l_ac].*
      CALL astt806_stkm_t_mask()
      LET g_sten12_d_mask_n[l_ac].* =  g_sten12_d[l_ac].*
   END FOR
   IF astt806_fill_chk(14) THEN
      IF (pi_idx = 14 OR pi_idx = 0 ) AND g_sten2_d.getLength() > 0 THEN
        CALL g_sten14_d.clear()
        #取得該單身上階單身的idx
        LET g_detail_idx = g_detail_idx_list[4]
        LET g_sql = "SELECT DISTINCT stkm003,stael003,stae004,stae012,sthb006,SUM(stkm007),SUM(stkm008),SUM(stkm009),SUM(stkm010),
                                SUM(stkm011),SUM(stkm012),SUM(stkm013),SUM(stkm014) FROM stke_t,stkm_t",
                     "  LEFT JOIN stae_t ON staeent = stkment AND stae001 = stkm003 ",
                     "  LEFT JOIN stael_t ON staelent = stkment AND stael001 = stkm003 AND stael002='"||g_dlang||"',sthb_t",
                     " WHERE stkment=? AND stkmdocno=? AND stkm001 = ?",
                     "   AND stkeent = stkment AND stkedocno = stkmdocno AND stke001 = stkm001 ",
                     "   AND sthbent = stkment AND sthb001 = stke003 AND sthb002 = stkm003 ",
                     " GROUP BY stkm003,stael003,stae004,stae012,sthb006 ",
                     " ORDER BY stkm003"                              
                            
         CALL g_sten14_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE astt806_pb15 FROM g_sql
         DECLARE b_fill_curs15 CURSOR FOR astt806_pb15
         
         OPEN b_fill_curs15 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001
         LET l_ac = 1
         FOREACH b_fill_curs15 INTO g_sten14_d[l_ac].stkf004_1,g_sten14_d[l_ac].stkf004_1_desc,g_sten14_d[l_ac].stae004_1,
                                    g_sten14_d[l_ac].stae012_1,g_sten14_d[l_ac].stkf002_1,g_sten14_d[l_ac].stkm007_1, 
                                    g_sten14_d[l_ac].stkm008_1,g_sten14_d[l_ac].stkm009_1,g_sten14_d[l_ac].stkm010_1,
                                    g_sten14_d[l_ac].stkm011_1,g_sten14_d[l_ac].stkm012_1,g_sten14_d[l_ac].stkm013_1,
                                    g_sten14_d[l_ac].stkm014_1
            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill11"
            LET g_sten14_d[l_ac].stkfseq_1 = l_ac
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code   = 9035 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
         CALL g_sten14_d.deleteElement(g_sten14_d.getLength())
 
      END IF
   END IF
   CALL astt806_b_fill3()
   CALL astt806_b_fill4()
   #end add-point
    
   LET l_ac = li_ac
   
   CALL astt806_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION astt806_fill_chk(ps_idx)
   #add-point:fill_chk段define(客製用) name="fill_chk.define_customerization"
   
   #end add-point
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fill_chk.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="fill_chk.before_chk"
   
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
      (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1')  AND 
      (cl_null(g_wc2_table3) OR g_wc2_table3.trim() = '1=1')  AND 
      (cl_null(g_wc2_table4) OR g_wc2_table4.trim() = '1=1')  AND 
      (cl_null(g_wc2_table5) OR g_wc2_table5.trim() = '1=1')  AND 
      (cl_null(g_wc2_table6) OR g_wc2_table6.trim() = '1=1')  AND 
      (cl_null(g_wc2_table7) OR g_wc2_table7.trim() = '1=1')  AND 
      (cl_null(g_wc2_table8) OR g_wc2_table8.trim() = '1=1')  AND 
      (cl_null(g_wc2_table9) OR g_wc2_table9.trim() = '1=1')  AND 
      (cl_null(g_wc2_table10) OR g_wc2_table10.trim() = '1=1')  AND 
      (cl_null(g_wc2_table11) OR g_wc2_table11.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk name="fill_chk.other_chk"
      
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk name="fill_chk.after_chk"
   
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="astt806.status_show" >}
PRIVATE FUNCTION astt806_status_show()
   #add-point:status_show段define(客製用) name="status_show.define_customerization"
   
   #end add-point
   #add-point:status_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="status_show.define"
   
   #end add-point
   
   #add-point:status_show段status_show name="status_show.status_show"
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="astt806.mask_functions" >}
&include "erp/ast/astt806_mask.4gl"
 
{</section>}
 
{<section id="astt806.signature" >}
   #應用 a39 樣板自動產生(Version:10)
#+ BPM提交
PRIVATE FUNCTION astt806_send()
   #add-point:send段define(客製用) name="send.define_customerization"
   
   #end add-point 
   #add-point:send段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="send.define"
   DEFINE l_success  LIKE type_t.num5
   #end add-point 
   
   #add-point:Function前置處理  name="send.pre_function"
   
   #end add-point
   
   #依據單據個數，需要指定所有單身條件為" 1=1"  (單身有幾個就要設幾個)
   LET g_wc2_table1 = " 1=1"
   LET g_wc2_table2 = " 1=1"
 
 
   CALL astt806_show()
   CALL astt806_set_pk_array()
   
   #add-point: 初始化的ADP name="send.before_send"
   #170117-00025#1 -s by 08172
   CALL s_astt806_conf_chk(g_stem_m.stemdocno) RETURNING l_success
   IF NOT l_success THEN
      CLOSE astt806_cl
      CALL s_transaction_end('N','0')
      RETURN FALSE
   END IF
   #170117-00025#1 -e by 08172   
   #end add-point
   
   #公用變數初始化
   CALL cl_bpm_data_init()
                  
   #依照主檔/單身個數產生 CALL cl_bpm_set_master_data() / cl_bpm_set_detail_data() 
   #單頭固定為 CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(xxxx)) 傳入參數: (1)單頭陣列  ; 回傳值: 無
   CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(g_stem_m))
                              
   #單身固定為 CALL cl_bpm_set_detail_data(s_detailX, util.JSONArray.fromFGL(xxxx)) 傳入參數: (1)單身SR名稱  (2)單身陣列  ; 回傳值: 無
   CALL cl_bpm_set_detail_data("s_detail1", util.JSONArray.fromFGL(g_sten_d))
   CALL cl_bpm_set_detail_data("s_detail15", util.JSONArray.fromFGL(g_sten15_d))
   CALL cl_bpm_set_detail_data("s_detail16", util.JSONArray.fromFGL(g_sten16_d))
   CALL cl_bpm_set_detail_data("s_detail2", util.JSONArray.fromFGL(g_sten2_d))
   CALL cl_bpm_set_detail_data("s_detail3", util.JSONArray.fromFGL(g_sten3_d))
   CALL cl_bpm_set_detail_data("s_detail4", util.JSONArray.fromFGL(g_sten4_d))
   CALL cl_bpm_set_detail_data("s_detail5", util.JSONArray.fromFGL(g_sten5_d))
   CALL cl_bpm_set_detail_data("s_detail6", util.JSONArray.fromFGL(g_sten6_d))
   CALL cl_bpm_set_detail_data("s_detail7", util.JSONArray.fromFGL(g_sten7_d))
   CALL cl_bpm_set_detail_data("s_detail8", util.JSONArray.fromFGL(g_sten8_d))
   CALL cl_bpm_set_detail_data("s_detail9", util.JSONArray.fromFGL(g_sten9_d))
 
 
   # cl_bpm_cli() 裡有包含以前的aws_condition()=>送簽資料檢核和更新單據狀況碼為'W'
   # cl_bpm_cli() 傳入參數:無  ;  回傳值: 0 開單失敗; 1 開單成功
 
   #add-point: 提交前的ADP name="send.before_cli"
   #170117-00025#1 -s by 08172
   CALL cl_bpm_set_detail_data("s_detail11", util.JSONArray.fromFGL(g_sten11_d))
   CALL cl_bpm_set_detail_data("s_detail12", util.JSONArray.fromFGL(g_sten12_d))
   CALL cl_bpm_set_detail_data("s_detail13", util.JSONArray.fromFGL(g_sten13_d))
   CALL cl_bpm_set_detail_data("s_detail17", util.JSONArray.fromFGL(g_sten14_d))
   #170117-00025#1 -e by 08172
   #end add-point
 
   #開單失敗
   IF NOT cl_bpm_cli() THEN 
      RETURN FALSE
   END IF
 
   #add-point: 提交後的ADP name="send.after_send"
   
   #end add-point
 
   #此段落不需要刪除資料,但是否需要refresh圖片樣式???
   #CALL astt806_ui_browser_refresh()
 
   #重新指定此筆單據資料狀態圖片=>送簽中
   LET g_browser[g_current_idx].b_statepic = "stus/16/signing.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL astt806_ui_headershow()
   CALL astt806_ui_detailshow()
 
   RETURN TRUE
   
END FUNCTION
 
 
 
#應用 a40 樣板自動產生(Version:9)
#+ BPM抽單
PRIVATE FUNCTION astt806_draw_out()
   #add-point:draw段define name="draw.define_customerization"
   
   #end add-point
   #add-point:draw段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="draw.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="draw.pre_function"
   
   #end add-point
   
   #抽單失敗
   IF NOT cl_bpm_draw_out() THEN 
      RETURN FALSE
   END IF    
          
   #重新指定此筆單據資料狀態圖片=>抽單
   LET g_browser[g_current_idx].b_statepic = "stus/16/draw_out.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL astt806_ui_headershow()  
   CALL astt806_ui_detailshow()
 
   #add-point:Function後置處理  name="draw.after_function"
   
   #end add-point
 
   RETURN TRUE
   
END FUNCTION
 
 
 
 
 
{</section>}
 
{<section id="astt806.set_pk_array" >}
   #應用 a51 樣板自動產生(Version:8)
#+ 給予pk_array內容
PRIVATE FUNCTION astt806_set_pk_array()
   #add-point:set_pk_array段define name="set_pk_array.define_customerization"
   
   #end add-point
   #add-point:set_pk_array段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_pk_array.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="set_pk_array.before"
   
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_stem_m.stemdocno
   LET g_pk_array[1].column = 'stemdocno'
 
   
   #add-point:set_pk_array段之後 name="set_pk_array.after"
   
   #end add-point  
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="astt806.other_dialog" readonly="Y" >}
   
 
{</section>}
 
{<section id="astt806.msgcentre_notify" >}
#應用 a66 樣板自動產生(Version:6)
PRIVATE FUNCTION astt806_msgcentre_notify(lc_state)
   #add-point:msgcentre_notify段define name="msgcentre_notify.define_customerization"
   
   #end add-point   
   DEFINE lc_state LIKE type_t.chr80
   #add-point:msgcentre_notify段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="msgcentre_notify.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="msgcentre_notify.pre_function"
   
   #end add-point
   
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = lc_state
 
   #PK資料填寫
   CALL astt806_set_pk_array()
   #單頭資料填寫
   LET g_msgparam.data[1] = util.JSON.stringify(g_stem_m)
 
   #add-point:msgcentre其他通知 name="msgcentre_notify.process"
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="astt806.action_chk" >}
#+ 修改/刪除前行為檢查(是否可允許此動作), 若有其他行為須管控也可透過此段落
PRIVATE FUNCTION astt806_action_chk()
   #add-point:action_chk段define(客製用) name="action_chk.define_customerization"
   
   #end add-point
   #add-point:action_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="action_chk.define"
   
   #end add-point
   
   #add-point:action_chk段action_chk name="action_chk.action_chk"
   
   #end add-point
      
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="astt806.other_function" readonly="Y" >}

################################################################################
# Descriptions...: 判断同一费用编号的日期区间不可重复
# Memo...........:
# Usage..........: CALL astt806_chk_sten002()
# Date & Author..: 20160725  By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_chk_sten002()
DEFINE l_n      LIKE type_t.num5
   
   IF cl_null(g_sten_d[l_ac].sten002) OR cl_null(g_sten_d[l_ac].sten003) OR
      cl_null(g_sten_d[l_ac].sten004) THEN
      RETURN TRUE
   END IF
   LET l_n = 0

   SELECT COUNT(*) INTO l_n
        FROM sten_t
       WHERE stenent = g_enterprise
         AND stendocno = g_stem_m.stemdocno
         AND sten002 = g_sten_d[l_ac].sten002
         AND stenseq <> g_sten_d[l_ac].stenseq
    GROUP BY sten003,sten004
      HAVING ((sten003 <= g_sten_d[l_ac].sten003 AND sten004 >= g_sten_d[l_ac].sten003)
          OR (sten003 <= g_sten_d[l_ac].sten004 AND sten004 >= g_sten_d[l_ac].sten004) 
          OR (sten003 <= g_sten_d[l_ac].sten003 AND sten004 >= g_sten_d[l_ac].sten004)
          OR (sten003 >= g_sten_d[l_ac].sten003 AND sten004 <= g_sten_d[l_ac].sten004))
   
      
   IF l_n > 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = ""
      LET g_errparam.code   = 'ast-00237'
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      RETURN FALSE
   END IF
   
   RETURN TRUE
END FUNCTION

################################################################################
# Descriptions...: 合同编号检查
# Memo...........:
# Usage..........: CALL astt806_stke001_chk(p_stke001)
#                  RETURNING 回传参数
# Input parameter: p_stke001      合同编号
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 20160726 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stke001_chk(p_stke001)
DEFINE p_stke001   LIKE stke_t.stke001
DEFINE l_stjestus  LIKE stje_t.stjestus
DEFINE l_n         LIKE type_t.num5 
DEFINE l_n1        LIKE type_t.num5 
DEFINE l_cnt        LIKE type_t.num5 
   SELECT stjestus INTO l_stjestus FROM stje_t WHERE stjeent = g_enterprise AND stje001 = p_stke001
   IF STATUS = 100 OR cl_null(l_stjestus) THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00660'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()
   
      RETURN FALSE
   END IF
   IF l_stjestus <> 'Y' THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'aap-00017'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()
   
      RETURN FALSE
   END IF
   
   LET l_n = 0 
   SELECT COUNT(*) 
     INTO l_n 
     FROM stje_t 
    WHERE stjeent = g_enterprise 
      AND stje001 = p_stke001
      AND stjestus = 'Y'
      AND stje005 IN ('2','3','4','5')
   IF l_n = 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00852'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF   
      
   LET l_n = 0
   SELECT COUNT(*) INTO l_n FROM stke_t
    WHERE stkeent = g_enterprise 
      AND stke001 = p_stke001 
      AND EXISTS (SELECT 1 FROM stem_t WHERE stement = stkeent AND stkedocno = stemdocno  AND stemstus  = 'N')
      AND stkedocno <> g_stem_m.stemdocno
   
   LET l_n1 = 0
   SELECT COUNT(*) INTO l_n1 FROM stie_t
    WHERE stieent = g_enterprise 
      AND stie001 = p_stke001 
      AND (stiestus = 'N' OR stiestus = 'TP')
      
   IF l_n > 0 OR l_n1 > 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'ast-00141'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF
   #批量续签
   IF g_stem_m.stem035 = '1' THEN
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt 
        FROM stje_t 
       WHERE stjeent = g_enterprise 
         AND stje001 = p_stke001
         AND stje012 < g_stem_m.stem036 
      IF l_cnt = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'ast-00841'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()
         
         RETURN FALSE
      END IF
   END IF
   #批量延期
   IF g_stem_m.stem035 = '2' THEN
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt 
        FROM stje_t 
       WHERE stjeent = g_enterprise 
         AND stje001 = p_stke001
         AND stje012 < g_stem_m.stem036 
      IF l_cnt = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'ast-00842'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()
         
         RETURN FALSE
      END IF
   END IF
   #批量优惠变更
   IF g_stem_m.stem035 = '3' THEN
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt 
        FROM stje_t 
       WHERE stjeent = g_enterprise 
         AND stje001 = p_stke001
         AND stje012 >= g_stem_m.stem036 
         AND stje011 <= g_stem_m.stem036 
      IF l_cnt = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'ast-00843'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()
         
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE
END FUNCTION

################################################################################
# Descriptions...: 合同带出单头其他栏位
# Memo...........:
# Usage..........: CALL astt806_stke001_other()
#                  RETURNING 回传参数
# Date & Author..: 20160726 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stke001_other()
   SELECT NVL(stje002+1,2),stje003,stje004,stje005,stje006,stje007,stje008,stje009,stje010,
          stje011,stje012,stje013,stje014,stje015,stje016,stje017,stje018,stje019,stje020,
          stje021,stje022,stje023,stje024,stje025,stje026,stje028,stje029,stje030,
          stje031,stje032,stje033,stje034,stje035,stje036,stje037,stje038,stje039,stje040,
          stje041,stje042,stje043,stje044,stje045,stje046,stje047,stje048,stje049,stjesite,stjeunit
          
     INTO                  g_sten2_d[l_ac].stke002,g_sten2_d[l_ac].stke003,g_sten2_d[l_ac].stke004,g_sten2_d[l_ac].stke005,
          g_sten2_d[l_ac].stke006,g_sten2_d[l_ac].stke007,g_sten2_d[l_ac].stke008,g_sten2_d[l_ac].stke009,g_sten2_d[l_ac].stke010,
          g_sten2_d[l_ac].stke011,g_sten2_d[l_ac].stke012,g_sten2_d[l_ac].stke013,g_sten2_d[l_ac].stke014,g_sten2_d[l_ac].stke015,
          g_sten2_d[l_ac].stke016,g_sten2_d[l_ac].stke017,g_sten2_d[l_ac].stke018,g_sten2_d[l_ac].stke019,g_sten2_d[l_ac].stke020,
          g_sten2_d[l_ac].stke021,g_sten2_d[l_ac].stke022,g_sten2_d[l_ac].stke223,g_sten2_d[l_ac].stke224,g_sten2_d[l_ac].stke225,
          g_sten2_d[l_ac].stke026,g_sten2_d[l_ac].stke028,g_sten2_d[l_ac].stke029,g_sten2_d[l_ac].stke030,
          g_sten2_d[l_ac].stke031,g_sten2_d[l_ac].stke032,g_sten2_d[l_ac].stke033,g_sten2_d[l_ac].stke034,g_sten2_d[l_ac].stke035,
          g_sten2_d[l_ac].stke036,g_sten2_d[l_ac].stke037,g_sten2_d[l_ac].stke038,g_sten2_d[l_ac].stke039,g_sten2_d[l_ac].stke040,
          g_sten2_d[l_ac].stke041,g_sten2_d[l_ac].stke042,g_sten2_d[l_ac].stke043,g_sten2_d[l_ac].stke044,g_sten2_d[l_ac].stke045,
          g_sten2_d[l_ac].stke046,g_sten2_d[l_ac].stke047,g_sten2_d[l_ac].stke048,g_sten2_d[l_ac].stke049,g_sten2_d[l_ac].stkesite,
          g_sten2_d[l_ac].stkeunit
     FROM stje_t                                       
    WHERE stjeent = g_enterprise AND stje001 = g_sten2_d[l_ac].stke001      
   LET g_sten2_d[l_ac].stke002 = g_sten2_d[l_ac].stke002 USING "<<<<<<<<<#"   
   LET g_sten2_d[l_ac].stke023 = g_sten2_d[l_ac].stke223
   LET g_sten2_d[l_ac].stke024 = g_sten2_d[l_ac].stke224
   LET g_sten2_d[l_ac].stke025 = g_sten2_d[l_ac].stke225
   #续签
   IF g_stem_m.stem035 = '1'  THEN
      IF g_sten2_d[l_ac].stke044 IS NULL THEN
         LET g_sten2_d[l_ac].stke044 = g_sten2_d[l_ac].stke011  
      END IF   
      LET g_sten2_d[l_ac].stke011 = g_sten2_d[l_ac].stke012+1 
      LET g_sten2_d[l_ac].stke013 = 0 
      LET g_sten2_d[l_ac].stke041 = g_sten2_d[l_ac].stke012+1
      LET g_sten2_d[l_ac].stke042 = g_sten2_d[l_ac].stke012+1
      LET g_sten2_d[l_ac].stke012 = g_stem_m.stem036
      LET g_sten2_d[l_ac].stke043 = ''  
     
      LET g_sten2_d[l_ac].stke000 = 'R'
   END IF
   #延期
   IF g_stem_m.stem035 = '2'  THEN
      LET g_sten2_d[l_ac].stke041 = g_sten2_d[l_ac].stke012+1
      LET g_sten2_d[l_ac].stke043 = g_stem_m.stem036
      LET g_sten2_d[l_ac].stke000 = 'B'
   END IF
   #优惠变更
   IF g_stem_m.stem035 = '3'  THEN
      LET g_sten2_d[l_ac].stke041 = g_stem_m.stem036
      LET g_sten2_d[l_ac].stke000 = 'A'
   END IF
   LET g_sten2_d[l_ac].stke200 = g_stem_m.stemdocno
   DISPLAY BY NAME  g_sten2_d[l_ac].stke000,g_sten2_d[l_ac].stke002,g_sten2_d[l_ac].stke003,g_sten2_d[l_ac].stke004,g_sten2_d[l_ac].stke005,
   g_sten2_d[l_ac].stke006,g_sten2_d[l_ac].stke007,g_sten2_d[l_ac].stke008,g_sten2_d[l_ac].stke009,g_sten2_d[l_ac].stke010,
   g_sten2_d[l_ac].stke011,g_sten2_d[l_ac].stke012,g_sten2_d[l_ac].stke013,g_sten2_d[l_ac].stke014,g_sten2_d[l_ac].stke015,
   g_sten2_d[l_ac].stke016,g_sten2_d[l_ac].stke017,g_sten2_d[l_ac].stke018,g_sten2_d[l_ac].stke019,g_sten2_d[l_ac].stke020,
   g_sten2_d[l_ac].stke021,g_sten2_d[l_ac].stke022,g_sten2_d[l_ac].stke223,g_sten2_d[l_ac].stke224,g_sten2_d[l_ac].stke225,
   g_sten2_d[l_ac].stke026,g_sten2_d[l_ac].stke028,g_sten2_d[l_ac].stke029,g_sten2_d[l_ac].stke030,
   g_sten2_d[l_ac].stke031,g_sten2_d[l_ac].stke032,g_sten2_d[l_ac].stke033,g_sten2_d[l_ac].stke034,g_sten2_d[l_ac].stke035,
   g_sten2_d[l_ac].stke036,g_sten2_d[l_ac].stke037,g_sten2_d[l_ac].stke038,g_sten2_d[l_ac].stke039,g_sten2_d[l_ac].stke040,
   g_sten2_d[l_ac].stke041,g_sten2_d[l_ac].stke042,g_sten2_d[l_ac].stke043,g_sten2_d[l_ac].stke044,g_sten2_d[l_ac].stke045,
   g_sten2_d[l_ac].stke046,g_sten2_d[l_ac].stke047,g_sten2_d[l_ac].stke048,g_sten2_d[l_ac].stke049,
   g_sten2_d[l_ac].stke023,g_sten2_d[l_ac].stke024,g_sten2_d[l_ac].stke025,g_sten2_d[l_ac].stke200
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stkesite
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stkesite_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stkesite_desc
   
   CALL astt806_stke007_ref()
   CALL astt806_stke008_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke017
   CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke017_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke017_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke018
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke018_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke018_desc
   
   CALL astt806_stke019_ref()
   CALL astt806_stke020_ref()
   CALL astt806_stke021_ref()
   CALL astt806_stke022_ref()
#   INITIALIZE g_ref_fields TO NULL
#   LET g_ref_fields[1] = g_sten2_d[l_ac].stke027
#   CALL ap_ref_array2(g_ref_fields,"SELECT rtaxl003 FROM rtaxl_t WHERE rtaxlent='"||g_enterprise||"' AND rtaxl001=? AND rtaxl002='"||g_dlang||"'","") RETURNING g_rtn_fields
#   LET g_sten2_d[l_ac].stke027_desc = '', g_rtn_fields[1] , ''
#   DISPLAY BY NAME g_sten2_d[l_ac].stke027_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke028
   CALL ap_ref_array2(g_ref_fields,"SELECT rtaxl003 FROM rtaxl_t WHERE rtaxlent='"||g_enterprise||"' AND rtaxl001=? AND rtaxl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke028_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke028_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke029
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2002' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke029_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke029_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke030
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke030_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke030_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke031
   CALL ap_ref_array2(g_ref_fields,"SELECT staal003 FROM staal_t WHERE staalent='"||g_enterprise||"' AND staal001=? AND staal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke031_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke031_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke032
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2060' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke032_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke032_desc
   
   CALL astt806_stke034_ref()
   CALL astt806_stke035_ref()
   CALL astt806_stke036_ref()
   CALL astt806_stke038_ref()
#   CALL s_desc_get_invoice_type_desc1(g_sten2_d[l_ac].stkesite,g_sten2_d[l_ac].stke039) RETURNING g_sten2_d[l_ac].stke039_desc
#   DISPLAY BY NAME g_sten2_d[l_ac].stke039_desc 
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke007_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke007
   CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke007_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke007_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke008_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke008
   CALL ap_ref_array2(g_ref_fields,"SELECT mhbel003 FROM mhbel_t WHERE mhbelent='"||g_enterprise||"' AND mhbel001=? AND mhbel002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke008_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke008_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke019_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
   CALL ap_ref_array2(g_ref_fields,"SELECT mhaal003 FROM mhaal_t WHERE mhaalent='"||g_enterprise||"' AND mhaal001=? AND mhaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke019_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke019_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke020_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
   LET g_ref_fields[2] = g_sten2_d[l_ac].stke020
   CALL ap_ref_array2(g_ref_fields,"SELECT mhabl004 FROM mhabl_t WHERE mhablent='"||g_enterprise||"' AND mhabl001=? AND mhabl002=? AND mhabl003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke020_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke020_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke021_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke019
   LET g_ref_fields[2] = g_sten2_d[l_ac].stke020
   LET g_ref_fields[3] = g_sten2_d[l_ac].stke021
   CALL ap_ref_array2(g_ref_fields,"SELECT mhacl005 FROM mhacl_t WHERE mhaclent='"||g_enterprise||"' AND mhacl001=? AND mhacl002=? AND mhacl003=? AND mhacl004='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke021_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke021_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke022_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke022
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='2144' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke022_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke022_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke034_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke034
   CALL ap_ref_array2(g_ref_fields,"SELECT ooibl004 FROM ooibl_t WHERE ooiblent='"||g_enterprise||"' AND ooibl002=? AND ooibl003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke034_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke034_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke035_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke035
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='238' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke035_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke035_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke036_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_sten2_d[l_ac].stke036
   CALL ap_ref_array2(g_ref_fields,"SELECT ooail003 FROM ooail_t WHERE ooailent='"||g_enterprise||"' AND ooail001=? AND ooail002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_sten2_d[l_ac].stke036_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_sten2_d[l_ac].stke036_desc
END FUNCTION

################################################################################

################################################################################
PRIVATE FUNCTION astt806_stke038_ref()
  SELECT oodbl004 INTO g_sten2_d[l_ac].stke038_desc
    FROM oodbl_t,ooef_t
   WHERE oodblent = g_enterprise
     AND oodbl001 = ooef019 
     AND oodbl002 = g_sten2_d[l_ac].stke038
     AND oodbl003 = g_dlang
     AND ooefent = g_enterprise
     AND ooef001 = g_sten2_d[l_ac].stkesite  
   DISPLAY BY NAME g_sten2_d[l_ac].stke038_desc
END FUNCTION

################################################################################
# Descriptions...: 通过合同产生合同单身
# Memo...........:
# Usage..........: CALL astt806_stke001_genb(p_choice)
#                  RETURNING 回传参数
# Input parameter: p_choice       续签产生资料的方式 1.重取标准 2.原合同
# Date & Author..: 20160726 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stke001_genb(p_choice)
DEFINE  p_choice              LIKE type_t.chr10 #续签的时候1重取标准2沿用旧的方案     
      DELETE FROM stkf_t WHERE stkfent = g_enterprise AND stkfdocno = g_stem_m.stemdocno AND stkf001 = g_sten2_d[l_ac].stke001
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkf_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkg_t WHERE stkgent = g_enterprise AND stkgdocno = g_stem_m.stemdocno  AND stkg001 = g_sten2_d[l_ac].stke001    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkg_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkh_t WHERE stkhent = g_enterprise AND stkhdocno = g_stem_m.stemdocno AND stkh001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkh_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stki_t WHERE stkient = g_enterprise AND stkidocno = g_stem_m.stemdocno AND stki001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stee'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkj_t WHERE stkjent = g_enterprise AND stkjdocno = g_stem_m.stemdocno AND stkj001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkj_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkk_t WHERE stkkent = g_enterprise AND stkkdocno = g_stem_m.stemdocno AND stkk001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkk_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkl_t WHERE stklent = g_enterprise AND stkldocno = g_stem_m.stemdocno AND stkl001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkl_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkm_t WHERE stkment = g_enterprise AND stkmdocno = g_stem_m.stemdocno AND stkm001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkm_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stkn_t WHERE stknent = g_enterprise AND stkndocno = g_stem_m.stemdocno AND stkn001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stkn_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
      DELETE FROM stko_t WHERE stkoent = g_enterprise AND stkodocno = g_stem_m.stemdocno AND stko001 = g_sten2_d[l_ac].stke001
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'del stko_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
      
   #续签的合同不自动从合同带出 
   IF g_stem_m.stem035 <> '1' THEN #add by geza 20160803 #160728-00006#16 
      INSERT INTO stkf_t
                  (stkfent,stkf001,stkfseq,stkf002,stkf003,stkf004,stkf005,stkf006,stkf007,
                   stkf008,stkf009,stkf010,stkf011,stkf012,stkf013,stkf014,stkf015,stkf016,stkf017,
                   stkf018,stkf019,stkf020,stkf021,stkf022,stkf023,stkf024,stkf025,stkfsite,stkfunit,stkfdocno) 
              SELECT stjfent,stjf001,stjfseq,stjf002,stjf003,stjf004,stjf005,stjf006,stjf007,
                     stjf008,stjf009,stjf010,stjf011,stjf012,stjf013,stjf014,stjf015,stjf016,stjf017,
                     stjf018,stjf019,stjf020,stjf021,stjf022,stjf023,stjf024,stjf025,stjfsite,stjfunit,g_stem_m.stemdocno 
                FROM stjf_t
               WHERE stjfent = g_enterprise 
                 AND stjf001 = g_sten2_d[l_ac].stke001
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'Ins stkf_t err'
         LET g_errparam.popup = TRUE
         CALL cl_err()
         RETURN FALSE
      END IF      
         
      INSERT INTO stkg_t
                  (stkgent,stkgseq,stkgseq1,stkg001,stkg002,stkg003,stkg004,stkg005,stkg006,stkg007,stkgsite,stkgunit,stkgdocno)
      SELECT stjgent,stjgseq,stjgseq1,stjg001,stjg002,stjg003,stjg004,stjg005,stjg006,stjg007,stjgsite,stjgunit,g_stem_m.stemdocno   
        FROM stjg_t
       WHERE stjgent = g_enterprise AND stjg001 = g_sten2_d[l_ac].stke001
      
       IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'Ins stkg_t err'
         LET g_errparam.popup = TRUE
         CALL cl_err()
       
         RETURN FALSE
      END IF
   
      INSERT INTO stkh_t
                  (stkhent,stkhseq,stkh001,stkh002,stkh003,stkh004,stkh005,stkh006,stkh007,stkh008,stkhsite,stkhunit,stkhdocno)
              SELECT stjhent,stjhseq,stjh001,stjh002,stjh003,stjh004,stjh005,stjh006,stjh007,stjh008,stjhsite,stjhunit,g_stem_m.stemdocno     
                FROM stjh_t
               WHERE stjhent = g_enterprise AND stjh001 = g_sten2_d[l_ac].stke001
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'Ins stkh_t err'
         LET g_errparam.popup = TRUE
         CALL cl_err()
       
         RETURN FALSE
      END IF
   END IF
   
   IF g_stem_m.stem035 = '1' AND ( p_choice = '1' AND p_choice IS NOT NULL ) THEN
   
   ELSE
      INSERT INTO stki_t
                  (stkient,stkiseq,stki001,stki002,stki003,stki004,stki005,stki006,stki007,stki008,stki009,stki010,stkisite,stkiunit,stkidocno)           
              SELECT stjient,stjiseq,stji001,stji002,stji003,stji004,stji005,stji006,stji007,stji008,stji009,stji010,stjisite,stjiunit,g_stem_m.stemdocno   
                FROM stji_t
               WHERE stjient = g_enterprise AND stji001 = g_sten2_d[l_ac].stke001
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'Ins stki_t err'
         LET g_errparam.popup = TRUE
         CALL cl_err()
       
         RETURN FALSE
      END IF
   END IF
   
   INSERT INTO stkj_t
                 (stkjent,stkjseq,stkjacti,stkj001,stkj002,stkj003,stkj004,stkj005,stkj006,stkj007,stkj008,stkj009,stkjsite,stkjunit,stkjdocno)
           SELECT stjjent,stjjseq,stjjacti,stjj001,stjj002,stjj003,stjj004,stjj005,stjj006,stjj007,stjj008,stjj009,stjjsite,stjjunit,g_stem_m.stemdocno 
             FROM stjj_t
            WHERE stjjent = g_enterprise AND stjj001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stkj_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF
      
   INSERT INTO stkk_t
               (stkkent,stkkseq,stkkacti,stkk001,stkk002,stkk003,stkk004,stkk005,stkksite,stkkunit,stkkdocno)               
           SELECT stjkent,stjkseq,stjkacti,stjk001,stjk002,stjk003,stjk004,stjk005,stjksite,stjkunit,g_stem_m.stemdocno 
             FROM stjk_t
            WHERE stjkent = g_enterprise AND stjk001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stkk_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF
      
   INSERT INTO stkl_t
              (stklent,stklseq,stkl001,stkl002,stkl003,stkl004,stkl005,stkl006,stkl007,stkl008,stklsite,stklunit,stkldocno) 
        SELECT stjlent,stjlseq,stjl001,stjl002,stjl003,stjl004,stjl005,stjl006,stjl007,stjl008,stjlsite,stjlunit,g_stem_m.stemdocno 
          FROM stjl_t
         WHERE stjlent = g_enterprise AND stjl001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stkl_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF
      
   INSERT INTO stkm_t
                  (stkment,stkmseq,stkm001,stkm002,stkm003,stkm004,stkm005,stkm006,stkm007,stkm008,stkm009,stkm010,
                  stkm011,stkm012,stkm013,stkm014,stkm015,stkm016,stkm017,stkm018,stkm019,stkmsite,stkmunit,stkmdocno)          
           SELECT stjment,stjmseq,stjm001,stjm002,stjm003,stjm004,stjm005,stjm006,stjm007,stjm008,stjm009,stjm010,
                  stjm011,stjm012,stjm013,stjm014,stjm015,stjm016,stjm017,stjm018,stjm019,stjmsite,stjmunit,g_stem_m.stemdocno            
             FROM stjm_t
            WHERE stjment = g_enterprise AND stjm001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stkm_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF
      
   INSERT INTO stkn_t
               (stknent,stknseq,stkn001,stkn002,stkn003,stkn004,stkn005,stkn006,stkn007,stkn008,stkn009,stkn010,stknsite,stknunit,stkndocno)
           SELECT stjnent,stjnseq,stjn001,stjn002,stjn003,stjn004,stjn005,stjn006,stjn007,stjn008,stjn009,stjn010,stjnsite,stjnunit,g_stem_m.stemdocno   
             FROM stjn_t
            WHERE stjnent = g_enterprise AND stjn001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stkn_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF  
   
   INSERT INTO stko_t
               (stkoent,stkoseq,stko001,stko002,stko003,stko004,stko005,stko006,stko007,stkosite,stkounit,stkodocno)
           SELECT stjoent,stjoseq,stjo001,stjo002,stjo003,stjo004,stjo005,stjo006,stjo007,stjosite,stjounit,g_stem_m.stemdocno   
             FROM stjo_t
            WHERE stjoent = g_enterprise AND stjo001 = g_sten2_d[l_ac].stke001
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'Ins stko_t err'
      LET g_errparam.popup = TRUE
      CALL cl_err()
    
      RETURN FALSE
   END IF  
   
   RETURN TRUE
END FUNCTION

################################################################################
# Descriptions...: 固定费用分段扣率显示
# Memo...........:
# Usage..........: CALL astt806_b_fill3()
# Date & Author..: 20160729 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_b_fill3()
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE li_detail_idx2_tmp     LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"

   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"

   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   IF g_detail_idx2 <= 0 THEN
      RETURN
   END IF
   LET li_detail_idx_tmp = g_detail_idx 
   LET li_detail_idx2_tmp = g_detail_idx2
   CALL cl_set_comp_visible('group_8',FALSE)
   IF g_sten3_d.getLength() > 0 THEN
      CALL g_sten11_d.clear()
    
      
      #取得該單身上階單身的idx
      LET g_detail_idx = g_detail_idx_list[4]
      LET g_detail_idx2 = g_detail_idx_list[5]
      LET g_sql = "SELECT  DISTINCT stkgseq1,stkg002,stkg003,stkg004,stkg006  FROM stkg_t", 
              
                  
                  " WHERE stkgent=? AND stkgdocno=? AND stkg001 =? AND stkgseq=?"
      
      IF NOT cl_null(g_wc2_table13) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table13 CLIPPED
      END IF
      
      LET g_sql = g_sql, " ORDER BY  stkg_t.stkgseq1" 
                         
      #add-point:單身填充前 name="b_fill2.before_fill9"
      IF g_sten3_d[g_detail_idx2].stkf016 = '1' THEN
         CALL cl_set_comp_visible('group_8',FALSE)
      ELSE
         CALL cl_set_comp_visible('group_8',TRUE)
      END IF 
      #end add-point
      
      #先清空資料
      CALL g_sten11_d.clear()
    
      
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      PREPARE astt806_pb13 FROM g_sql
      DECLARE b_fill_curs13 CURSOR FOR astt806_pb13
      
      OPEN b_fill_curs13 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten3_d[g_detail_idx2].stkfseq
      LET l_ac = 1
      FOREACH b_fill_curs13 INTO g_sten11_d[l_ac].stkgseq1,g_sten11_d[l_ac].stkg002,
                                 g_sten11_d[l_ac].stkg003,g_sten11_d[l_ac].stkg004,
                                 g_sten11_d[l_ac].stkg006  
    
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
         #add-point:b_fill段資料填充 name="b_fill2.fill9"
    
         #end add-point
        
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code   = 9035 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
         
      END FOREACH
      CALL g_sten11_d.deleteElement(g_sten11_d.getLength())
    
   END IF

 
 
      
   LET g_sten11_d_mask_o.* =  g_sten11_d.*
   FOR l_ac = 1 TO g_sten11_d.getLength()
      LET g_sten11_d_mask_o[l_ac].* =  g_sten11_d[l_ac].*
      #CALL astt806_stkg_t_mask()
      LET g_sten11_d_mask_n[l_ac].* =  g_sten11_d[l_ac].*
   END FOR
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"

   #end add-point
    
   LET l_ac = li_ac
   
   CALL astt806_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   LET g_detail_idx2 = li_detail_idx2_tmp
   
END FUNCTION

################################################################################
# Descriptions...: 变动费用分段扣率显示
# Memo...........:
# Usage..........: CALL astt806_b_fill4()
# Date & Author..: 20160729 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_b_fill4()
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE li_detail_idx2_tmp     LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"

   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"

   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   IF g_detail_idx2 <= 0 THEN
      RETURN
   END IF
   LET li_detail_idx_tmp = g_detail_idx 
   LET li_detail_idx2_tmp = g_detail_idx2
   CALL cl_set_comp_visible('group_10',FALSE)
   IF g_sten12_d.getLength() > 0 THEN
      CALL g_sten13_d.clear()
    
      
      #取得該單身上階單身的idx
      LET g_detail_idx = g_detail_idx_list[4]
      LET g_detail_idx2 = g_detail_idx_list[12]
      LET g_sql = "SELECT  DISTINCT stkgseq1,stkg002,stkg003,stkg005,stkg007  FROM stkg_t", 
              
                  
                  " WHERE stkgent=? AND stkgdocno=? AND stkg001 =? AND stkgseq=?"
      
      IF NOT cl_null(g_wc2_table14) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table14 CLIPPED
      END IF
      
      LET g_sql = g_sql, " ORDER BY  stkg_t.stkgseq1" 
                         
      #add-point:單身填充前 name="b_fill2.before_fill9"
      IF g_sten12_d[g_detail_idx2].stkf016_2 = '1' THEN
         CALL cl_set_comp_visible('group_10',FALSE)
      ELSE
         CALL cl_set_comp_visible('group_10',TRUE)
      END IF 
      #end add-point
      
      #先清空資料
      CALL g_sten13_d.clear()
    
      
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      PREPARE astt806_pb14 FROM g_sql
      DECLARE b_fill_curs14 CURSOR FOR astt806_pb14
      
      OPEN b_fill_curs14 USING g_enterprise,g_stem_m.stemdocno,g_sten2_d[g_detail_idx].stke001,g_sten12_d[g_detail_idx2].stkfseq_2
      LET l_ac = 1
      FOREACH b_fill_curs14 INTO g_sten13_d[l_ac].stkgseq1_1,g_sten13_d[l_ac].stkg002_1,
                                 g_sten13_d[l_ac].stkg003_1,g_sten13_d[l_ac].stkg005_1,
                                 g_sten13_d[l_ac].stkg007_1 
    
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
         #add-point:b_fill段資料填充 name="b_fill2.fill9"
    
         #end add-point
        
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code   = 9035 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
         
      END FOREACH
      CALL g_sten13_d.deleteElement(g_sten13_d.getLength())
    
   END IF

 
 
      
   LET g_sten13_d_mask_o.* =  g_sten13_d.*
   FOR l_ac = 1 TO g_sten13_d.getLength()
      LET g_sten13_d_mask_o[l_ac].* =  g_sten13_d[l_ac].*
      #CALL astt806_stkg_t_mask()
      LET g_sten13_d_mask_n[l_ac].* =  g_sten13_d[l_ac].*
   END FOR
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"

   #end add-point
    
   LET l_ac = li_ac
   
   CALL astt806_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   LET g_detail_idx2 = li_detail_idx2_tmp
END FUNCTION

################################################################################
# Descriptions...: 新增定义账期单身
# Date & Author..: 20160812 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stki_insert(p_stke001)
DEFINE r_success   LIKE type_t.num5   
DEFINE l_sql       STRING 
DEFINE p_stke001   LIKE stke_t.stke001 
DEFINE l_stke003   LIKE stke_t.stke003 
   WHENEVER ERROR CALL cl_err_msg_log
   LET r_success = TRUE
   LET l_stke003 = ''
   #抓取合同单头字段
   SELECT stke003 INTO l_stke003
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
      AND stke001 = p_stke001
   #删除费用编号不存在于stkf但是在stki_t的资料
   DELETE FROM stki_t
    WHERE stkient = g_enterprise
      AND stkidocno = g_stem_m.stemdocno
      AND stki001 = p_stke001
      AND NOT EXISTS (SELECT 1 FROM stkf_t WHERE stkfent = g_enterprise AND stkfdocno = g_stem_m.stemdocno AND stki001 = stkf001 AND stkf004 = stki002)
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "del stki_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success      
   END IF 
   LET l_sql = " INSERT INTO stki_t ( ",
               "             stkient, ",
               "             stkisite, ",
               "             stkiunit, ",
               "             stkidocno, ", #单号
               "             stkiseq, ",   #项次
               "             stki001, ",   #合同
               "             stki002, ",   #费用编号
               "             stki003, ",   #结算方式
               "             stki004, ",   #出账期
               "             stki005, ",   #出账日
               "             stki006, ",   #核算制度
               "             stki007, ",   #纳入结算单否
               "             stki008, ",   #票扣否
               "             stki009, ",   #类型
               "             stki010 ) ",  #税种               #add by geza 20160615
                " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 stkfsite, ",
               "                 stkfunit, ", 
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(order by stkf004)+COALESCE((SELECT MAX(stkiseq) FROM stki_t WHERE stkient = ",g_enterprise,"  AND stkidocno = '",g_stem_m.stemdocno,"' AND stki001 = '",p_stke001,"' ),0), ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stkf004, ",                   #费用编号
               "                 sthb003, ",                   #结算方式
               "                 sthb007, ",                   #出账期 
               "                 sthb008, ",                   #出账日 
               "                 sthb005, ",                   #核算制度
               "                 stae011, ",                   #纳入结算单否 
               "                 stae007, ",                   #票扣否
               "                 bbb ,",                       #类型 
               "                 sthb012 FROM",                #税种   
               " (SELECT DISTINCT '",g_enterprise,"', ",                
               "                 stkfsite, ",
               "                 stkfunit, ",  
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(partition  by stkf004 order by stkf004) as aaa, ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stkf004, ",                   #费用编号
               "                 sthb003, ",                   #结算方式
               "                 sthb007, ",                   #出账期 
               "                 sthb008, ",                   #出账日 
               "                 sthb005, ",                   #核算制度
               "                 stae011, ",                   #纳入结算单否 
               "                 stae007, ",                   #票扣否
               "                 CASE stkf009 WHEN '2' THEN '2' ELSE '1' END as bbb ,",  #类型 
               "                 sthb012 ",                    #税种   
               "   FROM stkf_t LEFT JOIN stae_t ON (stkfent=staeent AND stkf004=stae001) ",
               "               LEFT JOIN sthb_t ON (stkfent=sthbent AND stkf004=sthb002 AND sthb001 = '",l_stke003,"')",
               "  WHERE stkfent = ",g_enterprise," ",
               "    AND stkfdocno = '",g_stem_m.stemdocno,"' ",
               "    AND stkf001 = '",p_stke001,"' ",
               "    AND NOT EXISTS (SELECT 1 FROM stki_t WHERE stkient = stkfent AND stkidocno = stkfdocno AND stkf001 = stki001 AND stkf004 = stki002) )",
               "  WHERE aaa = 1"
   PREPARE astt806_ins_stki FROM l_sql 
   EXECUTE astt806_ins_stki
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "ins_stki:astt806_ins_stki" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE
   END IF 
     
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 插入场地信息
# Memo...........:
# Date & Author..: 20160812 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stkj_insert(p_stke001)
DEFINE r_success   LIKE type_t.num5   
DEFINE l_sql       STRING   
DEFINE p_stke001   LIKE stke_t.stke001 
DEFINE l_stke002   LIKE stke_t.stke002
DEFINE l_stke008   LIKE stke_t.stke008
DEFINE l_stkesite  LIKE stke_t.stkesite
   WHENEVER ERROR CALL cl_err_msg_log

   LET r_success = TRUE
   LET l_stke002 = ''
   LET l_stke008 = ''
   LET l_stkesite = ''
   #抓取合同单头字段
   SELECT stke002,stke008,stkesite INTO l_stke002,l_stke008,l_stkesite
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
      AND stke001 = p_stke001
   #删除场地信息
   DELETE FROM stkj_t
    WHERE stkjent = g_enterprise
      AND stkjdocno = g_stem_m.stemdocno
      AND stkj001 = p_stke001
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "del stkj_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success      
   END IF 
   LET l_sql = " INSERT INTO stkj_t ( ",
               "             stkjent, ",
               "             stkjsite, ",
               "             stkjunit, ",
               "             stkjdocno, ", #单号
               "             stkjseq, ",   #项次
               "             stkjacti, ",  #有效否
               "             stkj001, ",   #合同
               "             stkj002, ",   #场地编号
               "             stkj003, ",   #建筑面积
               "             stkj004, ",   #测量面积
               "             stkj005, ",   #经营面积
               "             stkj006, ",   #楼栋编号
               "             stkj007, ",   #楼层编号
               "             stkj008, ",   #区域编号
               "             stkj009 ) ",  #合同版本
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(order by mhbf001,mhbf002), ",  #项次
               "                 mhbfstus, ",                  #有效否
               "                 '",p_stke001,"', ",           #合同
               "                 mhbf002, ",                   #场地编号
               "                 mhbf007, ",                   #建筑面积
               "                 mhbf008, ",                   #测量面积 
               "                 mhbf009, ",                   #经营面积 
               "                 mhbf004, ",                   #楼栋编号
               "                 mhbf005, ",                   #楼层编号 
               "                 mhbf006, ",                   #区域编号
               "                 '",l_stke002,"'  ",      #合同版本 
               "   FROM mhbf_t  ",
               "  WHERE mhbfent = ",g_enterprise," ",
               "    AND mhbf001 = '",l_stke008,"' "               
   PREPARE astt806_ins_stkj FROM l_sql 
   EXECUTE astt806_ins_stkj
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "ins_stkj:astt806_ins_stkj" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      LET r_success = FALSE
   END IF 
   #更新单头的面积
   UPDATE stke_t SET stke023 = (SELECT SUM(stkj003) FROM stkj_t WHERE stkjent =g_enterprise AND stkjdocno = g_stem_m.stemdocno AND stkj001 = p_stke001 ),
                     stke024 = (SELECT SUM(stkj004) FROM stkj_t WHERE stkjent =g_enterprise AND stkjdocno = g_stem_m.stemdocno AND stkj001 = p_stke001 ),
                     stke025 = (SELECT SUM(stkj005) FROM stkj_t WHERE stkjent =g_enterprise AND stkjdocno = g_stem_m.stemdocno AND stkj001 = p_stke001 )
    WHERE stkeent = g_enterprise 
      AND stkedocno = g_stem_m.stemdocno 
      AND stke001 = p_stke001      
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "update stke_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      LET r_success = FALSE
   END IF
   
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 插入优惠单身
# Memo...........:
# Date & Author..: 20160812 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stkh_insert(p_stke001)
DEFINE r_success   LIKE type_t.num5   
DEFINE l_sql       STRING   
DEFINE p_stke001   LIKE stke_t.stke001 
DEFINE l_amount    LIKE sten_t.sten005
DEFINE l_stke002   LIKE stke_t.stke002
DEFINE l_stke200   LIKE stke_t.stke200
DEFINE l_stkesite  LIKE stke_t.stkesite
DEFINE l_stkhseq   LIKE stkh_t.stkhseq
DEFINE l_stkh002   LIKE stkh_t.stkh002
DEFINE l_stkh004   LIKE stkh_t.stkh004
DEFINE l_stkh005   LIKE stkh_t.stkh005
DEFINE l_sten001   LIKE sten_t.sten001
DEFINE l_sten002   LIKE sten_t.sten002
DEFINE l_sten003   LIKE sten_t.sten003
DEFINE l_sten004   LIKE sten_t.sten004
DEFINE l_sten007   LIKE sten_t.sten007
DEFINE l_sten012   LIKE sten_t.sten012
   WHENEVER ERROR CALL cl_err_msg_log

   LET r_success = TRUE
   #抓取合同单头字段
   LET l_stke002 = ''
   LET l_stke200 = ''
   LET l_stkesite = ''
   SELECT stke002,stke200,stkesite INTO l_stke002,l_stke200,l_stkesite
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
      AND stke001 = p_stke001
   #删除当前版本的优惠费用
   DELETE FROM stkh_t
    WHERE stkhent = g_enterprise
      AND stkhdocno = g_stem_m.stemdocno
      AND stkh001 = p_stke001
      AND stkh007 = l_stke002
      AND stkh003 IS NOT NULL  
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "DELETE stkh_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE 
      RETURN r_success      
   END IF 
   LET l_sql = " INSERT INTO stkh_t ( ",
               "             stkhent, ",
               "             stkhsite, ",
               "             stkhunit, ",
               "             stkhdocno, ", #单号
               "             stkhseq, ",   #项次
               "             stkh001, ",   #合同
               "             stkh002, ",   #费用编号
               "             stkh003, ",   #优惠单号
               "             stkh004, ",   #开始日期
               "             stkh005, ",   #结束日期
               "             stkh006, ",   #费用金额
               "             stkh007, ",   #合同版本
               "             stkh008 ) ",  #优惠类型
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(order by stendocno)+COALESCE((SELECT MAX(stkhseq) FROM stkh_t WHERE stkhent = ",g_enterprise,"  AND stkhdocno = '",g_stem_m.stemdocno,"' AND stkh001 = '",p_stke001,"' ),0), ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 sten002, ",                   #费用编号
               "                 stendocno, ",                 #优惠单号
               "                 sten003, ",                   #开始日期
               "                 sten004, ",                   #结束日期
               "                 sten005, ",                   #费用金额
               "                 '",l_stke002,"', ",    #合同版本
               "                 sten001  ",                   #优惠类型
               "   FROM sten_t,stem_t  ",
               "  WHERE stenent = ",g_enterprise," ",
               "    AND stendocno = stemdocno " ,
               "    AND stemdocno = '",g_stem_m.stemdocno,"'"
   #新增的时候，按照商户/铺位/租赁开始日期/租赁结束日期/进场日期抓优惠申请单astt802
   #优惠变更的时候，通过单头的变更申请单号stke200抓优惠申请单，自动写入优惠单身，版本号=单头版本号
   IF g_stem_m.stem035 = '3' THEN           
      LET l_sql = l_sql," AND stemdocno = '",l_stke200,"' ",
                        " AND EXISTS (SELECT 1 FROM stkf_t WHERE stenent = stkfent AND stkf004 = sten002 AND stkfdocno = '",g_stem_m.stemdocno,"' AND stkf001 = '",p_stke001,"' ) ",
                        " AND EXISTS (SELECT 1 FROM stke_t WHERE stenent = stkeent AND stkedocno = '",g_stem_m.stemdocno,"' AND stke001 = '",p_stke001,"' AND sten003 >= stke011+stke013 AND sten004 <= stke012 ) "                        
   END IF    
   PREPARE astt806_ins_stkh FROM l_sql 
   EXECUTE astt806_ins_stkh
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "ins_stkh:astt806_ins_stkh" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      LET r_success = FALSE
   END IF 
   LET l_stkhseq =''
   LET l_stkh002 =''
   LET l_stkh004 =''
   LET l_stkh005 =''
   LET l_sql = "SELECT stkhseq,stkh002,stkh004,stkh005 FROM stkh_t",
               " WHERE stkh001 = '",p_stke001,"'", #合同号
               "   AND stkhdocno = '",g_stem_m.stemdocno,"'",
               "   AND stkhent = '",g_enterprise,"'",
               "   AND stkh003 IS NOT NULL ",
               " ORDER BY stkh002,stkh005,stkh006"
   PREPARE astt806_stkh_pre FROM l_sql
   DECLARE astt806_stkh_cs CURSOR FOR astt806_stkh_pre
   FOREACH astt806_stkh_cs INTO l_stkhseq,l_stkh002,l_stkh004,l_stkh005 
      #根据费用编号+日期区间去抓取优惠费用单身，计算金额 
      LET l_sten001 =''
      LET l_sten002 =''
      LET l_sten003 =''
      LET l_sten004 =''
      LET l_sten007 =''
      LET l_sten012 =''
      SELECT sten001,sten002,sten003,sten004,sten007,sten012 
        INTO l_sten001,l_sten002,l_sten003,l_sten004,l_sten007,l_sten012
        FROM sten_t
       WHERE stenent = g_enterprise
         AND sten002 = l_stkh002
         AND sten003 = l_stkh004
         AND sten004 = l_stkh005
      IF l_sten001 <> '1' THEN
         LET l_amount=0
         CALL astt806_discount(l_sten001,p_stke001,l_sten002,l_sten003,l_sten004,l_sten007,l_sten012)
            RETURNING l_amount
         UPDATE stkh_t SET stkh006 = l_amount
          WHERE stkhent =  g_enterprise
            AND stkhdocno = g_stem_m.stemdocno
            AND stkh001 = p_stke001
            AND stkhseq = l_stkhseq
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "upd:stkh_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()            
            LET r_success = FALSE
         END IF             
      END IF
   END FOREACH
   
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 从原合同中去抓取费用单身
# Memo...........:
# Usage..........: CALL astt806_stkf_get(p_type,p_stke001)
#                  RETURNING 回传参数
# Date & Author..: 20160812 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_stkf_get(p_type,p_stke001)
DEFINE r_success   LIKE type_t.num5   
DEFINE l_sql       STRING   
DEFINE p_type      LIKE type_t.chr10     #类型 1.重取标准 2.从原合同带
DEFINE p_stke001   LIKE stke_t.stke001 
DEFINE l_stke001   LIKE stke_t.stke001
DEFINE l_stke011   LIKE stke_t.stke011
DEFINE l_stke012   LIKE stke_t.stke012
DEFINE l_stkesite  LIKE stke_t.stkesite
   WHENEVER ERROR CALL cl_err_msg_log   
   LET r_success = TRUE
   #抓取合同单头字段
   SELECT stke001,stke011,stke012,stkesite INTO l_stke001,l_stke011,l_stke012,l_stkesite
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
      AND stke001 = p_stke001
   #先清空分段扣率单身
   DELETE FROM stkg_t
    WHERE stkgent = g_enterprise
      AND stkgdocno = g_stem_m.stemdocno
      AND stkg001 = p_stke001
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "DELETE stkg_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE 
      RETURN r_success      
   END IF    
   #先清空费用单身
   DELETE FROM stkf_t
    WHERE stkfent = g_enterprise
      AND stkfdocno = g_stem_m.stemdocno
      AND stkf001 = p_stke001
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "DELETE stkf_t" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      LET r_success = FALSE 
      RETURN r_success      
   END IF 
   #按场地拆分的
   LET l_sql = " INSERT INTO stkf_t ( ",
               "             stkfent, ",
               "             stkfsite, ",
               "             stkfunit, ",
               "             stkfdocno, ", #单号
               "             stkfseq, ",   #项次
               "             stkf001, ",   #合约编号
               "             stkf002, ",   #标准否
               "             stkf003, ",   #费用方案
               "             stkf004, ",   #费用编号
               "             stkf005, ",   #开始日期
               "             stkf006, ",   #结束日期
               "             stkf007, ",   #费用计算周期
               "             stkf008, ",   #周期数值
               "             stkf009, ",   #计算类型
               "             stkf010, ",   #计算基准
               "             stkf011, ",   #固定/单位金额
               "             stkf012, ",   #比例
               "             stkf013, ",   #保底否
               "             stkf014, ",   #保底金额
               "             stkf015, ",   #保底扣减
               "             stkf016, ",   #分量扣点
               "             stkf017, ",   #费用总金额  #临时记录项次使用
               "             stkf018, ",   #确认金额
               "             stkf019, ",   #确认比例
               "             stkf020, ",   #可沿用
               "             stkf021, ",   #版本号
               "             stkf022, ",   #场地
               "             stkf023, ",   #费用所属类型
               "             stkf024, ",   #费用所属组织
               "             stkf025 ) ",   #合同版本
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(ORDER BY stjf004)+COALESCE((SELECT MAX(stkfseq) FROM stkf_t WHERE stkfent = ",g_enterprise,"  AND stkfdocno = '",g_stem_m.stemdocno,"' AND stkf001 = '",p_stke001,"' ),0), ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stjf002, ",   #标准否
               "                 stjf003, ",   #费用方案
               "                 stjf004, ",   #费用编号
               "                 '",l_stke011,"', ",   #开始日期
               "                 '",l_stke012,"', ",   #结束日期
               "                 stjf007, ",   #费用计算周期
               "                 stjf008, ",   #周期数值
               "                 stjf009, ",   #计算类型
               "                 stjf010, ",   #计算基准
               "                 stjf011, ",   #固定/单位金额
               "                 stjf012, ",   #比例
               "                 stjf013, ",   #保底否
               "                 stjf014, ",   #保底金额
               "                 stjf015, ",   #保底扣减
               "                 stjf016, ",   #分量扣点
               "                 stjfseq, ",   #费用总金额 #临时记录项次使用
               "                 stjf018, ",   #确认金额
               "                 stjf019, ",   #确认比例
               "                 stjf020, ",   #可沿用
               "                 stjf021, ",   #版本号
               "                 stjf022, ",   #场地
               "                 stjf023, ",   #费用所属类型
               "                 stjf024, ",   #费用所属组织
               "                 stjf025  ",   #合同版本
               "   FROM (  ",
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 dense_rank() over(PARTITION BY stjf004,stjf022 ORDER BY stjf006 DESC,stjfseq ASC) as rank, ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stjf002, ",   #标准否
               "                 stjf003, ",   #费用方案
               "                 stjf004, ",   #费用编号
               "                 '",l_stke011,"', ",   #开始日期
               "                 '",l_stke012,"', ",   #结束日期
               "                 stjf007, ",   #费用计算周期
               "                 stjf008, ",   #周期数值
               "                 stjf009, ",   #计算类型
               "                 stjf010, ",   #计算基准
               "                 stjf011, ",   #固定/单位金额
               "                 stjf012, ",   #比例
               "                 stjf013, ",   #保底否
               "                 stjf014, ",   #保底金额
               "                 stjf015, ",   #保底扣减
               "                 stjf016, ",   #分量扣点
               "                 stjfseq, ",   #费用总金额  #临时记录项次使用
               "                 stjf018, ",   #确认金额
               "                 stjf019, ",   #确认比例
               "                 stjf020, ",   #可沿用
               "                 stjf021, ",   #版本号
               "                 stjf022, ",   #场地
               "                 stjf023, ",   #费用所属类型
               "                 stjf024, ",   #费用所属组织
               "                 stjf025  ",   #合同版本
               "   FROM stjf_t  ",
               "  WHERE stjfent = ",g_enterprise," ",
               "    AND stjf001 = '",l_stke001,"' " ,
               "    AND stjf022 IS NOT NULL "
   IF p_type = '1' THEN           
      LET l_sql = l_sql," stjf002 = 'N' ",
                        " AND NOT EXISTS (SELECT 1 FROM stkf_t WHERE stkfent = stjfent AND stkfdocno = '",g_stem_m.stemdocno,"' AND stkf001 = stjf001 AND stkf004 = stjf004 )"
   END IF              
   LET l_sql = l_sql,"    AND NOT EXISTS (SELECT 1 FROM stji_t WHERE stjient = stjfent AND stji001 = stjf001 AND stji002 = stjf004 AND stji006 = '1' AND stjf007 = '5' ) )"
   LET l_sql = l_sql,"  WHERE rank = 1 "
   PREPARE astt806_ins_stkf FROM l_sql 
   EXECUTE astt806_ins_stkf
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "ins_stkf:astt806_ins_stkf" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      LET r_success = FALSE
   END IF 
   
   
   #不按场地拆分的
   LET l_sql =" INSERT INTO  stkf_t ( ",
               "             stkfent, ",
               "             stkfsite, ",
               "             stkfunit, ",
               "             stkfdocno, ", #单号
               "             stkfseq, ",   #项次
               "             stkf001, ",   #合约编号
               "             stkf002, ",   #标准否
               "             stkf003, ",   #费用方案
               "             stkf004, ",   #费用编号
               "             stkf005, ",   #开始日期
               "             stkf006, ",   #结束日期
               "             stkf007, ",   #费用计算周期
               "             stkf008, ",   #周期数值
               "             stkf009, ",   #计算类型
               "             stkf010, ",   #计算基准
               "             stkf011, ",   #固定/单位金额
               "             stkf012, ",   #比例
               "             stkf013, ",   #保底否
               "             stkf014, ",   #保底金额
               "             stkf015, ",   #保底扣减
               "             stkf016, ",   #分量扣点
               "             stkf017, ",   #费用总金额  #临时记录项次使用
               "             stkf018, ",   #确认金额
               "             stkf019, ",   #确认比例
               "             stkf020, ",   #可沿用
               "             stkf021, ",   #版本号
               "             stkf022, ",   #场地
               "             stkf023, ",   #费用所属类型
               "             stkf024, ",   #费用所属组织
               "             stkf025 ) ",   #合同版本
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 ROW_NUMBER() over(ORDER BY stjf004)+COALESCE((SELECT MAX(stkfseq) FROM stkf_t WHERE stkfent = ",g_enterprise,"  AND stkfdocno = '",g_stem_m.stemdocno,"' AND stkf001 = '",p_stke001,"' ),0), ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stjf002, ",   #标准否
               "                 stjf003, ",   #费用方案
               "                 stjf004, ",   #费用编号
               "                 '",l_stke011,"', ",   #开始日期
               "                 '",l_stke012,"', ",   #结束日期
               "                 stjf007, ",   #费用计算周期
               "                 stjf008, ",   #周期数值
               "                 stjf009, ",   #计算类型
               "                 stjf010, ",   #计算基准
               "                 stjf011, ",   #固定/单位金额
               "                 stjf012, ",   #比例
               "                 stjf013, ",   #保底否
               "                 stjf014, ",   #保底金额
               "                 stjf015, ",   #保底扣减
               "                 stjf016, ",   #分量扣点
               "                 stjfseq, ",   #费用总金额 #临时记录项次使用
               "                 stjf018, ",   #确认金额
               "                 stjf019, ",   #确认比例
               "                 stjf020, ",   #可沿用
               "                 stjf021, ",   #版本号
               "                 stjf022, ",   #场地
               "                 stjf023, ",   #费用所属类型
               "                 stjf024, ",   #费用所属组织
               "                 stjf025  ",   #合同版本
               "   FROM (  ",
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 dense_rank() over(PARTITION BY stjf004 ORDER BY stjf006 DESC,stjfseq ASC) as rank, ",  #项次
               "                 '",p_stke001,"', ",    #合同
               "                 stjf002, ",   #标准否
               "                 stjf003, ",   #费用方案
               "                 stjf004, ",   #费用编号
               "                 '",l_stke011,"', ",   #开始日期
               "                 '",l_stke012,"', ",   #结束日期
               "                 stjf007, ",   #费用计算周期
               "                 stjf008, ",   #周期数值
               "                 stjf009, ",   #计算类型
               "                 stjf010, ",   #计算基准
               "                 stjf011, ",   #固定/单位金额
               "                 stjf012, ",   #比例
               "                 stjf013, ",   #保底否
               "                 stjf014, ",   #保底金额
               "                 stjf015, ",   #保底扣减
               "                 stjf016, ",   #分量扣点
               "                 stjfseq, ",   #费用总金额 #临时记录项次使用
               "                 stjf018, ",   #确认金额
               "                 stjf019, ",   #确认比例
               "                 stjf020, ",   #可沿用
               "                 stjf021, ",   #版本号
               "                 stjf022, ",   #场地
               "                 stjf023, ",   #费用所属类型
               "                 stjf024, ",   #费用所属组织
               "                 stjf025  ",   #合同版本
               "   FROM stjf_t  ",
               "  WHERE stjfent = ",g_enterprise," ",
               "    AND stjf001 = '",l_stke001,"' " ,
               "    AND stjf022 IS NULL "
   IF p_type = '1' THEN           
      LET l_sql = l_sql," stjf002 = 'N' ",
                        " AND NOT EXISTS (SELECT 1 FROM stkf_t WHERE stkfent = stjfent AND stkfdocno = '",g_stem_m.stemdocno,"' AND stkf001 = stjf001 AND  stkf004 = stjf004 )"
   END IF              
   LET l_sql = l_sql,"    AND NOT EXISTS (SELECT 1 FROM stji_t WHERE stjient = stjfent AND stji001 = stjf001 AND stji002 = stjf004 AND stji006 = '1' AND stjf007 = '5' ) )"
   LET l_sql = l_sql,"  WHERE rank = 1 "
   PREPARE astt806_ins_stkf1 FROM l_sql 
   EXECUTE astt806_ins_stkf1
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "ins_stkcf:astt806_ins_stkf1" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      LET r_success = FALSE
   END IF 

   #新增分段扣点
   LET l_sql = " INSERT INTO stkg_t ( ",
               "             stkgent, ",
               "             stkgsite, ",
               "             stkgunit, ",
               "             stkgdocno, ", #单号
               "             stkgseq, ",   #项次
               "             stkgseq1, ",  #项序
               "             stkg001, ",   #合约编号
               "             stkg002, ",   #起始金额
               "             stkg003, ",   #截至金额
               "             stkg004, ",   #固定/单位金额
               "             stkg005, ",   #比例
               "             stkg006, ",   #确认金额
               "             stkg007 ) ",  #确认比例
               " SELECT DISTINCT '",g_enterprise,"', ",                
               "                 '",l_stkesite,"', ",
               "                 '",l_stkesite,"', ",
               "                 '",g_stem_m.stemdocno,"', ",  #单号
               "                 stkfseq, ",                   #项次
               "                 stjgseq1, ",                  #项序
               "                 stjg001, ",                   #合约编号
               "                 stjg002, ",                   #起始金额
               "                 stjg003, ",                   #截至金额
               "                 stjg004, ",                   #固定/单位金额 
               "                 stjg005, ",                   #比例 
               "                 stjg006, ",                   #确认金额
               "                 stjg007  ",                   #确认比例
               "   FROM stjg_t,stkf_t ",
               "  WHERE stjgent = ",g_enterprise,
               "    AND stjg001 = '",l_stke001,"'",
               "    AND stkfent = stjgent " ,
               "    AND stkf017 = stjgseq " ,
               "    AND stkf001 = '",l_stke001,"'",
               "    AND stkfdocno = '",g_stem_m.stemdocno,"' "                
   PREPARE astt806_ins_stkg FROM l_sql 
   EXECUTE astt806_ins_stkg
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = " INTO stkg_t:astt806_ins_stkg "
      LET g_errparam.popup = TRUE
      CALL cl_err()
      LET r_success = FALSE

   END IF   
   
   #还原费用总金额为0
   UPDATE stkf_t SET stkf017 = 0
    WHERE stkfent = g_enterprise
      AND stkfdocno = g_stem_m.stemdocno
      AND stkf001 = p_stke001
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = " UPDATE stkf_t "
      LET g_errparam.popup = TRUE
      CALL cl_err()
      LET r_success = FALSE

   END IF  
   
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 更新结算账期
# Memo...........:
# Usage..........: CALL astt806_upd_stko(p_stke001)
#                  RETURNING 回传参数
# Input parameter: p_cmd          类型 a 新增 u 修改
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 20160812 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_upd_stko(p_stke001)
DEFINE p_cmd       LIKE type_t.chr1
DEFINE r_success   LIKE type_t.num5
DEFINE l_cnt       LIKE type_t.num5
DEFINE l_stfa036   LIKE stfa_t.stfa036
DEFINE l_stfa019   LIKE stfa_t.stfa019
DEFINE l_stfa020   LIKE stfa_t.stfa020
DEFINE l_stfj004   LIKE stfj_t.stfj004
DEFINE p_stke001   LIKE stke_t.stke001
DEFINE l_stke000   LIKE stke_t.stke000
DEFINE l_stke001   LIKE stke_t.stke001
DEFINE l_stke011   LIKE stke_t.stke011
DEFINE l_stke012   LIKE stke_t.stke012
DEFINE l_stke031   LIKE stke_t.stke031
DEFINE l_stke043   LIKE stke_t.stke043
DEFINE l_stkesite  LIKE stke_t.stkesite
   WHENEVER ERROR CALL cl_err_msg_log   
   LET r_success = TRUE
   #抓取合同单头字段
   SELECT stke000,stke001,stke011,stke012,stke031,stke043,stkesite INTO l_stke000,l_stke001,l_stke011,l_stke012,l_stke031,l_stke043,l_stkesite
     FROM stke_t
    WHERE stkeent = g_enterprise
      AND stkedocno = g_stem_m.stemdocno
      AND stke001 = p_stke001 
#   IF p_cmd = 'u'  THEN
#      IF l_stke.stke000 = 'I' OR l_stke.stke000 = 'U' OR l_stke.stke000 = 'R' THEN 
#         #结算方式进场日期租赁结束日期有修改重新产生账期
#         IF l_stke.stie031 <> g_stie_m_t.stie031 OR g_stie_m.stie012 <> g_stie_m_t.stie012  OR 
#            l_stke.stie042 <> g_stie_m_t.stie042 THEN
#            LET l_cnt = 0
#            SELECT COUNT(*) INTO l_cnt 
#              FROM stio_t
#             WHERE stioent = g_enterprise AND stiodocno = g_stie_m.stiedocno
#               AND stio005 = 'Y'
#            IF l_cnt > 0 THEN
#               IF NOT cl_ask_confirm('ast-00097') THEN
#                  LET r_success = FALSE
#               END IF
#            ELSE
#               IF NOT cl_ask_confirm('ast-00146') THEN
#                  LET r_success = FALSE
#               END IF
#            END IF
#         ELSE
#            #没有变，不用更新单身帐期
#            RETURN TRUE
#         END IF
#      END IF   
#      IF g_stie_m.stie000 = 'B' THEN
#         #结算方式进场日期租赁结束日期有修改重新产生账期
#         IF g_stie_m.stie031 <> g_stie_m_t.stie031 OR g_stie_m.stie012 <> g_stie_m_t.stie012  OR 
#            g_stie_m.stie042 <> g_stie_m_t.stie042 OR g_stie_m.stie043 <> g_stie_m_t.stie043 THEN
#            LET l_cnt = 0
#            SELECT COUNT(*) INTO l_cnt 
#              FROM stio_t
#             WHERE stioent = g_enterprise AND stiodocno = g_stie_m.stiedocno
#               AND stio005 = 'Y'
#            IF l_cnt > 0 THEN
#               IF NOT cl_ask_confirm('ast-00097') THEN
#                  LET r_success = FALSE
#               END IF
#            ELSE
#               IF NOT cl_ask_confirm('ast-00146') THEN
#                  LET r_success = FALSE
#               END IF
#            END IF
#         ELSE
#            #没有变，不用更新单身帐期
#            RETURN TRUE
#         END IF
#      END IF      
#   END IF
   
   #IF r_success THEN      
      IF l_stke000 = 'I' OR l_stke000 = 'U' OR l_stke000 = 'R' THEN  
         #结算账期按照租赁开始日期产生
         IF NOT s_astt806_cal_period(g_stem_m.stemdocno,l_stke001,l_stke011,l_stke012,l_stke031,'',l_stkesite,l_stkesite) THEN  #add by geza 20160617 #160604-00009#51
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = 'ast-00049'
            LET g_errparam.extend = ''
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE             
         END IF 
      END IF
      IF l_stke000 = 'B' THEN
         IF NOT s_astt806_cal_period(g_stem_m.stemdocno,l_stke001,l_stke011,l_stke043,l_stke031,'',l_stkesite,l_stkesite) THEN  #add by geza 20160617 #160604-00009#51
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = 'ast-00049'
            LET g_errparam.extend = ''
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE             
         END IF 
      END IF      
   #END IF
   
   CALL astt806_b_fill()
   #DISPLAY BY NAME g_stie_m.stie031,g_stie_m.stie042,g_stie_m.stie012,g_stie_m.stie043
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 优惠金额计算
# Memo...........:
# Usage..........: CALL astt806_discount(p_type,p_sten002,p_strt,p_ed,p_sten007,p_sten012)
#                  RETURNING r_amount
# Input parameter: p_type     优惠类型
#                : p_stke001  合同编号
#                : p_sten002  费用编号
#                : p_strt     开始日期
#                : p_ed       结束日期
#                : p_sten007  优惠单价
#                : p_sten012  优惠面积
# Return code....: r_amount   优惠金额
# Date & Author..: 2016/09/06 By geza
# Modify.........:
################################################################################
PRIVATE FUNCTION astt806_discount(p_type,p_stke001,p_sten002,p_strt,p_ed,p_sten007,p_sten012)
DEFINE p_type      LIKE sten_t.sten001            
DEFINE p_sten002   LIKE sten_t.sten002
DEFINE p_strt      LIKE sten_t.sten003
DEFINE p_stke001   LIKE stke_t.stke001
DEFINE p_ed        LIKE sten_t.sten004
DEFINE p_sten007   LIKE sten_t.sten007
DEFINE p_sten012   LIKE sten_t.sten012
DEFINE r_amount    LIKE sten_t.sten005
DEFINE l_amount    LIKE sten_t.sten005
DEFINE l_sql       STRING
DEFINE l_n         LIKE type_t.num5
DEFINE l_strt      LIKE sten_t.sten003
DEFINE l_ed        LIKE sten_t.sten004
DEFINE l_stjfseq   LIKE stjf_t.stjfseq      #项次
DEFINE l_stjf010   LIKE stjf_t.stjf010      #计算方式
DEFINE l_stjf011   LIKE stjf_t.stjf011      #固定单位金额
DEFINE l_stjf005   LIKE stjf_t.stjf005      #开始时间
DEFINE l_stjf006   LIKE stjf_t.stjf006      #结束时间
DEFINE l_sum       LIKE stjj_t.stjj005      #总面积
DEFINE l_stjj005   LIKE stjj_t.stjj005      #经营面积
   
   LET r_amount=0
   LET l_amount=0
   LET l_sql=''
   LET l_stjf011=0
   
   LET l_stjj005=0
   #计算日期区间的总金额
   SELECT SUM(stjn006) INTO l_amount 
     FROM stjn_t
    WHERE stjnent=g_enterprise
      AND stjn001=p_stke001
      AND stjn004='1'
      AND stjn005=p_sten002
      AND stjn002>=p_strt AND stjn002<=p_ed
   #租期优惠
   IF p_type='3' THEN
      LET r_amount=l_amount*(-1)
   END IF
   #面积优惠
   IF p_type='2' THEN
      LET l_sum=0
      LET r_amount=0

      SELECT stjf010 INTO l_stjf010 FROM stjf_t
          WHERE stjfent=g_enterprise
            AND stjf001=p_stke001
            AND stjf004=p_sten002
            AND stjf009='3'
            AND (stjf005>=p_strt AND stjf005<=p_ed
             OR  stjf006>=p_strt AND stjf006<=p_ed
             OR  stjf005<=p_strt AND stjf006>=p_ed)
            AND ROWNUM=1
            
      SELECT COUNT(*) INTO l_n FROM(
         SELECT stjf010 FROM stjf_t
          WHERE stjfent=g_enterprise
            AND stjf001=p_stke001
            AND stjf004=p_sten002
            AND stjf009='3'
            AND (stjf005>=p_strt AND stjf005<=p_ed
             OR  stjf006>=p_strt AND stjf006<=p_ed
             OR  stjf005<=p_strt AND stjf006>=p_ed)
            AND ROWNUM=1
      )
      IF l_n=0 THEN
         LET r_amount=0
      ELSE
         IF l_stjf010='1' THEN
            SELECT stje024 INTO l_sum
              FROM stje_t
             WHERE stjeent=g_enterprise
               AND stje001=p_stke001
         END IF
         IF l_stjf010='2' THEN
            SELECT stje025 INTO l_sum
              FROM stje_t
             WHERE stjeent=g_enterprise
               AND stje001=p_stke001
         END IF
      END IF
      LET r_amount=l_amount*p_sten012/l_sum    
   END IF
   #单价优惠
   IF p_type='4' THEN
      LET l_amount=0
      LET r_amount=0
      LET l_strt=''
      LET l_ed=''
      LET l_sql=" SELECT stjfseq,stjf005,stjf006,stjf018 FROM stjf_t",            
                " WHERE stjfent='",g_enterprise,"'",
                  " AND stjf001='",p_stke001,"'",
                  " AND stjf004='",p_sten002,"'",
                  " AND stjf009='3' ",
                  " AND (stjf005>='",p_strt,"' AND stjf005<='",p_ed,"'",
                   " OR stjf006>='",p_strt,"' AND stjf006<='",p_ed,"'",
                   " OR stjf005<='",p_strt,"' AND stjf006>='",p_ed,"')"
      PREPARE astt806_discount_pre2 FROM l_sql
      DECLARE astt806_discount_cur2 CURSOR FOR astt806_discount_pre2
      
      FOREACH astt806_discount_cur2 INTO l_stjfseq,l_stjf005,l_stjf006,l_stjf011
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         IF l_stjf005>p_strt THEN
            LET l_strt=l_stjf005
         ELSE 
            LET l_strt=p_strt
         END IF
         IF l_stjf006<p_ed THEN
            LET l_ed=l_stjf006
         ELSE
            LET l_ed=p_ed
         END IF
         #计算费用编号日期区间金额
         SELECT SUM(stjn006) INTO l_amount 
           FROM stjn_t 
          WHERE stjnent=g_enterprise
            AND stjn001=p_stke001
            AND stjn004='1'
            AND stjn005=p_sten002
            AND stjn010=l_stjfseq
            AND stjn002>=l_strt AND stjn002<=l_ed
          LET r_amount=r_amount+l_amount*p_sten007/l_stjf011   
      END FOREACH
   END IF
   CLOSE astt806_discount_cur2
   RETURN r_amount
END FUNCTION

 
{</section>}
 
