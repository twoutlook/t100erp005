#&define DEBUG

#2015/11/02              by Hiko : 將FGL_GETENV("MNT4RP")，改成cl_rpt_get_env_global(“MNT4RP”)
#2016/06/07 160607-00012 by Ernest : 在Light平台上傳時不做Report Server的檢核

IMPORT os
IMPORT util
IMPORT XML

SCHEMA ds

#匯入adzp080的常數設定  
&include "../4gl/sadzp000_cnst.inc" 
&include "../4gl/adzp080_cnst.inc" 
&include "../4gl/sadzp000_type.inc" 
&include "../4gl/adzp080_type.inc"  

CONSTANT cs_default_client_path STRING = "c:\\tt\\"

PRIVATE TYPE T_FRP_LIST RECORD
               fl_NAME     LIKE GZGD_T.GZGD007,
               fl_EXIST    VARCHAR(1), 
               fl_TEMPLATE LIKE GZGD_T.GZGD007
             END RECORD

PUBLIC TYPE T_FILE_DIALOG RECORD
              PATH       VARCHAR(1024),
              TYPE_DESC  VARCHAR(1024),
              TYPE_LIST  VARCHAR(50),
              CAPTION    VARCHAR(1024)
            END RECORD             

DEFINE
  mo_parameters   T_UPLOAD_PARAM,
  mi_progress     INTEGER,
  ms_progress_all STRING,
  ms_lang         STRING

FUNCTION sadzp060_run(p_parameters,p_lang)
DEFINE
  p_parameters  T_UPLOAD_PARAM,
  p_lang        STRING
DEFINE 
  lb_success BOOLEAN, 
  ls_message STRING,
  lo_return_params  T_UPLOAD_PARAM

  LET mo_parameters.* = p_parameters.*
  LET ms_lang         = NVL(p_lang,cs_default_lang)
  
  CALL sadzp060_initialize()
  CALL sadzp060_start() RETURNING lb_success,ls_message,lo_return_params.*
  CALL sadzp060_finalize()

  RETURN lb_success,ls_message,lo_return_params.*
  
END FUNCTION

FUNCTION sadzp060_initialize()

  LET mi_progress = 0
  
  CALL ui.Dialog.setDefaultUnbuffered(TRUE)
  
END FUNCTION

FUNCTION sadzp060_start()
DEFINE
  ls_temp_dir         STRING,
  ls_file_name        STRING,
  ls_module_name      STRING,
  ls_ext_name         STRING,
  ls_client_path      STRING,
  ls_arg_val1         STRING,
  ls_arg_val2         STRING,
  ls_arg_val3         STRING,
  ls_arg_val4         STRING,
  ls_upload_doc_type  STRING,
  ls_zip_type         STRING,
  ls_message          STRING,
  ls_progress         STRING,
  ls_version          STRING,
  ls_client_temp_path STRING,
  ls_separator        STRING,
  ls_ERPID            STRING, -- 160607-00012
  li_progress_count   INTEGER,
  lo_parameters       T_UPLOAD_PARAM,
  lo_return_params    T_UPLOAD_PARAM,
  lb_success          BOOLEAN
DEFINE 
  lb_result BOOLEAN,
  lo_result T_UPLOAD_PARAM

  LET lo_parameters.* = mo_parameters.*
  
  &ifndef DEBUG
  LET ls_arg_val1 = lo_parameters.arg1_program_name    #Program Name
  LET ls_arg_val2 = lo_parameters.arg2_module_name     #Module Name
  LET ls_arg_val3 = lo_parameters.arg3_upload_doc_type #Upload Document Type (SPEC or CODE)
  LET ls_arg_val4 = lo_parameters.arg4_client_path     #Client Path
  &else
  LET ls_arg_val1 = "aiti333.tzp"
  LET ls_arg_val2 = "ait"
  LET ls_arg_val3 = "PR"
  LET ls_arg_val4 = cs_default_client_path
  &endif
  
  LET ls_ERPID = NVL(FGL_GETENV("ERPID"),"T100ERP")

  LET lb_success = TRUE
  LET ls_separator = os.Path.separator()
  CALL util.Math.srand()
  
  IF ls_arg_val1.getIndexOf(".",1) > 1 THEN
    LET ls_file_name = ls_arg_val1.subString(1,ls_arg_val1.getIndexOf(".",1)-1)
    LET ls_ext_name  = ls_arg_val1.subString(ls_arg_val1.getIndexOf(".",1)+1,ls_arg_val1.getLength())
  ELSE
    LET ls_file_name = ls_arg_val1

    #確認上傳副檔名及對應形式
    CASE
      WHEN (ls_arg_val3 = cs_doc_type_spec OR ls_arg_val3 = cs_doc_type_specgen)
        LET ls_ext_name  = cs_zip_name_tzs
      WHEN (ls_arg_val3 = cs_doc_type_code)
        LET ls_ext_name  = cs_zip_name_tzc
      WHEN (ls_arg_val3 = cs_doc_type_cspec)
        LET ls_ext_name  = cs_zip_name_tzd
      WHEN (ls_arg_val3 = cs_doc_type_rspec)
        LET ls_ext_name  = cs_zip_name_tzr
      WHEN (ls_arg_val3 = cs_doc_type_gcode)
        LET ls_ext_name  = cs_zip_name_tzg
      WHEN (ls_arg_val3 = cs_doc_type_4rp)
        LET ls_ext_name  = cs_zip_name_tzt
    OTHERWISE  
      LET ls_ext_name  = cs_zip_name_tzp
    END CASE
  END IF

  LET ls_zip_type = ls_ext_name.trim()
  LET ls_upload_doc_type = ls_arg_val3.trim()

  #取得Progress的總筆數
  CALL sadzp060_get_sadzp060_progress_all(ls_zip_type) RETURNING ms_progress_all

  IF NVL(ls_arg_val4,"NULL") = "NULL" THEN
    DISPLAY "************************************************************"
    DISPLAY "[Warning] Client path is not setting, using default : ",cs_default_client_path
    DISPLAY "************************************************************"
    LET ls_client_path = cs_default_client_path
  ELSE
    LET ls_client_path = ls_arg_val4.trim() #"C:\\TT\\"
  END IF   
  
  #取得模組名稱
  IF ls_arg_val2 IS NULL THEN
    LET ls_module_name = ls_file_name.subString(1,3)
    LET ls_module_name = ls_module_name.toUpperCase()
  ELSE  
    LET ls_module_name = ls_arg_val2.trim()
  END IF  

  CALL sadzp060_creat_temp_directory(ls_file_name.trim()) RETURNING ls_temp_dir
  
  DISPLAY "[TEMPORARY DIR] ",ls_temp_dir

  #處理報表區段
  IF ls_upload_doc_type = cs_doc_type_4rp THEN

    LET li_progress_count = 7
    #開啟Progressbar
    CALL cl_progress_bar(li_progress_count)
    #CLOSE WINDOW SCREEN

    LET ls_message = "上傳報表樣板 ",ls_zip_type," 檔."
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    
    LET ls_message = "壓縮客戶端報表檔." 
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    CALL sadzp060_compress_client_files(ls_client_path) RETURNING lb_success,ls_file_name
    IF NOT lb_success THEN DISPLAY cs_error_tag,"壓縮客戶端報表檔失敗 !!" GOTO _report_error END IF 

    LET ls_message = "上傳報表壓縮檔." 
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    LET ls_client_temp_path = cs_client_temp_dir,cs_dos_separator
    CALL sadzp060_upload_zip(ls_file_name,ls_client_temp_path,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success,ls_file_name
    IF NOT lb_success THEN DISPLAY cs_error_tag,"上傳報表壓縮檔失敗 !!" GOTO _report_error END IF 

    LET ls_message = "檢核內容是否有效." 
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    CALL sadzp060_check_zip_content_valid(lo_parameters.*,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success, ls_version, lo_return_params.*
    IF NOT lb_success THEN DISPLAY cs_error_tag,"檢核內容失敗 !!" GOTO _report_error END IF

    #重新給定由 vfy 中取得的模組名稱
    LET ls_module_name = lo_return_params.arg2_module_name
    
    -- 160607-00012 begin
    IF ls_ERPID = "T100ERP" THEN
      LET ls_message = "檢核報表伺服器." 
      CALL cl_progress_ing(ls_message)
      --CALL sadzp060_set_progress(ls_message)
      CALL sadzp060_check_report_server_valid(ls_module_name,ms_lang) RETURNING lb_success 
      IF NOT lb_success THEN DISPLAY cs_error_tag,"檢核報表伺服器失敗 !!" GOTO _report_error END IF
    ELSE
      LET lb_success = TRUE
      DISPLAY cs_warning_tag,"非T100ERP, 不檢核報表伺服器."  
    END IF  
    -- 160607-00012 end
    
    LET ls_message = "解壓縮並搬移檔案到目的端." 
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    CALL sadzp060_unzip_4rp_file(ls_module_name,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type,ms_lang) RETURNING lb_success 
    IF NOT lb_success THEN DISPLAY cs_error_tag,"解壓縮並搬移檔案到目的端失敗 !!" GOTO _report_error END IF

    LET ls_message = "產生報表語言資料." 
    CALL cl_progress_ing(ls_message)
    --CALL sadzp060_set_progress(ls_message)
    CALL sadzp060_4rp_gen_multi_lang(ls_module_name,ls_file_name) RETURNING lb_success 
    IF NOT lb_success THEN DISPLAY cs_error_tag,"產生報表語言資料失敗 !!" GOTO _report_error END IF
    
    #LET ls_message = "完成上傳報表樣板 ",ls_zip_type," 檔."
    #CALL cl_progress_ing(ls_message)
    
    LABEL _report_error:

    IF NOT lb_success THEN 
      TRY 
        #關閉Progressbar
        CALL cl_progress_bar_close()
      CATCH
        DISPLAY cs_warning_tag,"呼叫關閉Progress bar 失敗 !!"
      END TRY  
      GOTO _return
    END IF  
    
  ELSE 

    CALL sadzp060_upload_zip(ls_file_name,ls_client_path,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success,ls_file_name

    CALL sadzp060_show_message_designer()
    
    #檢查權限是否足夠, 並且取得版號, 用Display 的方式讓adzp080取得以傳遞給adzp040
    LET ls_message = "Check ",ls_zip_type," if valid."
    CALL sadzp060_set_progress(ls_message)
    CALL sadzp060_check_zip_content_valid(lo_parameters.*,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success, ls_message, lo_return_params.*
    
    #DISPLAY cs_version_tag,ls_version

    IF lb_success THEN
      LET ls_message = "Uncompress file : ",ls_file_name
      DISPLAY "[",CURRENT,"] ",ls_message
      CALL sadzp060_set_progress(ls_message)

      #SPEC or SPECGEN
      IF (ls_upload_doc_type = cs_doc_type_spec OR ls_upload_doc_type = cs_doc_type_specgen)THEN
        CALL sadzp060_unzip_form_file(ls_module_name,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success
      END IF 

      #CODE or GCODE
      IF (ls_upload_doc_type = cs_doc_type_code OR ls_upload_doc_type = cs_doc_type_gcode) THEN
        CALL sadzp060_unzip_code_file(ls_module_name,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success
      END IF 

      #CSPEC
      IF ls_upload_doc_type = cs_doc_type_cspec THEN
        CALL sadzp060_unzip_csd_file(ls_module_name,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success
      END IF

      #RSPEC
      IF ls_upload_doc_type = cs_doc_type_rspec THEN
        CALL sadzp060_unzip_rsd_file(ls_module_name,ls_file_name,ls_temp_dir||ls_separator,ls_zip_type) RETURNING lb_success
      END IF
      
      LET ls_progress = mi_progress
      IF ls_progress <> ms_progress_all THEN
        #若原始記錄的總Progress項目和現行的不符, 則要重新更新
        CALL sadzp060_set_sadzp060_progress_all(ls_zip_type,mi_progress)
      END IF
    END IF
  END IF    
  
  LABEL _return:
  
  LET lb_result = lb_success
  LET lo_result.* = lo_return_params.*

  RETURN lb_success,ls_message,lo_result.*
  
END FUNCTION

FUNCTION sadzp060_finalize()
END FUNCTION

FUNCTION sadzp060_upload_zip(p_file_name,p_source_path,p_destination_path,p_zip_type)
DEFINE
  p_file_name        STRING,
  p_source_path      STRING,
  p_destination_path STRING,
  p_zip_type         STRING 
DEFINE
  ls_file_name        STRING,
  ls_source_path      STRING,
  ls_destination_path STRING,
  ls_zip_type         STRING,
  ls_source_file      STRING,
  ls_destination_file STRING,
  ls_src_file_name    STRING,
  ls_dst_file_name    STRING,
  lb_success          BOOLEAN
DEFINE 
  lb_return BOOLEAN  

  LET ls_file_name        = p_file_name
  LET ls_source_path      = p_source_path        
  LET ls_destination_path = p_destination_path
  LET ls_zip_type         = p_zip_type

  LET lb_success = TRUE 

  #當上傳為 tzt(報表樣板)檔時, 來源名稱會加上 "_up"
  IF ls_zip_type = cs_zip_name_tzt THEN
    LET ls_src_file_name = ls_file_name,cs_upload_string
  ELSE   
    LET ls_src_file_name = ls_file_name
  END IF

  #上傳到暫存檔的時候一律改回原名稱的壓縮檔
  IF ls_file_name.getIndexOf("(",1) > 0 THEN
    LET ls_dst_file_name = ls_file_name.subString(1,ls_file_name.getIndexOf(cs_open_paren,1)-1)
  ELSE
    LET ls_dst_file_name = ls_file_name
  END IF   
  
  LET ls_source_file      = ls_source_path,ls_src_file_name,".",ls_zip_type
  LET ls_destination_file = ls_destination_path,ls_dst_file_name,".",ls_zip_type

  --DISPLAY ls_source_file
  --DISPLAY ls_destination_file
  
  TRY
    CALL FGL_GETFILE(ls_source_file,ls_destination_file)
    DISPLAY cs_message_tag,"Upload ",ls_zip_type.toUpperCase()," file "||ls_file_name||" success ! "
  CATCH
    LET lb_success = FALSE 
    DISPLAY cs_error_tag,"Upload ",ls_zip_type.toUpperCase()," "||ls_file_name||" File Error ! "
  END TRY  

  LET lb_return = lb_success

  RETURN lb_return,ls_dst_file_name

END FUNCTION

FUNCTION sadzp060_unzip_to_temp_dir(p_file_name, p_temp_dir, p_zip_type,p_upload_doc_type)
DEFINE
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING,
  p_upload_doc_type STRING
DEFINE
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_upload_doc_type STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_step          STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type
  LET ls_upload_doc_type = p_upload_doc_type

  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  CALL os.Path.chdir(ls_temp_dir) RETURNING lb_success

  CASE 
    WHEN (ls_upload_doc_type = cs_doc_type_spec OR ls_upload_doc_type = cs_doc_type_specgen)
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tsd -d '",ls_temp_dir,"'"
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        LET lb_complete = FALSE
        LET ls_err_command = ls_command
        LET ls_step = "Unzip program file : STEP 1" 
      END IF
    WHEN (ls_upload_doc_type = cs_doc_type_code OR ls_upload_doc_type = cs_doc_type_gcode)
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tap -d '",ls_temp_dir,"'"
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        LET lb_complete = FALSE
        LET ls_err_command = ls_command
        LET ls_step = "Unzip program file : STEP 1" 
      END IF
    WHEN (ls_upload_doc_type = cs_doc_type_cspec)
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".csd -d '",ls_temp_dir,"'"
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        LET lb_complete = FALSE
        LET ls_err_command = ls_command
        LET ls_step = "Unzip program file : STEP 1" 
      END IF
    WHEN (ls_upload_doc_type = cs_doc_type_rspec)
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".rsd -d '",ls_temp_dir,"'"
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        LET lb_complete = FALSE
        LET ls_err_command = ls_command
        LET ls_step = "Unzip program file : STEP 1" 
      END IF
    WHEN (ls_upload_doc_type = cs_doc_type_4rp)
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".vfy -d '",ls_temp_dir,"'"
      --LET ls_command = "tar -xvf ",ls_zip_full_name,".",ls_zip_type --," ",ls_temp_dir
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        LET lb_complete = FALSE
        LET ls_err_command = ls_command
        LET ls_step = "Unzip program file : STEP 1" 
      END IF
  OTHERWISE  
  END CASE   
  
  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_unzip_program_file(p_module_name, p_file_name, p_temp_dir, p_zip_type)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_module_path   STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_step          STRING,
  ls_separator     STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type

  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_separator = os.Path.separator()
  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #備份
  LET ls_command = "cp ",ls_module_path,ls_separator,"4fd",ls_separator,ls_file_name,".4fd ",ls_module_path,ls_separator,"4fd",ls_separator,ls_file_name,".4fd.bak" 
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 1" 
  END IF

  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".tsd ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".tsd.bak"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF

  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".csd ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".csd.bak"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF
  
  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tap",ls_separator,ls_file_name,".tap ",ls_module_path,ls_separator,"dzx",ls_separator,"tap",ls_separator,ls_file_name,".tap.bak" 
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 3" 
  END IF
  
  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".4fd -d '",ls_module_path,ls_separator,"4fd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 4" 
  END IF

  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tsd -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tsd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 5" 
  END IF

  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".csd -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tsd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 5" 
  END IF

  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tap -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tap","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 6" 
  END IF
  
  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_unzip_code_file(p_module_name, p_file_name, p_temp_dir, p_zip_type)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_module_path   STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_separator     STRING,
  ls_step          STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type

  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_separator = os.Path.separator()
  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #備份
  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tap",ls_separator,ls_file_name,".tap ",ls_module_path,ls_separator,"dzx",ls_separator,"tap",ls_separator,ls_file_name,".tap.bak" 
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 1" 
  END IF
  
  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tap -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tap","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF
  
  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_unzip_form_file(p_module_name, p_file_name, p_temp_dir, p_zip_type)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_module_path   STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_step          STRING,
  ls_separator     STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type

  LET ls_separator = os.Path.separator()
  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #備份
  LET ls_command = "cp ",ls_module_path,ls_separator,"4fd",ls_separator,ls_file_name,".4fd ",ls_module_path,ls_separator,"4fd",ls_separator,ls_file_name,".4fd.bak" 
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 1" 
  END IF

  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".tsd ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".tsd.bak"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF

  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".4fd -d '",ls_module_path,ls_separator,"4fd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 3" 
  END IF

  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".tsd -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tsd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 4" 
  END IF

  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_unzip_csd_file(p_module_name, p_file_name, p_temp_dir, p_zip_type)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_module_path   STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_separator     STRING,
  ls_step          STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type

  LET ls_separator = os.Path.separator()
  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #備份
  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".csd ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".csd.bak"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 1" 
  END IF
  
  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".csd -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tsd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF
  
  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_unzip_4rp_file(p_module_name, p_file_name, p_temp_dir, p_zip_type, p_lang)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING,
  p_lang        STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_lang          STRING,
  ls_module_path   STRING,
  ls_module_full_path STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  lb_success       BOOLEAN,
  ls_step          STRING,
  ls_mnt4rp        STRING,
  ls_source_dir    STRING,
  ls_dest_dir      STRING,
  ls_4rp_name      STRING,
  ls_separator     STRING,
  li_count         INTEGER,
  li_lng_count     INTEGER,
  lo_frp_list      DYNAMIC ARRAY OF T_FRP_LIST,
  lo_lang_arr      DYNAMIC ARRAY OF T_LANGUAGE_TYPE
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type
  LET ls_lang        = p_lang

  LET lb_success  = TRUE
  LET lb_return   = TRUE
  LET ls_separator   = os.Path.separator()

  LET ls_zip_full_name = ls_temp_dir,ls_file_name

  LET ls_module_path = FGL_GETENV(ls_module_name)

  #CALL FGL_GETENV("MNT4RP") RETURNING ls_mnt4rp
  CALL cl_rpt_get_env_global("MNT4RP") RETURNING ls_mnt4rp #2015/11/02 by Hiko

  LET ls_module_full_path = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang
  CALL os.Path.chdir(ls_module_full_path) RETURNING lb_success

  CALL sadzp060_get_vfy_4rp_list(ls_file_name,ls_temp_dir) RETURNING lo_frp_list
  CALL sadzp060_get_lang_type_list() RETURNING lo_lang_arr

  SLEEP 1

  #解壓縮4rp檔到暫存目錄中
  LET ls_step = "解壓縮4rp檔到暫存目錄中"
  CALL sadzp060_set_progress(ls_step)
  DISPLAY cs_new_line
  DISPLAY cs_message_tag,ls_step
  FOR li_lng_count = 1 TO lo_lang_arr.getLength()
    LET ls_lang = lo_lang_arr[li_lng_count] 
    FOR li_count = 1 TO lo_frp_list.getLength()
      LET ls_4rp_name = lo_frp_list[li_count].fl_NAME  
      LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_lang,ls_separator,ls_4rp_name,".4rp -d '",ls_temp_dir,"'" --," 2> /dev/null"
      --LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' *.4rp -d '",ls_temp_dir,"'" --," 2> /dev/null"
      CALL sadzp060_run_command(ls_command) RETURNING lb_success
      IF NOT lb_success THEN 
        --DISPLAY cs_error_tag,ls_step,"失敗"
        --EXIT FOR
        DISPLAY cs_warning_tag,ls_step,"失敗"
        LET lb_success = TRUE
      END IF
      #複製圖檔
      IF lb_success THEN 
        LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_lang,ls_separator,ls_4rp_name,".png -d '",ls_temp_dir,"'" --," 2> /dev/null"
        --LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' *.4rp -d '",ls_temp_dir,"'" --," 2> /dev/null"
        CALL sadzp060_run_command(ls_command) RETURNING lb_success
        LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_lang,ls_separator,ls_4rp_name,".jpg -d '",ls_temp_dir,"'" --," 2> /dev/null"
        --LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' *.4rp -d '",ls_temp_dir,"'" --," 2> /dev/null"
        CALL sadzp060_run_command(ls_command) RETURNING lb_success
        LET lb_success = TRUE
      END IF 
    END FOR
  END FOR    
  IF NOT lb_success THEN GOTO _RETURN END IF  
  
  #備份模組的4rp檔
  LET ls_step = "備份模組的4rp檔" 
  CALL sadzp060_set_progress(ls_step)
  DISPLAY cs_new_line
  DISPLAY cs_message_tag,ls_step
  FOR li_lng_count = 1 TO lo_lang_arr.getLength()
    LET ls_lang = lo_lang_arr[li_lng_count] 
    FOR li_count = 1 TO lo_frp_list.getLength()
      LET ls_4rp_name = lo_frp_list[li_count].fl_NAME  
      LET ls_source_dir = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp"
      LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp.bak"
      DISPLAY cs_copy_from,ls_source_dir
      DISPLAY cs_copy_to,ls_dest_dir
      CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
      IF NOT lb_success THEN 
        DISPLAY cs_warning_tag,ls_step,"失敗"
        --EXIT FOR
      ELSE
        LET ls_step = "更改檔案讀寫屬性" 
        CALL sadzp060_set_progress(ls_step)
        DISPLAY cs_new_line
        DISPLAY cs_message_tag,ls_step
        CALL os.Path.chrwx(ls_dest_dir,511) RETURNING lb_success
        IF NOT lb_success THEN
          DISPLAY cs_warning_tag,ls_step,"失敗"
          LET lb_success = TRUE
        END IF 
      END IF
      #備份圖檔
      IF lb_success THEN 
        LET ls_source_dir = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png"
        LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png.bak"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET ls_source_dir = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg"
        LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg.bak"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET lb_success = TRUE
      END IF   
      
    END FOR
  END FOR     
  --IF NOT lb_success THEN GOTO _RETURN END IF  
  
  SLEEP 1

  #複製4rp檔到該模組目錄中
  LET ls_step = "複製4rp檔到該模組目錄中" 
  CALL sadzp060_set_progress(ls_step)
  DISPLAY cs_new_line
  DISPLAY cs_message_tag,ls_step
  FOR li_lng_count = 1 TO lo_lang_arr.getLength()
    LET ls_lang = lo_lang_arr[li_lng_count] 
    FOR li_count = 1 TO lo_frp_list.getLength()
      LET ls_4rp_name = lo_frp_list[li_count].fl_NAME  
      LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".4rp"
      LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp"
      DISPLAY cs_copy_from,ls_source_dir
      DISPLAY cs_copy_to,ls_dest_dir
      CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
      IF NOT lb_success THEN 
        --DISPLAY cs_error_tag,ls_step,"失敗"
        --EXIT FOR
        DISPLAY cs_warning_tag,ls_step,"失敗"
        LET lb_success = TRUE
      ELSE
        LET ls_step = "更改檔案讀寫屬性" 
        CALL sadzp060_set_progress(ls_step)
        DISPLAY cs_new_line
        DISPLAY cs_message_tag,ls_step
        CALL os.Path.chrwx(ls_dest_dir,511) RETURNING lb_success
        IF NOT lb_success THEN
          DISPLAY cs_warning_tag,ls_step,"失敗"
          LET lb_success = TRUE
        END IF 
      END IF
      #複製圖檔
      IF lb_success THEN
        LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".png"
        LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".jpg"
        LET ls_dest_dir   = ls_module_path,ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET lb_success = TRUE
      END IF  
    END FOR   
  END FOR   
  IF NOT lb_success THEN GOTO _RETURN END IF  
  
  SLEEP 1

  #備份報表伺服器中的4rp檔
  LET ls_step = "備份報表伺服器中的4rp檔" 
  CALL sadzp060_set_progress(ls_step)
  DISPLAY cs_new_line
  DISPLAY cs_message_tag,ls_step
  FOR li_lng_count = 1 TO lo_lang_arr.getLength()
    LET ls_lang = lo_lang_arr[li_lng_count] 
    FOR li_count = 1 TO lo_frp_list.getLength()
      LET ls_4rp_name = lo_frp_list[li_count].fl_NAME  
      LET ls_source_dir = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp"
      LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp.bak"
      DISPLAY cs_copy_from,ls_source_dir
      DISPLAY cs_copy_to,ls_dest_dir
      CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
      IF NOT lb_success THEN 
        DISPLAY cs_warning_tag,ls_step,"失敗"
        --EXIT FOR
      END IF
      #備份圖檔
      IF lb_success THEN
        LET ls_source_dir = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png"
        LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png.bak"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET ls_source_dir = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg"
        LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg.bak"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET lb_success = TRUE
      END IF 
    END FOR
  END FOR  
  --IF NOT lb_success THEN GOTO _RETURN END IF  

  SLEEP 1

  #複製4rp檔到報表伺服器各模組目錄中
  LET ls_step = "複製4rp檔到報表伺服器各模組目錄中" 
  CALL sadzp060_set_progress(ls_step)
  DISPLAY cs_new_line
  DISPLAY cs_message_tag,ls_step
  FOR li_lng_count = 1 TO lo_lang_arr.getLength()
    LET ls_lang = lo_lang_arr[li_lng_count] 
    FOR li_count = 1 TO lo_frp_list.getLength()
      LET ls_4rp_name = lo_frp_list[li_count].fl_NAME  
      LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".4rp"
      LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".4rp"
      DISPLAY cs_copy_from,ls_source_dir
      DISPLAY cs_copy_to,ls_dest_dir
      CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
      IF NOT lb_success THEN 
        --DISPLAY cs_error_tag,ls_step,"失敗"
        --EXIT FOR
        DISPLAY cs_warning_tag,ls_step,"失敗"
        LET lb_success = TRUE
      END IF
      #複製圖檔
      IF lb_success THEN
        LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".png"
        LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".png"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET ls_source_dir = ls_temp_dir,ls_lang,ls_separator,ls_4rp_name,".jpg"
        LET ls_dest_dir   = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang,ls_separator,ls_4rp_name,".jpg"
        DISPLAY cs_copy_from,ls_source_dir
        DISPLAY cs_copy_to,ls_dest_dir
        CALL os.Path.copy(ls_source_dir,ls_dest_dir) RETURNING lb_success
        LET lb_success = TRUE
      END IF 
    END FOR   
  END FOR   
  IF NOT lb_success THEN GOTO _RETURN END IF  
  
  SLEEP 1

  LABEL _RETURN:
  
  IF NOT lb_success THEN
    LET lb_return = FALSE
    DISPLAY cs_error_tag,ls_step
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  #LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_4rp_gen_multi_lang(p_module_name,p_file_name)
DEFINE
  p_module_name STRING,
  p_file_name   STRING
DEFINE
  ls_module_name STRING,
  ls_file_name   STRING,
  lb_result      BOOLEAN
DEFINE
  lb_return BOOLEAN

  LET ls_module_name = p_module_name
  LET ls_file_name   = p_file_name

  LET lb_result = TRUE
  
  TRY
    CALL sadzp188_multilang_4rp("",ls_module_name,ls_file_name,"","zh_TW","zh_CN","Y") RETURNING lb_result
  CATCH
    LET lb_result = FALSE
  END TRY  

  LET lb_return = lb_result
  
  RETURN lb_return
  
END FUNCTION 

FUNCTION sadzp060_check_report_server_valid(p_module_name, p_lang)
DEFINE
  p_module_name STRING, 
  p_lang        STRING
DEFINE
  ls_module_name   STRING, 
  ls_lang          STRING,
  ls_separator     STRING,
  ls_module_path   STRING,
  ls_mnt4rp        STRING,
  lb_success       BOOLEAN,
  ls_pwd           STRING,
  ls_err_code      STRING,
  ls_err_msg       STRING,
  ls_module_full_path STRING
DEFINE
  lb_return BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_lang        = p_lang

  LET ls_separator = os.Path.separator()

  #先備份原先的目錄
  LET ls_pwd = os.Path.pwd()
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #CALL FGL_GETENV("MNT4RP") RETURNING ls_mnt4rp
  CALL cl_rpt_get_env_global("MNT4RP") RETURNING ls_mnt4rp #2015/11/02 by Hiko

  #試著切換到Report Server的目錄看看是否成功
  LET lb_success = FALSE
  TRY 
    LET ls_module_full_path = ls_mnt4rp,ls_separator,ls_module_name.toLowerCase(),ls_separator,"4rp",ls_separator,ls_lang
    CALL os.Path.chdir(ls_module_full_path) RETURNING lb_success
  CATCH 
    LET lb_success = FALSE
  END TRY
  
  IF NOT lb_success THEN
    LET ls_err_code = "adz-00271"
    LET ls_err_msg  = "|"
    CALL sadzp000_msg_show_error(ls_err_code, ls_err_code, ls_err_msg, 1)
  END IF
  
  LET lb_return = lb_success

  #再跳回原來的目錄
  CALL os.Path.chdir(ls_pwd) RETURNING lb_success
  
  RETURN lb_return
    
END FUNCTION 

FUNCTION sadzp060_get_vfy_4rp_list(p_file_name,p_temp_dir)
DEFINE
  p_file_name STRING,
  p_temp_dir  STRING
DEFINE 
  ls_file_name STRING,
  ls_temp_dir  STRING,
  ls_vfy_file  STRING,
  ls_separator STRING,
  li_count     INTEGER,
  lo_xml_file  xml.domDocument,
  lo_dom_node  xml.DomNode,
  lo_frp_node  xml.DomNode
DEFINE
  lo_frp_list  DYNAMIC ARRAY OF T_FRP_LIST

  LET ls_file_name = p_file_name
  LET ls_temp_dir  = p_temp_dir

  LET ls_separator = os.Path.separator()

  LET ls_vfy_file = ls_temp_dir,ls_separator,ls_file_name,".vfy"

  LET lo_xml_file = xml.domDocument.create()
  DISPLAY ls_vfy_file
  CALL lo_xml_file.load(ls_vfy_file)
  LET lo_dom_node = lo_xml_file.getDocumentElement()
  LET lo_frp_node = lo_dom_node.getFirstChildElement()

  LET li_count = 1  
  WHILE (lo_frp_node IS NOT NULL)

    LET lo_frp_list[li_count].fl_NAME     = lo_frp_node.getAttribute("name") 
    LET lo_frp_list[li_count].fl_EXIST    = lo_frp_node.getAttribute("exist") 
    LET lo_frp_list[li_count].fl_TEMPLATE = lo_frp_node.getAttribute("template")

    LET li_count = li_count + 1 
    
    LET lo_frp_node = lo_frp_node.getNextSiblingElement()
  END WHILE 
  
  RETURN lo_frp_list
  
END FUNCTION

FUNCTION sadzp060_unzip_rsd_file(p_module_name, p_file_name, p_temp_dir, p_zip_type)
DEFINE
  p_module_name STRING, 
  p_file_name   STRING,
  p_temp_dir    STRING,
  p_zip_type    STRING
DEFINE
  ls_module_name   STRING, 
  ls_file_name     STRING,
  ls_temp_dir      STRING,
  ls_zip_type      STRING,
  ls_module_path   STRING,
  ls_zip_full_name STRING,
  ls_command       STRING,
  ls_err_command   STRING,
  lb_success       BOOLEAN,
  lb_complete      BOOLEAN,
  ls_separator     STRING,
  ls_step          STRING
DEFINE 
  lb_return  BOOLEAN  
  
  LET ls_module_name = p_module_name.toUpperCase()
  LET ls_file_name   = p_file_name
  LET ls_temp_dir    = p_temp_dir
  LET ls_zip_type    = p_zip_type

  LET lb_success  = TRUE
  LET lb_complete = TRUE
  LET lb_return   = TRUE
  LET ls_err_command = ""

  LET ls_zip_full_name = ls_temp_dir,ls_file_name
  LET ls_separator   = os.Path.separator()
  
  LET ls_module_path = FGL_GETENV(ls_module_name)

  #備份
  LET ls_command = "cp ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".rsd ",ls_module_path,ls_separator,"dzx",ls_separator,"tsd",ls_separator,ls_file_name,".rsd.bak"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 1" 
  END IF
  
  LET ls_command = "unzip -o '",ls_zip_full_name,".",ls_zip_type,"' ",ls_file_name,".rsd -d '",ls_module_path,ls_separator,"dzx",ls_separator,"tsd","'"
  CALL sadzp060_run_command(ls_command) RETURNING lb_success
  IF NOT lb_success THEN 
    LET lb_complete = FALSE
    LET ls_err_command = ls_command
    LET ls_step = "Unzip program file : STEP 2" 
  END IF
  
  SLEEP 1

  IF NOT lb_complete THEN
    LET lb_return = FALSE
    DISPLAY "[WARNING] ",ls_step
    DISPLAY "[Command] ",ls_err_command
  ELSE
    LET lb_return = TRUE
  END IF

  #一律設為True
  LET lb_return = TRUE
  
  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_creat_temp_directory(p_file_name)
DEFINE
  p_file_name  STRING
DEFINE
  ls_file_name   STRING,
  ls_zip_path    STRING,
  ls_dir_pid     STRING,
  li_mkdir       INTEGER,
  ls_separator   STRING,
  ls_random_name STRING
DEFINE
  ls_return STRING  

  LET ls_file_name   = p_file_name

  LET ls_separator   = os.Path.separator()
  CALL sadzp060_gen_random_name() RETURNING ls_random_name

  LET ls_zip_path = FGL_GETENV("TEMPDIR")
  LET ls_dir_pid = ls_zip_path,ls_separator,ls_file_name,"_",ui.Interface.getName(),"_",ls_random_name
  CALL os.Path.mkdir(ls_dir_pid) RETURNING li_mkdir
  
  LET ls_return = ls_dir_pid

  RETURN ls_return
  
END FUNCTION

#以亂數產出副檔名
FUNCTION sadzp060_gen_random_name()
DEFINE
  lr_random_name RECORD
    segment1 STRING,
    segment2 STRING,
    segment3 STRING,
    segment4 STRING
  END RECORD
DEFINE 
  li_random_value  INTEGER,
  li_max_random_num INTEGER,
  ls_final_name    STRING,
  ls_using_format  STRING
DEFINE  
  ls_return  STRING

  LET li_max_random_num = 9999
  LET ls_using_format  = "&&&&"
  
  CALL util.math.rand(li_max_random_num) RETURNING li_random_value
  LET lr_random_name.segment1 = li_random_value USING ls_using_format
  CALL util.math.rand(li_max_random_num) RETURNING li_random_value
  LET lr_random_name.segment2 = li_random_value USING ls_using_format
  CALL util.math.rand(li_max_random_num) RETURNING li_random_value
  LET lr_random_name.segment3 = li_random_value USING ls_using_format
  CALL util.math.rand(li_max_random_num) RETURNING li_random_value
  LET lr_random_name.segment4 = li_random_value USING ls_using_format
  
  LET ls_final_name = lr_random_name.segment1,".",
                      lr_random_name.segment2,".",
                      lr_random_name.segment3,".",
                      lr_random_name.segment4

  LET ls_return = ls_final_name
  
  RETURN ls_return                     
  
END FUNCTION

FUNCTION sadzp060_set_progress(p_message)
DEFINE
  p_message STRING
DEFINE
  ls_message      STRING,
  ls_progress     STRING

  LET ls_message = p_message
  
  LET mi_progress = mi_progress + 1
  LET ls_progress = mi_progress
  
  DISPLAY cs_progress_tag,ls_progress
  
  IF NVL(ls_message,"X") <> "X" THEN
    DISPLAY cs_message_tag,ls_message
  END IF
  
END FUNCTION

FUNCTION sadzp060_run_command(p_command)
DEFINE 
  p_command STRING  
DEFINE 
  li_success SMALLINT, 
  ls_command STRING
DEFINE
  lb_return BOOLEAN  

  LET ls_command = p_command  

  #每一個Run也是一個Progress
  CALL sadzp060_set_progress(ls_command)
  RUN ls_command RETURNING li_success
  
  #DISPLAY "OS : ",FGL_GETENV("ostype")," Success : ",li_success

  {
  IF (FGL_GETENV("ostype") MATCHES "Win*") THEN
    LET li_success = li_success 
  ELSE
    LET li_success = ( li_success / 256 )
  END IF  
  }
  
  LET li_success = ( li_success / 256 )

  #DISPLAY "OS : ",FGL_GETENV("ostype")," Success : ",li_success

  IF li_success = 0 THEN
    LET lb_return = TRUE
  ELSE
    LET lb_return = FALSE
  END IF

  LET lb_return = TRUE

  RETURN lb_return
  
END FUNCTION

FUNCTION sadzp060_get_sadzp060_progress_all(p_prog_type)
DEFINE
  p_prog_type STRING
DEFINE
  ls_prog_type    STRING,
  ls_progress_all VARCHAR(5),
  ls_sql          STRING
DEFINE
  ls_return STRING  

  LET ls_prog_type = p_prog_type
  
  LET ls_sql = "SELECT EJ.DZEJ006 PROGRESS_ALL        ",
               "  FROM DZEJ_T EJ                      ",
               " WHERE EJ.DZEJ001 = 'sadzp060_Progress'",  
               "   AND EJ.DZEJ003 = 'ALL'             ",
               "   AND EJ.DZEJ004 = '",ls_prog_type,"'"
 
  PREPARE lpre_get_sadzp060_progress_all FROM ls_sql
  DECLARE lcur_get_sadzp060_progress_all CURSOR FOR lpre_get_sadzp060_progress_all

  OPEN lcur_get_sadzp060_progress_all
  FETCH lcur_get_sadzp060_progress_all INTO ls_progress_all
  CLOSE lcur_get_sadzp060_progress_all
  
  FREE lpre_get_sadzp060_progress_all
  FREE lcur_get_sadzp060_progress_all  

  LET ls_return = ls_progress_all
  
  RETURN ls_return
  
END FUNCTION

FUNCTION sadzp060_set_sadzp060_progress_all(p_prog_type,p_progress)
DEFINE
  p_prog_type STRING,
  p_progress  STRING
DEFINE
  ls_prog_type STRING,
  ls_progress  STRING,
  ls_sql       STRING

  LET ls_prog_type = p_prog_type
  LET ls_progress  = p_progress

  LET ls_sql = "UPDATE DZEJ_T EJ                      ", 
               "   set ej.dzej006 = '",ls_progress,"' ",
               " WHERE EJ.DZEJ001 = 'sadzp060_Progress'",  
               "   AND EJ.DZEJ003 = 'ALL'             ",
               "   AND EJ.DZEJ004 = '",ls_prog_type,"'"

  BEGIN WORK

  TRY
    PREPARE lpre_set_sadzp060_progress_all FROM ls_sql
    EXECUTE lpre_set_sadzp060_progress_all
    COMMIT WORK
  CATCH
    DISPLAY "[Error] Update sadzp060 progress. "
    ROLLBACK WORK
  END TRY  
  
END FUNCTION

FUNCTION sadzp060_check_zip_content_valid(p_parameters,p_file_name,p_temp_dir, p_zip_type)
DEFINE
  p_parameters      T_UPLOAD_PARAM,
  p_file_name       STRING,
  p_temp_dir        STRING,
  p_zip_type        STRING
DEFINE
  ls_file_name       STRING,
  ls_temp_dir        STRING,
  ls_zip_type        STRING,
  ls_upload_doc_type STRING,
  ls_message         STRING,
  lb_success         BOOLEAN,
  lo_parameters      T_UPLOAD_PARAM
DEFINE 
  lo_return_params   T_UPLOAD_PARAM,
  lb_return          BOOLEAN  
  
  LET ls_file_name       = p_file_name
  LET ls_temp_dir        = p_temp_dir
  LET ls_zip_type        = p_zip_type
  LET ls_upload_doc_type = p_parameters.arg3_upload_doc_type

  LET lo_parameters.* = p_parameters.*

  LET lb_success  = TRUE
  LET lb_return   = TRUE
  LET ls_message  = ""

  LET ls_message = "Uncompress to temp dir."
  CALL sadzp060_unzip_to_temp_dir(ls_file_name,ls_temp_dir,ls_zip_type,ls_upload_doc_type) RETURNING lb_success
  IF NOT lb_success THEN GOTO _check_error END IF

  LET ls_message = "Check compressed file valid."

  #2014.05.20 該為全部呼叫sadzp060_2_chk_permission
  {
  IF ls_upload_doc_type = cs_doc_type_cspec THEN
    #上傳格式為 CSPEC 時處理
    CALL sadzp040_2_chk_permission(ls_file_name, ls_temp_dir, ls_upload_doc_type) RETURNING lb_success,ls_version
    IF NOT lb_success THEN GOTO _check_error END IF
  ELSE 
    CALL sadzp060_2_chk_permission(ls_file_name, ls_temp_dir, ls_upload_doc_type) RETURNING lb_success,ls_version
    IF NOT lb_success THEN GOTO _check_error END IF
  END IF   
  }
  
  CALL sadzp060_2_chk_permission(ls_file_name, ls_temp_dir, ls_upload_doc_type) RETURNING lo_return_params.*,ls_message
  LET lb_success = IIF(ls_message.trim()IS NULL,TRUE,FALSE)
  IF NOT lb_success THEN GOTO _check_error END IF

  #將回傳後的 T_UPLOAD_PARAM 的前四項值回填
  LET lo_return_params.arg1_program_name      = ls_file_name --lo_parameters.arg1_program_name
  --LET lo_return_params.arg2_module_name     = lo_parameters.arg2_module_name
  LET lo_return_params.arg3_upload_doc_type   = lo_parameters.arg3_upload_doc_type
  LET lo_return_params.arg4_client_path       = lo_parameters.arg4_client_path
  
  LABEL _check_error:
  
  IF NOT lb_success THEN
    LET lb_return = FALSE
  ELSE
    LET lb_return = TRUE
  END IF

  RETURN lb_return,ls_message,lo_return_params.*
  
END FUNCTION

FUNCTION sadzp060_show_message_designer()
  DISPLAY cs_message_half_separator,cs_message_designer,cs_message_half_separator
END FUNCTION

FUNCTION sadzp060_show_message_generator()
  DISPLAY cs_message_half_separator,cs_message_generator,cs_message_half_separator
END FUNCTION

FUNCTION sadzp060_show_message_user_control()
  DISPLAY cs_message_half_separator,cs_message_user_control,cs_message_half_separator
END FUNCTION

FUNCTION sadzp060_show_message_separator()
  DISPLAY cs_message_separator
END FUNCTION

FUNCTION sadzp060_compress_client_files(p_work_dir)
DEFINE
  p_work_dir  STRING
DEFINE
  ls_file_name   STRING,
  ls_work_dir    STRING,
  ls_path_name   STRING,    
  li_integer     INTEGER,
  ls_temp_file_name STRING,
  ls_temp_char   STRING,
  lo_open_dialog T_FILE_DIALOG
DEFINE
  lb_result BOOLEAN   

  LET ls_work_dir  = p_work_dir

  LET lb_result = TRUE

  LET lo_open_dialog.PATH = ls_work_dir
  LET lo_open_dialog.CAPTION = cs_open_dialog_caption
  CALL sadzp060_open_dir_dialog(lo_open_dialog.*) RETURNING ls_path_name
  
  --DISPLAY "ls_work_dir : ",ls_work_dir
  --DISPLAY "ls_path_name : ",ls_path_name

  IF NVL(ls_path_name.trim(),cs_null_default) <> cs_null_default THEN 
    LET ls_temp_file_name = ""
    FOR li_integer = ls_path_name.getLength() TO 1 STEP -1
      LET ls_temp_char = ls_path_name.getCharAt(li_integer)
      IF (ls_temp_char = cs_dos_separator) OR (ls_temp_char = cs_unix_separator) THEN 
        EXIT FOR 
      END IF   
      LET ls_temp_file_name = ls_temp_char,ls_temp_file_name
    END FOR 
    LET ls_file_name = ls_temp_file_name 
    
    DISPLAY cs_message_tag,"You selected the PATH : ",ls_path_name
    DISPLAY cs_message_tag,"Filename : ",ls_file_name
    CALL sadzp060_compress_client_4rp(ls_file_name,ls_path_name) RETURNING lb_result
  ELSE 
    LET lb_result = FALSE
  END IF  

  RETURN lb_result,ls_file_name
  
END FUNCTION 

FUNCTION sadzp060_open_dir_dialog(p_save_dialog)
DEFINE
  p_save_dialog T_FILE_DIALOG
DEFINE
  ls_rtn_name STRING   
DEFINE
  ls_return STRING   

  CALL ui.interface.frontCall("standard","opendir",[p_save_dialog.PATH,p_save_dialog.CAPTION],[ls_rtn_name])

  LET ls_return = ls_rtn_name

  RETURN ls_return
  
END FUNCTION  

FUNCTION sadzp060_compress_client_4rp(p_file_name,p_work_path)
DEFINE
  p_file_name STRING, 
  p_work_path STRING
DEFINE
  ls_file_name STRING, 
  ls_work_path STRING,
  ls_command   STRING,
  ls_separator STRING,
  ls_7zip_path  STRING,
  ls_source    STRING,
  ls_destination STRING,
  lb_result    BOOLEAN 

  LET ls_file_name = p_file_name
  LET ls_work_path = p_work_path

  LET ls_separator = os.Path.separator()
  LET ls_7zip_path = FGL_GETENV("UTL"),ls_separator,"3rd",ls_separator,"7zip",ls_separator

  LET lb_result = TRUE
  
  ------------------------------------------------------------------------------
  #測試是否有解壓程式
  LET ls_command = cs_client_temp_dir,cs_dos_separator,"7za.exe"
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN 
    DISPLAY cs_message_tag,"Check compress/uncompress program OK !!" 
  ELSE 
    DISPLAY cs_warning_tag,"Check compress/uncompress program unsuccess !!" 
  
    #建立 Client 暫存目錄
    LET ls_command = "cmd.exe /C \"mkdir ",cs_client_temp_dir,""
    CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
    IF lb_result THEN DISPLAY cs_message_tag,"Create client temp directory OK !" ELSE DISPLAY cs_warning_tag,"Create client temp directory unsuccess : ",ls_command END IF

    #將暫存目錄設為隱藏
    {
    LET ls_command = "cmd.exe /C \"attrib +h ",cs_client_temp_dir,""
    CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
    IF lb_result THEN DISPLAY cs_message_tag,"Set client temp directory hidden OK !" ELSE DISPLAY cs_warning_tag,"Set client temp directory hidden unsuccess : ",ls_command END IF
    }
    
    #下載7za.exe到 c:\t100temp
    LET ls_source      = ls_7zip_path,"7za.exe"
    LET ls_destination = cs_client_temp_dir,cs_dos_separator,"7za.exe"
    TRY
      DISPLAY cs_message_tag,"Downloading compress/uncompress program ....." 
      LET lb_result = TRUE
      CALL FGL_PUTFILE(ls_source,ls_destination)
    CATCH
      LET lb_result = FALSE
    END TRY   
    IF lb_result THEN DISPLAY cs_message_tag,"Download compress/uncompress program OK !" ELSE DISPLAY cs_error_tag,"Download compress/uncompress program unsuccess : ",ls_command END IF
    
  END IF 
  ------------------------------------------------------------------------------
  
  ------------------------------------------------------------------------------

  #移除暫存目錄中舊的tzt檔
  LET ls_command = "cmd.exe /C \"del -F -Q ",cs_client_temp_dir,cs_dos_separator,ls_file_name,cs_upload_string,".tzt","" 
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN DISPLAY cs_message_tag,"Delete tempory tzt file OK !" ELSE DISPLAY cs_warning_tag,"Delete tempory tzt file unsuccess : ",ls_command END IF

  #壓縮4rp檔為.tzt
  LET ls_command = cs_client_temp_dir,cs_dos_separator,"7za.exe a -tzip ",cs_client_temp_dir,cs_dos_separator,ls_file_name,cs_upload_string,".tzt ",ls_work_path,cs_dos_separator,"*"
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN DISPLAY cs_message_tag,"Compress 4rp files OK" ELSE DISPLAY cs_error_tag,"Compress 4rp files unsuccess : ",ls_command GOTO _return  END IF

  #將vfy檔設為可見
  {
  LET ls_command = "cmd.exe /C \"attrib -h ",ls_work_path,cs_dos_separator,ls_file_name,".vfy"
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN DISPLAY cs_message_tag,"Set vfy file unhidden OK !" ELSE DISPLAY cs_warning_tag,"Set vfy file unhidden unsuccess : ",ls_command END IF
  }
  
  #壓縮vfy檔為.tzt
  LET ls_command = cs_client_temp_dir,cs_dos_separator,"7za.exe a -tzip ",cs_client_temp_dir,cs_dos_separator,ls_file_name,cs_upload_string,".tzt ",ls_work_path,cs_dos_separator,"*.vfy"
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN DISPLAY cs_message_tag,"Compress vfy files OK" ELSE DISPLAY cs_error_tag,"Compress vfy files unsuccess : ",ls_command GOTO _return END IF

  #將vfy檔設為隱藏
  {
  LET ls_command = "cmd.exe /C \"attrib +h ",ls_work_path,cs_dos_separator,ls_file_name,".vfy"
  CALL ui.Interface.frontCall("standard", "execute", [ls_command,1], [lb_result])
  IF lb_result THEN DISPLAY cs_message_tag,"Set vfy file hidden OK !" ELSE DISPLAY cs_warning_tag,"Set vfy file hidden unsuccess : ",ls_command END IF
  }
  ------------------------------------------------------------------------------
  
  LABEL _return:

  RETURN lb_result
  
END FUNCTION 

FUNCTION sadzp060_get_lang_type_list()
DEFINE
  lo_lang_arr  DYNAMIC ARRAY OF T_LANGUAGE_TYPE,
  li_count     INTEGER,
  ls_sql       STRING 
DEFINE
  lo_return DYNAMIC ARRAY OF T_LANGUAGE_TYPE

  LET ls_sql = "SELECT GZZY001    ", 
               "  FROM GZZY_T     ", 
               " ORDER BY GZZY001 "
               
  PREPARE lpre_get_lang_type_list FROM ls_sql
  DECLARE lcur_get_lang_type_list CURSOR FOR lpre_get_lang_type_list

  LET li_count = 1
  
  OPEN lcur_get_lang_type_list
  FOREACH lcur_get_lang_type_list INTO lo_lang_arr[li_count]  
    IF SQLCA.sqlcode THEN
      EXIT FOREACH
    END IF

    LET li_count = li_count + 1

  END FOREACH
  CLOSE lcur_get_lang_type_list

  FREE lcur_get_lang_type_list
  FREE lpre_get_lang_type_list
  
  CALL lo_lang_arr.deleteElement(li_count)
  
  LET lo_return = lo_lang_arr

  RETURN lo_return
  
END FUNCTION 
