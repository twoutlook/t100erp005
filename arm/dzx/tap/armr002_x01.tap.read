<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="armr002_x01" std_prog="armr002_x01" erpver="1.0" module="ARM" ver="1" env="s" zone="t10prd" booking="N" type="X" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="X" status=""/>
    <free_style value="N" status=""/>
    <start_arg value="" status=""/>
  </other>
  <point name="function.armr002_x01_desc" order="1" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 获取说明
# Memo...........:
# Usage..........: CALL armr002_x01_desc(p_num,p_target)
#                  RETURNING r_desc
# Date & Author..: 2015-6-9 By zhujing
# Modify.........:
################################################################################
PRIVATE FUNCTION armr002_x01_desc(p_num,p_target)
DEFINE p_num    LIKE type_t.num5
DEFINE p_target LIKE type_t.chr10
DEFINE r_desc   LIKE type_t.chr500
   
   SELECT oocql004 INTO r_desc
     FROM oocql_t
    WHERE oocql001 = p_num
      AND oocql002 = p_target
      AND oocql003 = g_dlang
      
RETURN r_desc
END FUNCTION]]>
  </point>
  <point name="global.variable" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="ins_data.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[DEFINE l_rmcb007  LIKE rmcb_t.rmcb007
DEFINE l_rmcb006  LIKE rmcb_t.rmcb006
DEFINE l_sum_sql  STRING
DEFINE l_rate     LIKE inaj_t.inaj014
DEFINE l_success  LIKE type_t.chr2]]>
  </point>
  <point name="ins_data.foreach" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[       IF NOT cl_null(sr.rmcb008) THEN
          CALL armr002_x01_desc('1132',sr.rmcb008) RETURNING sr.l_rmcb008_desc
          LET sr.l_rmcb008_desc = sr.rmcb008,'.',sr.l_rmcb008_desc
       END IF
       LET sr.l_sum = 0
       IF cl_null (sr.rmcb008) THEN
          CONTINUE FOREACH
       END IF
       LET l_sum_sql = " SELECT DISTINCT SUM(COALESCE(rmcb007,0)),rmcb006 ",
                       " FROM rmcb_t LEFT OUTER JOIN rmca_t ON rmcadocno = rmcbdocno AND rmcaent = rmcbent ",
                       " WHERE ",tm.wc CLIPPED,
                       "   AND rmcb004 = '",sr.rmcb004,"' ",
                       "   AND rmcb008 = '",sr.rmcb008,"' ",
                       "   AND rmca002 = '",sr.rmca002,"' ",
                       "   AND rmcbent = ",g_enterprise,
                       " GROUP BY rmcb006 "
       PREPARE armr002_x01_sum_pre FROM l_sum_sql
       IF STATUS THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.extend = 'prepare:'
          LET g_errparam.code   = STATUS
          LET g_errparam.popup  = TRUE
          CALL cl_err()
          LET g_rep_success = 'N' 
       END IF
       DECLARE armr002_x01_sum_curs CURSOR FOR armr002_x01_sum_pre
       FOREACH armr002_x01_sum_curs INTO l_rmcb007,l_rmcb006
          IF STATUS THEN
             INITIALIZE g_errparam TO NULL
             LET g_errparam.extend = 'foreach:'
             LET g_errparam.code   = STATUS
             LET g_errparam.popup  = TRUE
             CALL cl_err()
             LET g_rep_success = 'N'
             EXIT FOREACH
          END IF
          #统一换算成料件主档的生产单位数量
          IF NOT cl_null(sr.l_imaa006) AND NOT cl_null(l_rmcb006) THEN
             CALL s_aimi190_get_convert(sr.rmcb004,l_rmcb006,sr.l_imaa006) RETURNING l_success,l_rate 
             IF NOT l_success THEN
                LET l_rate = 1
             END IF
          ELSE 
             LET l_rate = 1
          END IF
          LET sr.l_sum = sr.l_sum + l_rmcb007 * l_rate
          LET l_rate = 0
       END FOREACH]]>
  </point>
  <point name="sel_prep.g_from" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="Y">
    <![CDATA[   LET g_from = " FROM rmca_t LEFT OUTER JOIN rmcb_t ON rmcbent = rmcaent AND rmcbdocno = rmcadocno ",
                "             LEFT OUTER JOIN imaal_t ON rmcb004 = imaal001 AND rmcbent = imaalent AND imaal002 = '",g_dlang,"' ",
                "             LEFT OUTER JOIN pmaal_t ON rmca002 = pmaal001 AND rmcaent = pmaalent AND pmaal002 = '",g_dlang,"' ",
                "             LEFT OUTER JOIN imae_t ON rmcb004 = imae001 AND rmcbent = imaeent AND rmcbsite = imaesite "]]>
  </point>
  <point name="sel_prep.g_order" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="sel_prep.g_select" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="Y">
    <![CDATA[   LET g_select = " SELECT DISTINCT rmcb004,imaal003,imaal004,rmca002,pmaal004,rmcb008,NULL,NULL,imae016"]]>
  </point>
  <section id="armr002_x01.create_tmptable" ver="3" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION armr002_x01_create_tmptable()
 
   #可切換資料庫，避免大量資料佔資源及空間
   #add-point:create_tmp.before
   {<point name="create_tmp.before"/>}
   #end add-point:create_tmp.before
 
   #主報表TEMP TABLE的欄位SQL   
   LET g_sql = "rmcb_t_rmcb004. .rmcb004,l_imaal003.imaal_t.imaal003,l_imaal004.imaal_t.imaal004,rmca_t_rmca002. .rmca002,l_rmca002_desc.pmaal_t.pmaal004,rmcb_t_rmcb008. .rmcb008,l_rmcb008_desc.oocql_t.oocql004,l_sum.rmcb_t.rmcb007,l_imaa006.imaa_t.imaa006" 
   
   #建立TEMP TABLE,主報表序號1 
   IF NOT cl_xg_create_tmptable(g_sql,1) THEN
      LET g_rep_success = 'N'            
   END IF
   #可切換資料庫，避免大量資料佔資源及空間
   #add-point:create_tmp.after
   {<point name="create_tmp.after"/>}
   #end add-point:create_tmp.after
END FUNCTION
]]>
  </section>
  <section id="armr002_x01.description" ver="1" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:1,PR版次:1) Build-000001
#+ 
#+ Filename...: armr002_x01
#+ Description: RMA不良原因統計表
#+ Creator....: 05423(2015-06-05 17:04:16)
#+ Modifier...: () -SD/PR-
]]>
  </section>
  <section id="armr002_x01.global" ver="1" status="" src="s" readonly="">
    <![CDATA[#報表 x01 樣板自動產生(Version:1)
 
IMPORT os
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_report.inc"                  #報表使用的global
 
#報表 type 宣告
DEFINE tm RECORD
       wc STRING                   #where condition
       END RECORD
 
DEFINE g_str           STRING,                      #列印條件回傳值              
       g_sql           STRING  
 
 
#add-point:自定義環境變數(Global Variable)
{<point name="global.variable"/>}
#end add-point
]]>
  </section>
  <section id="armr002_x01.ins_data" ver="3" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION armr002_x01_ins_data()
DEFINE sr RECORD 
   rmcb_t_rmcb004 LIKE .rmcb004, 
   l_imaal003 LIKE imaal_t.imaal003, 
   l_imaal004 LIKE imaal_t.imaal004, 
   rmca_t_rmca002 LIKE .rmca002, 
   l_rmca002_desc LIKE pmaal_t.pmaal004, 
   rmcb_t_rmcb008 LIKE .rmcb008, 
   l_rmcb008_desc LIKE oocql_t.oocql004, 
   l_sum LIKE .rmcb007, 
   l_imaa006 LIKE imaa_t.imaa006
 END RECORD
#add-point:ins_data段define
{<point name="ins_data.define"/>}
#end add-point
 
    #add-point:ins_data段before
    {<point name="ins_data.before"/>}
    #end add-point
 
    LET g_rep_success = 'Y'
 
    FOREACH armr002_x01_curs INTO sr.*                               
       IF STATUS THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.extend = 'foreach:'
          LET g_errparam.code   = STATUS
          LET g_errparam.popup  = TRUE
          CALL cl_err()
          LET g_rep_success = 'N'
          EXIT FOREACH
       END IF
 
       #add-point:ins_data段foreach
       {<point name="ins_data.foreach"/>}
       #end add-point
 
       #add-point:ins_data段before.save
       {<point name="ins_data.before.save"/>}
       #end add-point
 
       #EXECUTE
       EXECUTE insert_prep USING sr.rmcb_t_rmcb004,sr.l_imaal003,sr.l_imaal004,sr.rmca_t_rmca002,sr.l_rmca002_desc,sr.rmcb_t_rmcb008,sr.l_rmcb008_desc,sr.l_sum,sr.l_imaa006
 
       IF SQLCA.sqlcode THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.extend = "armr002_x01_execute"
          LET g_errparam.code   = SQLCA.sqlcode
          LET g_errparam.popup  = FALSE
          CALL cl_err()       
          LET g_rep_success = 'N'
          EXIT FOREACH
       END IF
 
       #add-point:ins_data段after_save
       {<point name="ins_data.after.save"/>}
       #end add-point
       
    END FOREACH
    
    #add-point:ins_data段after
    {<point name="ins_data.after"/>}
    #end add-point
 
END FUNCTION
]]>
  </section>
  <section id="armr002_x01.ins_prep" ver="2" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION armr002_x01_ins_prep()
DEFINE i              INTEGER
DEFINE l_prep_str     STRING
#add-point:ins_prep.define
{<point name="ins_prep.define"/>}
#end add-point:ins_prep.define
 
   FOR i = 1 TO g_rep_tmpname.getLength()
      CALL cl_xg_del_data(g_rep_tmpname[i])
      #LET g_sql = g_rep_ins_prep[i]              #透過此lib取得prepare字串 lib精簡
      CASE i
         WHEN 1
         #INSERT INTO PREP
         LET g_sql = " INSERT INTO ",g_rep_db CLIPPED,g_rep_tmpname[1] CLIPPED," VALUES(?,?,?,?,?,?, 
             ?,?,?)"
         PREPARE insert_prep FROM g_sql
         IF STATUS THEN
            LET l_prep_str ="insert_prep",i
            INITIALIZE g_errparam TO NULL
            LET g_errparam.extend = l_prep_str
            LET g_errparam.code   = status
            LET g_errparam.popup  = TRUE
            CALL cl_err()
            CALL cl_xg_drop_tmptable()
            LET g_rep_success = 'N'           
         END IF 
         #add-point:insert_prep段
         {<point name="insert_prep"/>}
         #end add-point                  
 
 
      END CASE
   END FOR
END FUNCTION
]]>
  </section>
  <section id="armr002_x01.main" ver="1" status="" src="s" readonly="">
    <![CDATA[PUBLIC FUNCTION armr002_x01(p_arg1)
DEFINE  p_arg1 STRING                  #tm.wc  where condition
#add-point:init段define
{<point name="component.define"/>}
#end add-point
 
   LET tm.wc = p_arg1
 
   #add-point:報表元件參數準備
   {<point name="component.arg.prep" />}
   #end add-point
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   ##報表元件執行期間是否有錯誤代碼
   LET g_rep_success = 'Y'
   
   #報表元件代號      
   LET g_rep_code = "armr002_x01"
   IF cl_null(tm.wc) THEN LET tm.wc = " 1=1" END IF
 
   #create 暫存檔
   CALL armr002_x01_create_tmptable()
 
   IF g_rep_success = 'N' THEN
      RETURN
   END IF
   #報表select欄位準備
   CALL armr002_x01_sel_prep()
 
   IF g_rep_success = 'N' THEN
      RETURN
   END IF   
   #報表insert的prepare
   CALL armr002_x01_ins_prep()  
 
   IF g_rep_success = 'N' THEN
      RETURN
   END IF
   #將資料存入tmptable
   CALL armr002_x01_ins_data() 
 
   IF g_rep_success = 'N' THEN
      RETURN
   END IF   
   #將tmptable資料印出
   CALL armr002_x01_rep_data()
 
END FUNCTION
]]>
  </section>
  <section id="armr002_x01.other_function" ver="1" status="" src="s" readonly="">
    <![CDATA[{<point name="other.function"/>}
]]>
  </section>
  <section id="armr002_x01.rep_data" ver="1" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION armr002_x01_rep_data()
#add-point:rep_data.define
{<point name="rep_data.define"/>}
#end add-point:rep_data.define
 
    #add-point:rep_data.before
    {<point name="rep_data.before"/>}
    #end add-point:rep_data.before
    
    CALL cl_xg_view()
    #add-point:rep_data.after
    {<point name="rep_data.after"/>}
    #end add-point:rep_data.after
END FUNCTION
]]>
  </section>
  <section id="armr002_x01.sel_prep" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION armr002_x01_sel_prep()
DEFINE g_select      STRING
DEFINE g_from        STRING
DEFINE g_where       STRING
#add-point:sel_prep段define
{<point name="sel_prep.define"/>}
#end add-point
 
   #add-point:sel_prep before
   {<point name="sel_prep.before" mark="Y"/>}
   #end add-point
 
   #add-point:sel_prep g_select
   {<point name="sel_prep.g_select" mark="Y"/>}
   #end add-point
   LET g_select = " SELECT rmcb_t.rmcb004,NULL,NULL,rmca_t.rmca002,NULL,rmcb_t.rmcb008,NULL,NULL,NULL" 

 
   #add-point:sel_prep g_from
   {<point name="sel_prep.g_from" mark="Y"/>}
   #end add-point
    LET g_from = " FROM rmca_t,rmcb_t"
 
   #add-point:sel_prep g_where
   {<point name="sel_prep.g_where" mark="Y"/>}
   #end add-point
    LET g_where = " WHERE " ,tm.wc CLIPPED
 
   #add-point:sel_prep g_order
   {<point name="sel_prep.g_order" mark="Y"/>}
   #end add-point
 
   #add-point:sel_prep.sql.before
   {<point name="sel_prep.sql.before" mark="Y"/>}
   #end add-point:sel_prep.sql.before
   LET g_where = g_where ,cl_sql_add_filter("rmca_t")   #資料過濾功能
   LET g_sql = g_select CLIPPED ," ",g_from CLIPPED ," ",g_where CLIPPED
   LET g_sql = cl_sql_add_mask(g_sql)    #遮蔽特定資料, 若寫至add-point也需複製此段
 
   #add-point:sel_prep.sql.after
   {<point name="sel_prep.sql.after" mark="Y"/>}
   #end add-point
   PREPARE armr002_x01_prepare FROM g_sql
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.extend = 'prepare:'
      LET g_errparam.code   = STATUS
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET g_rep_success = 'N' 
   END IF
   DECLARE armr002_x01_curs CURSOR FOR armr002_x01_prepare
 
END FUNCTION
]]>
  </section>
</add_points>
