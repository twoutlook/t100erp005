#該程式未解開Section, 採用最新樣板產出!
{<section id="apmr430_g01.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:6(2016-11-02 21:04:50), PR版次:0006(1900-01-01 00:00:00)
#+ Customerized Version.: SD版次:(), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000062
#+ Filename...: apmr430_g01
#+ Description: ...
#+ Creator....: 01996(2015-07-30 15:33:29)
#+ Modifier...: 08734 -SD/PR- 00000
 
{</section>}
 
{<section id="apmr430_g01.global" readonly="Y" >}
#報表 g01 樣板自動產生(Version:13)
#add-point:填寫註解說明 name="global.memo"

#end add-point
#add-point:填寫註解說明 name="global.memo_customerization"

 
IMPORT os
#add-point:增加匯入項目 name="global.import"

#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_report.inc"                  #報表使用的global
 
#報表 type 宣告
PRIVATE TYPE sr1_r RECORD
   l_pmex003 LIKE pmex_t.pmex003, 
   l_pmex002_desc2 LIKE type_t.chr1000, 
   l_pmex002_desc LIKE type_t.chr1000, 
   pmev012 LIKE pmev_t.pmev012, 
   pmev011 LIKE pmev_t.pmev011, 
   pmevdocdt LIKE pmev_t.pmevdocdt, 
   l_pmev005_desc LIKE type_t.chr1000, 
   l_pmex006 LIKE pmex_t.pmex006, 
   l_pmex008 LIKE pmex_t.pmex008, 
   l_pmex007 LIKE pmex_t.pmex007, 
   l_pmex005 LIKE type_t.chr1000, 
   l_pmex002 LIKE pmex_t.pmex002, 
   l_pmex001 LIKE type_t.chr1000, 
   l_pmexseq LIKE pmex_t.pmexseq, 
   l_pmev019_desc LIKE type_t.chr1000, 
   l_pmev002_desc LIKE type_t.chr1000, 
   l_pmev001_desc LIKE type_t.chr1000, 
   l_pmev010_desc LIKE type_t.chr1000, 
   l_pmev008_desc LIKE type_t.chr1000, 
   l_pmev009_desc LIKE type_t.chr1000, 
   pmev006 LIKE pmev_t.pmev006, 
   pmev004 LIKE pmev_t.pmev004, 
   l_pmev003_desc LIKE type_t.chr1000, 
   pmevdocno LIKE pmev_t.pmevdocno, 
   pmevent LIKE pmev_t.pmevent, 
   pmev005 LIKE pmev_t.pmev005
END RECORD
 
PRIVATE TYPE sr2_r RECORD
   ooff013 LIKE ooff_t.ooff013
END RECORD
 
 
DEFINE tm RECORD
       wc STRING                   #where codition
       END RECORD
DEFINE sr DYNAMIC ARRAY OF sr1_r                   #宣告sr為sr1_t資料結構的動態陣列
DEFINE g_select        STRING
DEFINE g_from          STRING
DEFINE g_where         STRING
DEFINE g_order         STRING
DEFINE g_sql           STRING                         #report_select_prep,REPORT段使用
 
#add-point:自定義環境變數(Global Variable)(客製用) name="global.variable_customerization"

#end add-point
#add-point:自定義環境變數(Global Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
 TYPE sr3_r RECORD
   pmew001 LIKE pmew_t.pmew001,
   pmew001_desc LIKE pmaal_t.pmaal004
END RECORD

 TYPE sr4_r RECORD
   pmey001 LIKE pmey_t.pmey001,
   pmey002 LIKE pmey_t.pmey002,
   pmey003 LIKE pmey_t.pmey003,
   pmey004 LIKE pmey_t.pmey004
END RECORD
#end add-point
 
{</section>}
 
{<section id="apmr430_g01.main" readonly="Y" >}
PUBLIC FUNCTION apmr430_g01(p_arg1)
DEFINE  p_arg1 STRING                  #tm.wc  where codition
#add-point:init段define (客製用) name="component_name.define_customerization"

#end add-point
#add-point:init段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="component_name.define"

#end add-point
 
   LET tm.wc = p_arg1
 
   #add-point:報表元件參數準備 name="component.arg.prep"
   
   #end add-point
   #報表元件代號
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   ##報表元件執行期間是否有錯誤代碼
   LET g_rep_success = 'Y'   
   
   LET g_rep_code = "apmr430_g01"
   IF cl_null(tm.wc) THEN LET tm.wc = " 1=1" END IF
 
   #主報表select子句準備
   CALL apmr430_g01_sel_prep()
   
   IF g_rep_success = 'N' THEN
      RETURN
   END IF   
 
   #將資料存入array
   CALL apmr430_g01_ins_data()
   
   IF g_rep_success = 'N' THEN
      RETURN
   END IF   
 
   #將資料印出
   CALL apmr430_g01_rep_data()
 
END FUNCTION
 
{</section>}
 
{<section id="apmr430_g01.sel_prep" readonly="Y" >}
#+ 選單功能實際執行處
PRIVATE FUNCTION apmr430_g01_sel_prep()
   #add-point:sel_prep段define (客製用) name="sel_prep.define_customerization"
   
   #end add-point
   #add-point:sel_prep段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="sel_prep.define"
   
   #end add-point
 
   #add-point:sel_prep before name="sel_prep.before"
   
   #end add-point
   
   #add-point:sel_prep g_select name="sel_prep.g_select"
    LET g_select = " SELECT pmex003,'','',pmev012,pmev011,pmevdocdt,'',pmex006,pmex008,pmex007,t1.gzcbl004,pmex002,t2.gzcbl004,",
                   #160621-00003#5 20160704 add by beckxie---S
                   #"pmexseq,t3.gzcbl004,trim(pmev002)||'.'||trim(ooefl003),trim(pmev001)||'.'||trim(ooag011),t4.oocql004,trim(pmev008)||'.'||trim(ooibl004),trim(pmev009)||'.'||trim(t5.oocql004),pmev006,", 
                   "pmexseq,t3.gzcbl004,trim(pmev002)||'.'||trim(ooefl003),trim(pmev001)||'.'||trim(ooag011),t4.oojdl003,trim(pmev008)||'.'||trim(ooibl004),trim(pmev009)||'.'||trim(t5.oocql004),pmev006,", 
                   #160621-00003#5 20160704 add by beckxie---E
                   "pmev004,trim(pmev003)||'.'||trim(pmaal004),pmevdocno,pmevent,pmev005"

#   #end add-point
#   LET g_select = " SELECT '','','',pmev012,pmev011,pmevdocdt,'','','','','','','','','','','','','', 
#       '',pmev006,pmev004,'',pmevdocno,pmevent,pmev005"
# 
#   #add-point:sel_prep g_from name="sel_prep.g_from"
   LET g_from = " FROM pmev_t LEFT OUTER JOIN gzcbl_t t3 ON t3.gzcbl001 = 2106 AND t3.gzcbl002 = pmev019 AND t3.gzcbl003 = '",g_dlang,"'",
                "             LEFT OUTER JOIN ooefl_t ON ooeflent = pmevent AND ooefl001 = pmev002 AND ooefl002 = '",g_dlang,"'",
                "             LEFT OUTER JOIN ooag_t  ON ooagent = pmevent AND ooag001 = pmev001 ",
                #160621-00003#5 20160704 add by beckxie---S
                #"             LEFT OUTER JOIN oocql_t t4 ON t4.oocqlent = pmevent AND t4.oocql001 = 275 AND t4.oocql002 = pmev010 AND t4.oocql003 = '",g_dlang,"'",
                "             LEFT OUTER JOIN oojdl_t t4 ON t4.oojdlent = pmevent AND t4.oojdl001 = pmev010 AND t4.oojdl002 = '",g_dlang,"'",
                #160621-00003#5 20160704 add by beckxie---E
                "             LEFT OUTER JOIN ooibl_t ON ooiblent = pmevent AND ooibl002 = pmev008 AND ooibl003 = '",g_dlang,"'",
                "             LEFT OUTER JOIN oocql_t t5 ON t5.oocqlent = pmevent AND t5.oocql001 = 238 AND t5.oocql002 = pmev009 AND t5.oocql003 = '",g_dlang,"'",
                "             LEFT OUTER JOIN pmaal_t ON pmaalent = pmevent AND pmaal001 = pmev003 AND pmaal002 = '",g_dlang,"'",
                "             LEFT OUTER JOIN pmex_t ON pmevent = pmexent AND pmevdocno = pmexdocno",
                "             LEFT OUTER JOIN gzcbl_t t1 ON t1.gzcbl001 = 2105 AND t1.gzcbl002 = pmex005 AND t1.gzcbl003 = '",g_dlang,"'",
                "             LEFT OUTER JOIN gzcbl_t t2 ON t2.gzcbl001 = 2104 AND t2.gzcbl002 = pmex001 AND t2.gzcbl003 = '",g_dlang,"'"
                
#   #end add-point
#    LET g_from = " FROM pmev_t"
# 
#   #add-point:sel_prep g_where name="sel_prep.g_where"
   
   #end add-point
    LET g_where = " WHERE " ,tm.wc CLIPPED 
 
   #add-point:sel_prep g_order name="sel_prep.g_order"
   
   #end add-point
    LET g_order = " ORDER BY pmevdocno"
 
   #add-point:sel_prep.sql.before name="sel_prep.sql.before"
   
   #end add-point:sel_prep.sql.before
   LET g_where = g_where ,cl_sql_add_filter("pmev_t")   #資料過濾功能
   LET g_sql = g_select CLIPPED ," ",g_from CLIPPED ," ",g_where CLIPPED ," ",g_order CLIPPED
   LET g_sql = cl_sql_add_mask(g_sql)    #遮蔽特定資料, 若寫至add-point也需複製此段 
 
   #add-point:sel_prep.sql.after name="sel_prep.sql.after"
   
   #end add-point
   PREPARE apmr430_g01_prepare FROM g_sql
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.extend = 'prepare:'
      LET g_errparam.code   = STATUS
      LET g_errparam.popup  = TRUE
      CALL cl_err()   
      LET g_rep_success = 'N'    
   END IF
   DECLARE apmr430_g01_curs CURSOR FOR apmr430_g01_prepare
 
END FUNCTION
 
{</section>}
 
{<section id="apmr430_g01.ins_data" readonly="Y" >}
PRIVATE FUNCTION apmr430_g01_ins_data()
#主報表record(用於select子句)
   DEFINE sr_s RECORD 
   l_pmex003 LIKE pmex_t.pmex003, 
   l_pmex002_desc2 LIKE type_t.chr1000, 
   l_pmex002_desc LIKE type_t.chr1000, 
   pmev012 LIKE pmev_t.pmev012, 
   pmev011 LIKE pmev_t.pmev011, 
   pmevdocdt LIKE pmev_t.pmevdocdt, 
   l_pmev005_desc LIKE type_t.chr1000, 
   l_pmex006 LIKE pmex_t.pmex006, 
   l_pmex008 LIKE pmex_t.pmex008, 
   l_pmex007 LIKE pmex_t.pmex007, 
   l_pmex005 LIKE type_t.chr1000, 
   l_pmex002 LIKE pmex_t.pmex002, 
   l_pmex001 LIKE type_t.chr1000, 
   l_pmexseq LIKE pmex_t.pmexseq, 
   l_pmev019_desc LIKE type_t.chr1000, 
   l_pmev002_desc LIKE type_t.chr1000, 
   l_pmev001_desc LIKE type_t.chr1000, 
   l_pmev010_desc LIKE type_t.chr1000, 
   l_pmev008_desc LIKE type_t.chr1000, 
   l_pmev009_desc LIKE type_t.chr1000, 
   pmev006 LIKE pmev_t.pmev006, 
   pmev004 LIKE pmev_t.pmev004, 
   l_pmev003_desc LIKE type_t.chr1000, 
   pmevdocno LIKE pmev_t.pmevdocno, 
   pmevent LIKE pmev_t.pmevent, 
   pmev005 LIKE pmev_t.pmev005
 END RECORD
   DEFINE l_cnt           LIKE type_t.num10
#add-point:ins_data段define (客製用) name="ins_data.define_customerization"

#end add-point   
#add-point:ins_data段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ins_data.define"
DEFINE l_pmev007 LIKE pmev_t.pmev007
DEFINE l_pmev006 LIKE pmev_t.pmev006
DEFINE l_oodb011 LIKE oodb_t.oodb011
DEFINE l_pmex001 LIKE pmex_t.pmex001
#end add-point
 
    #add-point:ins_data段before name="ins_data.before"
    
    #end add-point
 
    CALL sr.clear()                                  #rep sr
    LET l_cnt = 1
    FOREACH apmr430_g01_curs INTO sr_s.*
       IF STATUS THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.extend = 'foreach:'
          LET g_errparam.code   = STATUS
          LET g_errparam.popup  = TRUE
          CALL cl_err()       
          LET g_rep_success = 'N'    
          EXIT FOREACH
       END IF
 
       #add-point:ins_data段foreach name="ins_data.foreach"
       SELECT pmex001 INTO l_pmex001 FROM pmex_t 
        WHERE pmexent = sr_s.pmevent AND pmexdocno = sr_s.pmevdocno
          AND pmexseq = sr_s.l_pmexseq
       CASE l_pmex001 
          WHEN '1'   #料件
               CALL s_desc_get_item_desc(sr_s.l_pmex002) RETURNING sr_s.l_pmex002_desc,sr_s.l_pmex002_desc2
          WHEN '2'   #產品分類
               CALL s_desc_get_rtaxl003_desc(sr_s.l_pmex002) RETURNING sr_s.l_pmex002_desc
          WHEN '3'   #系列號
               CALL s_desc_get_acc_desc('2003',sr_s.l_pmex002) RETURNING sr_s.l_pmex002_desc
          
       END CASE
       
       CALL s_tax_chk(g_site,sr_s.pmev005) RETURNING g_success,sr_s.l_pmev005_desc,l_pmev007,l_pmev006,l_oodb011
       LET sr_s.l_pmev005_desc = sr_s.pmev005,".",sr_s.l_pmev005_desc
       
       #160422-00014#21 160425 by sakura add(S)
       LET sr_s.l_pmev005_desc = sr_s.l_pmev005_desc," ",sr_s.pmev006,"%"
       #160422-00014#21 160425 by sakura add(E)
       
       #end add-point
 
       #add-point:ins_data段before_arr name="ins_data.before.save"
       
       #end add-point
 
       #set rep array value
       LET sr[l_cnt].l_pmex003 = sr_s.l_pmex003
       LET sr[l_cnt].l_pmex002_desc2 = sr_s.l_pmex002_desc2
       LET sr[l_cnt].l_pmex002_desc = sr_s.l_pmex002_desc
       LET sr[l_cnt].pmev012 = sr_s.pmev012
       LET sr[l_cnt].pmev011 = sr_s.pmev011
       LET sr[l_cnt].pmevdocdt = sr_s.pmevdocdt
       LET sr[l_cnt].l_pmev005_desc = sr_s.l_pmev005_desc
       LET sr[l_cnt].l_pmex006 = sr_s.l_pmex006
       LET sr[l_cnt].l_pmex008 = sr_s.l_pmex008
       LET sr[l_cnt].l_pmex007 = sr_s.l_pmex007
       LET sr[l_cnt].l_pmex005 = sr_s.l_pmex005
       LET sr[l_cnt].l_pmex002 = sr_s.l_pmex002
       LET sr[l_cnt].l_pmex001 = sr_s.l_pmex001
       LET sr[l_cnt].l_pmexseq = sr_s.l_pmexseq
       LET sr[l_cnt].l_pmev019_desc = sr_s.l_pmev019_desc
       LET sr[l_cnt].l_pmev002_desc = sr_s.l_pmev002_desc
       LET sr[l_cnt].l_pmev001_desc = sr_s.l_pmev001_desc
       LET sr[l_cnt].l_pmev010_desc = sr_s.l_pmev010_desc
       LET sr[l_cnt].l_pmev008_desc = sr_s.l_pmev008_desc
       LET sr[l_cnt].l_pmev009_desc = sr_s.l_pmev009_desc
       LET sr[l_cnt].pmev006 = sr_s.pmev006
       LET sr[l_cnt].pmev004 = sr_s.pmev004
       LET sr[l_cnt].l_pmev003_desc = sr_s.l_pmev003_desc
       LET sr[l_cnt].pmevdocno = sr_s.pmevdocno
       LET sr[l_cnt].pmevent = sr_s.pmevent
       LET sr[l_cnt].pmev005 = sr_s.pmev005
 
 
       #add-point:ins_data段after_arr name="ins_data.after.save"
       
       #end add-point
       LET l_cnt = l_cnt + 1
    END FOREACH
    CALL sr.deleteElement(l_cnt)
 
    #add-point:ins_data段after name="ins_data.after"
    
    #end add-point
END FUNCTION
 
{</section>}
 
{<section id="apmr430_g01.rep_data" readonly="Y" >}
PRIVATE FUNCTION apmr430_g01_rep_data()
   DEFINE HANDLER         om.SaxDocumentHandler
   DEFINE l_i             INTEGER
 
    #判斷是否有報表資料，若回彈出訊息視窗
    IF sr.getLength() = 0 THEN
       INITIALIZE g_errparam TO NULL
       LET g_errparam.code = "adz-00285"
       LET g_errparam.extend = NULL
       LET g_errparam.popup  = FALSE
       LET g_errparam.replace[1] = ''
       CALL cl_err()  
       RETURN 
    END IF
    WHILE TRUE   
       #add-point:rep_data段印前 name="rep_data.before"
       
       #end add-point     
       LET handler = cl_gr_handler()
       IF handler IS NOT NULL THEN
          START REPORT apmr430_g01_rep TO XML HANDLER handler
          FOR l_i = 1 TO sr.getLength()
             OUTPUT TO REPORT apmr430_g01_rep(sr[l_i].*)
             #報表中斷列印時，顯示錯誤訊息
             IF fgl_report_getErrorStatus() THEN
                DISPLAY "FGL: STOPPING REPORT msg=\"",fgl_report_getErrorString(),"\""
                EXIT FOR
             END IF                  
          END FOR
          FINISH REPORT apmr430_g01_rep
       END IF
       #add-point:rep_data段印完 name="rep_data.after"
       
       #end add-point       
       IF g_rep_flag = TRUE THEN
          LET g_rep_flag = FALSE
          EXIT WHILE
       END IF
    END WHILE
    #add-point:rep_data段離開while印完前 name="rep_data.end.before"
    
    #end add-point
    CALL cl_gr_close_report()
    #add-point:rep_data段離開while印完後 name="rep_data.end.after"
    
    #end add-point    
END FUNCTION
 
{</section>}
 
{<section id="apmr430_g01.rep" readonly="Y" >}
PRIVATE REPORT apmr430_g01_rep(sr1)
DEFINE sr1 sr1_r
DEFINE sr2 sr2_r
DEFINE l_subrep01_show  LIKE type_t.chr1,
       l_subrep02_show  LIKE type_t.chr1,
       l_subrep03_show  LIKE type_t.chr1,
       l_subrep04_show  LIKE type_t.chr1
DEFINE l_cnt           LIKE type_t.num10
DEFINE l_sub_sql       STRING
#add-point:rep段define  (客製用) name="rep.define_customerization"

#end add-point
#add-point:rep段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="rep.define"
DEFINE sr3 sr3_r
DEFINE sr4 sr4_r
DEFINE l_subrep05_show  LIKE type_t.chr1,
       l_subrep06_show  LIKE type_t.chr1
#end add-point
 
    #add-point:rep段ORDER_before name="rep.order.before"
    
    #end add-point
    ORDER  BY sr1.pmevdocno,sr1.l_pmexseq
    #add-point:rep段ORDER_after name="rep.order.after"
    
    #end add-point
    
    FORMAT
       FIRST PAGE HEADER          
          PRINTX g_user,g_pdate,g_rep_code,g_company,g_ptime,g_user_name,g_date_fmt
          PRINTX tm.*
          PRINTX g_grNumFmt.*
          PRINTX g_rep_wcchp
 
          #讀取beforeGrup子樣板+子報表樣板
        #報表 d01 樣板自動產生(Version:2)
        BEFORE GROUP OF sr1.pmevdocno
            #報表 d05 樣板自動產生(Version:6)
            CALL cl_gr_title_clear()  #清除title變數值 
            #add-point:rep.header  #公司資訊(不在公用變數內) name="rep.header"
            
            #end add-point:rep.header 
            LET g_rep_docno = sr1.pmevdocno
            CALL cl_gr_init_pageheader() #表頭資訊
            PRINTX g_grPageHeader.*
            PRINTX g_grPageFooter.*
            #add-point:rep.apr.signstr.before name="rep.apr.signstr.before"
                          
            #end add-point:rep.apr.signstr.before   
            LET g_doc_key = 'pmevent=' ,sr1.pmevent,'{+}pmevdocno=' ,sr1.pmevdocno         
            CALL cl_gr_init_apr(sr1.pmevdocno)
            #add-point:rep.apr.signstr name="rep.apr.signstr"
                          
            #end add-point:rep.apr.signstr
            PRINTX g_grSign.*
 
 
 
           #add-point:rep.b_group.pmevdocno.before name="rep.b_group.pmevdocno.before"
           
           #end add-point:
 
           #報表 d03 樣板自動產生(Version:3)
           #add-point:rep.sub01.before name="rep.sub01.before"
           
           #end add-point:rep.sub01.before
 
           #add-point:rep.sub01.sql name="rep.sub01.sql"
           
           #end add-point:rep.sub01.sql
 
           LET g_sql = " SELECT ooff013 FROM ooff_t WHERE ooffstus='Y' and ooff001='6' AND ooff012='2' AND ooff004=0 AND ooffent = '", 
                sr1.pmevent CLIPPED ,"'", " AND  ooff003 = '", sr1.pmevdocno CLIPPED ,"'"
 
           #add-point:rep.sub01.afsql name="rep.sub01.afsql"
           
           #end add-point:rep.sub01.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep01_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur01_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur01_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep01_show ="Y"
           END IF
           PRINTX l_subrep01_show
           START REPORT apmr430_g01_subrep01
           DECLARE apmr430_g01_repcur01 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur01 INTO sr2.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur01:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub01.foreach name="rep.sub01.foreach"
              
              #end add-point:rep.sub01.foreach
              OUTPUT TO REPORT apmr430_g01_subrep01(sr2.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep01
           #add-point:rep.sub01.after name="rep.sub01.after"
           
           #end add-point:rep.sub01.after
 
 
 
           #add-point:rep.b_group.pmevdocno.after name="rep.b_group.pmevdocno.after"
           
           LET g_sql = " SELECT pmew001,pmaal004 FROM pmew_t LEFT OUTER JOIN pmaal_t ON pmaalent = pmewent AND pmaal001 = pmew001 AND pmaal002 = '",g_dlang,"'",
                       "  WHERE pmewent = ", sr1.pmevent CLIPPED ," AND  pmewdocno = '", sr1.pmevdocno CLIPPED ,"'"
 
           #add-point:rep.sub01.afsql

           #end add-point:rep.sub01.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep05_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur05_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur05_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep05_show ="Y"
           END IF
           PRINTX l_subrep05_show
           START REPORT apmr430_g01_subrep05
           DECLARE apmr430_g01_repcur05 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur05 INTO sr3.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur05:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub01.foreach

              #end add-point:rep.sub01.foreach
              OUTPUT TO REPORT apmr430_g01_subrep05(sr3.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep05
           #add-point:rep.sub01.after
           #end add-point:
 
 
        #報表 d01 樣板自動產生(Version:2)
        BEFORE GROUP OF sr1.l_pmexseq
 
           #add-point:rep.b_group.l_pmexseq.before name="rep.b_group.l_pmexseq.before"
           
           #end add-point:
 
 
           #add-point:rep.b_group.l_pmexseq.after name="rep.b_group.l_pmexseq.after"
           
           #end add-point:
 
 
 
 
       ON EVERY ROW
          #add-point:rep.everyrow.before name="rep.everyrow.before"
          
          #end add-point:rep.everyrow.before
 
          #單身前備註
             #報表 d03 樣板自動產生(Version:3)
           #add-point:rep.sub02.before name="rep.sub02.before"
           
           #end add-point:rep.sub02.before
 
           #add-point:rep.sub02.sql name="rep.sub02.sql"
           
           #end add-point:rep.sub02.sql
 
           LET g_sql = " SELECT ooff013 FROM ooff_t WHERE ooffstus='Y' and ooff001='7' AND ooff012='2' AND ooffent = '", 
                sr1.pmevent CLIPPED ,"'", " AND  ooff003 = '", sr1.pmevdocno CLIPPED ,"'", " AND  ooff004 = ", 
                sr1.l_pmexseq CLIPPED ,""
 
           #add-point:rep.sub02.afsql name="rep.sub02.afsql"
           
           #end add-point:rep.sub02.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep02_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur02_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur02_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep02_show ="Y"
           END IF
           PRINTX l_subrep02_show
           START REPORT apmr430_g01_subrep02
           DECLARE apmr430_g01_repcur02 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur02 INTO sr2.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur02:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub02.foreach name="rep.sub02.foreach"
              
              #end add-point:rep.sub02.foreach
              OUTPUT TO REPORT apmr430_g01_subrep02(sr2.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep02
           #add-point:rep.sub02.after name="rep.sub02.after"
           
           #end add-point:rep.sub02.after
 
 
 
          #add-point:rep.everyrow.beforerow name="rep.everyrow.beforerow"
          
          #end add-point:rep.everyrow.beforerow
            
          PRINTX sr1.*
 
          #add-point:rep.everyrow.afterrow name="rep.everyrow.afterrow"
          
          #end add-point:rep.everyrow.afterrow
 
          #單身後備註
             #報表 d03 樣板自動產生(Version:3)
           #add-point:rep.sub03.before name="rep.sub03.before"
           
           #end add-point:rep.sub03.before
 
           #add-point:rep.sub03.sql name="rep.sub03.sql"
           
           #end add-point:rep.sub03.sql
 
           LET g_sql = " SELECT ooff013 FROM ooff_t WHERE ooffstus='Y' and ooff001='7' AND ooff012='1' AND ooffent = '", 
                sr1.pmevent CLIPPED ,"'", " AND  ooff003 = '", sr1.pmevdocno CLIPPED ,"'", " AND  ooff004 = ", 
                sr1.l_pmexseq CLIPPED ,""
 
           #add-point:rep.sub03.afsql name="rep.sub03.afsql"
           
           #end add-point:rep.sub03.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep03_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur03_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur03_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep03_show ="Y"
           END IF
           PRINTX l_subrep03_show
           START REPORT apmr430_g01_subrep03
           DECLARE apmr430_g01_repcur03 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur03 INTO sr2.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur03:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub03.foreach name="rep.sub03.foreach"
              
              #end add-point:rep.sub03.foreach
              OUTPUT TO REPORT apmr430_g01_subrep03(sr2.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep03
           #add-point:rep.sub03.after name="rep.sub03.after"
           
           #end add-point:rep.sub03.after
 
 
 
          #add-point:rep.everyrow.after name="rep.everyrow.after"
           LET g_sql = " SELECT pmey001,pmey002,pmey003,pmey004 FROM pmey_t ",
                      "  WHERE pmeyent = ",sr1.pmevent CLIPPED ," AND  pmeydocno = '", sr1.pmevdocno CLIPPED ,"'",
                      "    AND pmeyseq = ",sr1.l_pmexseq CLIPPED
 
           #add-point:rep.sub02.afsql

           #end add-point:rep.sub02.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep06_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur06_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur06_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep06_show ="Y"
           END IF
           PRINTX l_subrep06_show
           START REPORT apmr430_g01_subrep06
           DECLARE apmr430_g01_repcur06 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur06 INTO sr4.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur06:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub02.foreach

              #end add-point:rep.sub02.foreach
              OUTPUT TO REPORT apmr430_g01_subrep06(sr4.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep06
          #end add-point:rep.everyrow.after        
 
          #讀取afterGrup子樣板+子報表樣板
        #報表 d01 樣板自動產生(Version:2)
        AFTER GROUP OF sr1.pmevdocno
 
           #add-point:rep.a_group.pmevdocno.before name="rep.a_group.pmevdocno.before"
           
           #end add-point:
 
           #報表 d03 樣板自動產生(Version:3)
           #add-point:rep.sub04.before name="rep.sub04.before"
           
           #end add-point:rep.sub04.before
 
           #add-point:rep.sub04.sql name="rep.sub04.sql"
           
           #end add-point:rep.sub04.sql
 
           LET g_sql = " SELECT ooff013 FROM ooff_t WHERE ooffstus='Y' and ooff001='6' AND ooff012='1' AND ooff004=0 AND ooffent = '", 
                sr1.pmevent CLIPPED ,"'", " AND  ooff003 = '", sr1.pmevdocno CLIPPED ,"'"
 
           #add-point:rep.sub04.afsql name="rep.sub04.afsql"
           
           #end add-point:rep.sub04.afsql           
           LET l_cnt = 0
           LET l_sub_sql = ""
           LET l_subrep04_show ="N"
           LET l_sub_sql = "SELECT COUNT(1) FROM (",g_sql,")"
           PREPARE apmr430_g01_repcur04_cnt_pre FROM l_sub_sql
           EXECUTE apmr430_g01_repcur04_cnt_pre INTO l_cnt
           IF l_cnt > 0 THEN 
              LET l_subrep04_show ="Y"
           END IF
           PRINTX l_subrep04_show
           START REPORT apmr430_g01_subrep04
           DECLARE apmr430_g01_repcur04 CURSOR FROM g_sql
           FOREACH apmr430_g01_repcur04 INTO sr2.*
              IF STATUS THEN 
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "apmr430_g01_repcur04:"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = FALSE
                 CALL cl_err()                  
                 EXIT FOREACH 
              END IF
              #add-point:rep.sub04.foreach name="rep.sub04.foreach"
              
              #end add-point:rep.sub04.foreach
              OUTPUT TO REPORT apmr430_g01_subrep04(sr2.*)
           END FOREACH
           FINISH REPORT apmr430_g01_subrep04
           #add-point:rep.sub04.after name="rep.sub04.after"
           
           #end add-point:rep.sub04.after
 
 
 
           #add-point:rep.a_group.pmevdocno.after name="rep.a_group.pmevdocno.after"
           
           #end add-point:
 
 
        #報表 d01 樣板自動產生(Version:2)
        AFTER GROUP OF sr1.l_pmexseq
 
           #add-point:rep.a_group.l_pmexseq.before name="rep.a_group.l_pmexseq.before"
           
           #end add-point:
 
 
           #add-point:rep.a_group.l_pmexseq.after name="rep.a_group.l_pmexseq.after"
           
           #end add-point:
 
 
 
       ON LAST ROW
            #add-point:rep.lastrow.before name="rep.lastrow.before"  
                    
            #end add-point :rep.lastrow.before
 
            #add-point:rep.lastrow.after name="rep.lastrow.after"
            
            #end add-point :rep.lastrow.after
END REPORT
 
{</section>}
 
{<section id="apmr430_g01.subrep_str" readonly="Y" >}
#讀取子報表樣板
#報表 d02 樣板自動產生(Version:3)
PRIVATE REPORT apmr430_g01_subrep01(sr2)
DEFINE  sr2  sr2_r
#add-point:query段define(客製用) name="sub01.define_customerization" 

#end add-point
#add-point:sub01.define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="sub01.define" 

#end add-point:sub01.define
 
    #add-point:sub01.order.before name="sub01.order.before" 
    
    #end add-point:sub01.order.before
 
 
 
    FORMAT
 
 
 
       ON EVERY ROW
            #add-point:sub01.everyrow.before name="sub01.everyrow.before" 
                          
            #end add-point:sub01.everyrow.before
 
            PRINTX sr2.*
 
            #add-point:sub01.everyrow.after name="sub01.everyrow.after" 
            
            #end add-point:sub01.everyrow.after
 
 
END REPORT
 
 
#報表 d02 樣板自動產生(Version:3)
PRIVATE REPORT apmr430_g01_subrep02(sr2)
DEFINE  sr2  sr2_r
#add-point:query段define(客製用) name="sub02.define_customerization" 

#end add-point
#add-point:sub02.define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="sub02.define" 

#end add-point:sub02.define
 
    #add-point:sub02.order.before name="sub02.order.before" 
    
    #end add-point:sub02.order.before
 
 
 
    FORMAT
 
 
 
       ON EVERY ROW
            #add-point:sub02.everyrow.before name="sub02.everyrow.before" 
                          
            #end add-point:sub02.everyrow.before
 
            PRINTX sr2.*
 
            #add-point:sub02.everyrow.after name="sub02.everyrow.after" 
            
            #end add-point:sub02.everyrow.after
 
 
END REPORT
 
 
#報表 d02 樣板自動產生(Version:3)
PRIVATE REPORT apmr430_g01_subrep03(sr2)
DEFINE  sr2  sr2_r
#add-point:query段define(客製用) name="sub03.define_customerization" 

#end add-point
#add-point:sub03.define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="sub03.define" 

#end add-point:sub03.define
 
    #add-point:sub03.order.before name="sub03.order.before" 
    
    #end add-point:sub03.order.before
 
 
 
    FORMAT
 
 
 
       ON EVERY ROW
            #add-point:sub03.everyrow.before name="sub03.everyrow.before" 
                          
            #end add-point:sub03.everyrow.before
 
            PRINTX sr2.*
 
            #add-point:sub03.everyrow.after name="sub03.everyrow.after" 
            
            #end add-point:sub03.everyrow.after
 
 
END REPORT
 
 
#報表 d02 樣板自動產生(Version:3)
PRIVATE REPORT apmr430_g01_subrep04(sr2)
DEFINE  sr2  sr2_r
#add-point:query段define(客製用) name="sub04.define_customerization" 

#end add-point
#add-point:sub04.define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="sub04.define" 

#end add-point:sub04.define
 
    #add-point:sub04.order.before name="sub04.order.before" 
    
    #end add-point:sub04.order.before
 
 
 
    FORMAT
 
 
 
       ON EVERY ROW
            #add-point:sub04.everyrow.before name="sub04.everyrow.before" 
                          
            #end add-point:sub04.everyrow.before
 
            PRINTX sr2.*
 
            #add-point:sub04.everyrow.after name="sub04.everyrow.after" 
            
            #end add-point:sub04.everyrow.after
 
 
END REPORT
 
 
 
 
{</section>}
 
{<section id="apmr430_g01.other_function" readonly="Y" >}

 
{</section>}
 
{<section id="apmr430_g01.other_report" readonly="Y" >}

################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE REPORT apmr430_g01_subrep05(sr3)
DEFINE  sr3  sr3_r   
DEFINE l_block_width  LIKE type_t.num5
    FORMAT
           
        ON EVERY ROW
            LET l_block_width = 2
            PRINTX g_grNumFmt.*
            PRINTX sr3.*
            PRINTX l_block_width
END REPORT

################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE REPORT apmr430_g01_subrep06(sr4)
DEFINE sr4 sr4_r   

    FORMAT
           
        ON EVERY ROW
            PRINTX g_grNumFmt.*
            PRINTX sr4.*
            
            
END REPORT

 
{</section>}
 
