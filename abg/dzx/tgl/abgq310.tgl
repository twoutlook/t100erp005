#該程式未解開Section, 採用最新樣板產出!
{<section id="abgq310.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:2(2016-12-19 18:55:47), PR版次:
#+ Customerized Version.: SD版次:(), PR版次:
#+ Build......: 000000
#+ Filename...: abgq310
#+ Description: 銷售預算查詢
#+ Creator....: 02599(2016-12-09 15:06:32)
#+ Modifier...: 02599 -SD/PR-

{</section>}

{<section id="abgq310.global" >}
#應用 q01 樣板自動產生(Version:34)
#add-point:填寫註解說明 name="global.memo"
{<point name="global.memo" edit="s"/>}
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"
{<point name="global.memo_customerization" edit="c"/>}
#end add-point
 
IMPORT os
IMPORT util
#add-point:增加匯入項目 name="global.import"
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"
{<point name="global.inc" mark="Y"/>}
#end add-point
 
#單身 type 宣告
PRIVATE TYPE type_g_detail RECORD
       
       name LIKE type_t.chr500, 
   pid LIKE type_t.chr500, 
   id LIKE type_t.chr500, 
   exp LIKE type_t.chr500, 
   isnode LIKE type_t.chr500, 
   isExp LIKE type_t.num5, 
   expcode LIKE type_t.num5, 
   bgcj007 LIKE bgcj_t.bgcj007, 
   bgcj007_desc LIKE type_t.chr500, 
   bgcj047 LIKE bgcj_t.bgcj047, 
   bgcj047_desc LIKE type_t.chr500, 
   sel LIKE type_t.chr1
       END RECORD
PRIVATE TYPE type_g_detail2 RECORD
       seq LIKE type_t.num10, 
   bgcj007 LIKE bgcj_t.bgcj007, 
   bgcj007_1_desc LIKE type_t.chr500, 
   bgcj009 LIKE bgcj_t.bgcj009, 
   bgcj009_desc LIKE type_t.chr500, 
   bgcj049 LIKE bgcj_t.bgcj049, 
   bgcj049_desc LIKE type_t.chr500, 
   bgcj012 LIKE bgcj_t.bgcj012, 
   bgcj012_desc LIKE type_t.chr500, 
   bgcj013 LIKE bgcj_t.bgcj013, 
   bgcj013_desc LIKE type_t.chr500, 
   bgcj014 LIKE bgcj_t.bgcj014, 
   bgcj014_desc LIKE type_t.chr500, 
   bgcj015 LIKE bgcj_t.bgcj015, 
   bgcj015_desc LIKE type_t.chr500, 
   bgcj016 LIKE bgcj_t.bgcj016, 
   bgcj016_desc LIKE type_t.chr500, 
   bgcj017 LIKE bgcj_t.bgcj017, 
   bgcj017_desc LIKE type_t.chr500, 
   bgcj018 LIKE bgcj_t.bgcj018, 
   bgcj018_desc LIKE type_t.chr500, 
   bgcj019 LIKE bgcj_t.bgcj019, 
   bgcj019_desc LIKE type_t.chr500, 
   bgcj020 LIKE bgcj_t.bgcj020, 
   bgcj020_desc LIKE type_t.chr500, 
   bgcj021 LIKE bgcj_t.bgcj021, 
   bgcj021_desc LIKE type_t.chr500, 
   bgcj022 LIKE bgcj_t.bgcj022, 
   bgcj023 LIKE bgcj_t.bgcj023, 
   bgcj023_desc LIKE type_t.chr500, 
   bgcj024 LIKE bgcj_t.bgcj024, 
   bgcj024_desc LIKE type_t.chr500, 
   bgcj100 LIKE bgcj_t.bgcj100, 
   amt1 LIKE type_t.num20_6, 
   bamt1 LIKE type_t.num20_6, 
   amt2 LIKE type_t.num20_6, 
   bamt2 LIKE type_t.num20_6, 
   amt3 LIKE type_t.num20_6, 
   bamt3 LIKE type_t.num20_6, 
   amt4 LIKE type_t.num20_6, 
   bamt4 LIKE type_t.num20_6, 
   amt5 LIKE type_t.num20_6, 
   bamt5 LIKE type_t.num20_6, 
   amt6 LIKE type_t.num20_6, 
   bamt6 LIKE type_t.num20_6, 
   amt7 LIKE type_t.num20_6, 
   bamt7 LIKE type_t.num20_6, 
   amt8 LIKE type_t.num20_6, 
   bamt8 LIKE type_t.num20_6, 
   amt9 LIKE type_t.num20_6, 
   bamt9 LIKE type_t.num20_6, 
   amt10 LIKE type_t.num20_6, 
   bamt10 LIKE type_t.num20_6, 
   amt11 LIKE type_t.num20_6, 
   bamt11 LIKE type_t.num20_6, 
   amt12 LIKE type_t.num20_6, 
   bamt12 LIKE type_t.num20_6, 
   amt13 LIKE type_t.num20_6, 
   bamt13 LIKE type_t.num20_6, 
   sum1 LIKE type_t.num20_6, 
   bsum1 LIKE type_t.num20_6
       END RECORD
 
PRIVATE TYPE type_g_detail3 RECORD
       seq2 LIKE type_t.num10, 
   bgcj007 LIKE bgcj_t.bgcj007, 
   bgcj007_2_desc LIKE type_t.chr500, 
   bgcj009 LIKE bgcj_t.bgcj009, 
   bgcj009_2_desc LIKE type_t.chr500, 
   bgcj049 LIKE bgcj_t.bgcj049, 
   bgcj049_2_desc LIKE type_t.chr500, 
   bgcj012 LIKE bgcj_t.bgcj012, 
   bgcj012_2_desc LIKE type_t.chr500, 
   bgcj013 LIKE bgcj_t.bgcj013, 
   bgcj013_2_desc LIKE type_t.chr500, 
   bgcj014 LIKE bgcj_t.bgcj014, 
   bgcj014_2_desc LIKE type_t.chr500, 
   bgcj015 LIKE bgcj_t.bgcj015, 
   bgcj015_2_desc LIKE type_t.chr500, 
   bgcj016 LIKE bgcj_t.bgcj016, 
   bgcj016_2_desc LIKE type_t.chr500, 
   bgcj017 LIKE bgcj_t.bgcj017, 
   bgcj017_2_desc LIKE type_t.chr500, 
   bgcj018 LIKE bgcj_t.bgcj018, 
   bgcj018_2_desc LIKE type_t.chr500, 
   bgcj019 LIKE bgcj_t.bgcj019, 
   bgcj019_2_desc LIKE type_t.chr500, 
   bgcj020 LIKE bgcj_t.bgcj020, 
   bgcj020_2_desc LIKE type_t.chr500, 
   bgcj021 LIKE bgcj_t.bgcj021, 
   bgcj021_2_desc LIKE type_t.chr500, 
   bgcj022 LIKE bgcj_t.bgcj022, 
   bgcj023 LIKE bgcj_t.bgcj023, 
   bgcj023_2_desc LIKE type_t.chr500, 
   bgcj024 LIKE bgcj_t.bgcj024, 
   bgcj024_2_desc LIKE type_t.chr500, 
   bgcj035 LIKE bgcj_t.bgcj035, 
   bgcj036 LIKE bgcj_t.bgcj036, 
   bgcj037 LIKE bgcj_t.bgcj037, 
   bgcj100 LIKE bgcj_t.bgcj100, 
   tnum1 LIKE type_t.num20_6, 
   tprice1 LIKE type_t.num20_6, 
   tamt1 LIKE type_t.num20_6, 
   tbamt1 LIKE type_t.num20_6, 
   tnum2 LIKE type_t.num20_6, 
   tprice2 LIKE type_t.num20_6, 
   tamt2 LIKE type_t.num20_6, 
   tbamt2 LIKE type_t.num20_6, 
   tnum3 LIKE type_t.num20_6, 
   tprice3 LIKE type_t.num20_6, 
   tamt3 LIKE type_t.num20_6, 
   tbamt3 LIKE type_t.num20_6, 
   tnum4 LIKE type_t.num20_6, 
   tprice4 LIKE type_t.num20_6, 
   tamt4 LIKE type_t.num20_6, 
   tbamt4 LIKE type_t.num20_6, 
   tnum5 LIKE type_t.num20_6, 
   tprice5 LIKE type_t.num20_6, 
   tamt5 LIKE type_t.num20_6, 
   tbamt5 LIKE type_t.num20_6, 
   tnum6 LIKE type_t.num20_6, 
   tprice6 LIKE type_t.num20_6, 
   tamt6 LIKE type_t.num20_6, 
   tbamt6 LIKE type_t.num20_6, 
   tnum7 LIKE type_t.num20_6, 
   tprice7 LIKE type_t.num20_6, 
   tamt7 LIKE type_t.num20_6, 
   tbamt7 LIKE type_t.num20_6, 
   tnum8 LIKE type_t.num20_6, 
   tprice8 LIKE type_t.num20_6, 
   tamt8 LIKE type_t.num20_6, 
   tbamt8 LIKE type_t.num20_6, 
   tnum9 LIKE type_t.num20_6, 
   tprice9 LIKE type_t.num20_6, 
   tamt9 LIKE type_t.num20_6, 
   tbamt9 LIKE type_t.num20_6, 
   tnum10 LIKE type_t.num20_6, 
   tprice10 LIKE type_t.num20_6, 
   tamt10 LIKE type_t.num20_6, 
   tbamt10 LIKE type_t.num20_6, 
   tnum11 LIKE type_t.num20_6, 
   tprice11 LIKE type_t.num20_6, 
   tamt11 LIKE type_t.num20_6, 
   tbamt11 LIKE type_t.num20_6, 
   tnum12 LIKE type_t.num20_6, 
   tprice12 LIKE type_t.num20_6, 
   tamt12 LIKE type_t.num20_6, 
   tbamt12 LIKE type_t.num20_6, 
   tnum13 LIKE type_t.num20_6, 
   tprice13 LIKE type_t.num20_6, 
   tamt13 LIKE type_t.num20_6, 
   tbamt13 LIKE type_t.num20_6, 
   sum2 LIKE type_t.num20_6, 
   bsum2 LIKE type_t.num20_6
       END RECORD
 
 
 
#add-point:自定義模組變數-標準(Module Variable)  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
{<point name="global.variable"/>}
#end add-point
 
#模組變數(Module Variables)
DEFINE g_detail            DYNAMIC ARRAY OF type_g_detail
DEFINE g_detail_t          type_g_detail
DEFINE g_detail2     DYNAMIC ARRAY OF type_g_detail2
DEFINE g_detail2_t   type_g_detail2
 
DEFINE g_detail3     DYNAMIC ARRAY OF type_g_detail3
DEFINE g_detail3_t   type_g_detail3
 
 
 
 DEFINE g_browser_root  DYNAMIC ARRAY OF INTEGER   #root資料所在
 
DEFINE g_wc                  STRING                        #儲存 user 的查詢條件
DEFINE g_wc_t                STRING                        #儲存 user 的查詢條件
DEFINE g_wc2                 STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
DEFINE g_sql                 STRING                        #組 sql 用 
DEFINE g_forupd_sql          STRING                        #SELECT ... FOR UPDATE  SQL    
DEFINE g_cnt                 LIKE type_t.num10              
DEFINE l_ac                  LIKE type_t.num10             #目前處理的ARRAY CNT 
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog     
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_current_page        LIKE type_t.num5              #目前所在頁數
DEFINE g_current_row         LIKE type_t.num10             #目前所在筆數
DEFINE g_current_idx         LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10             #單身 總筆數(所有資料)
DEFINE g_page                STRING                        #第幾頁
DEFINE g_ch                  base.Channel                  #外串程式用
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_error_show          LIKE type_t.num5
DEFINE g_row_index           LIKE type_t.num10
DEFINE g_master_idx          LIKE type_t.num10
DEFINE g_detail_idx          LIKE type_t.num10             #單身 所在筆數(所有資料)
DEFINE g_detail_idx2         LIKE type_t.num10
DEFINE g_hyper_url           STRING                        #hyperlink的主要網址
DEFINE g_qbe_hidden          LIKE type_t.num5              #qbe頁籤折疊
DEFINE g_tot_cnt             LIKE type_t.num10             #計算總筆數
DEFINE g_num_in_page         LIKE type_t.num10             #每頁筆數
DEFINE g_page_act_list       STRING                        #分頁ACTION清單
DEFINE g_current_row_tot     LIKE type_t.num10             #目前所在總筆數
DEFINE g_page_start_num      LIKE type_t.num10             #目前頁面起始筆數
DEFINE g_page_end_num        LIKE type_t.num10             #目前頁面結束筆數
 
#多table用wc
DEFINE g_wc_table           STRING
DEFINE g_detail_page_action STRING
DEFINE g_pagestart          LIKE type_t.num10
 
 
 
DEFINE g_wc_filter_table           STRING
 
 
 
#add-point:自定義模組變數-客製(Module Variable) name="global.variable_customerization"
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明 name="global.argv"
{<point name="global.argv"/>}
#end add-point

{</section>}

{<section id="abgq310.main" >}
 #應用 a26 樣板自動產生(Version:7)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define(客製用) name="main.define_customerization"
   {<point name="main.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:main段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="main.define"
   {<point name="main.define"/>}
   #end add-point   
   
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("abg","")
 
   #add-point:作業初始化 name="main.init"
   {<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define name="main.define_sql"
   {<point name="main.define_sql" />}
   #end add-point
   LET g_forupd_sql = " ", 
                      " FROM ",
                      " "
   #add-point:SQL_define name="main.after_define_sql"
   {<point name="main.after_define_sql"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abgq310_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT  ",
               " FROM  t0",
               
               " WHERE  "
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define name="main.after_refresh_sql"
   {<point name="main.after_refresh_sql"/>}
   #end add-point
   PREPARE abgq310_master_referesh FROM g_sql
 
   #add-point:main段define_sql name="main.body.define_sql"
   {<point name="main.body.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = ""
   #add-point:main段define_sql name="main.body.after_define_sql"
   {<point name="main.body.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abgq310_bcl CURSOR FROM g_forupd_sql
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call name="main.servicecall"
      {<point name="main.servicecall" />}
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_abgq310 WITH FORM cl_ap_formpath("abg",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL abgq310_init()   
 
      #進入選單 Menu (="N")
      CALL abgq310_ui_dialog() 
      
      #add-point:畫面關閉前 name="main.before_close"
      {<point name="main.before_close" />}
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_abgq310
      
   END IF 
   
   CLOSE abgq310_cl
   
   
 
   #add-point:作業離開前 name="main.exit"
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
 

{</section>}

{<section id="abgq310.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION abgq310_init()
   #add-point:init段define-客製 name="init.define_customerization"
   {<point name="init.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   #add-point:init段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   {<point name="init.define"/>}
   #end add-point
 
   #add-point:FUNCTION前置處理 name="init.before_function"
   {<point name="init.before_function" />}
   #end add-point
 
   LET g_wc_filter   = " 1=1"
   LET g_wc_filter_t = " 1=1" 
   LET g_error_show  = 1
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   
      CALL cl_set_combo_scc('b_bgcj022','6013') 
  
 
   #add-point:畫面資料初始化 name="init.init"
   {<point name="init.init" />}
   #end add-point
 
   CALL abgq310_default_search()
END FUNCTION

{</section>}

{<section id="abgq310.default_search" >}
PRIVATE FUNCTION abgq310_default_search()
   #add-point:default_search段define-客製 name="default_search.define_customerization"
   {<point name="default_search.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   #add-point:default_search段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   {<point name="default_search.define"/>}
   #end add-point
 
 
   #add-point:default_search段開始前 name="default_search.before"
   {<point name="default_search.before"/>}
   #end add-point
 
   
 
   IF NOT cl_null(g_wc) THEN
      LET g_wc = g_wc.subString(1,g_wc.getLength()-5)
   ELSE
      #預設查詢條件
      LET g_wc = " 1=2"
   END IF
 
   #add-point:default_search段結束前 name="default_search.after"
   {<point name="default_search.after"/>}
   #end add-point
 
END FUNCTION

{</section>}

{<section id="abgq310.ui_dialog" >}
#+ 選單功能實際執行處
PRIVATE FUNCTION abgq310_ui_dialog() 
   #add-point:ui_dialog段define-客製 name="ui_dialog.define_customerization"
   {<point name="ui_dialog.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_exit   LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx    LIKE type_t.num10
   DEFINE ls_result STRING
   DEFINE ls_wc     STRING
   DEFINE lc_action_choice_old   STRING
   DEFINE ls_js     STRING
   DEFINE la_param  RECORD
                    prog       STRING,
                    actionid   STRING,
                    background LIKE type_t.chr1,
                    param      DYNAMIC ARRAY OF STRING
                    END RECORD
   #add-point:ui_dialog段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   {<point name="ui_dialog.define"/>}
   #end add-point
   
 
   #add-point:FUNCTION前置處理 name="ui_dialog.before_function"
   {<point name="ui_dialog.before_function" />}
   #end add-point
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
   CALL cl_get_num_in_page() RETURNING g_num_in_page
 
   LET li_exit = FALSE
   LET gwin_curr = ui.Window.getCurrent()
   LET gfrm_curr = gwin_curr.getForm()   
   LET g_current_idx = 1
   LET g_action_choice = " "
   LET lc_action_choice_old = ""
   LET g_current_row_tot = 0
   LET g_page_start_num = 1
   LET g_page_end_num = g_num_in_page
   LET g_detail_idx = 1
   LET g_detail_idx2 = 1
   LET l_ac = 1
 
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
 
   
   CALL abgq310_b_fill()
  
   WHILE li_exit = FALSE
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_detail.clear()
         CALL g_detail2.clear()
 
         CALL g_detail3.clear()
 
 
         LET g_wc  = " 1=2"
         LET g_wc2 = " 1=1"
         LET g_action_choice = ""
         LET g_detail_page_action = "detail_first"
         LET g_pagestart = 1
         LET g_current_row_tot = 0
         LET g_page_start_num = 1
         LET g_page_end_num = g_num_in_page
         LET g_detail_idx = 1
         LET g_detail_idx2 = 1
 
         CALL abgq310_init()
      END IF
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #add-point:input段落 name="ui_dialog.input"
         {<point name="ui_dialog.input"/>}
         #end add-point
 
         #add-point:construct段落 name="ui_dialog.construct"
         {<point name="ui_dialog.construct" mark="Y"/>}
         #end add-point
     
         DISPLAY ARRAY g_detail TO s_detail1.* ATTRIBUTE(COUNT=g_detail_cnt)
 
            BEFORE DISPLAY
               LET g_current_page = 1
 
            BEFORE ROW
               LET g_detail_idx = DIALOG.getCurrentRow("s_detail1")
               LET l_ac = g_detail_idx
               CALL abgq310_detail_action_trans()
 
               LET g_master_idx = l_ac
               #為避免按上下筆時影響執行效能，所以做一些處理
               LET lc_action_choice_old = g_action_choice
               LET g_action_choice = "fetch"
               CALL abgq310_b_fill2()
               LET g_action_choice = lc_action_choice_old
 
               #add-point:input段before row name="input.body.before_row"
               {<point name="input.body.before_row" mark="Y"/>}
               #end add-point
 
            #應用 qs20 樣板自動產生(Version:3)
            ON EXPAND (g_row_index)
               #樹展開
               CALL abgq310_tree_expand(g_row_index)
               LET g_detail[g_row_index].isExp = 1
 
            ON COLLAPSE (g_row_index)
               #樹關閉
 
 
 
 
 
            #自訂ACTION(detail_show,page_1)
            
 
            #add-point:page1自定義行為 name="ui_dialog.body.page1.action"
            {<point name="ui_dialog.body.page1.action" mark="Y"/>}
            #end add-point
 
         END DISPLAY
 
         #add-point:第一頁籤程式段mark結束用 name="ui_dialog.page1.mark.end"
         {<point name="ui_dialog.page1.mark.end"/>}
         #end add-point
 
         DISPLAY ARRAY g_detail2 TO s_detail2.*
            ATTRIBUTES(COUNT=g_detail_cnt)
 
            BEFORE DISPLAY
               LET g_current_page = 2
 
            BEFORE ROW
               LET g_detail_idx2 = DIALOG.getCurrentRow("s_detail2")
               LET l_ac = g_detail_idx2
               LET g_detail_idx2 = l_ac
               DISPLAY g_detail_idx2 TO FORMONLY.idx
 
               #add-point:input段before row name="input.body2.before_row"
               {<point name="input.body2.before_row" mark="Y"/>}
               #end add-point
 
            #自訂ACTION(detail_show,page_2)
            
 
            #add-point:page2自定義行為 name="ui_dialog.body2.action"
            {<point name="ui_dialog.body2.action"/>}
            #end add-point
 
         END DISPLAY
 
         DISPLAY ARRAY g_detail3 TO s_detail3.*
            ATTRIBUTES(COUNT=g_detail_cnt)
 
            BEFORE DISPLAY
               LET g_current_page = 3
 
            BEFORE ROW
               LET g_detail_idx2 = DIALOG.getCurrentRow("s_detail3")
               LET l_ac = g_detail_idx2
               LET g_detail_idx2 = l_ac
               DISPLAY g_detail_idx2 TO FORMONLY.idx
 
               #add-point:input段before row name="input.body3.before_row"
               {<point name="input.body3.before_row" mark="Y"/>}
               #end add-point
 
            #自訂ACTION(detail_show,page_3)
            
 
            #add-point:page3自定義行為 name="ui_dialog.body3.action"
            {<point name="ui_dialog.body3.action"/>}
            #end add-point
 
         END DISPLAY
 
 
 
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         BEFORE DIALOG
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL DIALOG.setSelectionMode("s_detail1", 1)
            LET g_detail_idx = DIALOG.getCurrentRow("s_detail1")
            CALL abgq310_detail_action_trans()
 
            #add-point:ui_dialog段before dialog name="ui_dialog.bef_dialog"
            {<point name="ui_dialog.bef_dialog"/>}
            #end add-point
            NEXT FIELD bgcj002
 
         AFTER DIALOG
            #add-point:ui_dialog段 after dialog name="ui_dialog.after_dialog"
            {<point name="ui_dialog.after_dialog"/>}
            #end add-point
            
         ON ACTION exit
            LET g_action_choice="exit"
            LET INT_FLAG = FALSE
            LET li_exit = TRUE
            EXIT DIALOG 
      
         ON ACTION close
            LET INT_FLAG=FALSE
            LET li_exit = TRUE
            EXIT DIALOG
 
         ON ACTION accept
            INITIALIZE g_wc_filter TO NULL
            IF cl_null(g_wc) THEN
               LET g_wc = " 1=1"
            END IF
 
 
         
            IF cl_null(g_wc2) THEN
               LET g_wc2 = " 1=1"
            END IF
 
 
 
            #add-point:ON ACTION accept name="ui_dialog.accept"
            {<point name="ui_dialog.accept"/>}
            #end add-point
 
            LET g_detail_idx = 1
            LET g_detail_idx2 = 1
            CALL abgq310_b_fill()
 
            IF g_detail_cnt = 0 AND NOT INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.extend = ""
               LET g_errparam.code   = -100
               LET g_errparam.popup  = TRUE
               CALL cl_err()
            END IF
 
 
         ON ACTION agendum   # 待辦事項
            #add-point:ON ACTION agendum name="ui_dialog.agendum"
            {<point name="ui_dialog.agendum"/>}
            #end add-point
            CALL cl_user_overview()
 
         ON ACTION exporttoexcel   #匯出excel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               CALL g_export_node.clear()
               LET g_export_node[1] = base.typeInfo.create(g_detail)
               LET g_export_id[1]   = "s_detail1"
               LET g_export_node[2] = base.typeInfo.create(g_detail2)
               LET g_export_id[2]   = "s_detail2"
 
               LET g_export_node[3] = base.typeInfo.create(g_detail3)
               LET g_export_id[3]   = "s_detail3"
 
 
               #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
               {<point name="menu.exporttoexcel" />}
               #END add-point
               CALL cl_export_to_excel_getpage()
               CALL cl_export_to_excel()
            END IF
 
         ON ACTION datarefresh   # 重新整理
            CALL abgq310_b_fill()
 
         ON ACTION qbehidden     #qbe頁籤折疊
            IF g_qbe_hidden THEN
               CALL gfrm_curr.setElementHidden("qbe",0)
               CALL gfrm_curr.setElementImage("qbehidden","16/mainhidden.png")
               LET g_qbe_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("qbe",1)
               CALL gfrm_curr.setElementImage("qbehidden","16/worksheethidden.png")
               LET g_qbe_hidden = 1     #hidden
            END IF
 
         ON ACTION detail_first               #page first
            LET g_action_choice = "detail_first"
            LET g_detail_page_action = "detail_first"
            CALL abgq310_b_fill()
 
         ON ACTION detail_previous                #page previous
            LET g_action_choice = "detail_previous"
            LET g_detail_page_action = "detail_previous"
            CALL abgq310_b_fill()
 
         ON ACTION detail_next               #page next
            LET g_action_choice = "detail_next"
            LET g_detail_page_action = "detail_next"
            CALL abgq310_b_fill()
 
         ON ACTION detail_last               #page last
            LET g_action_choice = "detail_last"
            LET g_detail_page_action = "detail_last"
            CALL abgq310_b_fill()
 
         #應用 qs19 樣板自動產生(Version:3)
         #有關於sel欄位選取的action段落
         #選擇全部
         ON ACTION selall
            CALL DIALOG.setSelectionRange("s_detail1", 1, -1, 1)
            FOR li_idx = 1 TO g_detail.getLength()
               LET g_detail[li_idx].sel = "Y"
            END FOR
 
            #add-point:ui_dialog段on action selall name="ui_dialog.onaction_selall"
            {<point name="ui_dialog.onaction_selall"/>}
            #end add-point
 
         #取消全部
         ON ACTION selnone
            CALL DIALOG.setSelectionRange("s_detail1", 1, -1, 0)
            FOR li_idx = 1 TO g_detail.getLength()
               LET g_detail[li_idx].sel = "N"
            END FOR
 
            #add-point:ui_dialog段on action selnone name="ui_dialog.onaction_selnone"
            {<point name="ui_dialog.onaction_selnone"/>}
            #end add-point
 
         #勾選所選資料
         ON ACTION sel
            FOR li_idx = 1 TO g_detail.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail[li_idx].sel = "Y"
               END IF
            END FOR
 
            #add-point:ui_dialog段on action sel name="ui_dialog.onaction_sel"
            {<point name="ui_dialog.onaction_sel"/>}
            #end add-point
 
         #取消所選資料
         ON ACTION unsel
            FOR li_idx = 1 TO g_detail.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail[li_idx].sel = "N"
               END IF
            END FOR
 
            #add-point:ui_dialog段on action unsel name="ui_dialog.onaction_unsel"
            {<point name="ui_dialog.onaction_unsel"/>}
            #end add-point
 
 
 
 
 
         
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output name="menu.output"
               {<point name="menu.output" mark="Y"/>}
               #END add-point
               
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION quickprint
            LET g_action_choice="quickprint"
            IF cl_auth_chk_act("quickprint") THEN
               
               #add-point:ON ACTION quickprint name="menu.quickprint"
               {<point name="menu.quickprint" mark="Y"/>}
               #END add-point
               
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               
               #add-point:ON ACTION query name="menu.query"
               {<point name="menu.query" mark="Y"/>}
               #END add-point
               
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION datainfo
            LET g_action_choice="datainfo"
            IF cl_auth_chk_act("datainfo") THEN
               
               #add-point:ON ACTION datainfo name="menu.datainfo"
               {<point name="menu.datainfo" mark="Y"/>}
               #END add-point
               
               
            END IF
 
 
 
 
      
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
 
         #add-point:查詢方案相關ACTION設定前 name="ui_dialog.set_qbe_action_before"
         {<point name="ui_dialog.set_qbe_action_before" mark="Y"/>}
         #end add-point
 
         ON ACTION qbeclear   # 條件清除
            CLEAR FORM
            #add-point:條件清除後 name="ui_dialog.qbeclear"
            {<point name="ui_dialog.qbeclear"/>}
            #end add-point
 
         #add-point:查詢方案相關ACTION設定後 name="ui_dialog.set_qbe_action_after"
         {<point name="ui_dialog.set_qbe_action_after"/>}
         #end add-point
 
      END DIALOG 
   
   END WHILE
 
END FUNCTION

{</section>}

{<section id="abgq310.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION abgq310_b_fill()
   #add-point:b_fill段define-客製 name="b_fill.define_customerization"
   {<point name="b_fill.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ls_wc           STRING
   DEFINE l_pid           LIKE type_t.chr50
   DEFINE ls_sql_rank     STRING
   #add-point:b_fill段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   {<point name="b_fill.define"/>}
   #end add-point
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   {<point name="b_fill.sql_before"/>}
   #end add-point
 
 
   IF cl_null(g_wc_filter) THEN
      LET g_wc_filter = " 1=1"
   END IF
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
 
   LET ls_wc = g_wc, " AND ", g_wc2, " AND ", g_wc_filter, cl_sql_auth_filter()   #(ver:34) add cl_sql_auth_filter()
 
   CALL g_detail.clear()
 
   #add-point:陣列清空 name="b_fill.array_clear"
   {<point name="b_fill.array_clear" />}
   #end add-point
 
   LET g_cnt = l_ac
   IF g_cnt = 0 THEN
      LET g_cnt = 1
   END IF
   LET l_ac = 1
 
   # b_fill段sql組成及FOREACH撰寫
   #應用 qs09 樣板自動產生(Version:3)
   #+ b_fill段資料取得(包含sql組成及FOREACH段撰寫)
   #add-point:b_fill段sql name="b_fill.sql"
   {<point name="b_fill.sql"/>}
   #end add-point
 
 
 
 
 
   #應用 qs10 樣板自動產生(Version:3)
   #+ b_fill段其他table資料取得(包含sql組成及資料填充)
 
 
 
 
 
 
   #add-point:b_fill段資料填充(其他單身) name="b_fill.others.fill"
   {<point name="b_fill.others.fill"/>}
   #end add-point
 
   CALL g_detail.deleteElement(g_detail.getLength())
 
   #add-point:陣列長度調整 name="b_fill.array_deleteElement"
   {<point name="b_fill.array_deleteElement" />}
   #end add-point
 
   LET g_error_show = 0
 
   LET g_detail_cnt = g_detail.getLength()
   LET l_ac = g_cnt
   LET g_cnt = 0
 
   
 
   #調整單身index指標，避免翻頁後指到空白筆數
   CALL abgq310_detail_index_setting()
 
   #重新計算單身筆數並呈現
   CALL abgq310_detail_action_trans()
 
   LET l_ac = 1
   IF g_detail.getLength() > 0 THEN
      CALL abgq310_b_fill2()
   END IF
 
   
 
END FUNCTION

{</section>}

{<section id="abgq310.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION abgq310_b_fill2()
   #add-point:b_fill2段define-客製 name="b_fill2.define_customerization"
   {<point name="b_fill2.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_ac           LIKE type_t.num10
   #add-point:b_fill2段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   {<point name="b_fill2.define"/>}
   #end add-point
 
   #add-point:FUNCTION前置處理 name="b_fill2.before_function"
   {<point name="b_fill2.before_function" />}
   #end add-point
 
   LET li_ac = l_ac
 
   #單身組成
   #應用 qs11 樣板自動產生(Version:3)
   #+ b_fill2段table資料取得(包含sql組成及資料填充)
   #add-point:sql組成 name="b_fill2.fill"
   {<point name="b_fill2.fill" />}
   #end add-point
 
 
 
 
 
 
   #add-point:單身填充後 name="b_fill2.after_fill"
   {<point name="b_fill2.after_fill" />}
   #end add-point
 
   LET l_ac = li_ac
 
END FUNCTION

{</section>}

{<section id="abgq310.detail_show" >}
#+ 顯示相關資料
PRIVATE FUNCTION abgq310_detail_show(ps_page)
   #add-point:show段define-客製 name="detail_show.define_customerization"
   {<point name="detail_show.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ps_page    STRING
   DEFINE ls_sql     STRING
   #add-point:show段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   {<point name="detail_show.define"/>}
   #end add-point
 
   #add-point:detail_show段之前 name="detail_show.before"
   {<point name="detail_show.before"/>}
   #end add-point
 
   
 
   #讀入ref值
   IF ps_page.getIndexOf("'1'",1) > 0 THEN
      #帶出公用欄位reference值page1
      
 
      #add-point:show段單身reference name="detail_show.body.reference"
      {<point name="detail_show.body.reference"/>}
      #end add-point
   END IF
 
   IF ps_page.getIndexOf("'2'",1) > 0 THEN
      #帶出公用欄位reference值page2
      
 
      #add-point:show段單身reference name="detail_show.body2.reference"
      {<point name="detail_show.body2.reference"/>}
      #end add-point
   END IF
 
   IF ps_page.getIndexOf("'3'",1) > 0 THEN
      #帶出公用欄位reference值page3
      
 
      #add-point:show段單身reference name="detail_show.body3.reference"
      {<point name="detail_show.body3.reference"/>}
      #end add-point
   END IF
 
 
 
   #add-point:detail_show段之後 name="detail_show.after"
   {<point name="detail_show.after"/>}
   #end add-point
 
END FUNCTION

{</section>}

{<section id="abgq310.tree_expand" >}
#應用 qs21 樣板自動產生(Version:7)
#+ tree節點展開程式段
PRIVATE FUNCTION abgq310_tree_expand(p_id)
   #add-point:tree_expand段define-客製 name="tree_expand.define_customerization"
   {<point name="tree_expand.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE p_id          LIKE type_t.num10
   DEFINE l_id          LIKE type_t.num10
   DEFINE l_cnt         LIKE type_t.num10
   DEFINE l_keyvalue    LIKE type_t.chr50
   DEFINE l_typevalue   LIKE type_t.chr50
   DEFINE l_type        LIKE type_t.chr50
   DEFINE l_sql         LIKE type_t.chr500
   DEFINE ls_source     LIKE type_t.chr500
   DEFINE ls_exp_code   LIKE type_t.chr500
   DEFINE l_return      LIKE type_t.num5
   #add-point:tree_expand段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="tree_expand.define"
   {<point name="tree_expand.define"/>}
   #end add-point
 
   #add-point:FUNCTION前置處理 name="tree_expand.before_function"
   {<point name="tree_expand.before_function" />}
   #end add-point
 
   #若已經展開
   IF g_detail[p_id].isExp = 1 THEN
      RETURN
   END IF
 
   LET l_return = FALSE
 
   CASE g_detail[p_id].expcode
      WHEN -1
         CALL g_detail.deleteElement(p_id)
      WHEN 0
         RETURN
      WHEN 1
         #add-point:tree_expand段資料來源table name="tree_expand.expcode_1"
         {<point name="tree_expand.expcode_1"/>}
         #end add-point
         LET ls_exp_code = "exp_code"
      WHEN 2
         #add-point:tree_expand段資料來源table name="tree_expand.expcode_2"
         {<point name="tree_expand.expcode_2"/>}
         #end add-point
         LET ls_exp_code = "'2'"
   END CASE
 
 
   #add-point:tree_expand段sql組成 name="tree_expand.sql"
   {<point name="tree_expand.sql"/>}
   #end add-point
 
   LET l_sql = cl_sql_add_mask(l_sql)              #遮蔽特定資料
   PREPARE tree_expand_pre FROM l_sql
   DECLARE tree_expand_cur CURSOR FOR tree_expand_pre
 
   LET l_id = p_id + 1
   CALL g_detail.insertElement(l_id)
   LET l_cnt = 1
   FOREACH tree_expand_cur INTO g_detail[l_id].*
      #(ver:7) ---start---
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.extend = "tree_expand_cur FOREACH:",SQLERRMESSAGE
         LET g_errparam.code   = SQLCA.SQLCODE
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         EXIT FOREACH
      END IF
      #(ver:7) --- end ---
      #pid=父節點id
      LET g_detail[l_id].pid = g_detail[p_id].id
      #
      #id=本身節點id(採流水號遞增)
      LET g_detail[l_id].id = g_detail[p_id].id||"."||l_cnt
      #
      #isnode=確認該節點是否有子孫
      CALL abgq310_desc_show(l_id)
      LET g_detail[l_id].isnode = abgq310_chk_isnode(l_id)
      LET l_id = l_id + 1
      CALL g_detail.insertElement(l_id)
      LET l_cnt = l_cnt + 1
 
      LET l_return = TRUE
   END FOREACH
 
   #刪除空資料
   CALL g_detail.deleteElement(l_id)
 
END FUNCTION

{</section>}

{<section id="abgq310.desc_show" >}
#應用 qs22 樣板自動產生(Version:7)
#+ tree節點名稱顯示程式段
PRIVATE FUNCTION abgq310_desc_show(pi_ac)
   #add-point:desc_show段define-客製 name="desc_show.define_customerization"
   {<point name="desc_show.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE pi_ac   LIKE type_t.num10
   DEFINE li_tmp  LIKE type_t.num10
   #add-point:desc_show段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="desc_show.define"
   {<point name="desc_show.define"/>}
   #end add-point
 
   #add-point:FUNCTION前置處理 name="desc_show.before_function"
   {<point name="desc_show.before_function" />}
   #end add-point
 
   LET li_tmp = l_ac
   LET l_ac = pi_ac
 
   #add-point:desc處理 name="desc_show.name"
   {<point name="desc_show.name"/>}
   #end add-point
 
   LET l_ac = li_tmp
 
END FUNCTION

{</section>}

{<section id="abgq310.chk_isnode" >}
#應用 qs23 樣板自動產生(Version:5)
#+ 搜尋該節點下是否還有子節點
PRIVATE FUNCTION abgq310_chk_isnode(pi_id)
   #add-point:chk_isnode段define-客製 name="chk_isnode.define_customerization"
   {<point name="chk_isnode.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE pi_id    LIKE type_t.num10
   DEFINE li_cnt   LIKE type_t.num10
   #add-point:chk_isnode段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="chk_isnode.define"
   {<point name="chk_isnode.define"/>}
   #end add-point
 
 
   #add-point:chk_isnode段筆數計算sql組成 name="chk_isnode.row_count_sql"
   {<point name="chk_isnode.row_count_sql"/>}
   #end add-point
 
   PREPARE abgq310_chk_isnode_pre FROM g_sql
 
   CASE g_detail[pi_id].expcode
      WHEN -1
         RETURN FALSE
      WHEN 0
         RETURN FALSE
      WHEN 1
         #add-point:chk_isnode段sql執行 name="chk_isnode.execute_sql_1"
         {<point name="chk_isnode.execute_sql_1"/>}
         #end add-point
      WHEN 2
         #add-point:chk_isnode段sql執行 name="chk_isnode.execute_sql_2"
         {<point name="chk_isnode.execute_sql_2"/>}
         #end add-point
   END CASE
 
   IF li_cnt > 0 THEN
      RETURN TRUE
   ELSE
      RETURN FALSE
   END IF
 
END FUNCTION

{</section>}

{<section id="abgq310.detail_action_trans" >}
#+ 單身分頁筆數顯示及action圖片顯示切換功能
PRIVATE FUNCTION abgq310_detail_action_trans()
   #add-point:detail_action_trans段define-客製 name="detail_action_trans.define_customerization"
   {<point name="detail_action_trans.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   #add-point:detail_action_trans段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_action_trans.define"
   {<point name="detail_action_trans.define"/>}
   #end add-point
 
 
   #add-point:FUNCTION前置處理 name="detail_action_trans.before_function"
   {<point name="detail_action_trans.before_function" />}
   #end add-point
 
   #因應單身切頁功能，筆數計算方式調整
   LET g_current_row_tot = g_pagestart + g_detail_idx - 1
   DISPLAY g_current_row_tot TO FORMONLY.h_index
   DISPLAY g_tot_cnt TO FORMONLY.h_count
 
   #顯示單身頁面的起始與結束筆數
   LET g_page_start_num = g_pagestart
   LET g_page_end_num = g_pagestart + g_num_in_page - 1
   DISPLAY g_page_start_num TO FORMONLY.p_start
   DISPLAY g_page_end_num TO FORMONLY.p_end
 
   #目前不支援跳頁功能
   LET g_page_act_list = "detail_first,detail_previous,'',detail_next,detail_last"
   CALL cl_navigator_detail_page_setting(g_page_act_list,g_current_row_tot,g_pagestart,g_num_in_page,g_tot_cnt)
 
END FUNCTION

{</section>}

{<section id="abgq310.detail_index_setting" >}
#+ 單身切頁後，index重新調整，避免翻頁後指到空白筆數
PRIVATE FUNCTION abgq310_detail_index_setting()
   #add-point:detail_index_setting段define-客製 name="detail_index_setting.define_customerization"
   {<point name="detail_index_setting.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_redirect     BOOLEAN
   DEFINE ldig_curr       ui.Dialog
   #add-point:detail_index_setting段define-標準  (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_index_setting.define"
   {<point name="detail_index_setting.define"/>}
   #end add-point
 
   #add-point:FUNCTION前置處理 name="detail_index_setting.before_function"
   {<point name="detail_index_setting.before_function" />}
   #end add-point
 
   IF g_curr_diag IS NOT NULL THEN
      CASE
         WHEN g_curr_diag.getCurrentRow("s_detail1") <= "0"
            LET g_detail_idx = 1
            IF g_detail.getLength() > 0 THEN
               LET li_redirect = TRUE
            END IF
         WHEN g_curr_diag.getCurrentRow("s_detail1") > g_detail.getLength() AND g_detail.getLength() > 0
            LET g_detail_idx = g_detail.getLength()
            LET li_redirect = TRUE
         WHEN g_curr_diag.getCurrentRow("s_detail1") != g_detail_idx
            IF g_detail_idx > g_detail.getLength() THEN
               LET g_detail_idx = g_detail.getLength()
            END IF
            LET li_redirect = TRUE
      END CASE
   END IF
 
   IF li_redirect THEN
      LET ldig_curr = ui.Dialog.getCurrent()
      CALL ldig_curr.setCurrentRow("s_detail1", g_detail_idx)
   END IF
 
END FUNCTION

{</section>}

{<section id="abgq310.mask_functions" >}
 &include "erp/abg/abgq310_mask.4gl"

{</section>}

{<section id="abgq310.other_function" readonly="Y" >}
{<point name="other.function"/>}

{</section>}

