#該程式已解開Section, 不再透過樣板產出!
{<section id="asft700_01.description" >}
#+ Version..: T100-ERP-1.00.00(SD版次:1,PR版次:1) Build-000011
#+ 
#+ Filename...: asft700_01
#+ Description: 維護多筆影響工作站
#+ Creator....: 00537(2014-11-18 17:48:41)
#+ Modifier...: 00537(2014-11-18 23:28:12) -SD/PR-
#+ Buildtype..: 應用 t01 樣板自動產生
#+ 以上段落由子樣板a00產生

{</section>}

{<section id="asft700_01.global" >}
{<point name="global.memo" />}
        
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔
{<point name="global.inc" />}
#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_sfnb_m        RECORD
       sfnbdocno LIKE sfnb_t.sfnbdocno, 
   sfnbseq LIKE sfnb_t.sfnbseq, 
   sfnbsite LIKE sfnb_t.sfnbsite
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_sfnc_d        RECORD
       sfncdocno LIKE sfnc_t.sfncdocno, 
   sfncseq LIKE sfnc_t.sfncseq, 
   sfncseq1 LIKE sfnc_t.sfncseq1, 
   sfnc000 LIKE sfnc_t.sfnc000, 
   sfnc000_desc LIKE type_t.chr500
       END RECORD
 
 
#模組變數(Module Variables)
DEFINE g_sfnb_m          type_g_sfnb_m
DEFINE g_sfnb_m_t        type_g_sfnb_m
DEFINE g_sfnb_m_o        type_g_sfnb_m
 
   DEFINE g_sfnbdocno_t LIKE sfnb_t.sfnbdocno
DEFINE g_sfnbseq_t LIKE sfnb_t.sfnbseq
 
 
DEFINE g_sfnc_d          DYNAMIC ARRAY OF type_g_sfnc_d
DEFINE g_sfnc_d_t        type_g_sfnc_d
DEFINE g_sfnc_d_o        type_g_sfnc_d
 
 
DEFINE g_browser    DYNAMIC ARRAY OF RECORD    #資料瀏覽之欄位 
         b_statepic     LIKE type_t.chr50,
            b_sfnbdocno LIKE sfnb_t.sfnbdocno,
      b_sfnbseq LIKE sfnb_t.sfnbseq
      END RECORD 
      
DEFINE g_browser_f  RECORD #資料瀏覽之欄位 
       b_statepic     LIKE type_t.chr50,
          b_sfnbdocno LIKE sfnb_t.sfnbdocno,
      b_sfnbseq LIKE sfnb_t.sfnbseq
      END RECORD 
      
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
 
 
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num5           
DEFINE l_ac                  LIKE type_t.num5    
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog
    
DEFINE g_pagestart           LIKE type_t.num5           
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_page_action         STRING                        #page action
DEFINE g_header_hidden       LIKE type_t.num5              #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5              #隱藏工作Panel
DEFINE g_page                STRING                        #第幾頁
DEFINE g_state               STRING       
 
DEFINE g_detail_cnt          LIKE type_t.num5              #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num5              #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num5              #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num5              #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num5              #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num5              #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                        #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num5              #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                       #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num5              #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5              #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv)
{<point name="global.argv"/>}
#end add-point

{</section>}

{<section id="asft700_01.main" >}
#+ 此段落由子樣板a27產生
#+ 資料輸入
PUBLIC FUNCTION asft700_01(--)
   #add-point:main段變數傳入
   {<point name="main.get_var"/>}
   #end add-point
   )
   #add-point:main段define
   {<point name="main.define"/>}
   #end add-point   
 
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #add-point:作業初始化
   {<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define
   {<point name="main.define_sql" mark="Y"/>}
   #end add-point
   LET g_forupd_sql = "SELECT sfnbdocno,sfnbseq,sfnbsite FROM sfnb_t WHERE sfnbent= ? AND sfnbdocno=?  
       AND sfnbseq=? FOR UPDATE"
   #add-point:SQL_define
   {<point name="main.after_define_sql"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)   #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE asft700_01_cl CURSOR FROM g_forupd_sql     # LOCK CURSOR
 
   LET g_sql = " SELECT t0.sfnbdocno,t0.sfnbseq,t0.sfnbsite",
               " FROM sfnb_t t0",
               " WHERE sfnbent = '" ||g_enterprise|| "' AND t0.sfnbdocno = ? AND t0.sfnbseq = ?"
   #add-point:SQL_define
   {<point name="main.after_refresh_sql"/>}
   #end add-point
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   PREPARE asft700_01_master_referesh FROM g_sql
   
 
 
   
   #畫面開啟 (identifier)
   OPEN WINDOW w_asft700_01 WITH FORM cl_ap_formpath("asf","asft700_01")
   
   #瀏覽頁簽資料初始化
   CALL cl_ui_init()
   
   #程式初始化
   CALL asft700_01_init()   
 
   #進入選單 Menu (="N")
   CALL asft700_01_ui_dialog() 
 
   #畫面關閉
   CLOSE WINDOW w_asft700_01
 
   CLOSE asft700_01_cl
   
   
 
   #add-point:離開前
   {<point name="main.exit" />}
   #end add-point
 
END FUNCTION
 
 

{</section>}

{<section id="asft700_01.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION asft700_01_init()
   #add-point:init段define
   {<point name="init.define"/>}
   #end add-point    
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1
   LET l_ac = 1
   
   
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
 
   #add-point:畫面資料初始化
   {<point name="init.init"/>}
   #end add-point
   
   CALL asft700_01_default_search()
    
END FUNCTION

{</section>}

{<section id="asft700_01.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION asft700_01_ui_dialog()
   DEFINE li_idx    LIKE type_t.num5
   DEFINE ls_wc     STRING
   DEFINE lb_first  BOOLEAN
   DEFINE la_param  RECORD
             prog   STRING,
             param  DYNAMIC ARRAY OF STRING
                    END RECORD
   DEFINE ls_js     STRING
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define"/>}
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   
   #action default動作
   
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog 
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE 
   
      #先填充browser資料
      CALL asft700_01_browser_fill("")
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
 
 
               
      
         
        
         DISPLAY ARRAY g_sfnc_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL asft700_01_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               
               #add-point:page1, before row動作
               {<point name="ui_dialog.page1.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx)
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL asft700_01_idx_chk()
               #add-point:page1自定義行為
               {<point name="ui_dialog.page1.before_display"/>}
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
               
            #add-point:page1自定義行為
            {<point name="ui_dialog.page1.action"/>}
            #end add-point
               
         END DISPLAY
        
 
         
 
         
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
         
      
         BEFORE DIALOG
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL asft700_01_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL asft700_01_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL asft700_01_idx_chk()
            
            #add-point:ui_dialog段before_dialog2
            {<point name="ui_dialog.before_dialog2"/>}
            #end add-point
        
 
 
         
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               LET g_wc = ls_wc
               CALL asft700_01_browser_fill("F")   #browser_fill()會將notice區塊清空
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               LET g_wc = ls_wc
               #取得條件後需要重查、跳到結果第一筆資料的功能程式段
               CALL asft700_01_browser_fill("F")
               IF g_browser_cnt = 0 THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = "-100" 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
 
                  CLEAR FORM
               ELSE
                  CALL asft700_01_fetch("F")
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
          
         
         
         ON ACTION first
            CALL asft700_01_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL asft700_01_idx_chk()
            
         ON ACTION previous
            CALL asft700_01_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL asft700_01_idx_chk()
            
         ON ACTION jump
            CALL asft700_01_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL asft700_01_idx_chk()
            
         ON ACTION next
            CALL asft700_01_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL asft700_01_idx_chk()
            
         ON ACTION last
            CALL asft700_01_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL asft700_01_idx_chk()
            
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_sfnc_d)
 
                  #add-point:ON ACTION exporttoexcel
                  {<point name="menu.exporttoexcel" />}
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            
       
         #單頭摺疊，可利用hot key "Ctrl-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #+ 此段落由子樣板a43產生
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL asft700_01_modify()
               #add-point:ON ACTION modify
               {<point name="menu.modify" />}
               #END add-point
               
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL asft700_01_modify()
               #add-point:ON ACTION modify_detail
               {<point name="menu.modify_detail" />}
               #END add-point
               
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL asft700_01_delete()
               #add-point:ON ACTION delete
               {<point name="menu.delete" />}
               #END add-point
               
            END IF
 
 
         
         #+ 此段落由子樣板a46產生
         #新增相關文件
         ON ACTION related_document
            CALL asft700_01_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document
               {<point name="ui_dialog.dialog.related_document"/>}
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL asft700_01_set_pk_array()
            #add-point:ON ACTION agendum
            {<point name="ui_dialog.dialog.agendum"/>}
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL asft700_01_set_pk_array()
            #add-point:ON ACTION followup
            {<point name="ui_dialog.dialog.followup"/>}
            #END add-point
            CALL cl_user_overview_follow('')
 
 
         
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
            
      END DIALOG
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前
         {<point name="ui_dialog.b_exit"/>}
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION

{</section>}

{<section id="asft700_01.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION asft700_01_browser_fill(ps_page_action)
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define
{<point name="browser_fill.define"/>}
   #end add-point   
   
   #add-point:browser_fill段動作開始前
{<point name="browser_fill.before_browser_fill"/>}
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前
{<point name="browser_fill.before_foreach"/>}
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE sfnbdocno,sfnbseq ",
                      " FROM sfnb_t ",
                      " ",
                      " LEFT JOIN sfnc_t ON sfncent = sfnbent AND sfncsite = sfnbsite AND sfnbdocno = sfncdocno AND sfnbseq = sfncseq ",
 
 
                      " ", 
                      " ", 
                      " WHERE sfnbent = '" ||g_enterprise|| "' AND sfncent = '" ||g_enterprise|| "' AND sfncsite = '" ||g_site|| "' AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("sfnb_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE sfnbdocno,sfnbseq ",
                      " FROM sfnb_t ", 
                      "  ",
                      "  ",
                      " WHERE sfnbent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED, cl_sql_add_filter("sfnb_t")
   END IF
   
   #add-point:browser_fill,cnt wc
{<point name="browser_fill.cnt_sqlwc"/>}
   #end add-point
   
   LET g_sql = " SELECT COUNT(*) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前
{<point name="browser_fill.before_count"/>}
   #end add-point
   
   PREPARE header_cnt_pre FROM g_sql
   EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
   FREE header_cnt_pre
 
   IF g_browser_cnt > g_max_rec THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code   = 9035 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_rec
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_sfnb_m.* TO NULL
      CALL g_sfnc_d.clear()        
 
      #add-point:browser_fill g_add_browse段額外處理
{<point name="browser_fill.add_browse.other"/>}
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.sfnbdocno,t0.sfnbseq Browser欄位定義(取代原本bs_sql功能)
   LET g_sql = " SELECT DISTINCT '',t0.sfnbdocno,t0.sfnbseq ",
               " FROM sfnb_t t0",
               "  ",
               "  LEFT JOIN sfnc_t ON sfncent = sfnbent AND sfncsite = sfnbsite AND sfnbdocno = sfncdocno AND sfnbseq = sfncseq ",
 
 
               "  ",
               
               " WHERE t0.sfnbent = '" ||g_enterprise|| "' AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("sfnb_t")
   #add-point:browser_fill,sql wc
{<point name="browser_fill.fill_sqlwc"/>}
   #end add-point
   LET g_sql = g_sql, " ORDER BY sfnbdocno,sfnbseq ",g_order
 
   #add-point:browser_fill,before_prepare
{<point name="browser_fill.before_prepare"/>}
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"sfnb_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   PREPARE browse_pre FROM g_sql
   DECLARE browse_cur CURSOR FOR browse_pre
   
   #add-point:browser_fill段open cursor
{<point name="browser_fill.open"/>}
   #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_sfnbdocno,g_browser[g_cnt].b_sfnbseq 
      
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = 'foreach:' 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference
{<point name="browser_fill.reference"/>}
         #end add-point
      
         
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_rec THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_sfnbdocno) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
   DISPLAY g_current_idx TO FORMONLY.b_index   #當下筆數的顯示
   DISPLAY g_current_idx TO FORMONLY.h_index   #當下筆數的顯示
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
   
   FREE browse_pre
   
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", FALSE)
   END IF
   
   #add-point:browser_fill段結束前
{<point name="browser_fill.after"/>}
   #end add-point   
   
END FUNCTION

{</section>}

{<section id="asft700_01.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION asft700_01_ui_headershow()
   #add-point:ui_headershow段define
   {<point name="ui_headershow.define"/>}
   #end add-point    
   
   LET g_sfnb_m.sfnbdocno = g_browser[g_current_idx].b_sfnbdocno   
   LET g_sfnb_m.sfnbseq = g_browser[g_current_idx].b_sfnbseq   
 
   EXECUTE asft700_01_master_referesh USING g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq INTO g_sfnb_m.sfnbdocno, 
       g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
   CALL asft700_01_show()
      
END FUNCTION

{</section>}

{<section id="asft700_01.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION asft700_01_ui_detailshow()
   #add-point:ui_detailshow段define
   {<point name="ui_detailshow.define"/>}
   #end add-point    
   
   #add-point:ui_detailshow段before
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
 
   END IF
   
   #add-point:ui_detailshow段after
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION

{</section>}

{<section id="asft700_01.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION asft700_01_ui_browser_refresh()
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define
   {<point name="ui_browser_refresh.define"/>}
   #end add-point    
   
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_sfnbdocno = g_sfnb_m.sfnbdocno 
         AND g_browser[l_i].b_sfnbseq = g_sfnb_m.sfnbseq 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         LET g_header_cnt = g_header_cnt - 1
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser.getLength()
 
   #add-point:ui_browser_refresh段after
   {<point name="ui_browser_refresh.after"/>}
   #end add-point    
   
END FUNCTION

{</section>}

{<section id="asft700_01.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION asft700_01_construct()
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   #add-point:cs段define
   {<point name="cs.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_sfnb_m.* TO NULL
   CALL g_sfnc_d.clear()        
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前
   {<point name="cs.before_construct"/>}
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON sfnbdocno,sfnbseq,sfnbsite
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
            {<point name="cs.head.before_construct"/>}
            #end add-point 
            
         #公用欄位開窗相關處理
         
            
         #一般欄位開窗相關處理    
                  #此段落由子樣板a01產生
         BEFORE FIELD sfnbdocno
            #add-point:BEFORE FIELD sfnbdocno
            {<point name="construct.b.sfnbdocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbdocno
            
            #add-point:AFTER FIELD sfnbdocno
            {<point name="construct.a.sfnbdocno" />}
            #END add-point
            
 
         #Ctrlp:construct.c.sfnbdocno
         ON ACTION controlp INFIELD sfnbdocno
            #add-point:ON ACTION controlp INFIELD sfnbdocno
            {<point name="construct.c.sfnbdocno" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnbseq
            #add-point:BEFORE FIELD sfnbseq
            {<point name="construct.b.sfnbseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbseq
            
            #add-point:AFTER FIELD sfnbseq
            {<point name="construct.a.sfnbseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.sfnbseq
         ON ACTION controlp INFIELD sfnbseq
            #add-point:ON ACTION controlp INFIELD sfnbseq
            {<point name="construct.c.sfnbseq" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnbsite
            #add-point:BEFORE FIELD sfnbsite
            {<point name="construct.b.sfnbsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbsite
            
            #add-point:AFTER FIELD sfnbsite
            {<point name="construct.a.sfnbsite" />}
            #END add-point
            
 
         #Ctrlp:construct.c.sfnbsite
         ON ACTION controlp INFIELD sfnbsite
            #add-point:ON ACTION controlp INFIELD sfnbsite
            {<point name="construct.c.sfnbsite" />}
            #END add-point
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON sfncdocno,sfncseq,sfncseq1,sfnc000
           FROM s_detail1[1].sfncdocno,s_detail1[1].sfncseq,s_detail1[1].sfncseq1,s_detail1[1].sfnc000 

                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct
            {<point name="cs.body.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #此段落由子樣板a01產生
         BEFORE FIELD sfncdocno
            #add-point:BEFORE FIELD sfncdocno
            {<point name="construct.b.page1.sfncdocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncdocno
            
            #add-point:AFTER FIELD sfncdocno
            {<point name="construct.a.page1.sfncdocno" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.sfncdocno
         ON ACTION controlp INFIELD sfncdocno
            #add-point:ON ACTION controlp INFIELD sfncdocno
            {<point name="construct.c.page1.sfncdocno" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfncseq
            #add-point:BEFORE FIELD sfncseq
            {<point name="construct.b.page1.sfncseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncseq
            
            #add-point:AFTER FIELD sfncseq
            {<point name="construct.a.page1.sfncseq" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.sfncseq
         ON ACTION controlp INFIELD sfncseq
            #add-point:ON ACTION controlp INFIELD sfncseq
            {<point name="construct.c.page1.sfncseq" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfncseq1
            #add-point:BEFORE FIELD sfncseq1
            {<point name="construct.b.page1.sfncseq1" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncseq1
            
            #add-point:AFTER FIELD sfncseq1
            {<point name="construct.a.page1.sfncseq1" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.sfncseq1
         ON ACTION controlp INFIELD sfncseq1
            #add-point:ON ACTION controlp INFIELD sfncseq1
            {<point name="construct.c.page1.sfncseq1" />}
            #END add-point
 
         #Ctrlp:construct.c.page1.sfnc000
         ON ACTION controlp INFIELD sfnc000
            #add-point:ON ACTION controlp INFIELD sfnc000
            {<point name="construct.c.page1.sfnc000" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnc000
            #add-point:BEFORE FIELD sfnc000
            {<point name="construct.b.page1.sfnc000" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnc000
            
            #add-point:AFTER FIELD sfnc000
            {<point name="construct.a.page1.sfnc000" />}
            #END add-point
            
 
   
       
      END CONSTRUCT
      
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令)
      {<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog
         {<point name="cs.b_dialog"/>}
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
 
 
 
   
   #add-point:cs段結束前
   {<point name="cs.after_construct"/>}
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION

{</section>}

{<section id="asft700_01.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION asft700_01_query()
   DEFINE ls_wc STRING
   #add-point:query段define
   {<point name="query.define"/>}
   #end add-point   
 
   #切換畫面
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_sfnc_d.clear()
 
   
   #add-point:query段other
   {<point name="query.other"/>}
   #end add-point   
   
   DISPLAY ' ' TO FORMONLY.idx
   DISPLAY ' ' TO FORMONLY.cnt
   DISPLAY ' ' TO FORMONLY.b_index
   DISPLAY ' ' TO FORMONLY.b_count
   DISPLAY ' ' TO FORMONLY.h_index
   DISPLAY ' ' TO FORMONLY.h_count
   
   CALL asft700_01_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      LET g_wc = ls_wc
      CALL asft700_01_browser_fill("")
      CALL asft700_01_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
   CALL asft700_01_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "-100" 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
   ELSE
      CALL asft700_01_fetch("F") 
      #顯示單身筆數
      CALL asft700_01_idx_chk()
   END IF
 
END FUNCTION

{</section>}

{<section id="asft700_01.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION asft700_01_fetch(p_flag)
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define
{<point name="fetch.define"/>}
   #end add-point    
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
   
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
   
   #CALL asft700_01_browser_fill(p_flag)
   
   
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY ' ' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_pagestart = g_current_idx
   DISPLAY g_pagestart TO FORMONLY.b_index   #當下筆數
   DISPLAY g_pagestart TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_pagestart, g_browser_cnt )
   
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #超出範圍
   IF g_current_idx > g_browser.getLength() THEN
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_sfnb_m.sfnbdocno = g_browser[g_current_idx].b_sfnbdocno
   LET g_sfnb_m.sfnbseq = g_browser[g_current_idx].b_sfnbseq
 
   
   #重讀DB,因TEMP有不被更新特性
#   EXECUTE asft700_01_master_referesh USING g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq INTO g_sfnb_m.sfnbdocno, 
#       g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
#   IF SQLCA.sqlcode THEN
#      INITIALIZE g_errparam TO NULL 
#      LET g_errparam.extend = "sfnb_t" 
#      LET g_errparam.code   = SQLCA.sqlcode 
#      LET g_errparam.popup  = TRUE 
#      CALL cl_err()
# 
#      INITIALIZE g_sfnb_m.* TO NULL
#      RETURN
#   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL asft700_01_set_act_visible()   
   CALL asft700_01_set_act_no_visible()
   
   #add-point:fetch段action控制
{<point name="fetch.action_control"/>}
   #end add-point  
   
   
   
   #add-point:fetch結束前
{<point name="fetch.after" />}
   #end add-point
   
   #保存單頭舊值
   LET g_sfnb_m_t.* = g_sfnb_m.*
   LET g_sfnb_m_o.* = g_sfnb_m.*
   
   
   #重新顯示   
   CALL asft700_01_show()
 
   
 
END FUNCTION

{</section>}

{<section id="asft700_01.insert" >}
#+ 資料新增
PRIVATE FUNCTION asft700_01_insert()
   #add-point:insert段define
{<point name="insert.define"/>}
   #end add-point    
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_sfnc_d.clear()   
 
 
   INITIALIZE g_sfnb_m.* LIKE sfnb_t.*             #DEFAULT 設定
   
   LET g_sfnbdocno_t = NULL
   LET g_sfnbseq_t = NULL
 
   
   LET g_master_insert = FALSE
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      
 
      #append欄位給值
      
     
      #一般欄位給值
      
  
      #add-point:單頭預設值
{<point name="insert.default"/>}
      #end add-point 
      
      #顯示狀態(stus)圖片
      
    
      CALL asft700_01_input("a")
      
      #add-point:單頭輸入後
{<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG AND NOT g_master_insert THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code   = 9001 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_sfnb_m.* TO NULL
         INITIALIZE g_sfnc_d TO NULL
 
         #add-point:取消新增後
{<point name="insert.cancel"/>}
         #end add-point 
         CALL asft700_01_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_sfnc_d.clear()
 
 
      LET g_rec_b = 0
      IF g_intransaction='N' THEN
         CALL s_transaction_end('Y','0')
      END IF
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL asft700_01_set_act_visible()   
   CALL asft700_01_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
   LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
   
   #組合新增資料的條件
   LET g_add_browse = " sfnbent = '" ||g_enterprise|| "' AND",
                      " sfnbdocno = '", g_sfnb_m.sfnbdocno, "' "
                      ," AND sfnbseq = '", g_sfnb_m.sfnbseq, "' "
 
                      
   #add-point:組合新增資料的條件後
{<point name="insert.after.add_browse"/>}
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL asft700_01_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE asft700_01_cl
   
   CALL asft700_01_idx_chk()
   
   #add-point:新增結束後
{<point name="insert.after"/>}
   #end add-point 
   
END FUNCTION

{</section>}

{<section id="asft700_01.modify" >}
#+ 資料修改
PRIVATE FUNCTION asft700_01_modify()
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
 
 
   #add-point:modify段define
{<point name="modify.define"/>}
   #end add-point    
   
   #保存單頭舊值
   LET g_sfnb_m_t.* = g_sfnb_m.*
   LET g_sfnb_m_o.* = g_sfnb_m.*
   
   IF g_sfnb_m.sfnbdocno IS NULL
   OR g_sfnb_m.sfnbseq IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
 
      RETURN
   END IF
 
   ERROR ""
  
   LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
   LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
   CALL s_transaction_begin()
   
   OPEN asft700_01_cl USING g_enterprise,g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN asft700_01_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      CLOSE asft700_01_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE asft700_01_master_referesh USING g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq INTO g_sfnb_m.sfnbdocno, 
       g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
   
   
   
   #add-point:modify段show之前
{<point name="modify.before_show"/>}
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
 
 
   
   CALL asft700_01_show()
   #add-point:modify段show之後
{<point name="modify.after_show"/>}
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
 
 
    
   WHILE TRUE
      LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
      LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
      
      #寫入修改者/修改日期資訊(單頭)
      
      
      #add-point:modify段修改前
{<point name="modify.before_input"/>}
      #end add-point
      
      #欄位更改
      CALL asft700_01_input("u")
 
      #add-point:modify段修改後
{<point name="modify.after_input"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_sfnb_m.* = g_sfnb_m_t.*
         CALL asft700_01_show()
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code   = 9001 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF 
      
      #若有modid跟moddt則進行update
 
                  
      #若單頭key欄位有變更
      IF g_sfnb_m.sfnbdocno != g_sfnbdocno_t 
      OR g_sfnb_m.sfnbseq != g_sfnbseq_t 
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前
{<point name="modify.body.b_fk_update" mark="Y"/>}
#         #end add-point
#         
#         #更新單身key值
#         UPDATE sfnc_t SET sfncdocno = g_sfnb_m.sfnbdocno
#                                       ,sfncseq = g_sfnb_m.sfnbseq
# 
#          WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnbdocno_t
#            AND sfncseq = g_sfnbseq_t
# 
#            
         #add-point:單身fk修改中
{<point name="modify.body.m_fk_update"/>}
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "sfnc_t" 
               LET g_errparam.code   = "std-00009" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "sfnc_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後
{<point name="modify.body.a_fk_update"/>}
         #end add-point
         
 
         
 
         
         #UPDATE 多語言table key值
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL asft700_01_set_act_visible()   
   CALL asft700_01_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " sfnbent = '" ||g_enterprise|| "' AND",
                      " sfnbdocno = '", g_sfnb_m.sfnbdocno, "' "
                      ," AND sfnbseq = '", g_sfnb_m.sfnbseq, "' "
 
   #填到對應位置
   CALL asft700_01_browser_fill("")
 
   CLOSE asft700_01_cl
   IF g_intransaction='N' THEN
      CALL s_transaction_end('Y','0')
   END IF
 
   #流程通知預埋點-U
   CALL cl_flow_notify(g_sfnb_m.sfnbdocno,'U')
 
END FUNCTION   

{</section>}

{<section id="asft700_01.input" >}
#+ 資料輸入
PRIVATE FUNCTION asft700_01_input(p_cmd)
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num5                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num5                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num5
   DEFINE  l_i                   LIKE type_t.num5
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num5
   DEFINE  li_reproduce_target   LIKE type_t.num5
   #add-point:input段define
   {<point name="input.define"/>}
   #end add-point  
 
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
   
   #切換畫面
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql
   {<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT sfncdocno,sfncseq,sfncseq1,sfnc000 FROM sfnc_t WHERE sfncent=? AND sfncsite=?  
       AND sfncdocno=? AND sfncseq=? AND sfncseq1=? FOR UPDATE"
   #add-point:input段define_sql
   {<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE asft700_01_bcl CURSOR FROM g_forupd_sql
   
 
   
 
 
   #add-point:input段define_sql
   {<point name="input.other_sql"/>}
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL asft700_01_set_entry(p_cmd)
   #add-point:set_entry後
   {<point name="input.after_set_entry"/>}
   #end add-point
   CALL asft700_01_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
   
   LET lb_reproduce = FALSE
   
   #add-point:資料輸入前
   {<point name="input.before_input"/>}
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)

{</section>}

{<section id="asft700_01.input.head" >}
      #單頭段
      INPUT BY NAME g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN asft700_01_cl USING g_enterprise,g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN asft700_01_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CLOSE asft700_01_cl
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #add-point:資料輸入前
            {<point name="input.m.before_input"/>}
            #end add-point
 
                  #此段落由子樣板a01產生
         BEFORE FIELD sfnbdocno
            #add-point:BEFORE FIELD sfnbdocno
            {<point name="input.b.sfnbdocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbdocno
            
            #add-point:AFTER FIELD sfnbdocno
            {<point name="input.a.sfnbdocno" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE sfnbdocno
            #add-point:ON CHANGE sfnbdocno
            {<point name="input.g.sfnbdocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbseq
            #此段落由子樣板a15產生
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_sfnb_m.sfnbseq,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD sfnbseq
            END IF
 
 
            #add-point:AFTER FIELD sfnbseq
            {<point name="input.a.sfnbseq" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnbseq
            #add-point:BEFORE FIELD sfnbseq
            {<point name="input.b.sfnbseq" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE sfnbseq
            #add-point:ON CHANGE sfnbseq
            {<point name="input.g.sfnbseq" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnbsite
            #add-point:BEFORE FIELD sfnbsite
            {<point name="input.b.sfnbsite" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnbsite
            
            #add-point:AFTER FIELD sfnbsite
            {<point name="input.a.sfnbsite" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE sfnbsite
            #add-point:ON CHANGE sfnbsite
            {<point name="input.g.sfnbsite" />}
            #END add-point
 
 #欄位檢查
                  #Ctrlp:input.c.sfnbdocno
         ON ACTION controlp INFIELD sfnbdocno
            #add-point:ON ACTION controlp INFIELD sfnbdocno
            {<point name="input.c.sfnbdocno" />}
            #END add-point
 
         #Ctrlp:input.c.sfnbseq
         ON ACTION controlp INFIELD sfnbseq
            #add-point:ON ACTION controlp INFIELD sfnbseq
            {<point name="input.c.sfnbseq" />}
            #END add-point
 
         #Ctrlp:input.c.sfnbsite
         ON ACTION controlp INFIELD sfnbsite
            #add-point:ON ACTION controlp INFIELD sfnbsite
            {<point name="input.c.sfnbsite" />}
            #END add-point
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq
                        
            #add-point:單頭INPUT後
            {<point name="input.head.after_input"/>}
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前
               {<point name="input.head.b_insert" mark="Y"/>}
               #end add-point
               
               INSERT INTO sfnb_t (sfnbent,sfnbdocno,sfnbseq,sfnbsite)
               VALUES (g_enterprise,g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite) 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_sfnb_m" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭新增中
               {<point name="input.head.m_insert"/>}
               #end add-point
               
               
               
               
               #add-point:單頭新增後
               {<point name="input.head.a_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL asft700_01_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL asft700_01_b_fill()
               END IF
               
               #add-point:單頭新增後
               {<point name="input.head.a_insert2"/>}
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前
               {<point name="input.head.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE sfnb_t SET (sfnbdocno,sfnbseq,sfnbsite) = (g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq, 
                   g_sfnb_m.sfnbsite)
                WHERE sfnbent = g_enterprise AND sfnbdocno = g_sfnbdocno_t
                  AND sfnbseq = g_sfnbseq_t
 
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "sfnb_t" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
 
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               
               #add-point:單頭修改中
               {<point name="input.head.m_update"/>}
               #end add-point
               
               
               
               
               #修改歷程記錄
               LET g_log1 = util.JSON.stringify(g_sfnb_m_t)
               LET g_log2 = util.JSON.stringify(g_sfnb_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後
               {<point name="input.head.a_update"/>}
               #end add-point
            END IF
            
            LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
            LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
            
      END INPUT
   

{</section>}

{<section id="asft700_01.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_sfnc_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #add-point:資料輸入前
{<point name="input.body.before_input2"/>}
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_sfnc_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL asft700_01_b_fill()
            IF g_rec_b != 0 THEN
               CALL fgl_set_arr_curr(l_ac)
            END IF
            LET g_rec_b = g_sfnc_d.getLength()
            IF s_transaction_chk("N",0) THEN
               LET g_intransaction = 'N'
            ELSE
               LET g_intransaction = 'Y'
            END IF
            #add-point:資料輸入前
{<point name="input.d.before_input"/>}
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2
{<point name="input.body.before_row2"/>}
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
            IF g_intransaction='N' THEN
               CALL s_transaction_begin()
            END IF
            OPEN asft700_01_cl USING g_enterprise,g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN asft700_01_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CLOSE asft700_01_cl
               IF g_intransaction='N' THEN
                  CALL s_transaction_end('N','0')
               END IF
               RETURN
            END IF
            
            LET g_rec_b = g_sfnc_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_sfnc_d[l_ac].sfncseq1 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_sfnc_d_t.* = g_sfnc_d[l_ac].*  #BACKUP
               LET g_sfnc_d_o.* = g_sfnc_d[l_ac].*  #BACKUP
               CALL asft700_01_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b
{<point name="input.body.after_set_entry_b"/>}
               #end add-point  
               CALL asft700_01_set_no_entry_b(l_cmd)
               IF NOT asft700_01_lock_b("sfnc_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH asft700_01_bcl INTO g_sfnc_d[l_ac].sfncdocno,g_sfnc_d[l_ac].sfncseq,g_sfnc_d[l_ac].sfncseq1, 
                      g_sfnc_d[l_ac].sfnc000
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_sfnc_d_t.sfncseq1 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL asft700_01_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
               NEXT FIELD sfncseq1
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
{<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_sfnc_d[l_ac].* TO NULL 
            INITIALIZE g_sfnc_d_t.* TO NULL 
            INITIALIZE g_sfnc_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
            
            #add-point:modify段before備份
{<point name="input.body.insert.before_bak"/>}
            #end add-point
            LET g_sfnc_d_t.* = g_sfnc_d[l_ac].*     #新輸入資料
            LET g_sfnc_d_o.* = g_sfnc_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL asft700_01_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b
{<point name="input.body.insert.after_set_entry_b"/>}
            #end add-point
            CALL asft700_01_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_sfnc_d[li_reproduce_target].* = g_sfnc_d[li_reproduce].*
 
               LET g_sfnc_d[li_reproduce_target].sfncseq1 = NULL
 
            END IF
            
            #add-point:modify段before insert
{<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增
{<point name="input.body.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM sfnc_t 
             WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnb_m.sfnbdocno
               AND sfncseq = g_sfnb_m.sfnbseq
 
               AND sfncseq1 = g_sfnc_d[l_ac].sfncseq1
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
{<point name="input.body.b_insert"/>}
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_sfnb_m.sfnbdocno
               LET gs_keys[2] = g_sfnb_m.sfnbseq
               LET gs_keys[3] = g_sfnc_d[g_detail_idx].sfncseq1
               CALL asft700_01_insert_b('sfnc_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
{<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               INITIALIZE g_sfnc_d[l_ac].* TO NULL
               IF g_intransaction='N' THEN
                  CALL s_transaction_end('N','0')
               END IF
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "sfnc_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               IF g_intransaction='N' THEN
                  CALL s_transaction_end('N','0')
               END IF                  
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL asft700_01_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert
{<point name="input.body.a_insert2"/>}
               #end add-point
               IF g_intransaction='N' THEN
                  CALL s_transaction_end('Y','0')
               END IF
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
            ELSE
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
 
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
{<point name="input.body.b_delete" mark="Y"/>}
               #end add-point 
               
               DELETE FROM sfnc_t
                WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnb_m.sfnbdocno AND
                                          sfncseq = g_sfnb_m.sfnbseq AND
 
                      sfncseq1 = g_sfnc_d_t.sfncseq1
 
                  
               #add-point:單身刪除中
{<point name="input.body.m_delete"/>}
               #end add-point 
               
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "sfnc_t" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  IF g_intransaction='N' THEN
                     CALL s_transaction_end('N','0')
                  END IF
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  #add-point:單身刪除後
{<point name="input.body.a_delete"/>}
                  #end add-point
                  IF g_intransaction='N' THEN
                     CALL s_transaction_end('Y','0')
                  END IF
               END IF 
               CLOSE asft700_01_bcl
               LET l_count = g_sfnc_d.getLength()
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_sfnb_m.sfnbdocno
               LET gs_keys[2] = g_sfnb_m.sfnbseq
               LET gs_keys[3] = g_sfnc_d[g_detail_idx].sfncseq1
 
            END IF 
              
         AFTER DELETE 
            IF l_cmd <> 'd' THEN
               #add-point:單身刪除後2
{<point name="input.body.after_delete"/>}
               #end add-point
                              CALL asft700_01_delete_b('sfnc_t',gs_keys,"'1'")
            END IF
            #如果是最後一筆
            IF l_ac = (g_sfnc_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #此段落由子樣板a01產生
         BEFORE FIELD sfncdocno
            #add-point:BEFORE FIELD sfncdocno
{<point name="input.b.page1.sfncdocno" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncdocno
            
            #add-point:AFTER FIELD sfncdocno
{<point name="input.a.page1.sfncdocno" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE sfncdocno
            #add-point:ON CHANGE sfncdocno
{<point name="input.g.page1.sfncdocno" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfncseq
            #add-point:BEFORE FIELD sfncseq
{<point name="input.b.page1.sfncseq" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncseq
            
            #add-point:AFTER FIELD sfncseq
{<point name="input.a.page1.sfncseq" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE sfncseq
            #add-point:ON CHANGE sfncseq
{<point name="input.g.page1.sfncseq" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfncseq1
            #add-point:BEFORE FIELD sfncseq1
{<point name="input.b.page1.sfncseq1" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfncseq1
            
            #add-point:AFTER FIELD sfncseq1
{<point name="input.a.page1.sfncseq1" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE sfncseq1
            #add-point:ON CHANGE sfncseq1
{<point name="input.g.page1.sfncseq1" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD sfnc000
            
            #add-point:AFTER FIELD sfnc000
{<point name="input.a.page1.sfnc000" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD sfnc000
            #add-point:BEFORE FIELD sfnc000
{<point name="input.b.page1.sfnc000" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE sfnc000
            #add-point:ON CHANGE sfnc000
{<point name="input.g.page1.sfnc000" />}
            #END add-point
 
 
                  #Ctrlp:input.c.page1.sfncdocno
         ON ACTION controlp INFIELD sfncdocno
            #add-point:ON ACTION controlp INFIELD sfncdocno
{<point name="input.c.page1.sfncdocno" />}
            #END add-point
 
         #Ctrlp:input.c.page1.sfncseq
         ON ACTION controlp INFIELD sfncseq
            #add-point:ON ACTION controlp INFIELD sfncseq
{<point name="input.c.page1.sfncseq" />}
            #END add-point
 
         #Ctrlp:input.c.page1.sfncseq1
         ON ACTION controlp INFIELD sfncseq1
            #add-point:ON ACTION controlp INFIELD sfncseq1
{<point name="input.c.page1.sfncseq1" />}
            #END add-point
 
         #Ctrlp:input.c.page1.sfnc000
         ON ACTION controlp INFIELD sfnc000
            #add-point:ON ACTION controlp INFIELD sfnc000
{<point name="input.c.page1.sfnc000" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
 
               LET INT_FLAG = 0
               LET g_sfnc_d[l_ac].* = g_sfnc_d_t.*
               CLOSE asft700_01_bcl
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_sfnc_d[l_ac].sfncseq1 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               LET g_sfnc_d[l_ac].* = g_sfnc_d_t.*
            ELSE
            
               #add-point:單身修改前
{<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               UPDATE sfnc_t SET (sfncdocno,sfncseq,sfncseq1,sfnc000) = (
                   g_sfnc_d[l_ac].sfncdocno,g_sfnc_d[l_ac].sfncseq,g_sfnc_d[l_ac].sfncseq1,g_sfnc_d[l_ac].sfnc000) 

                WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnb_m.sfnbdocno 
                  AND sfncseq = g_sfnb_m.sfnbseq 
 
                  AND sfncseq1 = g_sfnc_d_t.sfncseq1 #項次   
 
                  
               #add-point:單身修改中
{<point name="input.body.m_update"/>}
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "sfnc_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     IF g_intransaction='N' THEN
                        CALL s_transaction_end('N','0')
                     END IF
                     LET g_sfnc_d[l_ac].* = g_sfnc_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "sfnc_t" 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()     
                     IF g_intransaction='N' THEN                     
                        CALL s_transaction_end('N','0')
                     END IF
                     LET g_sfnc_d[l_ac].* = g_sfnc_d_t.*  
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_sfnb_m.sfnbdocno
               LET gs_keys_bak[1] = g_sfnbdocno_t
               LET gs_keys[2] = g_sfnb_m.sfnbseq
               LET gs_keys_bak[2] = g_sfnbseq_t
               LET gs_keys[3] = g_sfnc_d[g_detail_idx].sfncseq1
               LET gs_keys_bak[3] = g_sfnc_d_t.sfncseq1
               CALL asft700_01_update_b('sfnc_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                     
               END CASE
               
               #修改歷程記錄
               LET g_log1 = util.JSON.stringify(g_sfnb_m),util.JSON.stringify(g_sfnc_d_t)
               LET g_log2 = util.JSON.stringify(g_sfnb_m),util.JSON.stringify(g_sfnc_d[l_ac])
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  IF g_intransaction='N' THEN
                     CALL s_transaction_end('N','0')
                  END IF
               END IF
               
               #add-point:單身修改後
{<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row
{<point name="input.body.after_row"/>}
            #end add-point
            CALL asft700_01_unlock_b("sfnc_t","'1'")
            IF g_intransaction='N' THEN
               CALL s_transaction_end('Y','0')
            END IF
            #其他table進行unlock
            #add-point:單身after_row2
{<point name="input.body.after_row2"/>}
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input 
{<point name="input.body.after_input"/>}
            #end add-point 
 
         ON ACTION controlo    
            CALL FGL_SET_ARR_CURR(g_sfnc_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_sfnc_d.getLength()+1
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
 
      
 
      
 
      
 
      

{</section>}

{<section id="asft700_01.input.other" >}
      
      #add-point:自定義input
      {<point name="input.more_input"/>}
      #end add-point
      
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog
         {<point name="input.before_dialog"/>}
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_detail_idx)      
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            NEXT FIELD sfnbdocno
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD sfncdocno
 
               #add-point:input段modify_detail 
               {<point name="input.modify_detail.other"/>}
               #end add-point  
            END CASE
         END IF
    
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept 
         {<point name="input.accept"/>}
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
         
   END DIALOG
    
   #add-point:input段after input 
   {<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION

{</section>}

{<section id="asft700_01.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION asft700_01_show()
   DEFINE l_ac_t    LIKE type_t.num5
   #add-point:show段define
   {<point name="show.define"/>}
   #end add-point  
 
   #add-point:show段之前
   {<point name="show.before"/>}
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL asft700_01_b_fill() #單身填充
      CALL asft700_01_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   
   
   #顯示followup圖示
   #+ 此段落由子樣板a48產生
   CALL asft700_01_set_pk_array()
   #add-point:ON ACTION agendum
   {<point name="show.follow_pic"/>}
   #END add-point
   CALL cl_user_overview_set_follow_pic()
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference
   {<point name="show.head.reference"/>}
   #end add-point
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
   
   #顯示狀態(stus)圖片
   
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_sfnc_d.getLength()
      #add-point:show段單身reference
      {<point name="show.body.reference"/>}
      #end add-point
   END FOR
   
 
   
    
   
   #add-point:show段other
   {<point name="show.other"/>}
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL asft700_01_detail_show()
   
   #add-point:show段之後
   {<point name="show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="asft700_01.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION asft700_01_detail_show()
   #add-point:detail_show段define
   {<point name="detail_show.define"/>}
   #end add-point  
 
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   #add-point:detail_show段之後
   {<point name="detail_show.after"/>}
   #end add-point
   
END FUNCTION

{</section>}

{<section id="asft700_01.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION asft700_01_reproduce()
   DEFINE l_newno     LIKE sfnb_t.sfnbdocno 
   DEFINE l_oldno     LIKE sfnb_t.sfnbdocno 
   DEFINE l_newno02     LIKE sfnb_t.sfnbseq 
   DEFINE l_oldno02     LIKE sfnb_t.sfnbseq 
 
   DEFINE l_master    RECORD LIKE sfnb_t.*
   DEFINE l_detail    RECORD LIKE sfnc_t.*
 
 
   DEFINE l_cnt       LIKE type_t.num5
   #add-point:reproduce段define
   {<point name="reproduce.define"/>}
   #end add-point   
 
   #切換畫面
   
   LET g_master_insert = FALSE
   
   IF g_sfnb_m.sfnbdocno IS NULL
   OR g_sfnb_m.sfnbseq IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
   LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
    
   LET g_sfnb_m.sfnbdocno = ""
   LET g_sfnb_m.sfnbseq = ""
 
    
   CALL asft700_01_set_entry('a')
   CALL asft700_01_set_no_entry('a')
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前
   {<point name="reproduce.head.b_input"/>}
   #end add-point
   
   #顯示狀態(stus)圖片
   
   
   CALL asft700_01_input("r")
   
   
   
   IF INT_FLAG AND NOT g_master_insert THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code   = 9001 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      CALL s_transaction_end('N','0')
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_sfnb_m.* TO NULL
      INITIALIZE g_sfnc_d TO NULL
 
      #add-point:複製取消後
      {<point name="reproduce.cancel" />}
      #end add-point
      CALL asft700_01_show()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL asft700_01_set_act_visible()   
   CALL asft700_01_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
   LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
   
   #組合新增資料的條件
   LET g_add_browse = " sfnbent = '" ||g_enterprise|| "' AND",
                      " sfnbdocno = '", g_sfnb_m.sfnbdocno, "' "
                      ," AND sfnbseq = '", g_sfnb_m.sfnbseq, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL asft700_01_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後
   {<point name="reproduce.after_reproduce" />}
   #end add-point
   
   CALL asft700_01_idx_chk()
   
END FUNCTION

{</section>}

{<section id="asft700_01.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION asft700_01_detail_reproduce()
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE sfnc_t.*
 
 
   #add-point:delete段define
   {<point name="detail_reproduce.define"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE asft700_01_detail
   
   #add-point:單身複製前1
   {<point name="detail_reproduce.body.table1.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE asft700_01_detail AS ",
                "SELECT * FROM sfnc_t "
   PREPARE repro_tbl FROM ls_sql
   EXECUTE repro_tbl
   FREE repro_tbl
                
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO asft700_01_detail SELECT * FROM sfnc_t 
                                         WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnbdocno_t
                                         AND sfncseq = g_sfnbseq_t
 
   
   #將key修正為調整後   
   UPDATE asft700_01_detail 
      #更新key欄位
      SET sfncdocno = g_sfnb_m.sfnbdocno
          , sfncseq = g_sfnb_m.sfnbseq
 
      #更新共用欄位
      
 
   #add-point:單身修改前
   {<point name="detail_reproduce.body.table1.b_update"/>}
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO sfnc_t SELECT * FROM asft700_01_detail
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
 
      RETURN
   END IF
   
   #add-point:單身複製中1
   {<point name="detail_reproduce.body.table1.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE asft700_01_detail
   
   #add-point:單身複製後1
   {<point name="detail_reproduce.body.table1.a_insert"/>}
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
   LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
   
END FUNCTION

{</section>}

{<section id="asft700_01.delete" >}
#+ 資料刪除
PRIVATE FUNCTION asft700_01_delete()
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define
   {<point name="delete.define"/>}
   #end add-point     
   
   IF g_sfnb_m.sfnbdocno IS NULL
   OR g_sfnb_m.sfnbseq IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   
 
   CALL asft700_01_show()
   
   CALL s_transaction_begin()
 
   OPEN asft700_01_cl USING g_enterprise,g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq
   IF STATUS THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN asft700_01_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      CLOSE asft700_01_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE asft700_01_master_referesh USING g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq INTO g_sfnb_m.sfnbdocno, 
       g_sfnb_m.sfnbseq,g_sfnb_m.sfnbsite
 
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = g_sfnb_m.sfnbdocno 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:delete段before ask
   {<point name="delete.before_ask"/>}
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前
      {<point name="delete.head.b_delete" mark="Y"/>}
      #end add-point   
      
      #+ 此段落由子樣板a47產生
      #刪除相關文件
      CALL asft700_01_set_pk_array()
      #add-point:相關文件刪除前
      {<point name="delete.befroe.related_document_remove"/>}
      #end add-point   
      CALL cl_doc_remove()  
 
  
  
      #資料備份
      LET g_sfnbdocno_t = g_sfnb_m.sfnbdocno
      LET g_sfnbseq_t = g_sfnb_m.sfnbseq
 
 
      DELETE FROM sfnb_t
       WHERE sfnbent = g_enterprise AND sfnbdocno = g_sfnb_m.sfnbdocno
         AND sfnbseq = g_sfnb_m.sfnbseq
 
       
      #add-point:單頭刪除中
      {<point name="delete.head.m_delete"/>}
      #end add-point
       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_sfnb_m.sfnbdocno 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      
      #add-point:單頭刪除後
      {<point name="delete.head.a_delete"/>}
      #end add-point
  
      #add-point:單身刪除前
      {<point name="delete.body.b_delete" mark="Y"/>}
      #end add-point
      
      DELETE FROM sfnc_t
       WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = g_sfnb_m.sfnbdocno
         AND sfncseq = g_sfnb_m.sfnbseq
 
 
      #add-point:單身刪除中
      {<point name="delete.body.m_delete"/>}
      #end add-point
         
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "sfnc_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF    
 
      #add-point:單身刪除後
      {<point name="delete.body.a_delete"/>}
      #end add-point
      
            
                                                               
 
 
 
                                                               
      CLEAR FORM
      CALL g_sfnc_d.clear() 
 
     
      CALL asft700_01_ui_browser_refresh()  
      #CALL asft700_01_ui_headershow()  
      #CALL asft700_01_ui_detailshow()
      
      IF g_browser_cnt > 0 THEN 
         #CALL asft700_01_browser_fill("")
         CALL asft700_01_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
 
      #add-point:多語言刪除
      {<point name="delete.lang.before_delete"/>}
      #end add-point
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
 
 
   
      #add-point:多語言刪除
      {<point name="delete.lang.delete"/>}
      #end add-point
   
   END IF
 
   CALL s_transaction_end('Y','0')
   
   CLOSE asft700_01_cl
 
   #流程通知預埋點-D
   CALL cl_flow_notify(g_sfnb_m.sfnbdocno,'D')
    
END FUNCTION

{</section>}

{<section id="asft700_01.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION asft700_01_b_fill()
   DEFINE p_wc2      STRING
   #add-point:b_fill段define
{<point name="b_fill.define"/>}
   #end add-point     
 
   CALL g_sfnc_d.clear()    #g_sfnc_d 單頭及單身 
 
 
   #add-point:b_fill段sql_before
{<point name="b_fill.sql_before"/>}
   #end add-point
   
   #判斷是否填充
   IF asft700_01_fill_chk(1) THEN
   
      LET g_sql = "SELECT  UNIQUE sfncdocno,sfncseq,sfncseq1,sfnc000 ,t1.ecaa002 FROM sfnc_t",   
                  " LEFT JOIN ecaa_t t1 ON t1.ecaaent='"||g_enterprise||"' AND t1.ecaasite = '"||g_site||"' AND t1.ecaa001=sfnc000  ", 
                  " WHERE sfncent = '",g_enterprise,"' AND sfncsite = '",g_site,"'",
                  "   AND sfncdocno = '",g_sfnb_m.sfnbdocno,"' AND sfncseq = '",g_sfnb_m.sfnbseq,"' "
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      #add-point:b_fill段sql_before
{<point name="b_fill.body.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table1) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
      END IF
      
      #子單身的WC
      
      
      LET g_sql = g_sql, " ORDER BY sfnc_t.sfncseq1"
      
      #add-point:單身填充控制
{<point name="b_fill.sql"/>}
      #end add-point
      
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      PREPARE asft700_01_pb FROM g_sql
      DECLARE b_fill_cs CURSOR FOR asft700_01_pb
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
      OPEN b_fill_cs 
                                               
      FOREACH b_fill_cs INTO g_sfnc_d[l_ac].sfncdocno,g_sfnc_d[l_ac].sfncseq,g_sfnc_d[l_ac].sfncseq1, 
          g_sfnc_d[l_ac].sfnc000,g_sfnc_d[l_ac].sfnc000_desc
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充
{<point name="b_fill.fill"/>}
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code   = 9035 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
   
 
   
   #add-point:browser_fill段其他table處理
{<point name="browser_fill.other_fill"/>}
   #end add-point
   
   CALL g_sfnc_d.deleteElement(g_sfnc_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE asft700_01_pb
 
   
END FUNCTION

{</section>}

{<section id="asft700_01.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION asft700_01_delete_b(ps_table,ps_keys_bak,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num5
   #add-point:delete_b段define
   {<point name="delete_b.define"/>}
   #end add-point     
 
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.b_delete" mark="Y"/>}
      #end add-point    
      DELETE FROM sfnc_t
       WHERE sfncent = g_enterprise AND sfncsite = g_site AND
         sfncdocno = ps_keys_bak[1] AND sfncseq = ps_keys_bak[2] AND sfncseq1 = ps_keys_bak[3]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_sfnc_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete"/>}
      #end add-point   
   END IF
   
 
   
 
   
   #add-point:delete_b段other
   {<point name="delete_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="asft700_01.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION asft700_01_insert_b(ps_table,ps_keys,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num5
   #add-point:insert_b段define
   {<point name="insert_b.define"/>}
   #end add-point     
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前
      {<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point 
      INSERT INTO sfnc_t
                  (sfncent, sfncsite,
                   sfncdocno,sfncseq,
                   sfncseq1
                   ,sfnc000) 
            VALUES(g_enterprise, g_site,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_sfnc_d[g_detail_idx].sfnc000)
      #add-point:insert_b段資料新增中
      {<point name="insert_b.m_insert"/>}
      #end add-point 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "sfnc_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_sfnc_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後
      {<point name="insert_b.after_insert"/>}
      #end add-point 
   END IF
   
 
   
 
   
   #add-point:insert_b段other
   {<point name="insert_b.other"/>}
   #end add-point     
   
END FUNCTION

{</section>}

{<section id="asft700_01.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION asft700_01_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define
{<point name="update_b.define"/>}
   #end add-point     
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "sfnc_t" THEN
      #add-point:update_b段修改前
{<point name="update_b.before_update" mark="Y"/>}
      #end add-point     
      UPDATE sfnc_t 
         SET (sfncdocno,sfncseq,
              sfncseq1
              ,sfnc000) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_sfnc_d[g_detail_idx].sfnc000) 
         WHERE sfncent = g_enterprise AND sfncsite = g_site AND sfncdocno = ps_keys_bak[1] AND sfncseq = ps_keys_bak[2] AND sfncseq1 = ps_keys_bak[3]
      #add-point:update_b段修改中
{<point name="update_b.m_update"/>}
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "sfnc_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            IF g_intransaction='N' THEN
               CALL s_transaction_end('N','0')
            END IF
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "sfnc_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            IF g_intransaction='N' THEN
               CALL s_transaction_end('N','0')
            END IF
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
{<point name="update_b.after_update"/>}
      #end add-point  
   END IF
   
 
   
 
   
   #add-point:update_b段other
{<point name="update_b.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="asft700_01.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION asft700_01_lock_b(ps_table,ps_page)
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #先刷新資料
   #CALL asft700_01_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "sfnc_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN asft700_01_bcl USING g_enterprise, g_site,
                                       g_sfnb_m.sfnbdocno,g_sfnb_m.sfnbseq,g_sfnc_d[g_detail_idx].sfncseq1  
                                               
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "asft700_01_bcl" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         RETURN FALSE
      END IF
   END IF
                                    
 
   
 
   
   #add-point:lock_b段other
   {<point name="lock_b.other"/>}
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION

{</section>}

{<section id="asft700_01.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION asft700_01_unlock_b(ps_table,ps_page)
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE asft700_01_bcl
   END IF
   
 
   
 
 
   #add-point:unlock_b段other
   {<point name="unlock_b.other"/>}
   #end add-point  
 
END FUNCTION

{</section>}

{<section id="asft700_01.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION asft700_01_set_entry(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define
   {<point name="set_entry.define"/>}
   #end add-point       
 
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("sfnbdocno,sfnbseq",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後
   {<point name="set_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="asft700_01.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION asft700_01_set_no_entry(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define
   {<point name="set_no_entry.define"/>}
   #end add-point     
 
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("sfnbdocno,sfnbseq",FALSE)
      #add-point:set_no_entry段欄位控制
      {<point name="set_no_entry.field_control"/>}
      #end add-point 
   END IF 
   
   #add-point:set_no_entry段欄位控制後
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
 
END FUNCTION

{</section>}

{<section id="asft700_01.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION asft700_01_set_entry_b(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define"/>}
   #end add-point     
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制
      {<point name="set_entry_b.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry_b段
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point  
END FUNCTION

{</section>}

{<section id="asft700_01.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION asft700_01_set_no_entry_b(p_cmd)
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define"/>}
   #end add-point    
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制
      {<point name="set_no_entry_b.field_control"/>}
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point     
END FUNCTION

{</section>}

{<section id="asft700_01.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION asft700_01_set_act_visible()
   #add-point:set_act_visible段define
   {<point name="set_act_visible.define"/>}
   #end add-point   
   #add-point:set_act_visible段
   {<point name="set_act_visible.set_act_visible"/>}
   #end add-point   
END FUNCTION

{</section>}

{<section id="asft700_01.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION asft700_01_set_act_no_visible()
   #add-point:set_act_no_visible段define
   {<point name="set_act_no_visible.define"/>}
   #end add-point   
   #add-point:set_act_no_visible段
   {<point name="set_act_no_visible.set_act_no_visible"/>}
   #end add-point   
END FUNCTION

{</section>}

{<section id="asft700_01.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION asft700_01_set_act_visible_b()
   #add-point:set_act_visible_b段define
   {<point name="set_act_visible_b.define"/>}
   #end add-point   
   #add-point:set_act_visible_b段
   {<point name="set_act_visible_b.set_act_visible_b"/>}
   #end add-point   
END FUNCTION

{</section>}

{<section id="asft700_01.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION asft700_01_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define
   {<point name="set_act_no_visible_b.define"/>}
   #end add-point   
   #add-point:set_act_no_visible_b段
   {<point name="set_act_no_visible_b.set_act_no_visible_b"/>}
   #end add-point   
END FUNCTION

{</section>}

{<section id="asft700_01.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION asft700_01_default_search()
   DEFINE li_idx  LIKE type_t.num5
   DEFINE li_cnt  LIKE type_t.num5
   DEFINE ls_wc   STRING
   #add-point:default_search段define
   {<point name="default_search.define"/>}
   #end add-point  
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " sfnbdocno = '", g_argv[01], "' AND "
   END IF
   
   IF NOT cl_null(g_argv[02]) THEN
      LET ls_wc = ls_wc, " sfnbseq = '", g_argv[02], "' AND "
   END IF
 
   
   #add-point:default_search段after sql
   {<point name="default_search.after_sql"/>}
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      #預設查詢條件
      LET g_wc = cl_qbe_get_default_qryplan()
      IF cl_null(g_wc) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION

{</section>}

{<section id="asft700_01.state_change" >}
   

{</section>}

{<section id="asft700_01.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION asft700_01_idx_chk()
   #add-point:idx_chk段define
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_sfnc_d.getLength() THEN
         LET g_detail_idx = g_sfnc_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_sfnc_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_sfnc_d.getLength() TO FORMONLY.cnt
   END IF
   
 
   
   #add-point:idx_chk段other
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION

{</section>}

{<section id="asft700_01.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION asft700_01_b_fill2(pi_idx)
   DEFINE pi_idx          LIKE type_t.num5
   DEFINE li_ac           LIKE type_t.num5
   DEFINE ls_chk          LIKE type_t.chr1
   #add-point:b_fill2段define
   {<point name="b_fill2.define"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
 
      
   #add-point:單身填充後
   {<point name="b_fill2.after_fill" />}
   #end add-point
    
   LET l_ac = li_ac
   
   CALL asft700_01_detail_show()
   
END FUNCTION

{</section>}

{<section id="asft700_01.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION asft700_01_fill_chk(ps_idx)
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define
   {<point name="fill_chk.define"/>}
   #end add-point
   
   #add-point:fill_chk段before_chk
   {<point name="fill_chk.before_chk"/>}
   #end add-point
   
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk
      {<point name="fill_chk.other_chk"/>}
      #end add-point
      RETURN TRUE
   END IF
   
   #第一單身
   IF ps_idx = 1 AND
      ((NOT cl_null(g_wc2_table1) AND g_wc2_table1.trim() <> '1=1')) THEN
      RETURN TRUE
   END IF
   
   #根據wc判定是否需要填充
 
 
   
   #add-point:fill_chk段after_chk
   {<point name="fill_chk.after_chk"/>}
   #end add-point
   
   RETURN FALSE
 
END FUNCTION

{</section>}

{<section id="asft700_01.signature" >}
   

{</section>}

{<section id="asft700_01.set_pk_array" >}
   #+ 此段落由子樣板a51產生
#+ 給予pk_array內容
PRIVATE FUNCTION asft700_01_set_pk_array()
   #add-point:set_pk_array段define
   {<point name="set_pk_array.define"/>}
   #end add-point
   
   #add-point:set_pk_array段之前
   {<point name="set_pk_array.before"/>}
   #end add-point  
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_sfnb_m.sfnbdocno
   LET g_pk_array[1].column = 'sfnbdocno'
   LET g_pk_array[2].values = g_sfnb_m.sfnbseq
   LET g_pk_array[2].column = 'sfnbseq'
   
   #add-point:set_pk_array段之後
   {<point name="set_pk_array.after"/>}
   #end add-point  
   
END FUNCTION
 
 

{</section>}

{<section id="asft700_01.other_dialog" readonly="Y" >}
   {<point name="other.dialog"/>}

{</section>}

{<section id="asft700_01.other_function" readonly="Y" >}
{<point name="other.function"/>}

{</section>}

