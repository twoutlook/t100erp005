<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="azzi550" std_prog="azzi550" erpver="1.0" module="AZZ" ver="3" env="s" zone="t10dev" booking="N" type="M" identity="s">
  <other>
    <code_template value="F" status=""/>
    <free_style value="N" status=""/>
  </other>
  <point name="construct.c.page1.gzte001" order="" ver="2" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_gzte001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gzte001  #顯示到畫面上
            NEXT FIELD gzte001                     #返回原欄位
    

]]>
  </point>
  <point name="construct.c.page2.gztecrtdp" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooea001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gztecrtdp  #顯示到畫面上
            NEXT FIELD gztecrtdp                     #返回原欄位
    

]]>
  </point>
  <point name="construct.c.page2.gztecrtid" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gztecrtid  #顯示到畫面上
            NEXT FIELD gztecrtid                     #返回原欄位
    

]]>
  </point>
  <point name="construct.c.page2.gztemodid" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gztemodid  #顯示到畫面上
            NEXT FIELD gztemodid                     #返回原欄位
    

]]>
  </point>
  <point name="construct.c.page2.gzteowndp" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooea001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gzteowndp  #顯示到畫面上
            NEXT FIELD gzteowndp                     #返回原欄位
    

]]>
  </point>
  <point name="construct.c.page2.gzteownid" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO gzteownid  #顯示到畫面上
            NEXT FIELD gzteownid                     #返回原欄位
    

]]>
  </point>
  <point name="detail_show.body.reference" order="" ver="2" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[
   INITIALIZE g_ref_fields TO NULL 
   LET g_ref_fields[1] = g_gzte_d[l_ac].gzte001
   CALL ap_ref_array2(g_ref_fields," SELECT gztel003 FROM gztel_t WHERE gztel001 = ? AND gztel002 = '"||g_dlang||"'","") RETURNING g_rtn_fields 
   LET g_gzte_d[l_ac].gztel003 = g_rtn_fields[1] 
   DISPLAY BY NAME g_gzte_d[l_ac].gztel003]]>
  </point>
  <point name="init.init" order="" ver="2" cite_std="N" new="N" status="" src="s" mark_hard="N">
    <![CDATA[   IF FGL_GETENV("DGENV") = "s" THEN
      CALL cl_set_combo_module_reg("gzte002",1)
   ELSE
      CALL cl_set_combo_module("gzte002",1)
   END IF
   CALL cl_set_combo_lang("gztg002")]]>
  </point>
  <point name="input.a.page1.gzte001" order="" ver="2" cite_std="N" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_gzte_d[g_detail_idx].gzte001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_gzte_d[g_detail_idx].gzte001 != g_gzte_d_t.gzte001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM gzte_t WHERE "||"gzte001 = '"||g_gzte_d[g_detail_idx].gzte001 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page2.gzte001_2" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_gzte2_d[g_detail_idx].gzte001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_gzte2_d[g_detail_idx].gzte001 != g_gzte2_d_t.gzte001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM gzte_t WHERE "||"gzte001 = '"||g_gzte2_d[g_detail_idx].gzte001 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page3.gztf002" order="" ver="2" cite_std="N" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_gzte_d[g_detail_idx].gzte001 IS NOT NULL AND g_gzte3_d[g_detail_idx2].gztf002 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_gzte_d[g_detail_idx].gzte001 != g_gzte_d[g_detail_idx].gzte001 OR g_gzte3_d[g_detail_idx2].gztf002 != g_gzte3_d_t.gztf002)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM gztf_t WHERE "||"gztf001 = '"||g_gzte_d[g_detail_idx].gzte001 ||"' AND "|| "gztf002 = '"||g_gzte3_d[g_detail_idx2].gztf002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_gzte3_d[g_detail_idx2].gztf002
               CALL ap_ref_array2(g_ref_fields,"SELECT gzzal003 FROM gzzal_t WHERE gzzal001=? AND gzzal002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_gzte3_d[g_detail_idx2].gztf002_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_gzte3_d[g_detail_idx2].gztf002_desc
            END IF
        
]]>
  </point>
  <point name="input.a.page4.gztg002" order="" ver="1" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_gzte_d[g_detail_idx].gzte001 IS NOT NULL AND g_gzte4_d[g_detail_idx2].gztg002 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_gzte_d[g_detail_idx].gzte001 != g_gzte_d[g_detail_idx].gzte001 OR g_gzte4_d[g_detail_idx2].gztg002 != g_gzte4_d_t.gztg002)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM gztg_t WHERE "||"gztg001 = '"||g_gzte_d[g_detail_idx].gzte001 ||"' AND "|| "gztg002 = '"||g_gzte4_d[g_detail_idx2].gztg002 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.c.page3.gztf002" order="" ver="2" cite_std="" new="N" status="" src="s" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_gzte3_d[l_ac].gztf002             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_gzzz001()                                #呼叫開窗

            LET g_gzte3_d[l_ac].gztf002 = g_qryparam.return1              

            DISPLAY g_gzte3_d[l_ac].gztf002 TO gztf002              #

            NEXT FIELD gztf002                          #返回原欄位

]]>
  </point>
  <point name="input.detail_input.page1.update_item" order="" ver="2" cite_std="N" new="N" status="" src="s" mark_hard="N">
    <![CDATA[               IF NOT cl_null(g_gzte_d[g_detail_idx].gzte001) THEN
                  CALL n_gztel(g_gzte_d[g_detail_idx].gzte001)
                  INITIALIZE g_ref_fields TO NULL
                  LET g_ref_fields[1] = g_gzte_d[g_detail_idx].gzte001
                  CALL ap_ref_array2(g_ref_fields," SELECT gztel003 FROM gztel_t WHERE gztel001 = ? AND gztel002 = '"||g_dlang||"'","") RETURNING g_rtn_fields
                  LET g_gzte_d[g_detail_idx].gztel003 = g_rtn_fields[1]
                  DISPLAY BY NAME g_gzte_d[g_detail_idx].gztel003

               END IF]]>
  </point>
  <section id="azzi550.b_fill" ver="7" status="" src="s">
    <![CDATA[#+ 單身陣列填充
PRIVATE FUNCTION azzi550_b_fill(p_wc2)
   DEFINE p_wc2           STRING
   DEFINE l_ac_t          LIKE type_t.num5
   #add-point:b_fill段define
   {<point name="b_fill.define"/>}
   #end add-point
 
   #add-point:b_fill段sql_before
   {<point name="b_fill.sql_before"/>}
   #end add-point
   
   LET g_sql = "SELECT  UNIQUE gztestus,gzte001,gzte002,gzte003,gzte001,gzteownid,gzteowndp,gztecrtid, 
       gztecrtdp,gztecrtdt,gztemodid,gztemoddt ,t1.ooag011 ,t2.ooefl003 ,t3.ooag011 ,t4.ooefl003 ,t5.ooag011 FROM gzte_t", 

 
               " LEFT JOIN gztf_t ON gzte001 = gztf001",
 
               " LEFT JOIN gztg_t ON gzte001 = gztg001",
 
 
               " LEFT JOIN gztel_t ON gzte001 = gztel001 AND gztel002 = '",g_lang,"'",
                              " LEFT JOIN ooag_t t1 ON t1.ooagent='"||g_enterprise||"' AND t1.ooag001=gzteownid  ",
               " LEFT JOIN ooefl_t t2 ON t2.ooeflent='"||g_enterprise||"' AND t2.ooefl001=gzteowndp AND t2.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t3 ON t3.ooagent='"||g_enterprise||"' AND t3.ooag001=gztecrtid  ",
               " LEFT JOIN ooefl_t t4 ON t4.ooeflent='"||g_enterprise||"' AND t4.ooefl001=gztecrtdp AND t4.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t5 ON t5.ooagent='"||g_enterprise||"' AND t5.ooag001=gztemodid  ",
 
               " WHERE 1=1 AND ", p_wc2
    
   LET g_sql = g_sql, cl_sql_add_filter("gzte_t"),
                      " ORDER BY gzte_t.gzte001"
  
   #add-point:b_fill段sql_after
   {<point name="b_fill.sql_after"/>}
   #end add-point
  
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料    
   PREPARE azzi550_pb FROM g_sql
   DECLARE b_fill_curs CURSOR FOR azzi550_pb
   
   OPEN b_fill_curs
 
   CALL g_gzte_d.clear()
   CALL g_gzte2_d.clear()   
   CALL g_gzte3_d.clear()   
   CALL g_gzte4_d.clear()   
 
 
   LET g_cnt = l_ac
   LET l_ac = 1   
   ERROR "Searching!" 
 
   FOREACH b_fill_curs INTO g_gzte_d[l_ac].gztestus,g_gzte_d[l_ac].gzte001,g_gzte_d[l_ac].gzte002,g_gzte_d[l_ac].gzte003, 
       g_gzte2_d[l_ac].gzte001,g_gzte2_d[l_ac].gzteownid,g_gzte2_d[l_ac].gzteowndp,g_gzte2_d[l_ac].gztecrtid, 
       g_gzte2_d[l_ac].gztecrtdp,g_gzte2_d[l_ac].gztecrtdt,g_gzte2_d[l_ac].gztemodid,g_gzte2_d[l_ac].gztemoddt, 
       g_gzte2_d[l_ac].gzteownid_desc,g_gzte2_d[l_ac].gzteowndp_desc,g_gzte2_d[l_ac].gztecrtid_desc, 
       g_gzte2_d[l_ac].gztecrtdp_desc,g_gzte2_d[l_ac].gztemodid_desc
      IF SQLCA.sqlcode THEN
         CALL cl_err("FOREACH:",SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF
  
      #add-point:b_fill段資料填充
      {<point name="b_fill.fill"/>}
      #end add-point
      
	  LET g_loc = 'm'
      CALL azzi550_detail_show()      
 
      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         IF g_error_show = 1 THEN
            CALL cl_err( "", 9035, 1 )
         END IF
         EXIT FOREACH
      END IF
      
   END FOREACH
   LET g_error_show = 0
   
 
   CALL g_gzte_d.deleteElement(g_gzte_d.getLength())   
   CALL g_gzte2_d.deleteElement(g_gzte2_d.getLength())
   CALL g_gzte3_d.deleteElement(g_gzte3_d.getLength())
   CALL g_gzte4_d.deleteElement(g_gzte4_d.getLength())
 
   
   #確定指標無超過上限, 超過則指到最後一筆
   IF g_detail_idx > g_gzte_d.getLength() THEN
      LET g_detail_idx = g_gzte_d.getLength()
   END IF
   
   #將key欄位填到每個page
   LET l_ac_t = g_detail_idx
   FOR g_detail_idx = 1 TO g_gzte_d.getLength()
      LET g_gzte2_d[g_detail_idx].gzte001 = g_gzte_d[g_detail_idx].gzte001 
      #LET g_gzte3_d[g_detail_idx2].gztf002 = g_gzte_d[g_detail_idx].gzte001 
      #LET g_gzte4_d[g_detail_idx2].gztg002 = g_gzte_d[g_detail_idx].gzte001 
 
   END FOR
   LET g_detail_idx = l_ac_t
   
   #add-point:b_fill段資料填充(其他單身)
   {<point name="b_fill.others.fill"/>}
   #end add-point
    
   LET g_detail_cnt = l_ac - 1
   DISPLAY g_detail_cnt TO FORMONLY.h_count
   LET l_ac = g_cnt
   LET g_cnt = 0
   
   CLOSE b_fill_curs
   FREE azzi550_pb
   
   LET l_ac = 1
   IF g_gzte_d.getLength() > 0 THEN
      CALL azzi550_fetch()
   END IF
   
   ERROR "" 
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.default_search" ver="1" status="" src="s">
    <![CDATA[#+ 外部參數搜尋
PRIVATE FUNCTION azzi550_default_search()
   DEFINE li_idx  LIKE type_t.num5
   DEFINE li_cnt  LIKE type_t.num5
   DEFINE ls_wc   STRING
   #add-point:default_search段define
   {<point name="default_search.define"/>}
   #end add-point  
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " gzte001 = '", g_argv[01], "' AND "
   END IF
   
 
   
   IF NOT cl_null(ls_wc) THEN
      LET ls_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_wc = ls_wc
   ELSE
      LET g_wc = " 1=1"
   END IF
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.delete" ver="2" status="" src="s">
    <![CDATA[#+ 資料刪除
PRIVATE FUNCTION azzi550_delete()
   DEFINE li_ac LIKE type_t.num5
   #add-point:delete段define
   {<point name="delete.define"/>}
   #end add-point 
   IF NOT cl_ask_delete() THEN
      #不刪除
      RETURN
   END IF
   
   LET li_ac = ARR_CURR()
   LET g_gzte_d_t.* = g_gzte_d[li_ac].*
   LET g_gzte_d_o.* = g_gzte_d[li_ac].*
   
   CALL s_transaction_begin()  
   
   #add-point:delete段刪除前
   {<point name="delete.before_delete" mark="Y"/>}
   #end add-point 
   
   #刪除單頭
   DELETE FROM gzte_t 
         WHERE gzte001 = g_gzte_d_t.gzte001
 
           
   #add-point:delete段刪除中
   {<point name="delete.m_delete"/>}
   #end add-point 
           
   IF SQLCA.sqlcode THEN
      CALL cl_err("gzte_t",SQLCA.sqlcode,1) 
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:delete段刪除後
   {<point name="delete.after_delete"/>}
   #end add-point 
   
   #刪除單頭
   #add-point:delete段刪除前
   {<point name="delete.before_delete2" mark="Y"/>}
   #end add-point 
   DELETE FROM gzte_t 
         WHERE gztf001 = g_gzte_d_t.gzte001
 
   #add-point:delete段刪除中
   {<point name="delete.m_delete2"/>}
   #end add-point 
   IF SQLCA.sqlcode THEN
      CALL cl_err("gzte_t",SQLCA.sqlcode,1) 
      CALL s_transaction_end('N','0')
      RETURN
   ELSE
      CALL s_transaction_end('Y','0')
   END IF
   #add-point:delete段刪除後
   {<point name="delete.after_delete2"/>}
   #end add-point 
 
   #add-point:delete段刪除前
   {<point name="delete.before_delete3" mark="Y"/>}
   #end add-point 
   DELETE FROM gztf_t 
         WHERE gztg001 = g_gzte_d_t.gzte001
 
   #add-point:delete段刪除中
   {<point name="delete.m_delete3"/>}
   #end add-point 
   IF SQLCA.sqlcode THEN
      CALL cl_err("gztf_t",SQLCA.sqlcode,1) 
      CALL s_transaction_end('N','0')
      RETURN
   ELSE
      CALL s_transaction_end('Y','0')
   END IF
   #add-point:delete段刪除後
   {<point name="delete.after_delete3"/>}
   #end add-point 
 
 
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.delete_b" ver="1" status="" src="s">
    <![CDATA[#+ 刪除單身後其他table連動
PRIVATE FUNCTION azzi550_delete_b(ps_table,ps_keys_bak,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   #add-point:delete_b段define
   {<point name="delete_b.define"/>}
   #end add-point     
 
   #判斷是否是同一群組的table
   LET ls_group = "gzte_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.before_delete" mark="Y"/>}
      #end add-point  
      DELETE FROM gzte_t
       WHERE 
         gzte001 = ps_keys_bak[1]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete"/>}
      #end add-point  
      IF SQLCA.sqlcode THEN
         CALL cl_err("",SQLCA.sqlcode,0)
      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.after_delete"/>}
      #end add-point  
   END IF
   
 
   
   LET ls_group = "gztf_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.before_delete2" mark="Y"/>}
      #end add-point  
      DELETE FROM gztf_t
       WHERE 
         gztf001 = ps_keys_bak[1] AND gztf002 = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete2"/>}
      #end add-point  
      IF SQLCA.sqlcode THEN
         CALL cl_err("gztf_t",SQLCA.sqlcode,0)
      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.after_delete2"/>}
      #end add-point  
      RETURN
   END IF
 
   LET ls_group = "gztg_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.before_delete3" mark="Y"/>}
      #end add-point  
      DELETE FROM gztg_t
       WHERE 
         gztg001 = ps_keys_bak[1] AND gztg002 = ps_keys_bak[2]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_delete3"/>}
      #end add-point  
      IF SQLCA.sqlcode THEN
         CALL cl_err("gztg_t",SQLCA.sqlcode,0)
      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.after_delete3"/>}
      #end add-point  
      RETURN
   END IF
 
 
   
   #單頭刪除, 連帶刪除單身
   LET ls_group = "gzte_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.before_body_delete2" mark="Y"/>}
      #end add-point  
      DELETE FROM gztf_t
       WHERE 
         gztf001 = ps_keys_bak[1]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_body_delete2"/>}
      #end add-point  
      IF SQLCA.sqlcode THEN
         CALL cl_err("gztf_t",SQLCA.sqlcode,0)
      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.after_body_delete2"/>}
      #end add-point  
      RETURN
   END IF
 
   #單頭刪除, 連帶刪除單身
   LET ls_group = "gzte_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前
      {<point name="delete_b.before_body_delete3" mark="Y"/>}
      #end add-point  
      DELETE FROM gztg_t
       WHERE 
         gztg001 = ps_keys_bak[1]
      #add-point:delete_b段刪除中
      {<point name="delete_b.m_body_delete3"/>}
      #end add-point  
      IF SQLCA.sqlcode THEN
         CALL cl_err("gztg_t",SQLCA.sqlcode,0)
      END IF
      #add-point:delete_b段刪除後
      {<point name="delete_b.after_body_delete3"/>}
      #end add-point  
      RETURN
   END IF
 
 
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.description" ver="1" status="" src="s">
    <![CDATA[#+ Version..: T100-ERP-1.00.00(SD版次:3,PR版次:3) Build-000030
#+ 
#+ Filename...: azzi550
#+ Description: 標準操作流程文件管理作業
#+ Creator....: 00845(2014/06/27)
#+ Modifier...: 01856(2014/07/10)
#+ Buildtype..: 應用 t02 樣板自動產生
#+ 以上段落由子樣板a00產生
]]>
  </section>
  <section id="azzi550.detail_show" ver="4" status="" src="s">
    <![CDATA[#+ 顯示相關資料
PRIVATE FUNCTION azzi550_detail_show()
   #add-point:show段define
   {<point name="detail_show.define"/>}
   #end add-point
 
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   
   
   #帶出公用欄位reference值page1
   
    
   #帶出公用欄位reference值page2
   #此段落由子樣板a12產生
      #LET g_gzte2_d[l_ac].gzteownid_desc = cl_get_username(g_gzte2_d[l_ac].gzteownid)
      #LET g_gzte2_d[l_ac].gzteowndp_desc = cl_get_deptname(g_gzte2_d[l_ac].gzteowndp)
      #LET g_gzte2_d[l_ac].gztecrtid_desc = cl_get_username(g_gzte2_d[l_ac].gztecrtid)
      #LET g_gzte2_d[l_ac].gztecrtdp_desc = cl_get_deptname(g_gzte2_d[l_ac].gztecrtdp)
      #LET g_gzte2_d[l_ac].gztemodid_desc = cl_get_username(g_gzte2_d[l_ac].gztemodid)
      
 
 
   #帶出公用欄位reference值page3
   
   #帶出公用欄位reference值page4
   
 
   
   IF g_loc = 'm' THEN
   
      #讀入ref值
      #add-point:show段單頭reference
      {<point name="detail_show.body.reference"/>}
      #end add-point
      
      #add-point:show段單頭reference
      {<point name="detail_show.body2.reference"/>}
      #end add-point
 
   
   END IF
   
   IF g_loc = 'd' THEN
   
      #add-point:show段單身reference
      {<point name="detail_show.body3.reference"/>}
      #end add-point
      #add-point:show段單身reference
      {<point name="detail_show.body4.reference"/>}
      #end add-point
 
      
      #add-point:detail_show段之後
      {<point name="detail_show.after"/>}
      #end add-point
   
   END IF
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.fetch" ver="5" status="" src="s">
    <![CDATA[#+ 單身陣列填充2
PRIVATE FUNCTION azzi550_fetch()
   DEFINE li_ac           LIKE type_t.num5
   #add-point:fetch段define
   {<point name="fetch.define"/>}
   #end add-point
   
   #判定單頭是否有資料
   IF g_detail_idx <= 0 OR g_gzte_d.getLength() = 0 THEN
      RETURN
   END IF
   
   #CALL g_gzte2_d.clear()
   CALL g_gzte3_d.clear()
   CALL g_gzte4_d.clear()
 
   
   LET li_ac = l_ac 
   
   LET g_sql = "SELECT  UNIQUE gztf004,gztf002,gztf003 ,t6.gzzal003 FROM gztf_t",    
               "",
                              " LEFT JOIN gzzal_t t6 ON t6.gzzal001=gztf002 AND t6.gzzal002='"||g_lang||"' ",
 
               " WHERE gztf001=?"
 
   IF NOT cl_null(g_wc2_table2) THEN
      LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
   END IF
 
   LET g_sql = g_sql, " ORDER BY gztf_t.gztf002" 
                      
   #add-point:單身填充前
   {<point name="fetch.before_fill" />}
   #end add-point
   
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料    
   PREPARE azzi550_pb2 FROM g_sql
   DECLARE b_fill_curs2 CURSOR FOR azzi550_pb2
   
   LET l_ac = g_detail_idx
   OPEN b_fill_curs2 USING g_gzte_d[l_ac].gzte001
   
   LET l_ac = 1
   FOREACH b_fill_curs2 INTO g_gzte3_d[l_ac].gztf004,g_gzte3_d[l_ac].gztf002,g_gzte3_d[l_ac].gztf003, 
       g_gzte3_d[l_ac].gztf002_desc
      IF SQLCA.sqlcode THEN
         CALL cl_err("FOREACH:",SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF
      
      #add-point:b_fill段資料填充
      {<point name="fetch.fill2"/>}
      #end add-point
	  
	  LET g_loc = 'd'
	  CALL azzi550_detail_show()
      
      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         EXIT FOREACH
      END IF
      
   END FOREACH
 
   LET g_sql = "SELECT  UNIQUE gztg002,gztg003,gztg004  FROM gztg_t",    
               "",
               
               " WHERE gztg001=?"
 
   IF NOT cl_null(g_wc2_table3) THEN
      LET g_sql = g_sql CLIPPED," AND ",g_wc2_table3 CLIPPED
   END IF
 
   LET g_sql = g_sql, " ORDER BY gztg_t.gztg002" 
                      
   #add-point:單身填充前
   {<point name="fetch.before_fill" />}
   #end add-point
   
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料    
   PREPARE azzi550_pb3 FROM g_sql
   DECLARE b_fill_curs3 CURSOR FOR azzi550_pb3
   
   LET l_ac = g_detail_idx
   OPEN b_fill_curs3 USING g_gzte_d[l_ac].gzte001
   
   LET l_ac = 1
   FOREACH b_fill_curs3 INTO g_gzte4_d[l_ac].gztg002,g_gzte4_d[l_ac].gztg003,g_gzte4_d[l_ac].gztg004
      IF SQLCA.sqlcode THEN
         CALL cl_err("FOREACH:",SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF
      
      #add-point:b_fill段資料填充
      {<point name="fetch.fill3"/>}
      #end add-point
	  
	  LET g_loc = 'd'
	  CALL azzi550_detail_show()
      
      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         EXIT FOREACH
      END IF
      
   END FOREACH
 
 
 
   #add-point:單身填充後
   {<point name="fetch.after_fill" />}
   #end add-point
   
   #CALL g_gzte2_d.deleteElement(g_gzte2_d.getLength())   
   CALL g_gzte3_d.deleteElement(g_gzte3_d.getLength())   
   CALL g_gzte4_d.deleteElement(g_gzte4_d.getLength())   
 
   
   LET l_ac = li_ac
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.func_signature" ver="1" status="" src="s">
    <![CDATA[   
]]>
  </section>
  <section id="azzi550.global" ver="9" status="" src="s">
    <![CDATA[{<point name="global.memo" />}
 
IMPORT os
IMPORT util
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
    
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔
{<point name="global.inc" />}
#end add-point
 
#單身 type 宣告
PRIVATE TYPE type_g_gzte_d RECORD
       gztestus LIKE gzte_t.gztestus, 
   gzte001 LIKE gzte_t.gzte001, 
   gztel003 LIKE gztel_t.gztel003, 
   gzte002 LIKE gzte_t.gzte002, 
   gzte003 LIKE gzte_t.gzte003
       END RECORD
PRIVATE TYPE type_g_gzte2_d RECORD
       gzte001 LIKE gzte_t.gzte001, 
   gzteownid LIKE gzte_t.gzteownid, 
   gzteownid_desc LIKE type_t.chr500, 
   gzteowndp LIKE gzte_t.gzteowndp, 
   gzteowndp_desc LIKE type_t.chr500, 
   gztecrtid LIKE gzte_t.gztecrtid, 
   gztecrtid_desc LIKE type_t.chr500, 
   gztecrtdp LIKE gzte_t.gztecrtdp, 
   gztecrtdp_desc LIKE type_t.chr500, 
   gztecrtdt DATETIME YEAR TO SECOND, 
   gztemodid LIKE gzte_t.gztemodid, 
   gztemodid_desc LIKE type_t.chr500, 
   gztemoddt DATETIME YEAR TO SECOND
       END RECORD
PRIVATE TYPE type_g_gzte3_d RECORD
       gztf004 LIKE gztf_t.gztf004, 
   gztf002 LIKE gztf_t.gztf002, 
   gztf002_desc LIKE type_t.chr500, 
   gztf003 LIKE gztf_t.gztf003
       END RECORD
PRIVATE TYPE type_g_gzte4_d RECORD
       gztg002 LIKE gztg_t.gztg002, 
   gztg003 LIKE gztg_t.gztg003, 
   gztg004 LIKE gztg_t.gztg004, 
   image LIKE type_t.chr80
       END RECORD
 
 
DEFINE g_detail_multi_table_t    RECORD
      gztel001 LIKE gztel_t.gztel001,
      gztel002 LIKE gztel_t.gztel002,
      gztel003 LIKE gztel_t.gztel003
      END RECORD
 
#模組變數(Module Variables)
DEFINE g_master                     type_g_gzte_d
DEFINE g_master_t                   type_g_gzte_d
DEFINE g_gzte_d          DYNAMIC ARRAY OF type_g_gzte_d
DEFINE g_gzte_d_t        type_g_gzte_d
DEFINE g_gzte_d_o        type_g_gzte_d
DEFINE g_gzte2_d   DYNAMIC ARRAY OF type_g_gzte2_d
DEFINE g_gzte2_d_t type_g_gzte2_d
DEFINE g_gzte2_d_o type_g_gzte2_d
DEFINE g_gzte3_d   DYNAMIC ARRAY OF type_g_gzte3_d
DEFINE g_gzte3_d_t type_g_gzte3_d
DEFINE g_gzte3_d_o type_g_gzte3_d
DEFINE g_gzte4_d   DYNAMIC ARRAY OF type_g_gzte4_d
DEFINE g_gzte4_d_t type_g_gzte4_d
DEFINE g_gzte4_d_o type_g_gzte4_d
 
      
DEFINE g_wc                 STRING
DEFINE g_wc2                STRING
DEFINE g_sql                STRING
DEFINE g_forupd_sql         STRING                        #SELECT ... FOR UPDATE SQL
DEFINE g_before_input_done  LIKE type_t.num5
DEFINE g_cnt                LIKE type_t.num10    
DEFINE l_ac                 LIKE type_t.num5              
DEFINE g_curr_diag          ui.Dialog                     #Current Dialog
DEFINE gwin_curr            ui.Window                     #Current Window
DEFINE gfrm_curr            ui.Form                       #Current Form
DEFINE g_detail_idx         LIKE type_t.num5              #單身所在筆數(第一階單身)
DEFINE g_detail_idx2        LIKE type_t.num5              #單身所在筆數(第二階單身)
DEFINE g_detail_cnt         LIKE type_t.num5              #單身總筆數 (第一階單身)
DEFINE g_detail_cnt2        LIKE type_t.num5              #單身總筆數 (第二階單身)
DEFINE g_ref_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars           DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys              DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak          DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_insert             LIKE type_t.chr5              #是否導到其他page
DEFINE g_error_show         LIKE type_t.num5
DEFINE g_aw                 STRING                        #確定當下點擊的單身
DEFINE g_current_page       LIKE type_t.num5              #判斷單身筆數用
DEFINE g_loc                LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_log1               STRING                        #log用
DEFINE g_log2               STRING                        #log用
 
#多table用wc
DEFINE g_wc_table           STRING
 
DEFINE g_wc2_table2   STRING
 
DEFINE g_wc2_table3   STRING
 
 
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv)
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="azzi550.idx_chk" ver="1" status="" src="s">
    <![CDATA[#+ 單身筆數變更
PRIVATE FUNCTION azzi550_idx_chk(ps_loc)
   DEFINE ps_loc   LIKE type_t.chr10
   DEFINE li_idx   LIKE type_t.num5
   DEFINE li_cnt   LIKE type_t.num5
   #add-point:idx_chk段define
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_gzte_d.getLength() THEN
         LET g_detail_idx = g_gzte_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_gzte_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      LET li_idx = g_detail_idx
      LET li_cnt = g_gzte_d.getLength()
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx > g_gzte2_d.getLength() THEN
         LET g_detail_idx = g_gzte2_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_gzte2_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      LET li_idx = g_detail_idx
      LET li_cnt = g_gzte2_d.getLength()
   END IF
   IF g_current_page = 3 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail3")
      IF g_detail_idx2 > g_gzte3_d.getLength() THEN
         LET g_detail_idx2 = g_gzte3_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_gzte3_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      LET li_idx = g_detail_idx2
      LET li_cnt = g_gzte3_d.getLength()
   END IF
   IF g_current_page = 4 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail4")
      IF g_detail_idx2 > g_gzte4_d.getLength() THEN
         LET g_detail_idx2 = g_gzte4_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_gzte4_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      LET li_idx = g_detail_idx2
      LET li_cnt = g_gzte4_d.getLength()
   END IF
 
    
   IF ps_loc = 'm' THEN
      DISPLAY li_idx TO FORMONLY.h_index
      DISPLAY li_cnt TO FORMONLY.h_count
      IF g_gzte3_d.getLength() = 0 THEN
         DISPLAY '' TO FORMONLY.idx
         DISPLAY '' TO FORMONLY.cnt
      ELSE
         DISPLAY 1 TO FORMONLY.idx
         DISPLAY g_gzte3_d.getLength() TO FORMONLY.cnt
      END IF
      IF g_gzte4_d.getLength() = 0 THEN
         DISPLAY '' TO FORMONLY.idx
         DISPLAY '' TO FORMONLY.cnt
      ELSE
         DISPLAY 1 TO FORMONLY.idx
         DISPLAY g_gzte4_d.getLength() TO FORMONLY.cnt
      END IF
 
   ELSE
      DISPLAY li_idx TO FORMONLY.idx
      DISPLAY li_cnt TO FORMONLY.cnt
   END IF
   
   #add-point:idx_chk段other
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.init" ver="2" status="" src="s">
    <![CDATA[#+ 畫面資料初始化
PRIVATE FUNCTION azzi550_init()
   #add-point:init段define
   {<point name="init.define"/>}
   #end add-point   
   
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show = 1
   
   
   LET l_ac = 1
   LET g_detail_multi_table_t.gztel001 = g_gzte_d[l_ac].gzte001
LET g_detail_multi_table_t.gztel002 = g_dlang
LET g_detail_multi_table_t.gztel003 = g_gzte_d[l_ac].gztel003
 
   
   
   
 
   #避免USER直接進入第二單身時無資料
   IF g_gzte_d.getLength() > 0 THEN
      LET g_master_t.* = g_gzte_d[1].*
      LET g_master.* = g_gzte_d[1].*
   END IF
 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
   CALL azzi550_default_search()
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.input" ver="10" status="" src="s">
    <![CDATA[#+ 資料輸入
PRIVATE FUNCTION azzi550_input(p_cmd)
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_ac_t                LIKE type_t.num5                #未取消的ARRAY CNT 
   DEFINE  l_n                   LIKE type_t.num5                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num5                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num5
   DEFINE  l_i                   LIKE type_t.num5
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num5
   DEFINE  li_reproduce_target   LIKE type_t.num5
   #add-point:input段define
   {<point name="input.define"/>}
   #end add-point 
   
   LET g_action_choice = ""
   
   LET g_qryparam.state = "i"
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
 
   #add-point:input段define_sql
   {<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT gztestus,gzte001,gzte002,gzte003,gzte001,gzteownid,gzteowndp,gztecrtid, 
       gztecrtdp,gztecrtdt,gztemodid,gztemoddt FROM gzte_t WHERE gzte001=? FOR UPDATE"
   #add-point:input段define_sql
   {<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE azzi550_bcl CURSOR FROM g_forupd_sql      # LOCK CURSOR
   
 
   
   #add-point:input段define_sql
   {<point name="input.define_sql2" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT gztf004,gztf002,gztf003 FROM gztf_t WHERE gztf001=? AND gztf002=? FOR  
       UPDATE"
   #add-point:input段define_sql
   {<point name="input.after_define_sql2"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE azzi550_bcl2 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql
   {<point name="input.define_sql3" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT gztg002,gztg003,gztg004 FROM gztg_t WHERE gztg001=? AND gztg002=? FOR  
       UPDATE"
   #add-point:input段define_sql
   {<point name="input.after_define_sql3"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE azzi550_bcl3 CURSOR FROM g_forupd_sql
 
 
 
   LET lb_reproduce = FALSE
   
   #add-point:input段修改前
   {<point name="input.before_input"/>}
   #end add-point
 
   LET INT_FLAG = 0
 
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #Page1 預設值產生於此處
      INPUT ARRAY g_gzte_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert,
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
 
         #+ 此段落由子樣板a43產生
         ON ACTION update_item
            LET g_action_choice="update_item"
            IF cl_auth_chk_act("update_item") THEN
               
               #add-point:ON ACTION update_item
               {<point name="input.detail_input.page1.update_item" />}
               #END add-point
            END IF
 
 
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_gzte_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            LET g_current_page = 1
            IF p_cmd = 'u' THEN
               CALL azzi550_b_fill(g_wc)
            END IF
			LET g_loc = 'm'
            LET g_detail_cnt = g_gzte_d.getLength()
            #add-point:資料輸入前
            {<point name="input.body.before_input"/>}
            #end add-point
            
         BEFORE ROW
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_master_t.* = g_gzte_d[l_ac].*
            LET g_master.* = g_gzte_d[l_ac].*
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            LET g_detail_idx = l_ac
         
            CALL s_transaction_begin()
            LET g_detail_cnt = g_gzte_d.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND g_gzte_d[l_ac].gzte001 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_gzte_d_t.* = g_gzte_d[l_ac].*  #BACKUP
               LET g_gzte_d_o.* = g_gzte_d[l_ac].*  #BACKUP
               IF NOT azzi550_lock_b("gzte_t") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH azzi550_bcl INTO g_gzte_d[l_ac].gztestus,g_gzte_d[l_ac].gzte001,g_gzte_d[l_ac].gzte002, 
                      g_gzte_d[l_ac].gzte003,g_gzte2_d[l_ac].gzte001,g_gzte2_d[l_ac].gzteownid,g_gzte2_d[l_ac].gzteowndp, 
                      g_gzte2_d[l_ac].gztecrtid,g_gzte2_d[l_ac].gztecrtdp,g_gzte2_d[l_ac].gztecrtdt, 
                      g_gzte2_d[l_ac].gztemodid,g_gzte2_d[l_ac].gztemoddt
                  IF SQLCA.sqlcode THEN
                     CALL cl_err(g_gzte_d_t.gzte001,SQLCA.sqlcode,1)
                     LET l_lock_sw = "Y"
                  END IF
                  
                  CALL azzi550_detail_show()
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL azzi550_set_entry_b(l_cmd)
            CALL azzi550_set_no_entry_b(l_cmd)
            #add-point:input段before row
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            LET g_detail_multi_table_t.gztel001 = g_gzte_d[l_ac].gzte001
LET g_detail_multi_table_t.gztel002 = g_dlang
LET g_detail_multi_table_t.gztel003 = g_gzte_d[l_ac].gztel003
 
            #其他table進行lock
                        INITIALIZE l_var_keys TO NULL 
            INITIALIZE l_field_keys TO NULL 
            LET l_field_keys[01] = 'gztel001'
            LET l_var_keys[01] = g_gzte_d[l_ac].gzte001
            LET l_field_keys[02] = 'gztel002'
            LET l_var_keys[02] = g_dlang
            IF NOT cl_multitable_lock(l_var_keys,l_field_keys,'gztel_t') THEN
               RETURN 
            END IF 
 
            #讀取對應的單身資料
            CALL azzi550_fetch()
            CALL azzi550_idx_chk('m')
        
         BEFORE INSERT
            LET g_detail_multi_table_t.gztel001 = g_gzte_d[l_ac].gzte001
LET g_detail_multi_table_t.gztel002 = g_dlang
LET g_detail_multi_table_t.gztel003 = g_gzte_d[l_ac].gztel003
 
            #判斷能否在此頁面進行資料新增
            
            #清空下層單身
                        CALL g_gzte3_d.clear()
            CALL g_gzte4_d.clear()
 
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_gzte_d[l_ac].* TO NULL 
            INITIALIZE g_gzte_d_t.* TO NULL 
            INITIALIZE g_gzte_d_o.* TO NULL 
            #公用欄位給值(單身)
            #此段落由子樣板a14產生    
      LET g_gzte2_d[l_ac].gzteownid = g_user
      LET g_gzte2_d[l_ac].gzteowndp = g_dept
      LET g_gzte2_d[l_ac].gztecrtid = g_user
      LET g_gzte2_d[l_ac].gztecrtdp = g_dept 
      LET g_gzte2_d[l_ac].gztecrtdt = cl_get_current()
      LET g_gzte2_d[l_ac].gztemodid = ""
      LET g_gzte2_d[l_ac].gztemoddt = ""
      LET g_gzte_d[l_ac].gztestus = ""
 
 
                  LET g_gzte_d[l_ac].gztestus = "Y"
 
            LET g_gzte_d_t.* = g_gzte_d[l_ac].*     #新輸入資料
            LET g_gzte_d_o.* = g_gzte_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL azzi550_set_entry_b("a")
            CALL azzi550_set_no_entry_b("a")
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_gzte_d[li_reproduce_target].* = g_gzte_d[li_reproduce].*
               LET g_gzte2_d[li_reproduce_target].* = g_gzte2_d[li_reproduce].*
 
               LET g_gzte_d[g_gzte_d.getLength()].gzte001 = NULL
 
            END IF
            #add-point:input段before insert
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
            
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM gzte_t 
             WHERE  gzte001 = g_gzte_d[l_ac].gzte001 
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
               {<point name="input.body.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               CALL azzi550_insert_b('gzte_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               CALL cl_err('INSERT',"std-00006",1)
               INITIALIZE g_gzte_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL cl_err("gzte_t",SQLCA.sqlcode,1)  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL azzi550_b_fill(g_wc)
               #資料多語言用-增/改
                        INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         INITIALIZE l_var_keys_bak TO NULL 
         IF g_gzte_d[l_ac].gzte001 = g_detail_multi_table_t.gztel001 AND
         g_gzte_d[l_ac].gztel003 = g_detail_multi_table_t.gztel003 THEN
         ELSE 
            LET l_var_keys[01] = g_gzte_d[l_ac].gzte001
            LET l_field_keys[01] = 'gztel001'
            LET l_var_keys[02] = g_dlang
            LET l_field_keys[02] = 'gztel002'
            LET l_vars[01] = g_gzte_d[l_ac].gztel003
            LET l_fields[01] = 'gztel003'
            LET l_var_keys_bak[01] = g_detail_multi_table_t.gztel001
            LET l_var_keys_bak[02] = g_detail_multi_table_t.gztel002
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'gztel_t')
         END IF 
 
               #add-point:input段-after_insert
               {<point name="input.body.a_insert2"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
               LET g_master.* = g_gzte_d[l_ac].*
            END IF
              
         BEFORE DELETE  #是否取消單身
            IF l_cmd = 'a' AND g_gzte_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_gzte_d.deleteElement(l_ac)
               NEXT FIELD gzte001
            END IF
            IF g_gzte_d[l_ac].gzte001 IS NOT NULL
 
               THEN
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
               {<point name="input.body.b_delete" mark="Y"/>}
               #end add-point
               
               DELETE FROM gzte_t
                WHERE  
                      gzte001 = g_gzte_d_t.gzte001
 
                      
               #add-point:單身刪除中
               {<point name="input.body.m_delete"/>}
               #end add-point
                      
               IF SQLCA.sqlcode THEN
                  CALL cl_err("gzte_t",SQLCA.sqlcode,1)
                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  INITIALIZE l_var_keys_bak TO NULL 
                  INITIALIZE l_field_keys TO NULL 
                  LET l_field_keys[01] = 'gztel001'
                  LET l_field_keys[02] = 'gztel002'
                  LET l_var_keys_bak[01] = g_detail_multi_table_t.gztel001
                  LET l_var_keys_bak[02] = g_detail_multi_table_t.gztel002
                  CALL cl_multitable_delete(l_field_keys,l_var_keys_bak,'gztel_t')
 
                  #add-point:單身刪除後
                  {<point name="input.body.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE azzi550_bcl
               LET l_count = g_gzte_d.getLength()
            END IF 
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
 
              
         AFTER DELETE 
            #add-point:單身刪除後2
            {<point name="input.body.after_delete"/>}
            #end add-point
                           CALL azzi550_delete_b('gzte_t',gs_keys,"'1'")
 
                  #此段落由子樣板a01產生
         BEFORE FIELD gztestus
            #add-point:BEFORE FIELD gztestus
            {<point name="input.b.page1.gztestus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztestus
            
            #add-point:AFTER FIELD gztestus
            {<point name="input.a.page1.gztestus" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztestus
            #add-point:ON CHANGE gztestus
            {<point name="input.g.page1.gztestus" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte001
            #add-point:BEFORE FIELD gzte001
            {<point name="input.b.page1.gzte001" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte001
            
            #add-point:AFTER FIELD gzte001
            {<point name="input.a.page1.gzte001" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gzte001
            #add-point:ON CHANGE gzte001
            {<point name="input.g.page1.gzte001" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztel003
            #add-point:BEFORE FIELD gztel003
            {<point name="input.b.page1.gztel003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztel003
            
            #add-point:AFTER FIELD gztel003
            {<point name="input.a.page1.gztel003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztel003
            #add-point:ON CHANGE gztel003
            {<point name="input.g.page1.gztel003" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte002
            #add-point:BEFORE FIELD gzte002
            {<point name="input.b.page1.gzte002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte002
            
            #add-point:AFTER FIELD gzte002
            {<point name="input.a.page1.gzte002" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gzte002
            #add-point:ON CHANGE gzte002
            {<point name="input.g.page1.gzte002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte003
            #add-point:BEFORE FIELD gzte003
            {<point name="input.b.page1.gzte003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte003
            
            #add-point:AFTER FIELD gzte003
            {<point name="input.a.page1.gzte003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gzte003
            #add-point:ON CHANGE gzte003
            {<point name="input.g.page1.gzte003" />}
            #END add-point
 
 
                  #Ctrlp:input.c.page1.gztestus
         ON ACTION controlp INFIELD gztestus
            #add-point:ON ACTION controlp INFIELD gztestus
            {<point name="input.c.page1.gztestus" />}
            #END add-point
 
         #Ctrlp:input.c.page1.gzte001
         ON ACTION controlp INFIELD gzte001
            #add-point:ON ACTION controlp INFIELD gzte001
            {<point name="input.c.page1.gzte001" />}
            #END add-point
 
         #Ctrlp:input.c.page1.gztel003
         ON ACTION controlp INFIELD gztel003
            #add-point:ON ACTION controlp INFIELD gztel003
            {<point name="input.c.page1.gztel003" />}
            #END add-point
 
         #Ctrlp:input.c.page1.gzte002
         ON ACTION controlp INFIELD gzte002
            #add-point:ON ACTION controlp INFIELD gzte002
            {<point name="input.c.page1.gzte002" />}
            #END add-point
 
         #Ctrlp:input.c.page1.gzte003
         ON ACTION controlp INFIELD gzte003
            #add-point:ON ACTION controlp INFIELD gzte003
            {<point name="input.c.page1.gzte003" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               LET g_gzte_d[l_ac].* = g_gzte_d_t.*
               CLOSE azzi550_bcl
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               CALL cl_err(g_gzte_d[l_ac].gzte001,-263,1)
               LET g_gzte_d[l_ac].* = g_gzte_d_t.*
            ELSE
               
               #寫入修改者/修改日期資訊(單身)
               LET g_gzte2_d[l_ac].gztemodid = g_user 
LET g_gzte2_d[l_ac].gztemoddt = cl_get_current()
 
               
               #add-point:單身修改前
               {<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE gzte_t SET (gztestus,gzte001,gzte002,gzte003,gzteownid,gzteowndp,gztecrtid,gztecrtdp, 
                   gztecrtdt,gztemodid,gztemoddt) = (g_gzte_d[l_ac].gztestus,g_gzte_d[l_ac].gzte001, 
                   g_gzte_d[l_ac].gzte002,g_gzte_d[l_ac].gzte003,g_gzte2_d[l_ac].gzteownid,g_gzte2_d[l_ac].gzteowndp, 
                   g_gzte2_d[l_ac].gztecrtid,g_gzte2_d[l_ac].gztecrtdp,g_gzte2_d[l_ac].gztecrtdt,g_gzte2_d[l_ac].gztemodid, 
                   g_gzte2_d[l_ac].gztemoddt)
                WHERE 
                  gzte001 = g_gzte_d_t.gzte001 #項次   
 
                  
               #add-point:單身修改中
               {<point name="input.body.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL cl_err("gzte_t","std-00009",1)
                     CALL s_transaction_end('N','0')
                     LET g_gzte_d[l_ac].* = g_gzte_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     CALL cl_err("gzte_t",SQLCA.sqlcode,1)  
                     CALL s_transaction_end('N','0')
                     LET g_gzte_d[l_ac].* = g_gzte_d_t.*
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys_bak[1] = g_gzte_d_t.gzte001
               CALL azzi550_update_b('gzte_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                              INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         INITIALIZE l_var_keys_bak TO NULL 
         IF g_gzte_d[l_ac].gzte001 = g_detail_multi_table_t.gztel001 AND
         g_gzte_d[l_ac].gztel003 = g_detail_multi_table_t.gztel003 THEN
         ELSE 
            LET l_var_keys[01] = g_gzte_d[l_ac].gzte001
            LET l_field_keys[01] = 'gztel001'
            LET l_var_keys[02] = g_dlang
            LET l_field_keys[02] = 'gztel002'
            LET l_vars[01] = g_gzte_d[l_ac].gztel003
            LET l_fields[01] = 'gztel003'
            LET l_var_keys_bak[01] = g_detail_multi_table_t.gztel001
            LET l_var_keys_bak[02] = g_detail_multi_table_t.gztel002
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'gztel_t')
         END IF 
 
                     
                     LET g_log1 = util.JSON.stringify(g_gzte_d_t)
                     LET g_log2 = util.JSON.stringify(g_gzte_d[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               
               #若Key欄位有變動
               LET g_master.* = g_gzte_d[l_ac].*
               CALL azzi550_key_update_b()
               
               #add-point:單身修改後
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            CALL azzi550_unlock_b("gzte_t")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            CALL cl_multitable_unlock()
              
         AFTER INPUT
            #add-point:input段after input 
            {<point name="input.body.after_input"/>}
            #end add-point   
              
         ON ACTION controlo   
            CALL FGL_SET_ARR_CURR(g_gzte_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_gzte_d.getLength()+1
              
      END INPUT
      
 
      
      #實際單身段落
      INPUT ARRAY g_gzte3_d FROM s_detail3.*
         ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_3)
         
 
         #+ 此段落由子樣板a43產生
         ON ACTION update_item
            LET g_action_choice="update_item"
            IF cl_auth_chk_act("update_item") THEN
               
               #add-point:ON ACTION update_item
               {<point name="input.detail_input.page3.update_item" />}
               #END add-point
            END IF
 
 
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_gzte3_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
			LET g_loc = 'd'
            LET g_detail_cnt = g_gzte3_d.getLength()
            LET g_current_page = 3
            #add-point:資料輸入前
            {<point name="input.body3.before_input"/>}
            #end add-point
 
         BEFORE INSERT
            IF g_gzte_d.getLength() = 0 THEN
               CALL cl_err('','std-00013',1)
               NEXT FIELD gzte001
            END IF 
            #判斷能否在此頁面進行資料新增
            
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_gzte3_d[l_ac].* TO NULL 
            INITIALIZE g_gzte3_d_t.* TO NULL 
            INITIALIZE g_gzte3_d_o.* TO NULL 
                  LET g_gzte3_d[l_ac].gztf003 = "N"
 
            LET g_gzte3_d_t.* = g_gzte3_d[l_ac].*     #新輸入資料
            LET g_gzte3_d_o.* = g_gzte3_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL azzi550_set_entry_b("a")
            CALL azzi550_set_no_entry_b("a")
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_gzte3_d[li_reproduce_target].* = g_gzte3_d[li_reproduce].*
 
               LET g_gzte3_d[li_reproduce_target].gztf002 = NULL
            END IF
            #add-point:input段before insert
            {<point name="input.body3.before_insert"/>}
            #end add-point  
            
         BEFORE ROW 
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            CALL s_transaction_begin()
            LET g_detail_cnt = g_gzte3_d.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND g_gzte3_d[l_ac].gztf002 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_gzte3_d_t.* = g_gzte3_d[l_ac].*  #BACKUP
               LET g_gzte3_d_o.* = g_gzte3_d[l_ac].*  #BACKUP
               IF NOT azzi550_lock_b("gztf_t") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH azzi550_bcl2 INTO g_gzte3_d[l_ac].gztf004,g_gzte3_d[l_ac].gztf002,g_gzte3_d[l_ac].gztf003 

                  IF SQLCA.sqlcode THEN
                     CALL cl_err('',SQLCA.sqlcode,1)
                     LET l_lock_sw = "Y"
                  END IF
                  CALL cl_show_fld_cont()
                  CALL azzi550_detail_show()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL azzi550_set_entry_b(l_cmd)
            CALL azzi550_set_no_entry_b(l_cmd)
            #add-point:input段before row
            {<point name="input.body3.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
            CALL azzi550_idx_chk('d')
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_gzte3_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_gzte3_d.deleteElement(l_ac)
               NEXT FIELD gztf002
            END IF
            IF g_gzte3_d[l_ac].gztf002 IS NOT NULL
            THEN
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               
               #add-point:單身3刪除前
               {<point name="input.body3.b_delete" mark="Y"/>}
               #end add-point  
               
               DELETE FROM gztf_t
                WHERE 
                   gztf001 = g_master.gzte001
                   AND gztf002 = g_gzte3_d_t.gztf002
                   
               #add-point:單身3刪除中
               {<point name="input.body3.m_delete"/>}
               #end add-point  
                   
               IF SQLCA.sqlcode THEN
                  CALL cl_err("gzte_t",SQLCA.sqlcode,1)
                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  
                  #add-point:單身3刪除後
                  {<point name="input.body3.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE azzi550_bcl
               LET l_count = g_gzte_d.getLength()
            END IF 
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte3_d[g_detail_idx2].gztf002
 
            
         AFTER DELETE 
            #add-point:單身AFTER DELETE 
            {<point name="input.body3.after_delete"/>}
            #end add-point
                           CALL azzi550_delete_b('gztf_t',gs_keys,"'3'")
 
         AFTER INSERT    
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM gztf_t 
             WHERE 
                   gztf001 = g_master.gzte001
                   AND gztf002 = g_gzte3_d[g_detail_idx2].gztf002
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身3新增前
               {<point name="input.body3.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte3_d[g_detail_idx2].gztf002
               CALL azzi550_insert_b('gztf_t',gs_keys,"'3'")
                           
               #add-point:單身新增後3
               {<point name="input.body3.a_insert"/>}
               #end add-point
            ELSE    
               CALL cl_err('INSERT',"std-00006",1)
               INITIALIZE g_gzte_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL cl_err("gztf_t",SQLCA.sqlcode,1)  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL azzi550_b_fill(g_wc)
               #資料多語言用-增/改
               
               #add-point:單身新增後
               {<point name="input.body3.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               LET g_gzte3_d[l_ac].* = g_gzte3_d_t.*
               CLOSE azzi550_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               CALL cl_err('',-263,1)
               LET g_gzte3_d[l_ac].* = g_gzte3_d_t.*
            ELSE
               #寫入修改者/修改日期資訊(單身3)
               
               
               #add-point:單身page3修改前
               {<point name="input.body3.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE gztf_t SET (gztf004,gztf002,gztf003) = (g_gzte3_d[l_ac].gztf004,g_gzte3_d[l_ac].gztf002, 
                   g_gzte3_d[l_ac].gztf003) #自訂欄位頁簽
                WHERE 
                   gztf001 = g_master.gzte001
                   AND gztf002 = g_gzte3_d_t.gztf002
                   
               #add-point:單身修改中
               {<point name="input.body3.m_update"/>}
               #end add-point
                   
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL cl_err("gztf_t","std-00009",1)
                     CALL s_transaction_end('N','0')
                     LET g_gzte3_d[l_ac].* = g_gzte3_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     CALL cl_err("gztf_t",SQLCA.sqlcode,1)  
                     CALL s_transaction_end('N','0')
                     LET g_gzte3_d[l_ac].* = g_gzte3_d_t.*
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys_bak[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte3_d[g_detail_idx2].gztf002
               LET gs_keys_bak[2] = g_gzte3_d_t.gztf002
               CALL azzi550_update_b('gztf_t',gs_keys,gs_keys_bak,"'3'")
                     #資料多語言用-增/改
                     
                     LET g_log1 = util.JSON.stringify(g_gzte3_d_t)
                     LET g_log2 = util.JSON.stringify(g_gzte3_d[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               #add-point:單身page3修改後
               {<point name="input.body3.a_update"/>}
               #end add-point
            END IF
         
                  #此段落由子樣板a01產生
         BEFORE FIELD gztf004
            #add-point:BEFORE FIELD gztf004
            {<point name="input.b.page3.gztf004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf004
            
            #add-point:AFTER FIELD gztf004
            {<point name="input.a.page3.gztf004" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztf004
            #add-point:ON CHANGE gztf004
            {<point name="input.g.page3.gztf004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf002
            
            #add-point:AFTER FIELD gztf002
            {<point name="input.a.page3.gztf002" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztf002
            #add-point:BEFORE FIELD gztf002
            {<point name="input.b.page3.gztf002" />}
            #END add-point
 
         #此段落由子樣板a04產生
         ON CHANGE gztf002
            #add-point:ON CHANGE gztf002
            {<point name="input.g.page3.gztf002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztf003
            #add-point:BEFORE FIELD gztf003
            {<point name="input.b.page3.gztf003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf003
            
            #add-point:AFTER FIELD gztf003
            {<point name="input.a.page3.gztf003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztf003
            #add-point:ON CHANGE gztf003
            {<point name="input.g.page3.gztf003" />}
            #END add-point
 
 
                  #Ctrlp:input.c.page3.gztf004
         ON ACTION controlp INFIELD gztf004
            #add-point:ON ACTION controlp INFIELD gztf004
            {<point name="input.c.page3.gztf004" />}
            #END add-point
 
         #Ctrlp:input.c.page3.gztf002
         ON ACTION controlp INFIELD gztf002
            #add-point:ON ACTION controlp INFIELD gztf002
            {<point name="input.c.page3.gztf002" />}
            #END add-point
 
         #Ctrlp:input.c.page3.gztf003
         ON ACTION controlp INFIELD gztf003
            #add-point:ON ACTION controlp INFIELD gztf003
            {<point name="input.c.page3.gztf003" />}
            #END add-point
 
 
 
         AFTER ROW
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_gzte3_d[l_ac].* = g_gzte3_d_t.*
               END IF
               CLOSE azzi550_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
 
            CALL azzi550_unlock_b("gztf_t")
            CALL s_transaction_end('Y','0')
 
         AFTER INPUT
            #add-point:input段after input 
            {<point name="input.body3.after_input"/>}
            #end add-point   
 
         ON ACTION controlo   
            CALL FGL_SET_ARR_CURR(g_gzte3_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_gzte3_d.getLength()+1
 
      END INPUT
      #實際單身段落
      INPUT ARRAY g_gzte4_d FROM s_detail4.*
         ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 

                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_4)
         
 
         #+ 此段落由子樣板a43產生
         ON ACTION update_item
            LET g_action_choice="update_item"
            IF cl_auth_chk_act("update_item") THEN
               
               #add-point:ON ACTION update_item
               {<point name="input.detail_input.page4.update_item" />}
               #END add-point
            END IF
 
 
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_gzte4_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
			LET g_loc = 'd'
            LET g_detail_cnt = g_gzte4_d.getLength()
            LET g_current_page = 4
            #add-point:資料輸入前
            {<point name="input.body4.before_input"/>}
            #end add-point
 
         BEFORE INSERT
            IF g_gzte_d.getLength() = 0 THEN
               CALL cl_err('','std-00013',1)
               NEXT FIELD gzte001
            END IF 
            #判斷能否在此頁面進行資料新增
            
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_gzte4_d[l_ac].* TO NULL 
            INITIALIZE g_gzte4_d_t.* TO NULL 
            INITIALIZE g_gzte4_d_o.* TO NULL 
            
            LET g_gzte4_d_t.* = g_gzte4_d[l_ac].*     #新輸入資料
            LET g_gzte4_d_o.* = g_gzte4_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL azzi550_set_entry_b("a")
            CALL azzi550_set_no_entry_b("a")
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_gzte4_d[li_reproduce_target].* = g_gzte4_d[li_reproduce].*
 
               LET g_gzte4_d[li_reproduce_target].gztg002 = NULL
            END IF
            #add-point:input段before insert
            {<point name="input.body4.before_insert"/>}
            #end add-point  
            
         BEFORE ROW 
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            CALL s_transaction_begin()
            LET g_detail_cnt = g_gzte4_d.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND g_gzte4_d[l_ac].gztg002 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_gzte4_d_t.* = g_gzte4_d[l_ac].*  #BACKUP
               LET g_gzte4_d_o.* = g_gzte4_d[l_ac].*  #BACKUP
               IF NOT azzi550_lock_b("gztg_t") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH azzi550_bcl3 INTO g_gzte4_d[l_ac].gztg002,g_gzte4_d[l_ac].gztg003,g_gzte4_d[l_ac].gztg004 

                  IF SQLCA.sqlcode THEN
                     CALL cl_err('',SQLCA.sqlcode,1)
                     LET l_lock_sw = "Y"
                  END IF
                  CALL cl_show_fld_cont()
                  CALL azzi550_detail_show()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL azzi550_set_entry_b(l_cmd)
            CALL azzi550_set_no_entry_b(l_cmd)
            #add-point:input段before row
            {<point name="input.body4.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
            CALL azzi550_idx_chk('d')
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' AND g_gzte4_d.getLength() < l_ac THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
               CALL g_gzte4_d.deleteElement(l_ac)
               NEXT FIELD gztg002
            END IF
            IF g_gzte4_d[l_ac].gztg002 IS NOT NULL
            THEN
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               
               #add-point:單身4刪除前
               {<point name="input.body4.b_delete" mark="Y"/>}
               #end add-point  
               
               DELETE FROM gztg_t
                WHERE 
                   gztg001 = g_master.gzte001
                   AND gztg002 = g_gzte4_d_t.gztg002
                   
               #add-point:單身4刪除中
               {<point name="input.body4.m_delete"/>}
               #end add-point  
                   
               IF SQLCA.sqlcode THEN
                  CALL cl_err("gzte_t",SQLCA.sqlcode,1)
                  CALL s_transaction_end('N','0')
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  
                  #add-point:單身4刪除後
                  {<point name="input.body4.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE azzi550_bcl
               LET l_count = g_gzte_d.getLength()
            END IF 
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte4_d[g_detail_idx2].gztg002
 
            
         AFTER DELETE 
            #add-point:單身AFTER DELETE 
            {<point name="input.body4.after_delete"/>}
            #end add-point
                           CALL azzi550_delete_b('gztg_t',gs_keys,"'4'")
 
         AFTER INSERT    
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM gztg_t 
             WHERE 
                   gztg001 = g_master.gzte001
                   AND gztg002 = g_gzte4_d[g_detail_idx2].gztg002
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身4新增前
               {<point name="input.body4.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte4_d[g_detail_idx2].gztg002
               CALL azzi550_insert_b('gztg_t',gs_keys,"'4'")
                           
               #add-point:單身新增後4
               {<point name="input.body4.a_insert"/>}
               #end add-point
            ELSE    
               CALL cl_err('INSERT',"std-00006",1)
               INITIALIZE g_gzte_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL cl_err("gztg_t",SQLCA.sqlcode,1)  
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL azzi550_b_fill(g_wc)
               #資料多語言用-增/改
               
               #add-point:單身新增後
               {<point name="input.body4.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               LET g_gzte4_d[l_ac].* = g_gzte4_d_t.*
               CLOSE azzi550_bcl3
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               CALL cl_err('',-263,1)
               LET g_gzte4_d[l_ac].* = g_gzte4_d_t.*
            ELSE
               #寫入修改者/修改日期資訊(單身4)
               
               
               #add-point:單身page4修改前
               {<point name="input.body4.b_update" mark="Y"/>}
               #end add-point
               
               UPDATE gztg_t SET (gztg002,gztg003,gztg004) = (g_gzte4_d[l_ac].gztg002,g_gzte4_d[l_ac].gztg003, 
                   g_gzte4_d[l_ac].gztg004) #自訂欄位頁簽
                WHERE 
                   gztg001 = g_master.gzte001
                   AND gztg002 = g_gzte4_d_t.gztg002
                   
               #add-point:單身修改中
               {<point name="input.body4.m_update"/>}
               #end add-point
                   
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL cl_err("gztg_t","std-00009",1)
                     CALL s_transaction_end('N','0')
                     LET g_gzte4_d[l_ac].* = g_gzte4_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     CALL cl_err("gztg_t",SQLCA.sqlcode,1)  
                     CALL s_transaction_end('N','0')
                     LET g_gzte4_d[l_ac].* = g_gzte4_d_t.*
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys_bak[1] = g_gzte_d[g_detail_idx].gzte001
               LET gs_keys[2] = g_gzte4_d[g_detail_idx2].gztg002
               LET gs_keys_bak[2] = g_gzte4_d_t.gztg002
               CALL azzi550_update_b('gztg_t',gs_keys,gs_keys_bak,"'4'")
                     #資料多語言用-增/改
                     
                     LET g_log1 = util.JSON.stringify(g_gzte4_d_t)
                     LET g_log2 = util.JSON.stringify(g_gzte4_d[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               #add-point:單身page4修改後
               {<point name="input.body4.a_update"/>}
               #end add-point
            END IF
         
                  #此段落由子樣板a01產生
         BEFORE FIELD gztg002
            #add-point:BEFORE FIELD gztg002
            {<point name="input.b.page4.gztg002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg002
            
            #add-point:AFTER FIELD gztg002
            {<point name="input.a.page4.gztg002" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztg002
            #add-point:ON CHANGE gztg002
            {<point name="input.g.page4.gztg002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztg003
            #add-point:BEFORE FIELD gztg003
            {<point name="input.b.page4.gztg003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg003
            
            #add-point:AFTER FIELD gztg003
            {<point name="input.a.page4.gztg003" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztg003
            #add-point:ON CHANGE gztg003
            {<point name="input.g.page4.gztg003" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztg004
            #add-point:BEFORE FIELD gztg004
            {<point name="input.b.page4.gztg004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg004
            
            #add-point:AFTER FIELD gztg004
            {<point name="input.a.page4.gztg004" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE gztg004
            #add-point:ON CHANGE gztg004
            {<point name="input.g.page4.gztg004" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD image
            #add-point:BEFORE FIELD image
            {<point name="input.b.page4.image" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD image
            
            #add-point:AFTER FIELD image
            {<point name="input.a.page4.image" />}
            #END add-point
            
 
         #此段落由子樣板a04產生
         ON CHANGE image
            #add-point:ON CHANGE image
            {<point name="input.g.page4.image" />}
            #END add-point
 
 
                  #Ctrlp:input.c.page4.gztg002
         ON ACTION controlp INFIELD gztg002
            #add-point:ON ACTION controlp INFIELD gztg002
            {<point name="input.c.page4.gztg002" />}
            #END add-point
 
         #Ctrlp:input.c.page4.gztg003
         ON ACTION controlp INFIELD gztg003
            #add-point:ON ACTION controlp INFIELD gztg003
            {<point name="input.c.page4.gztg003" />}
            #END add-point
 
         #Ctrlp:input.c.page4.gztg004
         ON ACTION controlp INFIELD gztg004
            #add-point:ON ACTION controlp INFIELD gztg004
            {<point name="input.c.page4.gztg004" />}
            #END add-point
 
         #Ctrlp:input.c.page4.image
         ON ACTION controlp INFIELD image
            #add-point:ON ACTION controlp INFIELD image
            {<point name="input.c.page4.image" />}
            #END add-point
 
 
 
         AFTER ROW
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_gzte4_d[l_ac].* = g_gzte4_d_t.*
               END IF
               CLOSE azzi550_bcl3
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
 
            CALL azzi550_unlock_b("gztg_t")
            CALL s_transaction_end('Y','0')
 
         AFTER INPUT
            #add-point:input段after input 
            {<point name="input.body4.after_input"/>}
            #end add-point   
 
         ON ACTION controlo   
            CALL FGL_SET_ARR_CURR(g_gzte4_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_gzte4_d.getLength()+1
 
      END INPUT
 
      
      DISPLAY ARRAY g_gzte2_d TO s_detail2.*
         ATTRIBUTES(COUNT=g_detail_cnt)  
      
         BEFORE DISPLAY 
            CALL FGL_SET_ARR_CURR(g_detail_idx)
            CALL azzi550_b_fill(g_wc)
            LET g_current_page = 2
        
         BEFORE ROW
            LET g_detail_idx = DIALOG.getCurrentRow("s_detail2")
            LET l_ac = g_detail_idx
            CALL cl_show_fld_cont() 
            CALL azzi550_fetch()
            CALL azzi550_idx_chk('m')
            
         #add-point:page2自定義行為
         {<point name="input.body2.action"/>}
         #end add-point
            
      END DISPLAY
 
    
 
      
      #add-point:input段input_array"
      {<point name="input.more_inputarray"/>}
      #end add-point
      
      BEFORE DIALOG 
         LET g_curr_diag = ui.DIALOG.getCurrent()
         IF g_detail_idx > 0 THEN
            IF g_detail_idx > g_gzte_d.getLength() THEN
               LET g_detail_idx = g_gzte_d.getLength()
            END IF
            CALL DIALOG.setCurrentRow("s_detail1", g_detail_idx)
            LET l_ac = g_detail_idx
         END IF 
         LET g_detail_idx = l_ac
         #add-point:input段input_array"
         {<point name="input.before_dialog"/>}
         #end add-point
         #先確定單頭(第一單身)是否有資料
         IF g_gzte_d.getLength() > 0 THEN
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD gztestus
               WHEN "s_detail2"
                  NEXT FIELD gzte001_2
               WHEN "s_detail3"
                  NEXT FIELD gztf004
               WHEN "s_detail4"
                  NEXT FIELD gztg002
 
            END CASE
         ELSE
            NEXT FIELD gztestus
         END IF
   
      ON ACTION accept
         ACCEPT DIALOG
      
      ON ACTION cancel
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION close
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) 
              RETURNING g_fld_name,g_frm_name 
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang) 
           
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE DIALOG
   
   END DIALOG 
   
   #add-point:input段修改後
   {<point name="input.after_input"/>}
   #end add-point
 
   CLOSE azzi550_bcl
   CALL s_transaction_end('Y','0')
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.insert" ver="1" status="" src="s">
    <![CDATA[#+ 資料修改
PRIVATE FUNCTION azzi550_insert()
   #add-point:insert段define
   {<point name="insert.define"/>}
   #end add-point 
 
   #add-point:insert段新增前
   {<point name="insert.before_insert"/>}
   #end add-point 
   
   #進入資料輸入段落
   CALL g_gzte_d.clear() 
   CALL g_gzte2_d.clear() 
   CALL g_gzte3_d.clear() 
   CALL g_gzte4_d.clear() 
 
   CALL azzi550_input('a')
   
   CALL azzi550_b_fill(g_wc)
   
   #add-point:insert段新增後
   {<point name="insert.after_insert"/>}
   #end add-point 
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.insert_b" ver="2" status="" src="s">
    <![CDATA[#+ 新增單身後其他table連動
PRIVATE FUNCTION azzi550_insert_b(ps_table,ps_keys,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   #add-point:insert_b段define
   {<point name="insert_b.define"/>}
   #end add-point
 
   #判斷是否是同一群組的table
   LET ls_group = "gzte_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前
      {<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point
      INSERT INTO gzte_t
                  (
                   gzte001
                   ,gztestus,gzte002,gzte003,gzteownid,gzteowndp,gztecrtid,gztecrtdp,gztecrtdt,gztemodid,gztemoddt) 
            VALUES(
                   ps_keys[1]
                   ,g_gzte_d[g_detail_idx].gztestus,g_gzte_d[g_detail_idx].gzte002,g_gzte_d[g_detail_idx].gzte003, 
                       g_gzte2_d[g_detail_idx].gzteownid,g_gzte2_d[g_detail_idx].gzteowndp,g_gzte2_d[g_detail_idx].gztecrtid, 
                       g_gzte2_d[g_detail_idx].gztecrtdp,g_gzte2_d[g_detail_idx].gztecrtdt,g_gzte2_d[g_detail_idx].gztemodid, 
                       g_gzte2_d[g_detail_idx].gztemoddt)
      #add-point:insert_b段新增中
      {<point name="insert_b.m_insert"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         CALL cl_err("gzte_t",SQLCA.sqlcode,0)
      END IF
      #add-point:insert_b段新增後
      {<point name="insert_b.after_insert"/>}
      #end add-point
   END IF
   
 
   
   LET ls_group = "gztf_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前
      {<point name="insert_b.before_insert2" mark="Y"/>}
      #end add-point
      INSERT INTO gztf_t
                  (
                   gztf001,gztf002
                   ,gztf004,gztf003) 
            VALUES(
                   ps_keys[1],ps_keys[2]
                   ,g_gzte3_d[g_detail_idx2].gztf004,g_gzte3_d[g_detail_idx2].gztf003)
      #add-point:insert_b段新增中
      {<point name="insert_b.m_insert2"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         RETURN
      END IF
      #add-point:insert_b段新增後
      {<point name="insert_b.after_insert2"/>}
      #end add-point
   END IF
 
   LET ls_group = "gztg_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前
      {<point name="insert_b.before_insert3" mark="Y"/>}
      #end add-point
      INSERT INTO gztg_t
                  (
                   gztg001,gztg002
                   ,gztg003,gztg004) 
            VALUES(
                   ps_keys[1],ps_keys[2]
                   ,g_gzte4_d[g_detail_idx2].gztg003,g_gzte4_d[g_detail_idx2].gztg004)
      #add-point:insert_b段新增中
      {<point name="insert_b.m_insert3"/>}
      #end add-point
      IF SQLCA.sqlcode THEN
         RETURN
      END IF
      #add-point:insert_b段新增後
      {<point name="insert_b.after_insert3"/>}
      #end add-point
   END IF
 
 
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.key_update_b" ver="1" status="" src="s">
    <![CDATA[#+ 單頭key欄位變動後, 連帶修正其他單身table
PRIVATE FUNCTION azzi550_key_update_b()
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define
   {<point name="key_update_b.define"/>}
   #end add-point
 
   #判斷key是否有改變
   LET lb_chk = TRUE
   
   IF g_master.gzte001 <> g_master_t.gzte001 THEN
      LET lb_chk = FALSE
   END IF
 
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
    
   #add-point:update_b段修改前
   {<point name="key_update_b.before_update2" mark="Y"/>}
   #end add-point
   
   UPDATE gztf_t 
      SET (gztf001) 
           = 
          (g_master.gzte001) 
      WHERE 
           gztf001 = g_master_t.gzte001
 
           
   #add-point:update_b段修改中
   {<point name="key_update_b.m_update2"/>}
   #end add-point
           
   CASE
      #WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
      #   CALL cl_err("gztf_t","std-00009",1)
      #   CALL s_transaction_end('N','0')
      WHEN SQLCA.sqlcode #其他錯誤
         CALL cl_err("gztf_t",SQLCA.sqlcode,1)  
         CALL s_transaction_end('N','0')
      OTHERWISE
         #若有多語言table資料一同更新
         
   END CASE
   
   #add-point:update_b段修改後
   {<point name="key_update_b.after_update2"/>}
   #end add-point
 
   #add-point:update_b段修改前
   {<point name="key_update_b.before_update3" mark="Y"/>}
   #end add-point
   
   UPDATE gztg_t 
      SET (gztg001) 
           = 
          (g_master.gzte001) 
      WHERE 
           gztg001 = g_master_t.gzte001
 
           
   #add-point:update_b段修改中
   {<point name="key_update_b.m_update3"/>}
   #end add-point
           
   CASE
      #WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
      #   CALL cl_err("gztg_t","std-00009",1)
      #   CALL s_transaction_end('N','0')
      WHEN SQLCA.sqlcode #其他錯誤
         CALL cl_err("gztg_t",SQLCA.sqlcode,1)  
         CALL s_transaction_end('N','0')
      OTHERWISE
         #若有多語言table資料一同更新
         
   END CASE
   
   #add-point:update_b段修改後
   {<point name="key_update_b.after_update3"/>}
   #end add-point
 
 
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.lock_b" ver="1" status="" src="s">
    <![CDATA[#+ 連動lock其他單身table資料
PRIVATE FUNCTION azzi550_lock_b(ps_table)
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:lock_b段define
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #先刷新資料
   #CALL azzi550_b_fill(g_wc)
   
   #鎖定整組table
   #LET ls_group = ""
   #僅鎖定自身table
   LET ls_group = "gzte_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN azzi550_bcl USING 
                                       g_gzte_d[g_detail_idx].gzte001
                                       
      IF SQLCA.sqlcode THEN
         CALL cl_err("azzi550_bcl",SQLCA.sqlcode,1)
         RETURN FALSE
      END IF
   
   END IF
                                    
 
   
   #鎖定整組table
   #LET ls_group = "gztf_t,"
   #僅鎖定自身table
   LET ls_group = "gztf_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN azzi550_bcl2 USING 
                                             g_master.gzte001,
                                             g_gzte3_d[g_detail_idx2].gztf002
      IF SQLCA.sqlcode THEN
         CALL cl_err("azzi550_bcl2",SQLCA.sqlcode,1)
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "gztg_t,"
   #僅鎖定自身table
   LET ls_group = "gztg_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN azzi550_bcl3 USING 
                                             g_master.gzte001,
                                             g_gzte4_d[g_detail_idx2].gztg002
      IF SQLCA.sqlcode THEN
         CALL cl_err("azzi550_bcl3",SQLCA.sqlcode,1)
         RETURN FALSE
      END IF
   END IF
 
 
   
   RETURN TRUE
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.main" ver="1" status="" src="s">
    <![CDATA[#+ 此段落由子樣板a26產生
#OPTIONS SHORT CIRCUIT
#+ 作業開始 
MAIN
   #add-point:main段define
   {<point name="main.define"/>}
   #end add-point   
 
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("azz","")
 
   #add-point:作業初始化
   {<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define
   {<point name="main.define_sql" />}
   #end add-point
 
 
 
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_azzi550 WITH FORM cl_ap_formpath("azz",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL azzi550_init()   
 
      #進入選單 Menu (="N")
      CALL azzi550_ui_dialog() 
      
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_azzi550
      
   END IF 
   
   
   
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
   
END MAIN
 
 
]]>
  </section>
  <section id="azzi550.modify" ver="1" status="" src="s">
    <![CDATA[#+ 資料新增
PRIVATE FUNCTION azzi550_modify()
   #add-point:modify段define
   {<point name="modify.define"/>}
   #end add-point 
 
   #add-point:modify段新增前
   {<point name="modify.before_modify"/>}
   #end add-point 
   
   #進入資料輸入段落
   CALL azzi550_input('u')
   
   #add-point:modify段新增後
   {<point name="modify.after_modify"/>}
   #end add-point 
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.other_dialog" ver="1" status="" src="s">
    <![CDATA[ 
]]>
  </section>
  <section id="azzi550.other_function" ver="1" status="" src="s">
    <![CDATA[{<point name="other.function"/>}
]]>
  </section>
  <section id="azzi550.query" ver="7" status="" src="s">
    <![CDATA[#+ QBE資料查詢
PRIVATE FUNCTION azzi550_query()
   DEFINE ls_wc      STRING
   DEFINE ls_return  STRING
   DEFINE ls_result  STRING 
   #add-point:query段define
   {<point name="query.define"/>}
   #end add-point 
   
   LET INT_FLAG = 0
   CLEAR FORM
   CALL g_gzte_d.clear()
   
   LET g_qryparam.state = "c"
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   
   #wc備份
   LET ls_wc = g_wc
   LET g_detail_idx = l_ac
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單身根據table分拆construct
      CONSTRUCT g_wc_table ON gztestus,gzte001,gztel003,gzte002,gzte003,gzteownid,gzteowndp,gztecrtid, 
          gztecrtdp,gztecrtdt,gztemodid,gztemoddt
           FROM s_detail1[1].gztestus,s_detail1[1].gzte001,s_detail1[1].gztel003,s_detail1[1].gzte002, 
               s_detail1[1].gzte003,s_detail2[1].gzteownid,s_detail2[1].gzteowndp,s_detail2[1].gztecrtid, 
               s_detail2[1].gztecrtdp,s_detail2[1].gztecrtdt,s_detail2[1].gztemodid,s_detail2[1].gztemoddt 

                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct
            {<point name="cs.head.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       #此段落由子樣板a11產生
         ##----<<gztecrtdt>>----
         AFTER FIELD gztecrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<gztemoddt>>----
         AFTER FIELD gztemoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<gztecnfdt>>----
         
         #----<<gztepstdt>>----
 
 
         
       #單身一般欄位開窗相關處理
                #此段落由子樣板a01產生
         BEFORE FIELD gztestus
            #add-point:BEFORE FIELD gztestus
            {<point name="construct.b.page1.gztestus" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztestus
            
            #add-point:AFTER FIELD gztestus
            {<point name="construct.a.page1.gztestus" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.gztestus
         ON ACTION controlp INFIELD gztestus
            #add-point:ON ACTION controlp INFIELD gztestus
            {<point name="construct.c.page1.gztestus" />}
            #END add-point
 
         #Ctrlp:construct.c.page1.gzte001
         ON ACTION controlp INFIELD gzte001
            #add-point:ON ACTION controlp INFIELD gzte001
            {<point name="construct.c.page1.gzte001" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte001
            #add-point:BEFORE FIELD gzte001
            {<point name="construct.b.page1.gzte001" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte001
            
            #add-point:AFTER FIELD gzte001
            {<point name="construct.a.page1.gzte001" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztel003
            #add-point:BEFORE FIELD gztel003
            {<point name="construct.b.page1.gztel003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztel003
            
            #add-point:AFTER FIELD gztel003
            {<point name="construct.a.page1.gztel003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.gztel003
         ON ACTION controlp INFIELD gztel003
            #add-point:ON ACTION controlp INFIELD gztel003
            {<point name="construct.c.page1.gztel003" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte002
            #add-point:BEFORE FIELD gzte002
            {<point name="construct.b.page1.gzte002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte002
            
            #add-point:AFTER FIELD gzte002
            {<point name="construct.a.page1.gzte002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.gzte002
         ON ACTION controlp INFIELD gzte002
            #add-point:ON ACTION controlp INFIELD gzte002
            {<point name="construct.c.page1.gzte002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzte003
            #add-point:BEFORE FIELD gzte003
            {<point name="construct.b.page1.gzte003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzte003
            
            #add-point:AFTER FIELD gzte003
            {<point name="construct.a.page1.gzte003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page1.gzte003
         ON ACTION controlp INFIELD gzte003
            #add-point:ON ACTION controlp INFIELD gzte003
            {<point name="construct.c.page1.gzte003" />}
            #END add-point
 
         #Ctrlp:construct.c.page2.gzteownid
         ON ACTION controlp INFIELD gzteownid
            #add-point:ON ACTION controlp INFIELD gzteownid
            {<point name="construct.c.page2.gzteownid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzteownid
            #add-point:BEFORE FIELD gzteownid
            {<point name="construct.b.page2.gzteownid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzteownid
            
            #add-point:AFTER FIELD gzteownid
            {<point name="construct.a.page2.gzteownid" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.gzteowndp
         ON ACTION controlp INFIELD gzteowndp
            #add-point:ON ACTION controlp INFIELD gzteowndp
            {<point name="construct.c.page2.gzteowndp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gzteowndp
            #add-point:BEFORE FIELD gzteowndp
            {<point name="construct.b.page2.gzteowndp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gzteowndp
            
            #add-point:AFTER FIELD gzteowndp
            {<point name="construct.a.page2.gzteowndp" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.gztecrtid
         ON ACTION controlp INFIELD gztecrtid
            #add-point:ON ACTION controlp INFIELD gztecrtid
            {<point name="construct.c.page2.gztecrtid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztecrtid
            #add-point:BEFORE FIELD gztecrtid
            {<point name="construct.b.page2.gztecrtid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztecrtid
            
            #add-point:AFTER FIELD gztecrtid
            {<point name="construct.a.page2.gztecrtid" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page2.gztecrtdp
         ON ACTION controlp INFIELD gztecrtdp
            #add-point:ON ACTION controlp INFIELD gztecrtdp
            {<point name="construct.c.page2.gztecrtdp" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztecrtdp
            #add-point:BEFORE FIELD gztecrtdp
            {<point name="construct.b.page2.gztecrtdp" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztecrtdp
            
            #add-point:AFTER FIELD gztecrtdp
            {<point name="construct.a.page2.gztecrtdp" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztecrtdt
            #add-point:BEFORE FIELD gztecrtdt
            {<point name="construct.b.page2.gztecrtdt" />}
            #END add-point
 
         #Ctrlp:construct.c.page2.gztemodid
         ON ACTION controlp INFIELD gztemodid
            #add-point:ON ACTION controlp INFIELD gztemodid
            {<point name="construct.c.page2.gztemodid" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztemodid
            #add-point:BEFORE FIELD gztemodid
            {<point name="construct.b.page2.gztemodid" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztemodid
            
            #add-point:AFTER FIELD gztemodid
            {<point name="construct.a.page2.gztemodid" />}
            #END add-point
            
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztemoddt
            #add-point:BEFORE FIELD gztemoddt
            {<point name="construct.b.page2.gztemoddt" />}
            #END add-point
 
   
       
      END CONSTRUCT
      
 
      
      CONSTRUCT g_wc2_table2 ON gztf004,gztf002,gztf003
           FROM s_detail3[1].gztf004,s_detail3[1].gztf002,s_detail3[1].gztf003
                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct
            {<point name="cs.body2.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       
       
       #單身一般欄位開窗相關處理       
                #此段落由子樣板a01產生
         BEFORE FIELD gztf004
            #add-point:BEFORE FIELD gztf004
            {<point name="construct.b.page3.gztf004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf004
            
            #add-point:AFTER FIELD gztf004
            {<point name="construct.a.page3.gztf004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page3.gztf004
         ON ACTION controlp INFIELD gztf004
            #add-point:ON ACTION controlp INFIELD gztf004
            {<point name="construct.c.page3.gztf004" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztf002
            #add-point:BEFORE FIELD gztf002
            {<point name="construct.b.page3.gztf002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf002
            
            #add-point:AFTER FIELD gztf002
            {<point name="construct.a.page3.gztf002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page3.gztf002
         ON ACTION controlp INFIELD gztf002
            #add-point:ON ACTION controlp INFIELD gztf002
            {<point name="construct.c.page3.gztf002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztf003
            #add-point:BEFORE FIELD gztf003
            {<point name="construct.b.page3.gztf003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztf003
            
            #add-point:AFTER FIELD gztf003
            {<point name="construct.a.page3.gztf003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page3.gztf003
         ON ACTION controlp INFIELD gztf003
            #add-point:ON ACTION controlp INFIELD gztf003
            {<point name="construct.c.page3.gztf003" />}
            #END add-point
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table3 ON gztg002,gztg003,gztg004,image
           FROM s_detail4[1].gztg002,s_detail4[1].gztg003,s_detail4[1].gztg004,s_detail4[1].image
                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct
            {<point name="cs.body3.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 3)
       
       
       #單身一般欄位開窗相關處理       
                #此段落由子樣板a01產生
         BEFORE FIELD gztg002
            #add-point:BEFORE FIELD gztg002
            {<point name="construct.b.page4.gztg002" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg002
            
            #add-point:AFTER FIELD gztg002
            {<point name="construct.a.page4.gztg002" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page4.gztg002
         ON ACTION controlp INFIELD gztg002
            #add-point:ON ACTION controlp INFIELD gztg002
            {<point name="construct.c.page4.gztg002" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztg003
            #add-point:BEFORE FIELD gztg003
            {<point name="construct.b.page4.gztg003" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg003
            
            #add-point:AFTER FIELD gztg003
            {<point name="construct.a.page4.gztg003" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page4.gztg003
         ON ACTION controlp INFIELD gztg003
            #add-point:ON ACTION controlp INFIELD gztg003
            {<point name="construct.c.page4.gztg003" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD gztg004
            #add-point:BEFORE FIELD gztg004
            {<point name="construct.b.page4.gztg004" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD gztg004
            
            #add-point:AFTER FIELD gztg004
            {<point name="construct.a.page4.gztg004" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page4.gztg004
         ON ACTION controlp INFIELD gztg004
            #add-point:ON ACTION controlp INFIELD gztg004
            {<point name="construct.c.page4.gztg004" />}
            #END add-point
 
         #此段落由子樣板a01產生
         BEFORE FIELD image
            #add-point:BEFORE FIELD image
            {<point name="construct.b.page4.image" />}
            #END add-point
 
         #此段落由子樣板a02產生
         AFTER FIELD image
            
            #add-point:AFTER FIELD image
            {<point name="construct.a.page4.image" />}
            #END add-point
            
 
         #Ctrlp:construct.c.page4.image
         ON ACTION controlp INFIELD image
            #add-point:ON ACTION controlp INFIELD image
            {<point name="construct.c.page4.image" />}
            #END add-point
 
   
       
      END CONSTRUCT
 
 
  
      #add-point:query段more_construct
      {<point name="query.more_construct"/>}
      #end add-point 
      
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog
         {<point name="query.b_dialog"/>}
         #end add-point  
 
      ON ACTION qbe_select     #條件查詢
         CALL cl_qbe_list('m') RETURNING ls_wc
 
      ON ACTION qbe_save       #條件儲存
         CALL cl_qbe_save()
      
      ON ACTION accept
         ACCEPT DIALOG
         
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG
      
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE DIALOG 
   END DIALOG
 
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      #還原
      LET g_wc = ls_wc
   ELSE
      LET g_detail_idx = 1
   END IF
   
   LET g_wc = g_wc_table 
 
              , " AND ", g_wc2_table2
 
              , " AND ", g_wc2_table3
 
 
        
   LET g_wc2 = " 1=1"
               , " AND ", g_wc2_table2
 
               , " AND ", g_wc2_table3
 
 
        
   #add-point:cs段after_construct
   {<point name="cs.after_construct"/>}
   #end add-point
        
   LET g_error_show = 1
   CALL azzi550_b_fill(g_wc)
   LET l_ac = g_detail_idx
   CALL azzi550_fetch()
   IF g_detail_cnt = 0 AND NOT INT_FLAG THEN
      CALL cl_err("",-100,1)
   END IF
   
END FUNCTION
]]>
  </section>
  <section id="azzi550.set_entry_b" ver="1" status="" src="s">
    <![CDATA[#+ 單身欄位開啟設定
PRIVATE FUNCTION azzi550_set_entry_b(p_cmd)                                                  
   DEFINE p_cmd   LIKE type_t.chr1         
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define"/>}
   #end add-point
   
   #add-point:set_entry段欄位控制後
   {<point name="set_entry.after_control"/>}
   #end add-point 
                                                                     
END FUNCTION                                                                    
]]>
  </section>
  <section id="azzi550.set_no_entry_b" ver="1" status="" src="s">
    <![CDATA[#+ 單身欄位關閉設定
PRIVATE FUNCTION azzi550_set_no_entry_b(p_cmd)                                               
   DEFINE p_cmd   LIKE type_t.chr1           
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define"/>}
   #end add-point
   
   #add-point:set_no_entry段欄位控制後
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
                                                                          
END FUNCTION  
]]>
  </section>
  <section id="azzi550.state_change" ver="1" status="" src="s">
    <![CDATA[    
]]>
  </section>
  <section id="azzi550.ui_dialog" ver="1" status="" src="s">
    <![CDATA[#+ 功能選單 
PRIVATE FUNCTION azzi550_ui_dialog()
   DEFINE la_param  RECORD
             prog   STRING,
             param  DYNAMIC ARRAY OF STRING
                    END RECORD
   DEFINE ls_js     STRING
   DEFINE li_idx   LIKE type_t.num5
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define"/>}
   #end add-point 
 
   LET g_action_choice = " "  
   LET gwin_curr = ui.Window.getCurrent()
   LET gfrm_curr = gwin_curr.getForm() 
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
   
   #add-point:ui_dialog段before dialog 
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE
   
      #add-point:ui_dialog段before while
      {<point name="ui_dialog.before_while"/>}
      #end add-point
   
      CALL azzi550_b_fill(g_wc)
   
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         DISPLAY ARRAY g_gzte_d TO s_detail1.* ATTRIBUTE(COUNT=g_detail_cnt) 
      
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx)
               END IF
               LET g_loc = 'm'
               LET g_current_page = 1
      
            BEFORE ROW
               LET g_detail_idx = DIALOG.getCurrentRow("s_detail1")
               LET l_ac = g_detail_idx
               LET g_master.* = g_gzte_d[g_detail_idx].*
               CALL cl_show_fld_cont()
               CALL azzi550_fetch()
               CALL azzi550_idx_chk('m')
               
            #自訂ACTION(detail_show,page_1)
            
               
         END DISPLAY
      
         DISPLAY ARRAY g_gzte2_d TO s_detail2.*
            ATTRIBUTES(COUNT=g_detail_cnt)  
         
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx)
               END IF
               LET g_loc = 'm'
               LET g_current_page = 2
               
            BEFORE ROW
               LET g_detail_idx = DIALOG.getCurrentRow("s_detail2")
               LET l_ac = g_detail_idx
               LET g_master.* = g_gzte_d[g_detail_idx].*
               CALL cl_show_fld_cont() 
               CALL azzi550_fetch()
               CALL azzi550_idx_chk('m')
               
            #自訂ACTION(detail_show,page_2)
            
               
         END DISPLAY
 
         
         DISPLAY ARRAY g_gzte3_d TO s_detail3.*
            ATTRIBUTES(COUNT=g_detail_cnt)  
         
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx2)
               END IF
               LET g_loc = 'd'
               LET g_current_page = 3
         
            BEFORE ROW
               LET g_detail_idx2 = DIALOG.getCurrentRow("s_detail3")
               LET l_ac = g_detail_idx2
               CALL azzi550_idx_chk('d')
               LET g_master.* = g_gzte_d[g_detail_idx].*
               CALL cl_show_fld_cont() 
               
            #自訂ACTION(detail_show,page_3)
            
               
         END DISPLAY
         DISPLAY ARRAY g_gzte4_d TO s_detail4.*
            ATTRIBUTES(COUNT=g_detail_cnt)  
         
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx2)
               END IF
               LET g_loc = 'd'
               LET g_current_page = 4
         
            BEFORE ROW
               LET g_detail_idx2 = DIALOG.getCurrentRow("s_detail4")
               LET l_ac = g_detail_idx2
               CALL azzi550_idx_chk('d')
               LET g_master.* = g_gzte_d[g_detail_idx].*
               CALL cl_show_fld_cont() 
               
            #自訂ACTION(detail_show,page_4)
            
               
         END DISPLAY
 
      
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
    
         BEFORE DIALOG
            LET g_curr_diag = ui.DIALOG.getCurrent()         
            CALL DIALOG.setSelectionMode("s_detail1", 1)
            IF g_detail_idx > 0 THEN
               IF g_detail_idx > g_gzte_d.getLength() THEN
                  LET g_detail_idx = g_gzte_d.getLength()
               END IF
               CALL DIALOG.setCurrentRow("s_detail1", g_detail_idx)
               LET l_ac = g_detail_idx
            END IF 
            LET g_detail_idx = l_ac
            NEXT FIELD CURRENT
         
         AFTER DIALOG
            #add-point:ui_dialog段after dialog
            {<point name="ui_dialog.after_dialog"/>}
            #end add-point
         
         
         #+ 此段落由子樣板a43產生
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL azzi550_modify()
               #add-point:ON ACTION modify
               {<point name="menu.modify" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL azzi550_modify()
               #add-point:ON ACTION modify_detail
               {<point name="menu.modify_detail" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               
               #add-point:ON ACTION delete
               {<point name="menu.delete" />}
               #END add-point
               
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               
               #add-point:ON ACTION insert
               {<point name="menu.insert" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output
               {<point name="menu.output" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION reproduce
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN
               
               #add-point:ON ACTION reproduce
               {<point name="menu.reproduce" />}
               #END add-point
               EXIT DIALOG
            END IF
 
 
         #+ 此段落由子樣板a43產生
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL azzi550_query()
               #add-point:ON ACTION query
               {<point name="menu.query" />}
               #END add-point
               
            END IF
 
 
      
         ON ACTION close
            LET INT_FLAG=FALSE         
            LET g_action_choice="exit"
            EXIT DIALOG
      
         ON ACTION exit
            LET g_action_choice="exit"
            EXIT DIALOG
           
         
      
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
      
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         EXIT WHILE
      END IF
      
   END WHILE
 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.unlock_b" ver="1" status="" src="s">
    <![CDATA[#+ 連動unlock其他單身table資料
PRIVATE FUNCTION azzi550_unlock_b(ps_table)
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:unlock_b段define
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   LET ls_group = ""
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE azzi550_bcl
   END IF
   
 
    
   LET ls_group = "gztf_t,"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE azzi550_bcl2
   END IF
 
   LET ls_group = "gztg_t,"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE azzi550_bcl3
   END IF
 
 
 
END FUNCTION
]]>
  </section>
  <section id="azzi550.update_b" ver="3" status="" src="s">
    <![CDATA[#+ 修改單身後其他table連動
PRIVATE FUNCTION azzi550_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define
   {<point name="update_b.define"/>}
   #end add-point     
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "gzte_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "gzte_t" THEN
   
      #add-point:update_b段修改前
      {<point name="update_b.before_update" mark="Y"/>}
      #end add-point     
   
      UPDATE gzte_t 
         SET (gzte001
              ,gztestus,gzte002,gzte003,gzteownid,gzteowndp,gztecrtid,gztecrtdp,gztecrtdt,gztemodid,gztemoddt) 
              = 
             (ps_keys[1]
              ,g_gzte_d[g_detail_idx].gztestus,g_gzte_d[g_detail_idx].gzte002,g_gzte_d[g_detail_idx].gzte003, 
                  g_gzte2_d[g_detail_idx].gzteownid,g_gzte2_d[g_detail_idx].gzteowndp,g_gzte2_d[g_detail_idx].gztecrtid, 
                  g_gzte2_d[g_detail_idx].gztecrtdp,g_gzte2_d[g_detail_idx].gztecrtdt,g_gzte2_d[g_detail_idx].gztemodid, 
                  g_gzte2_d[g_detail_idx].gztemoddt) 
         WHERE gzte001 = ps_keys_bak[1]
 
      #add-point:update_b段修改中
      {<point name="update_b.m_update"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL cl_err("gzte_t","std-00009",1)
            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            CALL cl_err("gzte_t",SQLCA.sqlcode,1)  
            CALL s_transaction_end('N','0')
         OTHERWISE
            LET l_new_key[01] = ps_keys[01] 
LET l_old_key[01] = ps_keys_bak[01] 
LET l_field_key[01] = 'gztel001'
LET l_new_key[02] = g_dlang 
LET l_old_key[02] = g_dlang 
LET l_field_key[02] = 'gztel002'
CALL cl_multitable_key_upd(l_new_key, l_old_key, l_field_key, 'gztel_t')
      END CASE
 
      #add-point:update_b段修改後
      {<point name="update_b.after_update"/>}
      #end add-point
      
      RETURN
   END IF
   
 
   
   LET ls_group = "gztf_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "gztf_t" THEN
   
      #add-point:update_b段修改前
      {<point name="update_b.before_update2" mark="Y"/>}
      #end add-point    
      
      UPDATE gztf_t 
         SET (gztf001,gztf002
              ,gztf004,gztf003) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_gzte3_d[g_detail_idx2].gztf004,g_gzte3_d[g_detail_idx2].gztf003) 
         WHERE gztf001 = ps_keys_bak[1] AND gztf002 = ps_keys_bak[2]
 
      #add-point:update_b段修改中
      {<point name="update_b.m_update2"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL cl_err("gztf_t","std-00009",1)
            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            CALL cl_err("gztf_t",SQLCA.sqlcode,1)  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      
      #add-point:update_b段修改後
      {<point name="update_b.after_update2"/>}
      #end add-point 
      
      RETURN
   END IF
 
   LET ls_group = "gztg_t,"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "gztg_t" THEN
   
      #add-point:update_b段修改前
      {<point name="update_b.before_update3" mark="Y"/>}
      #end add-point    
      
      UPDATE gztg_t 
         SET (gztg001,gztg002
              ,gztg003,gztg004) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_gzte4_d[g_detail_idx2].gztg003,g_gzte4_d[g_detail_idx2].gztg004) 
         WHERE gztg001 = ps_keys_bak[1] AND gztg002 = ps_keys_bak[2]
 
      #add-point:update_b段修改中
      {<point name="update_b.m_update3"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL cl_err("gztg_t","std-00009",1)
            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            CALL cl_err("gztg_t",SQLCA.sqlcode,1)  
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE
      
      #add-point:update_b段修改後
      {<point name="update_b.after_update3"/>}
      #end add-point 
      
      RETURN
   END IF
 
 
   
END FUNCTION
]]>
  </section>
</add_points>
