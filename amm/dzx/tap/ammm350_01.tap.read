<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="ammm350_01" std_prog="ammm350_01" erpver="1.0" module="AMM" ver="2" env="s" zone="t10prd" booking="N" type="S" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="F" status=""/>
    <free_style value="N" status=""/>
    <start_arg value="" status=""/>
  </other>
  <point name="input.a.page1.mmbv001" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_mmbv_d[g_detail_idx].mmbv001 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv003 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv004 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_mmbv_d[g_detail_idx].mmbv001 != g_mmbv_d_t.mmbv001 OR g_mmbv_d[g_detail_idx].mmbv003 != g_mmbv_d_t.mmbv003 OR g_mmbv_d[g_detail_idx].mmbv004 != g_mmbv_d_t.mmbv004)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM mmbv_t WHERE "||"mmbvent = '" ||g_enterprise|| "' AND "||"mmbv001 = '"||g_mmbv_d[g_detail_idx].mmbv001 ||"' AND "|| "mmbv003 = '"||g_mmbv_d[g_detail_idx].mmbv003 ||"' AND "|| "mmbv004 = '"||g_mmbv_d[g_detail_idx].mmbv004 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page1.mmbv004" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_mmbv_d[g_detail_idx].mmbv001 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv003 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv004 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_mmbv_d[g_detail_idx].mmbv001 != g_mmbv_d_t.mmbv001 OR g_mmbv_d[g_detail_idx].mmbv003 != g_mmbv_d_t.mmbv003 OR g_mmbv_d[g_detail_idx].mmbv004 != g_mmbv_d_t.mmbv004)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM mmbv_t WHERE "||"mmbvent = '" ||g_enterprise|| "' AND "||"mmbv001 = '"||g_mmbv_d[g_detail_idx].mmbv001 ||"' AND "|| "mmbv003 = '"||g_mmbv_d[g_detail_idx].mmbv003 ||"' AND "|| "mmbv004 = '"||g_mmbv_d[g_detail_idx].mmbv004 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="input.a.page1.mmbv003" order="0" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a05產生
            IF  g_mmbv_d[g_detail_idx].mmbv001 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv003 IS NOT NULL AND g_mmbv_d[g_detail_idx].mmbv004 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_mmbv_d[g_detail_idx].mmbv001 != g_mmbv_d_t.mmbv001 OR g_mmbv_d[g_detail_idx].mmbv003 != g_mmbv_d_t.mmbv003 OR g_mmbv_d[g_detail_idx].mmbv004 != g_mmbv_d_t.mmbv004)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM mmbv_t WHERE "||"mmbvent = '" ||g_enterprise|| "' AND "||"mmbv001 = '"||g_mmbv_d[g_detail_idx].mmbv001 ||"' AND "|| "mmbv003 = '"||g_mmbv_d[g_detail_idx].mmbv003 ||"' AND "|| "mmbv004 = '"||g_mmbv_d[g_detail_idx].mmbv004 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

]]>
  </point>
  <point name="function.ammm350_01_mmbv004_ref" order="1" ver="2" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PUBLIC FUNCTION ammm350_01_mmbv004_ref(p_mmbv003,p_mmbv004)
DEFINE p_mmbv003  LIKE mmbv_t.mmbv003
DEFINE p_mmbv004  LIKE mmbv_t.mmbv004
DEFINE l_mmbv004_desc  LIKE type_t.chr80

    CASE p_mmbv003
       WHEN  '1' #會員等級
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2024' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang
           
        
       WHEN  '2' #會員類型
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2025' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang
       
       WHEN  '3' #款別類型
          SELECT ooial003 INTO l_mmbv004_desc FROM ooial_t
           WHERE ooialent = g_enterprise AND ooial001 =  p_mmbv004 AND ooial002 = g_dlang
       
       WHEN '4' #商品編號
          SELECT imaal003 INTO l_mmbv004_desc FROM imaal_t
           WHERE imaalent = g_enterprise AND imaal001 = p_mmbv004 AND imaal002 = g_dlang
           
       WHEN '5' #商品分類
           SELECT rtaxl003 INTO l_mmbv004_desc FROM rtaxl_t
            WHERE rtaxlent = g_enterprise AND rtaxl001 = p_mmbv004 AND rtaxl002 = g_dlang 

       WHEN '6' #商品屬性-產地分類
           SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2000' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang
           
       WHEN '7' #商品屬性-價格帶
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2001' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang
           
       WHEN '8' #商品屬性-品牌
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2002' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  

       WHEN '9' #商品屬性-系列
           SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2003' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang   

       WHEN 'A' #商品屬性-型別
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2004' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang 

       WHEN 'B' #商品屬性-功能
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2005' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang 
       
       WHEN 'C' #商品屬性-其它屬性一
         SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2006' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  

       WHEN 'D' #商品屬性-其它屬性二
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2007' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  
   
       WHEN 'E' #商品屬性-其它屬性三
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2008' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  
       WHEN 'F' #商品屬性-其它屬性四
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2009' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  
       WHEN 'G' #商品屬性-其它屬性五
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2010' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang  
        
       WHEN 'H' #商品屬性-其它屬性六
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2011' AND oocql002 =p_mmbv004 AND oocql003 = g_dlang  
           
       WHEN 'I' #商品屬性-其它屬性七
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2012' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang   
       WHEN 'J' #商品屬性-其它屬性八
           SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2013' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang           
      
       WHEN 'K' #商品屬性-其它屬性九
           SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2014' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang   

       WHEN 'L' #商品屬性-其它屬性十
          SELECT oocql004 INTO l_mmbv004_desc FROM oocql_t 
           WHERE oocqlent = g_enterprise AND oocql001 = '2014' AND oocql002 = p_mmbv004 AND oocql003 = g_dlang 
       WHEN 'T'
           SELECT inayl003 INTO l_mmbv004_desc FROM inayl_t
            WHERE inaylent = g_enterprise AND inayl001  = p_mmbv004 AND inayl002 = g_dlang 
        WHEN 'U'
         #庫區類別
           SELECT gzcbl004 INTO l_mmbv004_desc FROM gzcbl_t 
            WHERE gzcbl001 = '6200' AND gzcbl002 = p_mmbv004 AND gzcbl003 =  g_dlang 
       WHEN 'V' 
         #庫區品類 
           SELECT rtaxl003 INTO l_mmbv004_desc FROM rtaxl_t
            WHERE rtaxlent = g_enterprise AND rtaxl001 = p_mmbv004 AND rtaxl002 = g_dlang 
    END CASE 
    RETURN  l_mmbv004_desc 
END FUNCTION]]>
  </point>
  <point name="b_fill.fill" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      LET g_mmbv_d[l_ac].mmbv004_desc = ammm350_01_mmbv004_ref(g_mmbv_d[l_ac].mmbv003,g_mmbv_d[l_ac].mmbv004)]]>
  </point>
  <point name="b_fill.sql_before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   LET p_wc2 =p_wc2," AND mmbv001 = '",g_mmbt001,"'"]]>
  </point>
  <point name="global.variable" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[DEFINE g_mmbt001     LIKE mmbt_t.mmbt001]]>
  </point>
  <point name="main.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE p_mmbt001 LIKE mmbt_t.mmbt001]]>
  </point>
  <point name="main.exit" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   LET g_action_choice= '']]>
  </point>
  <point name="main.get_var" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   p_mmbt001]]>
  </point>
  <point name="main.init" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   LET g_mmbt001 = p_mmbt001]]>
  </point>
  <section id="ammm350_01.b_fill" ver="12" status="" src="s" readonly="">
    <![CDATA[#+ 單身陣列填充
PRIVATE FUNCTION ammm350_01_b_fill(p_wc2)              #BODY FILL UP
   DEFINE p_wc2    STRING
   #add-point:b_fill段define
   {<point name="b_fill.define" edit="s"/>}
   #end add-point
   #add-point:b_fill段define(客製用)
   {<point name="b_fill.define_customerization" edit="c"/>}
   #end add-point
   
   IF cl_null(p_wc2) THEN
      LET p_wc2 = " 1=1"
   END IF
   
   #add-point:b_fill段sql之前
   {<point name="b_fill.sql_before"/>}
   #end add-point
 
   LET g_sql = "SELECT  UNIQUE t0.mmbv001,t0.mmbv003,t0.mmbv004,t0.mmbvstus  FROM mmbv_t t0",
               "",
               
               " WHERE t0.mmbvent= ?  AND  1=1 AND (", p_wc2, ") " 
   #add-point:b_fill段sql wc
   {<point name="b_fill.sql_wc"/>}
   #end add-point
   LET g_sql = g_sql, cl_sql_add_filter("mmbv_t"),
                      " ORDER BY t0.mmbv001,t0.mmbv003,t0.mmbv004"
   
   #add-point:b_fill段sql之後
   {<point name="b_fill.sql_after"/>}
   #end add-point
   
   #LET g_sql = cl_sql_add_tabid(g_sql,"mmbv_t")            #WC重組
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   PREPARE ammm350_01_pb FROM g_sql
   DECLARE b_fill_curs CURSOR FOR ammm350_01_pb
   
   OPEN b_fill_curs USING g_enterprise
 
   CALL g_mmbv_d.clear()
 
 
   LET g_cnt = l_ac
   LET l_ac = 1   
   ERROR "Searching!" 
 
   FOREACH b_fill_curs INTO g_mmbv_d[l_ac].mmbv001,g_mmbv_d[l_ac].mmbv003,g_mmbv_d[l_ac].mmbv004,g_mmbv_d[l_ac].mmbvstus 

      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         EXIT FOREACH
      END IF
  
      #add-point:b_fill段資料填充
      {<point name="b_fill.fill"/>}
      #end add-point
      
      CALL ammm350_01_detail_show()      
 
      IF l_ac > g_max_rec THEN
         IF g_error_show = 1 THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code   = 9035 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
         END IF
         EXIT FOREACH
      END IF
 
      LET l_ac = l_ac + 1
      
   END FOREACH
 
   LET g_error_show = 0
   
 
   
   CALL g_mmbv_d.deleteElement(g_mmbv_d.getLength())   
 
   
   #將key欄位填到每個page
   FOR l_ac = 1 TO g_mmbv_d.getLength()
 
      #add-point:b_fill段key值相關欄位
      {<point name="b_fill.keys.fill"/>}
      #end add-point
   END FOR
   
   IF g_cnt > g_mmbv_d.getLength() THEN
      LET l_ac = g_mmbv_d.getLength()
   ELSE
      LET l_ac = g_cnt
   END IF
   LET g_cnt = l_ac
 
   #遮罩相關處理
   FOR l_ac = 1 TO g_mmbv_d.getLength()
      LET g_mmbv_d_mask_o[l_ac].* =  g_mmbv_d[l_ac].*
      CALL ammm350_01_mmbv_t_mask()
      LET g_mmbv_d_mask_n[l_ac].* =  g_mmbv_d[l_ac].*
   END FOR
   
 
 
   #add-point:b_fill段資料填充(其他單身)
   {<point name="b_fill.others.fill"/>}
   #end add-point
   
   ERROR "" 
 
   LET g_detail_cnt = g_mmbv_d.getLength()
   DISPLAY g_detail_idx TO FORMONLY.idx
   DISPLAY g_detail_cnt TO FORMONLY.cnt
   
   CLOSE b_fill_curs
   FREE ammm350_01_pb
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.default_search" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ 外部參數搜尋
PRIVATE FUNCTION ammm350_01_default_search()
   DEFINE li_idx  LIKE type_t.num10
   DEFINE li_cnt  LIKE type_t.num10
   DEFINE ls_wc   STRING
   #add-point:default_search段define
   {<point name="default_search.define" edit="s"/>}
   #end add-point  
   #add-point:default_search段define(客製用)
   {<point name="default_search.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " mmbv001 = '", g_argv[01], "' AND "
   END IF
   
   IF NOT cl_null(g_argv[02]) THEN
      LET ls_wc = ls_wc, " mmbv003 = '", g_argv[02], "' AND "
   END IF
   IF NOT cl_null(g_argv[03]) THEN
      LET ls_wc = ls_wc, " mmbv004 = '", g_argv[03], "' AND "
   END IF
 
   
   #add-point:default_search段after sql
   {<point name="default_search.after_sql"/>}
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET ls_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_wc2 = ls_wc
   ELSE
      LET g_wc2 = " 1=1"
      #預設查詢條件
      LET g_wc2 = cl_qbe_get_default_qryplan()
      IF cl_null(g_wc2) THEN
         LET g_wc2 = " 1=1"
      END IF
   END IF
 
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point  
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.delete" ver="8" status="" src="s" readonly="">
    <![CDATA[#+ 資料刪除
PRIVATE FUNCTION ammm350_01_delete()
   DEFINE li_idx          LIKE type_t.num10
   DEFINE li_ac_t         LIKE type_t.num10
   DEFINE li_detail_tmp   LIKE type_t.num10
   DEFINE l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak  DYNAMIC ARRAY OF STRING
   DEFINE l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE l_vars          DYNAMIC ARRAY OF STRING
   DEFINE l_fields        DYNAMIC ARRAY OF STRING
   #add-point:delete段define
   {<point name="delete.define" edit="s"/>}
   #end add-point 
   #add-point:delete段define(客製用)
   {<point name="delete.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:單身刪除前
   {<point name="delete.body.before_delete"/>}
   #end add-point
   
   CALL s_transaction_begin()
   
   LET li_ac_t = l_ac
   
   LET li_detail_tmp = g_detail_idx
    
   #lock所有所選資料
   FOR li_idx = 1 TO g_mmbv_d.getLength()
      LET g_detail_idx = li_idx
      #已選擇的資料
      IF g_curr_diag.isRowSelected(g_curr_diag.getCurrentItem(), li_idx) THEN 
         #確定是否有被鎖定
         IF NOT ammm350_01_lock_b("mmbv_t") THEN
            #已被他人鎖定
            RETURN
         END IF
      END IF
   END FOR
   
   #add-point:單身刪除詢問前
   {<point name="delete.body.b_delete_ask"/>}
   #end add-point  
   
   #詢問是否確定刪除所選資料
   IF NOT cl_ask_del_detail() THEN
      RETURN
   END IF
   
   FOR li_idx = 1 TO g_mmbv_d.getLength()
      IF g_mmbv_d[li_idx].mmbv001 IS NOT NULL
         AND g_mmbv_d[li_idx].mmbv003 IS NOT NULL
         AND g_mmbv_d[li_idx].mmbv004 IS NOT NULL
 
         AND g_curr_diag.isRowSelected(g_curr_diag.getCurrentItem(), li_idx) THEN 
         
         #add-point:單身刪除前
         {<point name="delete.body.b_delete" mark="Y"/>}
         #end add-point   
         
         DELETE FROM mmbv_t
          WHERE mmbvent = g_enterprise AND 
                mmbv001 = g_mmbv_d[li_idx].mmbv001
                AND mmbv003 = g_mmbv_d[li_idx].mmbv003
                AND mmbv004 = g_mmbv_d[li_idx].mmbv004
 
         #add-point:單身刪除中
         {<point name="delete.body.m_delete"/>}
         #end add-point  
                
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "mmbv_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            RETURN
         ELSE
            LET g_detail_cnt = g_detail_cnt-1
            LET l_ac = li_idx
            
 
            
 
            #add-point:單身同步刪除前(同層table)
            {<point name="delete.body.a_delete"/>}
            #end add-point
            LET g_detail_idx = li_idx
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_mmbv_d_t.mmbv001
               LET gs_keys[2] = g_mmbv_d_t.mmbv003
               LET gs_keys[3] = g_mmbv_d_t.mmbv004
 
            #add-point:單身同步刪除中(同層table)
            {<point name="delete.body.a_delete2"/>}
            #end add-point
                           CALL ammm350_01_delete_b('mmbv_t',gs_keys,"'1'")
            #add-point:單身同步刪除後(同層table)
            {<point name="delete.body.a_delete3"/>}
            #end add-point
         END IF 
      END IF 
    
   END FOR
   
   LET g_detail_idx = li_detail_tmp
            
   #add-point:單身刪除後
   {<point name="delete.after"/>}
   #end add-point  
   
   LET l_ac = li_ac_t
   
   #刷新資料
   CALL ammm350_01_b_fill(g_wc2)
            
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.delete_b" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 刪除單身後其他table連動
PRIVATE FUNCTION ammm350_01_delete_b(ps_table,ps_keys_bak,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define
   {<point name="delete_b.define" edit="s"/>}
   #end add-point     
   #add-point:delete_b段define(客製用)
   {<point name="delete_b.define_customerization" edit="c"/>}
   #end add-point
   
   #判斷是否是同一群組的table
   LET ls_group = "mmbv_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      IF ps_table <> 'mmbv_t' THEN
         #add-point:delete_b段刪除前
         {<point name="delete_b.b_delete" mark="Y"/>}
         #end add-point     
         
         DELETE FROM mmbv_t
          WHERE mmbvent = g_enterprise AND
            mmbv001 = ps_keys_bak[1] AND mmbv003 = ps_keys_bak[2] AND mmbv004 = ps_keys_bak[3]
         
         #add-point:delete_b段刪除中
         {<point name="delete_b.m_delete"/>}
         #end add-point  
            
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = FALSE 
            CALL cl_err()
         END IF
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_mmbv_d.deleteElement(li_idx) 
      END IF 
 
      
      #add-point:delete_b段刪除後
      {<point name="delete_b.a_delete"/>}
      #end add-point
      
      RETURN
   END IF
   
 
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.description" ver="2" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:2,PR版次:2) Build-000161
#+ 
#+ Filename...: ammm350_01
#+ Description: 會員卡績點排除作業
#+ Creator....: 01533(2013-09-11 14:18:52)
#+ Modifier...: 01533(2014-01-09 00:00:00) -SD/PR-
]]>
  </section>
  <section id="ammm350_01.detail_show" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 顯示相關資料
PRIVATE FUNCTION ammm350_01_detail_show()
   #add-point:show段define
   {<point name="detail_show.define" edit="s"/>}
   #end add-point
   #add-point:detail_show段define(客製用)
   {<point name="detail_show.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:detail_show段之前
   {<point name="detail_show.before"/>}
   #end add-point
   
   
   
   #帶出公用欄位reference值page1
   #應用 a12 樣板自動產生(Version:3)
 
 
    
 
   
   #讀入ref值
   #add-point:show段單身reference
   {<point name="detail_show.reference"/>}
   #end add-point
   
 
   #add-point:detail_show段之後
   {<point name="detail_show.after"/>}
   #end add-point
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.global" ver="7" status="" src="s" readonly="">
    <![CDATA[#應用 i02 樣板自動產生(Version:13)
{<point name="global.memo" />}
 
IMPORT os
IMPORT util
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔
{<point name="global.inc" />}
#end add-point
 
#單身 type 宣告
PRIVATE TYPE type_g_mmbv_d RECORD
       mmbv001 LIKE mmbv_t.mmbv001, 
   mmbv003 LIKE mmbv_t.mmbv003, 
   mmbv004 LIKE mmbv_t.mmbv004, 
   mmbv004_desc LIKE type_t.chr500, 
   mmbvstus LIKE mmbv_t.mmbvstus
       END RECORD
 
 
 
#模組變數(Module Variables)
DEFINE g_mmbv_d          DYNAMIC ARRAY OF type_g_mmbv_d #單身變數
DEFINE g_mmbv_d_t        type_g_mmbv_d                  #單身備份
DEFINE g_mmbv_d_o        type_g_mmbv_d                  #單身備份
DEFINE g_mmbv_d_mask_o   DYNAMIC ARRAY OF type_g_mmbv_d #單身變數
DEFINE g_mmbv_d_mask_n   DYNAMIC ARRAY OF type_g_mmbv_d #單身變數
 
      
DEFINE g_wc2                STRING
DEFINE g_sql                STRING
DEFINE g_forupd_sql         STRING                        #SELECT ... FOR UPDATE SQL
DEFINE g_before_input_done  LIKE type_t.num5
DEFINE g_cnt                LIKE type_t.num10    
DEFINE l_ac                 LIKE type_t.num10             #目前處理的ARRAY CNT 
DEFINE g_curr_diag          ui.Dialog                     #Current Dialog
DEFINE gwin_curr            ui.Window                     #Current Window
DEFINE gfrm_curr            ui.Form                       #Current Form
DEFINE g_temp_idx           LIKE type_t.num10             #單身 所在筆數(暫存用)
DEFINE g_detail_idx         LIKE type_t.num10             #單身 所在筆數(所有資料)
DEFINE g_detail_cnt         LIKE type_t.num10             #單身 總筆數(所有資料)
DEFINE g_ref_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars           DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys              DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak          DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_insert             LIKE type_t.chr5              #是否導到其他page
DEFINE g_error_show         LIKE type_t.num5
DEFINE g_chk                BOOLEAN
DEFINE g_aw                 STRING                        #確定當下點擊的單身
DEFINE g_log1               STRING                        #log用
DEFINE g_log2               STRING                        #log用
 
#多table用wc
DEFINE g_wc_table           STRING
 
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable" edit="s"/>}
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv)
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="ammm350_01.init" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 畫面資料初始化
PRIVATE FUNCTION ammm350_01_init()
   #add-point:init段define
   {<point name="init.define" edit="s"/>}
   #end add-point   
   #add-point:init段define(客製用)
   {<point name="init.define_customerization" edit="c"/>}
   #end add-point
   
   
   
   LET g_error_show = 1
   
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
   CALL ammm350_01_default_search()
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.insert" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 資料新增
PRIVATE FUNCTION ammm350_01_insert()
   #add-point:delete段define
   {<point name="insert.define" edit="s"/>}
   #end add-point                
   #add-point:insert段define(客製用)
   {<point name="insert.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:單身新增前
   {<point name="insert.b_insert"/>}
   #end add-point
   
   LET g_insert = 'Y'
   CALL ammm350_01_modify()
            
   #add-point:單身新增後
   {<point name="insert.a_insert"/>}
   #end add-point
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.insert_b" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ 新增單身後其他table連動
PRIVATE FUNCTION ammm350_01_insert_b(ps_table,ps_keys,ps_page)
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   #add-point:insert_b段define
   {<point name="insert_b.define" edit="s"/>}
   #end add-point     
   #add-point:insert_b段define(客製用)
   {<point name="insert_b.define_customerization" edit="c"/>}
   #end add-point
   
   #判斷是否是同一群組的table
   LET ls_group = "mmbv_t,"
   #IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      
      #add-point:insert_b段新增前
      {<point name="insert_b.b_insert" mark="Y"/>}
      #end add-point    
      INSERT INTO mmbv_t
                  (mmbvent,
                   mmbv001,mmbv003,mmbv004
                   ,mmbvstus) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_mmbv_d[l_ac].mmbvstus)
      #add-point:insert_b段新增中
      {<point name="insert_b.m_insert"/>}
      #end add-point    
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "mmbv_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
      END IF
      #add-point:insert_b段新增後
      {<point name="insert_b.a_insert"/>}
      #end add-point    
   #END IF
   
 
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.lock_b" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 連動lock其他單身table資料
PRIVATE FUNCTION ammm350_01_lock_b(ps_table)
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:lock_b段define
   {<point name="lock_b.define" edit="s"/>}
   #end add-point   
   #add-point:lock_b段define(客製用)
   {<point name="lock_b.define_customerization" edit="c"/>}
   #end add-point
   
   #先刷新資料
   #CALL ammm350_01_b_fill(g_wc2)
   
   #鎖定整組table
   #LET ls_group = ""
   #僅鎖定自身table
   LET ls_group = "mmbv_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN ammm350_01_bcl USING g_enterprise,
                                       g_mmbv_d[g_detail_idx].mmbv001,g_mmbv_d[g_detail_idx].mmbv003, 
                                           g_mmbv_d[g_detail_idx].mmbv004
                                       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "ammm350_01_bcl" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   
   END IF
                                    
 
   
   RETURN TRUE
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.main" ver="6" status="" src="s" readonly="">
    <![CDATA[#應用 a27 樣板自動產生(Version:4)
#+ 作業開始(子程式類型)
PUBLIC FUNCTION ammm350_01(--)
   #add-point:main段變數傳入
   {<point name="main.get_var"/>}
   #end add-point
   )
   #add-point:main段define
   {<point name="main.define" edit="s"/>}
   #end add-point   
   #add-point:main段define(客製用)
   {<point name="main.define_customerization" edit="c"/>}
   #end add-point   
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #add-point:作業初始化
   {<point name="main.init" />}
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
 
   
   #add-point:main段define_sql
   {<point name="main.body.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "SELECT mmbv001,mmbv003,mmbv004,mmbvstus FROM mmbv_t WHERE mmbvent=? AND mmbv001=?  
       AND mmbv003=? AND mmbv004=? FOR UPDATE"
   #add-point:main段define_sql
   {<point name="main.body.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE ammm350_01_bcl CURSOR FROM g_forupd_sql
 
 
   
   #畫面開啟 (identifier)
   OPEN WINDOW w_ammm350_01 WITH FORM cl_ap_formpath("amm","ammm350_01")
   
   #瀏覽頁簽資料初始化
   CALL cl_ui_init()
   
   #程式初始化
   CALL ammm350_01_init()   
 
   #進入選單 Menu (="N")
   CALL ammm350_01_ui_dialog() 
 
   #畫面關閉
   CLOSE WINDOW w_ammm350_01
 
   
   
 
   #add-point:離開前
   {<point name="main.exit" />}
   #end add-point
END FUNCTION
 
 
]]>
  </section>
  <section id="ammm350_01.mask_functions" ver="1" status="" src="s" readonly="">
    <![CDATA[&include "erp/amm/ammm350_01_mask.4gl"
]]>
  </section>
  <section id="ammm350_01.modify" ver="16" status="" src="s" readonly="">
    <![CDATA[#+ 資料修改
PRIVATE FUNCTION ammm350_01_modify()
   DEFINE  l_cmd                  LIKE type_t.chr1
   DEFINE  l_ac_t                 LIKE type_t.num10               #未取消的ARRAY CNT 
   DEFINE  l_n                    LIKE type_t.num10               #檢查重複用  
   DEFINE  l_cnt                  LIKE type_t.num10               #檢查重複用  
   DEFINE  l_lock_sw              LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert         LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete         LIKE type_t.num5                #可刪除否  
   DEFINE  l_count                LIKE type_t.num10
   DEFINE  l_i                    LIKE type_t.num10
   DEFINE  ls_return              STRING
   DEFINE  l_var_keys             DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys           DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                 DYNAMIC ARRAY OF STRING
   DEFINE  l_fields               DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak         DYNAMIC ARRAY OF STRING
   DEFINE  li_reproduce           LIKE type_t.num10
   DEFINE  li_reproduce_target    LIKE type_t.num10
   DEFINE  lb_reproduce           BOOLEAN
   #add-point:modify段define
   {<point name="modify.define" edit="s"/>}
   #end add-point 
   #add-point:modify段define(客製用)
   {<point name="modify.define_customerization" edit="c"/>}
   #end add-point
   LET g_action_choice = ""
   
   LET g_qryparam.state = "i"
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   
   #add-point:modify開始前
   {<point name="modify.define_sql" mark="Y"/>}
   #end add-point
   
   LET INT_FLAG = FALSE
   LET lb_reproduce = FALSE
 
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
 
   #add-point:modify段修改前
   {<point name="modify.before_input"/>}
   #end add-point
 
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #Page1 預設值產生於此處
      INPUT ARRAY g_mmbv_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_detail_cnt,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_mmbv_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL ammm350_01_b_fill(g_wc2)
            LET g_detail_cnt = g_mmbv_d.getLength()
         
         BEFORE ROW
            #add-point:modify段before row
            {<point name="input.body.before_row2"/>}
            #end add-point  
            LET g_detail_idx = DIALOG.getCurrentRow("s_detail1")
            LET l_cmd = ''
            LET l_ac = g_detail_idx
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
            DISPLAY g_mmbv_d.getLength() TO FORMONLY.cnt
         
            CALL s_transaction_begin()
            LET g_detail_cnt = g_mmbv_d.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND g_mmbv_d[l_ac].mmbv001 IS NOT NULL
               AND g_mmbv_d[l_ac].mmbv003 IS NOT NULL
               AND g_mmbv_d[l_ac].mmbv004 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_mmbv_d_t.* = g_mmbv_d[l_ac].*  #BACKUP
               LET g_mmbv_d_o.* = g_mmbv_d[l_ac].*  #BACKUP
               IF NOT ammm350_01_lock_b("mmbv_t") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ammm350_01_bcl INTO g_mmbv_d[l_ac].mmbv001,g_mmbv_d[l_ac].mmbv003,g_mmbv_d[l_ac].mmbv004, 
                      g_mmbv_d[l_ac].mmbvstus
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_mmbv_d_t.mmbv001 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_mmbv_d_mask_o[l_ac].* =  g_mmbv_d[l_ac].*
                  CALL ammm350_01_mmbv_t_mask()
                  LET g_mmbv_d_mask_n[l_ac].* =  g_mmbv_d[l_ac].*
                  
                  CALL ammm350_01_detail_show()
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            
            CALL s_transaction_begin()
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_mmbv_d_t.* TO NULL
            INITIALIZE g_mmbv_d_o.* TO NULL
            INITIALIZE g_mmbv_d[l_ac].* TO NULL 
            #公用欄位給值(單身)
            #應用 a14 樣板自動產生(Version:4)    
      #公用欄位新增給值  
      LET g_mmbv_d[l_ac].mmbvstus = ''
 
 
            #自定義預設值(單身1)
            
            #add-point:modify段before備份
            {<point name="input.body.before_bak"/>}
            #end add-point
            LET g_mmbv_d_t.* = g_mmbv_d[l_ac].*     #新輸入資料
            LET g_mmbv_d_o.* = g_mmbv_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ammm350_01_set_entry_b("a")
            CALL ammm350_01_set_no_entry_b("a")
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_mmbv_d[li_reproduce_target].* = g_mmbv_d[li_reproduce].*
 
               LET g_mmbv_d[g_mmbv_d.getLength()].mmbv001 = NULL
               LET g_mmbv_d[g_mmbv_d.getLength()].mmbv003 = NULL
               LET g_mmbv_d[g_mmbv_d.getLength()].mmbv004 = NULL
 
            END IF
            
            #add-point:modify段before insert
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM mmbv_t 
             WHERE mmbvent = g_enterprise AND mmbv001 = g_mmbv_d[l_ac].mmbv001
                                       AND mmbv003 = g_mmbv_d[l_ac].mmbv003
                                       AND mmbv004 = g_mmbv_d[l_ac].mmbv004
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
               {<point name="input.body.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_mmbv_d[g_detail_idx].mmbv001
               LET gs_keys[2] = g_mmbv_d[g_detail_idx].mmbv003
               LET gs_keys[3] = g_mmbv_d[g_detail_idx].mmbv004
               CALL ammm350_01_insert_b('mmbv_t',gs_keys,"'1'")
                           
               #add-point:單身新增後
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               INITIALIZE g_mmbv_d[l_ac].* TO NULL
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "mmbv_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ammm350_01_b_fill(g_wc2)
               #資料多語言用-增/改
               
               #add-point:input段-after_insert
               {<point name="input.body.a_insert2"/>}
               #end add-point
               ##ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
               
               LET g_wc2 = g_wc2, " OR (mmbv001 = '", g_mmbv_d[l_ac].mmbv001, "' "
                                  ," AND mmbv003 = '", g_mmbv_d[l_ac].mmbv003, "' "
                                  ," AND mmbv004 = '", g_mmbv_d[l_ac].mmbv004, "' "
 
                                  ,")"
            END IF                
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
            ELSE
               #add-point:單身刪除ask前
               {<point name="input.body.b_delete_ask"/>}
               #end add-point   
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前
               {<point name="input.body.b_delete" mark="Y"/>}
               #end add-point   
               
               DELETE FROM mmbv_t
                WHERE mmbvent = g_enterprise AND 
                      mmbv001 = g_mmbv_d_t.mmbv001
                      AND mmbv003 = g_mmbv_d_t.mmbv003
                      AND mmbv004 = g_mmbv_d_t.mmbv004
 
                      
               #add-point:單身刪除中
               {<point name="input.body.m_delete"/>}
               #end add-point  
                      
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "mmbv_t" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  
                  #add-point:單身刪除後
                  {<point name="input.body.a_delete"/>}
                  #end add-point
                  #修改歷程記錄(刪除)
                  CALL ammm350_01_set_pk_array()
                  IF NOT cl_log_modified_record('','') THEN 
                  ELSE
                  END IF
               END IF 
               CLOSE ammm350_01_bcl
               #add-point:單身關閉bcl
               {<point name="input.body.close"/>}
               #end add-point
               LET l_count = g_mmbv_d.getLength()
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_mmbv_d_t.mmbv001
               LET gs_keys[2] = g_mmbv_d_t.mmbv003
               LET gs_keys[3] = g_mmbv_d_t.mmbv004
 
               #應用 a47 樣板自動產生(Version:2)
      #刪除相關文件
      CALL ammm350_01_set_pk_array()
      #add-point:相關文件刪除前
      {<point name="delete.befroe.related_document_remove"/>}
      #end add-point   
      CALL cl_doc_remove()  
 
 
 
            END IF 
              
         AFTER DELETE 
            IF l_cmd <> 'd' THEN
               #add-point:單身刪除後2
               {<point name="input.body.after_delete"/>}
               #end add-point
                              CALL ammm350_01_delete_b('mmbv_t',gs_keys,"'1'")
            END IF
            #如果是最後一筆
            IF l_ac = (g_mmbv_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv001
            #add-point:BEFORE FIELD mmbv001
            {<point name="input.b.page1.mmbv001" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv001
            
            #add-point:AFTER FIELD mmbv001
            {<point name="input.a.page1.mmbv001" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE mmbv001
            #add-point:ON CHANGE mmbv001
            {<point name="input.g.page1.mmbv001" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv003
            #add-point:BEFORE FIELD mmbv003
            {<point name="input.b.page1.mmbv003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv003
            
            #add-point:AFTER FIELD mmbv003
            {<point name="input.a.page1.mmbv003" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE mmbv003
            #add-point:ON CHANGE mmbv003
            {<point name="input.g.page1.mmbv003" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv004
            #add-point:BEFORE FIELD mmbv004
            {<point name="input.b.page1.mmbv004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv004
            
            #add-point:AFTER FIELD mmbv004
            {<point name="input.a.page1.mmbv004" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE mmbv004
            #add-point:ON CHANGE mmbv004
            {<point name="input.g.page1.mmbv004" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbvstus
            #add-point:BEFORE FIELD mmbvstus
            {<point name="input.b.page1.mmbvstus" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbvstus
            
            #add-point:AFTER FIELD mmbvstus
            {<point name="input.a.page1.mmbvstus" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE mmbvstus
            #add-point:ON CHANGE mmbvstus
            {<point name="input.g.page1.mmbvstus" />}
            #END add-point 
 
 
                  #Ctrlp:input.c.page1.mmbv001
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv001
            #add-point:ON ACTION controlp INFIELD mmbv001
            {<point name="input.c.page1.mmbv001" />}
            #END add-point
 
         #Ctrlp:input.c.page1.mmbv003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv003
            #add-point:ON ACTION controlp INFIELD mmbv003
            {<point name="input.c.page1.mmbv003" />}
            #END add-point
 
         #Ctrlp:input.c.page1.mmbv004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv004
            #add-point:ON ACTION controlp INFIELD mmbv004
            {<point name="input.c.page1.mmbv004" />}
            #END add-point
 
         #Ctrlp:input.c.page1.mmbvstus
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbvstus
            #add-point:ON ACTION controlp INFIELD mmbvstus
            {<point name="input.c.page1.mmbvstus" />}
            #END add-point
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               LET g_mmbv_d[l_ac].* = g_mmbv_d_t.*
               CLOSE ammm350_01_bcl
               #add-point:單身取消時
               {<point name="input.body.cancel"/>}
               #end add-point
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_mmbv_d[l_ac].mmbv001 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_mmbv_d[l_ac].* = g_mmbv_d_t.*
            ELSE
               #寫入修改者/修改日期資訊(單身)
            
               #add-point:單身修改前
               {<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL ammm350_01_mmbv_t_mask_restore('restore_mask_o')
 
               UPDATE mmbv_t SET (mmbv001,mmbv003,mmbv004,mmbvstus) = (g_mmbv_d[l_ac].mmbv001,g_mmbv_d[l_ac].mmbv003, 
                   g_mmbv_d[l_ac].mmbv004,g_mmbv_d[l_ac].mmbvstus)
                WHERE mmbvent = g_enterprise AND
                  mmbv001 = g_mmbv_d_t.mmbv001 #項次   
                  AND mmbv003 = g_mmbv_d_t.mmbv003  
                  AND mmbv004 = g_mmbv_d_t.mmbv004  
 
                  
               #add-point:單身修改中
               {<point name="input.body.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "mmbv_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                    WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "mmbv_t" 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                  OTHERWISE
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_mmbv_d[g_detail_idx].mmbv001
               LET gs_keys_bak[1] = g_mmbv_d_t.mmbv001
               LET gs_keys[2] = g_mmbv_d[g_detail_idx].mmbv003
               LET gs_keys_bak[2] = g_mmbv_d_t.mmbv003
               LET gs_keys[3] = g_mmbv_d[g_detail_idx].mmbv004
               LET gs_keys_bak[3] = g_mmbv_d_t.mmbv004
               CALL ammm350_01_update_b('mmbv_t',gs_keys,gs_keys_bak,"'1'")
                     #資料多語言用-增/改
                     
                     #修改歷程記錄(修改)
                     LET g_log1 = util.JSON.stringify(g_mmbv_d_t)
                     LET g_log2 = util.JSON.stringify(g_mmbv_d[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                     END IF
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL ammm350_01_mmbv_t_mask_restore('restore_mask_n')
               
               #add-point:單身修改後
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            CALL ammm350_01_unlock_b("mmbv_t")
            #其他table進行unlock
            
             #add-point:單身after row
            {<point name="input.body.a_row"/>}
            #end add-point
            
         AFTER INPUT
            #add-point:單身input後
            {<point name="input.body.a_input"/>}
            #end add-point
            #錯誤訊息統整顯示
            #CALL cl_err_collect_show()
            #CALL cl_showmsg()
            
         ON ACTION controlo   
            CALL FGL_SET_ARR_CURR(g_mmbv_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_mmbv_d.getLength()+1
            
      END INPUT
      
 
      
 
      
      #add-point:before_more_input
      {<point name="input.more_input"/>}
      #end add-point
      
      BEFORE DIALOG
         #CALL cl_err_collect_init()      
         IF g_temp_idx > 0 THEN
            LET l_ac = g_temp_idx
            CALL DIALOG.setCurrentRow("s_detail1",l_ac)
            LET g_temp_idx = 1
         END IF
         #LET g_curr_diag = ui.DIALOG.getCurrent()
         #add-point:before_dialog
         {<point name="input.before_dialog"/>}
         #end add-point
         CASE g_aw
            WHEN "s_detail1"
               NEXT FIELD mmbv001
 
         END CASE
   
      ON ACTION accept
         ACCEPT DIALOG
      
      ON ACTION cancel
         LET INT_FLAG = TRUE 
         CANCEL DIALOG
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) 
              RETURNING g_fld_name,g_frm_name 
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang) 
           
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE DIALOG
   
   END DIALOG 
    
   #新增後取消
   IF l_cmd = 'a' THEN
      #當取消或無輸入資料按確定時刪除對應資料
      IF INT_FLAG OR cl_null(g_mmbv_d[g_detail_idx].mmbv001) THEN
         CALL g_mmbv_d.deleteElement(g_detail_idx)
 
      END IF
   END IF
   
   #修改後取消
   IF l_cmd = 'u' AND INT_FLAG THEN
      LET g_mmbv_d[g_detail_idx].* = g_mmbv_d_t.*
   END IF
   
   #add-point:modify段修改後
   {<point name="modify.after_input"/>}
   #end add-point
 
   CLOSE ammm350_01_bcl
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.modify_detail_chk" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ 單身輸入判定(因應modify_detail)
PRIVATE FUNCTION ammm350_01_modify_detail_chk(ps_record)
   DEFINE ps_record STRING
   DEFINE ls_return STRING
   #add-point:modify_detail_chk段define
   {<point name="modify_detail_chk.define" edit="s"/>}
   #end add-point
   #add-point:modify_detail_chk段define(客製用)
   {<point name="modify_detail_chk.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:modify_detail_chk段開始前
   {<point name="modify_detail_chk.before"/>}
   #end add-point
   
   #根據sr名稱確定該page第一個欄位的名稱
   CASE ps_record
      WHEN "s_detail1" 
         LET ls_return = "mmbv001"
 
      #add-point:modify_detail_chk段自訂page控制
      {<point name="modify_detail_chk.page_control"/>}
      #end add-point
   END CASE
    
   #add-point:modify_detail_chk段結束前
   {<point name="modify_detail_chk.after"/>}
   #end add-point
   
   RETURN ls_return
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.other_dialog" ver="1" status="" src="s" readonly="">
    <![CDATA[{<point name="other.dialog"/>}
]]>
  </section>
  <section id="ammm350_01.other_function" ver="1" status="" src="s" readonly="">
    <![CDATA[{<point name="other.function"/>}
]]>
  </section>
  <section id="ammm350_01.query" ver="9" status="" src="s" readonly="">
    <![CDATA[#+ QBE資料查詢
PRIVATE FUNCTION ammm350_01_query()
   DEFINE ls_wc      LIKE type_t.chr500
   DEFINE ls_return  STRING
   DEFINE ls_result  STRING 
   #add-point:query段define
   {<point name="query.define" edit="s"/>}
   #end add-point 
   #add-point:query段define(客製用)
   {<point name="query.define_customerization" edit="c"/>}
   #end add-point
   
   LET INT_FLAG = 0
   CLEAR FORM
   CALL g_mmbv_d.clear()
   
   LET g_qryparam.state = "c"
   
   #wc備份
   LET ls_wc = g_wc2
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      CONSTRUCT g_wc2 ON mmbv001,mmbv003,mmbv004,mmbvstus 
 
         FROM s_detail1[1].mmbv001,s_detail1[1].mmbv003,s_detail1[1].mmbv004,s_detail1[1].mmbvstus 
      
         #應用 a11 樣板自動產生(Version:2)
         #共用欄位查詢處理  
         ##----<<mmbvcrtdt>>----
 
         #----<<mmbvmoddt>>----
         
         #----<<mmbvcnfdt>>----
         
         #----<<mmbvpstdt>>----
 
 
      
                  #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv001
            #add-point:BEFORE FIELD mmbv001
            {<point name="query.b.page1.mmbv001" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv001
            
            #add-point:AFTER FIELD mmbv001
            {<point name="query.a.page1.mmbv001" />}
            #END add-point
            
 
         #Ctrlp:query.c.page1.mmbv001
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv001
            #add-point:ON ACTION controlp INFIELD mmbv001
            {<point name="query.c.page1.mmbv001" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv003
            #add-point:BEFORE FIELD mmbv003
            {<point name="query.b.page1.mmbv003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv003
            
            #add-point:AFTER FIELD mmbv003
            {<point name="query.a.page1.mmbv003" />}
            #END add-point
            
 
         #Ctrlp:query.c.page1.mmbv003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv003
            #add-point:ON ACTION controlp INFIELD mmbv003
            {<point name="query.c.page1.mmbv003" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbv004
            #add-point:BEFORE FIELD mmbv004
            {<point name="query.b.page1.mmbv004" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbv004
            
            #add-point:AFTER FIELD mmbv004
            {<point name="query.a.page1.mmbv004" />}
            #END add-point
            
 
         #Ctrlp:query.c.page1.mmbv004
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbv004
            #add-point:ON ACTION controlp INFIELD mmbv004
            {<point name="query.c.page1.mmbv004" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD mmbvstus
            #add-point:BEFORE FIELD mmbvstus
            {<point name="query.b.page1.mmbvstus" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD mmbvstus
            
            #add-point:AFTER FIELD mmbvstus
            {<point name="query.a.page1.mmbvstus" />}
            #END add-point
            
 
         #Ctrlp:query.c.page1.mmbvstus
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD mmbvstus
            #add-point:ON ACTION controlp INFIELD mmbvstus
            {<point name="query.c.page1.mmbvstus" />}
            #END add-point
 
  
         
 
      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct
            {<point name="cs.before_construct"/>}
            #end add-point 
      
      END CONSTRUCT
  
      #add-point:query段more_construct
      {<point name="query.more_construct"/>}
      #end add-point 
  
      BEFORE DIALOG 
         CALL cl_qbe_init()
         #add-point:query段before_dialog
         {<point name="query.before_dialog"/>}
         #end add-point 
      
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
      
      ON ACTION qbe_save
         CALL cl_qbe_save()
      
      ON ACTION accept
         ACCEPT DIALOG
         
      ON ACTION cancel
         LET INT_FLAG = 1
         CANCEL DIALOG
      
      #交談指令共用ACTION
      &include "common_action.4gl"
      CONTINUE DIALOG 
   END DIALOG
 
   #add-point:query段after_construct
   {<point name="query.after_construct"/>}
   #end add-point
 
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      #還原
      LET g_wc2 = ls_wc
   ELSE
      LET g_error_show = 1
      LET g_detail_idx = 1
   END IF
    
   CALL ammm350_01_b_fill(g_wc2)
   
   IF g_detail_cnt = 0 AND NOT INT_FLAG THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = -100 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
   END IF
   
   LET INT_FLAG = FALSE
   
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.set_entry_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身欄位開啟設定
PRIVATE FUNCTION ammm350_01_set_entry_b(p_cmd)                                                  
   DEFINE p_cmd   LIKE type_t.chr1         
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define" edit="s"/>}
   #end add-point     
   #add-point:set_entry_b段define(客製用)
   {<point name="set_entry_b.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:set_entry_b段control
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point                                                                   
                                                                                
END FUNCTION                                                                    
]]>
  </section>
  <section id="ammm350_01.set_no_entry_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身欄位關閉設定
PRIVATE FUNCTION ammm350_01_set_no_entry_b(p_cmd)                                               
   DEFINE p_cmd   LIKE type_t.chr1           
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define" edit="s"/>}
   #end add-point
   #add-point:set_no_entry_b段define(客製用)
   {<point name="set_no_entry_b.define_customerization" edit="c"/>}
   #end add-point   
 
   #add-point:set_no_entry_b段control
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point       
                                                                                
END FUNCTION  
]]>
  </section>
  <section id="ammm350_01.set_pk_array" ver="2" status="" src="s" readonly="">
    <![CDATA[   #應用 a51 樣板自動產生(Version:5)
#+ 給予pk_array內容
PRIVATE FUNCTION ammm350_01_set_pk_array()
   #add-point:set_pk_array段define
   {<point name="set_pk_array.define" edit="s"/>}
   #end add-point
   #add-point:set_pk_array段define
   {<point name="set_pk_array.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:set_pk_array段之前
   {<point name="set_pk_array.before"/>}
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_mmbv_d[l_ac].mmbv001
   LET g_pk_array[1].column = 'mmbv001'
   LET g_pk_array[2].values = g_mmbv_d[l_ac].mmbv003
   LET g_pk_array[2].column = 'mmbv003'
   LET g_pk_array[3].values = g_mmbv_d[l_ac].mmbv004
   LET g_pk_array[3].column = 'mmbv004'
   
   #add-point:set_pk_array段之後
   {<point name="set_pk_array.after"/>}
   #end add-point  
   
END FUNCTION
 
 
]]>
  </section>
  <section id="ammm350_01.state_change" ver="1" status="" src="s" readonly="">
    <![CDATA[   
]]>
  </section>
  <section id="ammm350_01.ui_dialog" ver="10" status="" src="s" readonly="">
    <![CDATA[#+ 功能選單 
PRIVATE FUNCTION ammm350_01_ui_dialog()
   DEFINE li_idx   LIKE type_t.num10
   DEFINE la_param  RECORD #串查用
             prog   STRING,
             param  DYNAMIC ARRAY OF STRING
                    END RECORD
   DEFINE ls_js     STRING
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define" edit="s"/>}
   #end add-point 
   #add-point:ui_dialog段define(客製用)
   {<point name="ui_dialog.define_customerization" edit="c"/>}
   #end add-point
   
   LET g_action_choice = " "  
   LET gwin_curr = ui.Window.getCurrent()
   LET gfrm_curr = gwin_curr.getForm()      
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
   
   LET g_detail_idx = 1
   
   #add-point:ui_dialog段before dialog 
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_mmbv_d.clear()
 
         LET g_wc2 = ' 1=2'
         LET g_action_choice = ""
         CALL ammm350_01_init()
      END IF
   
      CALL ammm350_01_b_fill(g_wc2)
   
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         DISPLAY ARRAY g_mmbv_d TO s_detail1.* ATTRIBUTE(COUNT=g_detail_cnt) 
      
            BEFORE DISPLAY 
               #add-point:ui_dialog段before display 
               {<point name="ui_dialog.body.before_display" mark="Y"/>}
               #end add-point
               #讓各頁籤能夠同步指到特定資料
               CALL FGL_SET_ARR_CURR(g_detail_idx)
               #add-point:ui_dialog段before display2
               {<point name="ui_dialog.body.before_display2"/>}
               #end add-point
               
            BEFORE ROW
               LET g_detail_idx = DIALOG.getCurrentRow("s_detail1")
               LET l_ac = g_detail_idx
               LET g_temp_idx = l_ac
               DISPLAY g_detail_idx TO FORMONLY.idx
               CALL cl_show_fld_cont() 
               #顯示followup圖示
               #應用 a48 樣板自動產生(Version:2)
   CALL ammm350_01_set_pk_array()
   #add-point:ON ACTION agendum
   {<point name="show.follow_pic"/>}
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
               #add-point:display array-before row
               {<point name="ui_dialog.before_row"/>}
               #end add-point
         
            #自訂ACTION(detail_show,page_1)
            
               
         END DISPLAY
      
 
      
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
    
         BEFORE DIALOG
            IF g_temp_idx > 0 THEN
               LET l_ac = g_temp_idx
               CALL DIALOG.setCurrentRow("s_detail1",l_ac)
               LET g_temp_idx = 1
            END IF
            LET g_curr_diag = ui.DIALOG.getCurrent()         
            CALL DIALOG.setSelectionMode("s_detail1", 1)
 
            #add-point:ui_dialog段before
            {<point name="ui_dialog.b_dialog"/>}
            #end add-point
            NEXT FIELD CURRENT
      
         
      
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               CALL g_export_node.clear()
               LET g_export_node[1] = base.typeInfo.create(g_mmbv_d)
               LET g_export_id[1]   = "s_detail1"
 
               #add-point:ON ACTION exporttoexcel
               {<point name="menu.exporttoexcel" />}
               #END add-point
               CALL cl_export_to_excel_getpage()
               CALL cl_export_to_excel()
            END IF
            
         ON ACTION close
            LET INT_FLAG=FALSE         
            LET g_action_choice="exit"
            CANCEL DIALOG
      
         ON ACTION exit
            LET g_action_choice="exit"
            CANCEL DIALOG
            
         
         
         #應用 a46 樣板自動產生(Version:2)
         #新增相關文件
         ON ACTION related_document
            CALL ammm350_01_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document
               {<point name="ui_dialog.dialog.related_document"/>}
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL ammm350_01_set_pk_array()
            #add-point:ON ACTION agendum
            {<point name="ui_dialog.dialog.agendum"/>}
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL ammm350_01_set_pk_array()
            #add-point:ON ACTION followup
            {<point name="ui_dialog.dialog.followup"/>}
            #END add-point
            CALL cl_user_overview_follow('')
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
      
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前
         {<point name="ui_dialog.b_exit"/>}
         #end add-point
         EXIT WHILE
      END IF
      
   END WHILE
 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.unlock_b" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 連動unlock其他單身table資料
PRIVATE FUNCTION ammm350_01_unlock_b(ps_table)
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:unlock_b段define
   {<point name="unlock_b.define" edit="s"/>}
   #end add-point  
   #add-point:unlock_b段define(客製用)
   {<point name="unlock_b.define_customerization" edit="c"/>}
   #end add-point
   
   LET ls_group = ""
   
   #IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE ammm350_01_bcl
   #END IF
   
 
   
   #add-point:unlock_b段結束前
   {<point name="unlock_b.after"/>}
   #end add-point 
 
END FUNCTION
]]>
  </section>
  <section id="ammm350_01.update_b" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 修改單身後其他table連動
PRIVATE FUNCTION ammm350_01_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   DEFINE ps_page          STRING
   DEFINE ps_table         STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define
   {<point name="update_b.define" edit="s"/>}
   #end add-point     
   #add-point:update_b段define(客製用)
   {<point name="update_b.define_customerization" edit="c"/>}
   #end add-point
   
   #比對新舊值, 判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #若key無變動, 不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
    
   #若key有變動, 則連動其他table的資料   
   #判斷是否是同一群組的table
   LET ls_group = "mmbv_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "mmbv_t" THEN
      #add-point:update_b段修改前
      {<point name="update_b.b_update" mark="Y"/>}
      #end add-point     
      UPDATE mmbv_t 
         SET (mmbv001,mmbv003,mmbv004
              ,mmbvstus) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_mmbv_d[l_ac].mmbvstus) 
         WHERE mmbv001 = ps_keys_bak[1] AND mmbv003 = ps_keys_bak[2] AND mmbv004 = ps_keys_bak[3]
      #add-point:update_b段修改中
      {<point name="update_b.m_update"/>}
      #end add-point 
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "mmbv_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "mmbv_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
         OTHERWISE
            
      END CASE
      #add-point:update_b段修改後
      {<point name="update_b.a_update"/>}
      #end add-point 
      RETURN
   END IF
   
 
   
END FUNCTION
]]>
  </section>
</add_points>
