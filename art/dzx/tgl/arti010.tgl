#+ Version..: T6-ERP-1.00.00 Build-000012
#+ 
#+ Filename...: arti010
#+ Buildtype..: 應用 i04 樣板自動產生
#+ Memo.......: 
#+ 以上段落由子樣板a00產生


{<point name="global.memo" />}
 
IMPORT os
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
{<Module define>}
 
#單頭 type 宣告
PRIVATE type type_g_rtaa_m        RECORD
       rtaa003 LIKE rtaa_t.rtaa003, 
   rtaa001 LIKE rtaa_t.rtaa001, 
   rtaal003 LIKE type_t.chr80, 
   rtaa002 LIKE rtaa_t.rtaa002, 
   rtaastus LIKE rtaa_t.rtaastus, 
   rtaamodu LIKE rtaa_t.rtaamodu, 
   rtaamodu_desc LIKE type_t.chr80, 
   rtaadate DATETIME YEAR TO SECOND, 
   rtaaoriu LIKE rtaa_t.rtaaoriu, 
   rtaaoriu_desc LIKE type_t.chr80, 
   rtaaorid LIKE rtaa_t.rtaaorid, 
   rtaaorid_desc LIKE type_t.chr80, 
   rtaauser LIKE rtaa_t.rtaauser, 
   rtaauser_desc LIKE type_t.chr80, 
   rtaadept LIKE rtaa_t.rtaadept, 
   rtaadept_desc LIKE type_t.chr80, 
   rtaabuid DATETIME YEAR TO SECOND
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_rtab_d        RECORD
       rtab002 LIKE rtab_t.rtab002, 
   rtab002_desc LIKE type_t.chr80
       END RECORD

 
#模組變數(Module Variables)
DEFINE g_rtaa_m          type_g_rtaa_m
DEFINE g_rtaa_m_t        type_g_rtaa_m
 
DEFINE g_rtaa001_t     LIKE rtaa_t.rtaa001

 
DEFINE g_rtab_d          DYNAMIC ARRAY OF type_g_rtab_d
DEFINE g_rtab_d_t        type_g_rtab_d

 
DEFINE g_browser    DYNAMIC ARRAY OF RECORD    #資料瀏覽之欄位  
       #外顯欄位
       b_show          LIKE type_t.chr100,
       #父節點id
       b_pid           LIKE type_t.chr100,
       #本身節點id
       b_id            LIKE type_t.chr100,
       #是否展開
       b_exp           LIKE type_t.chr100,
       #是否有子節點
       b_hasC          LIKE type_t.num5,
       #是否已展開
       b_isExp         LIKE type_t.num5,
       #展開值
       b_expcode       LIKE type_t.num5,
       #tree自定義欄位
          b_rtaa002 LIKE rtaa_t.rtaa002,
      b_rtaa001 LIKE rtaa_t.rtaa001,
      b_rtab002 LIKE rtab_t.rtab002
       END RECORD
      
DEFINE g_master_multi_table_t    RECORD
      rtaa001 LIKE rtaa_t.rtaa001,
      rtaal003 LIKE rtaal_t.rtaal003
      END RECORD
#無單身append欄位定義
 
DEFINE g_wc                  STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num5           
DEFINE l_ac                  LIKE type_t.num5    
DEFINE g_curr_diag           ui.Dialog                     #Current Dialog
    
DEFINE g_pagestart           LIKE type_t.num5           
DEFINE gwin_curr             ui.Window                     #Current Window
DEFINE gfrm_curr             ui.Form                       #Current Form
DEFINE g_page_action         STRING                        #page action
DEFINE g_header_hidden       LIKE type_t.num5              #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5              #隱藏工作Panel
DEFINE g_page                STRING                        #第幾頁
 
DEFINE g_detail_cnt          LIKE type_t.num5              #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num5              #單身目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num5              #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num5              #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num5              #Browser目前所在筆數(暫存用)
 
DEFINE g_searchcol           STRING                        #查詢欄位代碼
DEFINE g_searchstr           STRING                        #查詢欄位字串
DEFINE g_order               STRING                        #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num5              #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                       #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num5              #目前所在頁數
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_row_index           LIKE type_t.num5     
 
DEFINE g_wc_table1           STRING                        #第1個單身table所使用的g_wc

 
{</Module define>}
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#+ 作業開始
MAIN
   #add-point:main段define
   {<point name="main.define"/>}
   #end add-point    
    
   #定義在其他link的程式則無效
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("art","")
   
   #add-point:作業初始化
   {<point name="main.init"/>}
   #end add-point
 
   #LOCK CURSOR
   LET g_forupd_sql = "SELECT rtaa003,rtaa001,'',rtaa002,rtaastus,rtaamodu,'',rtaadate,rtaaoriu,'',rtaaorid,'',rtaauser,'',rtaadept,'',rtaabuid FROM rtaa_t WHERE rtaaent= ? AND rtaa001=? FOR UPDATE"
   LET g_forupd_sql = cl_forupd_sql(g_forupd_sql)
   DECLARE arti010_cl CURSOR FROM g_forupd_sql   #cursor lock 
   
   IF g_bgjob = "Y" THEN
 
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_arti010 WITH FORM cl_ap_formpath("art",g_prog)
 
      #程式初始化
      CALL arti010_init()
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #進入選單 Menu (='N')
      CALL arti010_ui_dialog() 
 
      #畫面關閉
      CLOSE WINDOW w_arti010
   END IF
   
   CLOSE arti010_cl
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
   
END MAIN
 
    
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION arti010_init()
   #add-point:init段define
   {<point name="init.define"/>}
   #end add-point    
   
   #add-point:畫面資料初始化
   {<point name="init.init"/>}
   #end add-point
   
   CALL arti010_default_search()
    
END FUNCTION
 
 
#+ 功能選單
PRIVATE FUNCTION arti010_ui_dialog()
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define"/>}
   #end add-point
   
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
   
   #temp CALL gfrm_curr.setElementImage("logo","logo/applogo.png") 
   #temp CALL gfrm_curr.setElementHidden("mainlayout",1)
   #temp CALL gfrm_curr.setElementHidden("worksheet",0)
   #temp LET g_main_hidden = 1
   
   WHILE TRUE 
   
      CALL arti010_browser_fill()
      
      #temp CALL cl_notice()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
         INPUT g_searchstr,g_searchcol FROM formonly.searchstr,formonly.cbo_searchcol
         
            BEFORE INPUT
            
         END INPUT
      
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
         
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
               
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL arti010_fetch('') # reload data
               #CALL cl_ui_set_browse_page_button(g_curr_diag,g_page_action,g_pagestart,g_browser_cnt)
               LET g_detail_idx = 1
               CALL arti010_ui_detailshow() #Setting the current row 
      
               CALL arti010_idx_chk()
               #NEXT FIELD rtab002
         
               ON EXPAND (g_row_index)
                  #樹展開
                  CALL arti010_browser_expand(g_row_index)
                  LET g_browser[g_row_index].b_isExp = 1
               
               ON COLLAPSE (g_row_index)
                  #樹關閉
         
         END DISPLAY
        
         DISPLAY ARRAY g_rtab_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
         
            BEFORE ROW
               CALL arti010_idx_chk()
               
            BEFORE DISPLAY
               LET g_current_page = 1
               CALL arti010_idx_chk()
               
            
               
         END DISPLAY
        

      
         BEFORE DIALOG
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_page = "first"
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            LET g_current_row = g_current_idx #目前指標
            IF g_current_idx = 0 THEN
               LET g_current_idx = 1
            END IF
            LET g_current_sw = TRUE
            
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL arti010_fetch('') # reload data
            END IF
            #CALL cl_ui_set_browse_page_button(g_curr_diag,g_page_action,g_pagestart,g_browser_cnt)
            LET g_detail_idx = 1
            CALL arti010_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL arti010_idx_chk()
            
            #NEXT FIELD rtab002
      
         #add-point:ui_dialog段define
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
      
         #Browser用Action
      
         #一般搜尋
         ON ACTION searchdata
            #取得搜尋關鍵字
            INITIALIZE g_wc TO NULL
            INITIALIZE g_wc2 TO NULL
            INITIALIZE g_wc_table1 TO NULL

            LET g_searchstr = GET_FLDBUF(searchstr)
            IF NOT arti010_browser_search("normal") THEN
               CONTINUE DIALOG
            END IF
            LET g_current_idx = 1
            IF g_browser.getLength() = 0 THEN
               CALL cl_err('',-100,1)
            END IF   
            LET g_action_choice = "searchdata"
            EXIT DIALOG
      
         #進階搜尋
         ON ACTION advancesearch    
         
         #升冪排序
         ON ACTION ascending
            INITIALIZE g_wc TO NULL
            INITIALIZE g_wc2 TO NULL
            LET g_order = "ASC"
            LET g_current_idx = 1
            LET g_searchstr = GET_FLDBUF(searchstr)
            
            IF NOT arti010_browser_search("normal") THEN
               CONTINUE DIALOG
            END IF
            IF g_browser.getLength() = 0 THEN
               CALL cl_err('',-100,1)
            END IF   
            LET g_action_choice = "ASCENDING"
            EXIT DIALOG
       
         #降冪排序
         ON ACTION descending
            INITIALIZE g_wc TO NULL
            INITIALIZE g_wc2 TO NULL
            LET g_order = "DESC"
            LET g_current_idx = 1
            LET g_searchstr = GET_FLDBUF(searchstr)
            
            IF NOT arti010_browser_search("normal") THEN
               CONTINUE DIALOG
            END IF
            IF g_browser.getLength() = 0 THEN
               CALL cl_err('',-100,1)
            END IF   
            LET g_action_choice = "DESCENDING"
            EXIT DIALOG
            
         ON ACTION statechange
            CALL arti010_statechange()
            LET g_action_choice = "statechange"
            EXIT DIALOG
      
         #簽核
         ON ACTION signature
            MENU "" ATTRIBUTES( STYLE="popup", IMAGE="tb/authorize/terminate.png" )
               ON ACTION ef_sign
               ON ACTION stop_authflow
               ON ACTION add_auth
               ON ACTION revoke_auth
               ON ACTION approve
               ON ACTION unapprove
               ON ACTION auth_opinion
               ON ACTION auth_status
               ON ACTION auth_attach
               ON ACTION authflow_designer
            END MENU
          
         #ACTION表單列
         ON ACTION first
            CALL arti010_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL arti010_idx_chk()
            
         ON ACTION previous
            CALL arti010_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL arti010_idx_chk()
            
         ON ACTION jump
            CALL arti010_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL arti010_idx_chk()
            
         ON ACTION next
            CALL arti010_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL arti010_idx_chk()
            
         ON ACTION last
            CALL arti010_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL arti010_idx_chk()
            
         ON ACTION close
            LET INT_FLAG=FALSE        
            LET g_action_choice = "exit"
            EXIT WHILE
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT WHILE
      
         ON ACTION mainhidden       #主頁摺疊
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementImage("mainhidden","small/arr-r.png")
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementImage("mainhidden","small/arr-l.png")
               LET g_main_hidden = 1
            END IF
       
         ON ACTION worksheethidden   #瀏覽頁折疊
            IF g_worksheet_hidden THEN
               CALL gfrm_curr.setElementHidden("worksheet",0)
               CALL gfrm_curr.setElementImage("worksheethidden","small/arr-l.png")
               LET g_worksheet_hidden = 0
               NEXT FIELD b_rtaa001
            ELSE
               CALL gfrm_curr.setElementHidden("worksheet",1)
               CALL gfrm_curr.setElementImage("worksheethidden","small/arr-r.png")
               LET g_worksheet_hidden = 1
            END IF
       
         ON ACTION controls      #單頭摺疊，可利用hot key "Ctrl-s"開啟/關閉單頭
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("worksheet_detail",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("worksheet_detail",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
      
         

         ON ACTION delete

            LET g_action_choice="delete"
            IF cl_chk_act_auth() THEN 
               CALL arti010_delete()
               #add-point:ON ACTION delete
               {<point name="menu.delete" />}
               #END add-point
                EXIT DIALOG
            END IF


         ON ACTION insert

            LET g_action_choice="insert"
            IF cl_chk_act_auth() THEN 
               CALL arti010_insert()
               #add-point:ON ACTION insert
               {<point name="menu.insert" />}
               #END add-point
                EXIT DIALOG
            END IF


         ON ACTION modify

            LET g_action_choice="modify"
            IF cl_chk_act_auth() THEN 
               CALL arti010_modify()
               #add-point:ON ACTION modify
               {<point name="menu.modify" />}
               #END add-point
                EXIT DIALOG
            END IF


         ON ACTION output

            LET g_action_choice="output"
            IF cl_chk_act_auth() THEN 
               #add-point:ON ACTION output
               {<point name="menu.output" />}
               #END add-point
                EXIT DIALOG
            END IF


         ON ACTION query

            LET g_action_choice="query"
            IF cl_chk_act_auth() THEN 
               CALL arti010_query()
               #add-point:ON ACTION query
               {<point name="menu.query" />}
               #END add-point
            END IF


         ON ACTION reproduce

            LET g_action_choice="reproduce"
            IF cl_chk_act_auth() THEN 
               CALL arti010_reproduce()
               #add-point:ON ACTION reproduce
               {<point name="menu.reproduce" />}
               #END add-point
                EXIT DIALOG
            END IF

         
         #主選單用ACTION
         &include "main_menu.4gl"
         
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
            
      END DIALOG
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
   
END FUNCTION
 
#+ 瀏覽頁簽資料搜尋
PRIVATE FUNCTION arti010_browser_search(p_type)
   {<Local define>}
   DEFINE p_type LIKE type_t.chr10
   {</Local define>}
   #add-point:browser_search段define
   {<point name="browser_search.define"/>}
   #end add-point    
   
   #若無輸入關鍵字則查找出所有資料
   IF NOT cl_null(g_searchstr) AND g_searchcol='0' THEN
      CALL cl_err("searchcol","std-00005",0)
      RETURN FALSE 
   END IF 
   
   IF NOT cl_null(g_searchstr) THEN
      LET g_wc = " lower(", g_searchcol, ") LIKE '%", g_searchstr, "%'"
      LET g_wc = g_wc.toLowerCase()
   ELSE
      LET g_wc = " 1=1 "
   END IF         
   
   #若為排序搜尋則添加以下條件
   IF cl_null(g_searchcol) OR g_searchcol = "0" THEN
      LET g_wc = g_wc, " ORDER BY rtaa001"
   ELSE
      LET g_wc = g_wc, " ORDER BY ", g_searchcol
   END IF 
 
   CALL arti010_browser_fill()
   CALL ui.Interface.refresh()
   RETURN TRUE
 
END FUNCTION
 
 
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION arti010_browser_fill()
   {<Local define>}
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   DEFINE l_searchcol       STRING
   DEFINE l_type            STRING
   {</Local define>}
   #add-point:browser_fill段define
   {<point name="browser_fill.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_rtaa_m.* TO NULL
   CALL g_rtab_d.clear()        

   CALL g_browser.clear()
   
   IF NOT cl_null(g_wc2) AND g_wc2 <> " 1=1" THEN
      LET g_wc = g_wc, " AND ", g_wc2
      LET g_sql = " SELECT UNIQUE rtaa002,rtaa001,'' FROM rtaa_t ",
                  " INNER JOIN rtab_t ON rtab001 = rtaa001 ",
                  " WHERE rtaaent = '" ||g_enterprise|| "' AND ", g_wc
                   , " AND rtaa002 = ?"
   ELSE 
      LET g_sql = " SELECT UNIQUE rtaa002,rtaa001,'' FROM rtaa_t ",
                  " WHERE rtaaent = '" ||g_enterprise|| "' AND ", g_wc   
                   , " AND rtaa002 = ?"
   END IF   
   
   LET g_sql = g_sql, " ORDER BY rtaa001 "
                
   PREPARE browse_pre FROM g_sql
   DECLARE browse_cur CURSOR FOR browse_pre
   
   IF NOT cl_null(g_wc2) AND g_wc2 <> " 1=1" THEN
      LET g_sql= " SELECT UNIQUE rtaa002 FROM rtaa_t ",
                 " INNER JOIN rtab_t ON rtab001 = rtaa001 ",
                 " WHERE rtaaent = '" ||g_enterprise|| "' AND ", g_wc
   ELSE 
      LET g_sql= " SELECT UNIQUE rtaa002 FROM rtaa_t ",
                 " WHERE rtaaent = '" ||g_enterprise|| "' AND ", g_wc   
   END IF   
   LET g_sql = g_sql, " ORDER BY rtaa002 "
   
   PREPARE type_pre FROM g_sql
   DECLARE type_cur CURSOR FOR type_pre
 
   CALL g_browser.clear()
   LET g_cnt = 1
   LET l_type = "0"
   
   FOREACH type_cur INTO g_browser[g_cnt].b_rtaa002
      LET g_browser[g_cnt].b_show  = '(',g_browser[g_cnt].b_rtaa002,')'
      LET g_browser[g_cnt].b_id    = g_cnt USING "<<<"
      LET g_browser[g_cnt].b_exp   = TRUE
      LET g_browser[g_cnt].b_hasC  = TRUE
      LET g_browser[g_cnt].b_isExp = 1
      LET l_type = g_cnt USING "<<<"
      OPEN browse_cur USING g_browser[g_cnt].b_rtaa002
      LET g_cnt = g_cnt + 1
 
      FOREACH browse_cur INTO g_browser[g_cnt].b_rtaa002,g_browser[g_cnt].b_rtaa001,g_browser[g_cnt].b_rtab002
      
         LET g_browser[g_cnt].b_pid  = l_type
         LET g_browser[g_cnt].b_id   = l_type, '.', g_cnt USING "<<<"
         LET g_browser[g_cnt].b_exp  = FALSE
         LET g_browser[g_cnt].b_hasC = arti010_chk_hasC(g_cnt)
         CALL arti010_desc_show(g_cnt)
      
         IF SQLCA.sqlcode THEN
            CALL cl_err('foreach:',SQLCA.sqlcode,1)
            EXIT FOREACH
         END IF
      
         
      
         #add-point:browser_fill段reference
         {<point name="browser_fill.reference"/>}
         #end add-point
      
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_rec THEN
            CALL cl_err( '', 9035, 0 )
            EXIT FOREACH
         END IF
      END FOREACH
   
   END FOREACH
 
   CALL g_browser.deleteElement(g_cnt)
   LET g_header_cnt = g_browser.getLength()
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
   LET g_browser_cnt = g_browser.getLength()
   
   CLOSE browse_cur
   CLOSE type_cur
   FREE browse_pre
   FREE type_pre
   
END FUNCTION
 
 
#+ 單頭資料重新顯示
PRIVATE FUNCTION arti010_ui_headershow()
   #add-point:ui_headershow段define
   {<point name="ui_headershow.define"/>}
   #end add-point    
   
   LET g_rtaa_m.rtaa001 = g_browser[g_current_idx].b_rtaa001   

    SELECT UNIQUE rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid
 INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid
 FROM rtaa_t
 WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001
   CALL arti010_show()
   
END FUNCTION
 
 
#+ 單身資料重新顯示
PRIVATE FUNCTION arti010_ui_detailshow()
   #add-point:ui_detailshow段define
   {<point name="ui_detailshow.define"/>}
   #end add-point    
   
   #add-point:ui_detailshow段before
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      

   END IF
   
   #add-point:ui_detailshow段after
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION
 
 
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION arti010_ui_browser_refresh()
   {<Local define>}
   DEFINE l_i  LIKE type_t.num10
   {</Local define>}
   #add-point:ui_browser_refresh段define
   {<point name="ui_browser_refresh.define"/>}
   #end add-point    
   
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_rtaa001 = g_rtaa_m.rtaa001 

         THEN  
         CALL g_browser.deleteElement(l_i)
         LET g_header_cnt = g_header_cnt - 1
      END IF
   END FOR
 
   LET g_browser_cnt = g_browser_cnt - 1
   IF g_current_row > g_browser_cnt THEN        #確定browse 筆數指在同一筆
      LET g_current_row = g_browser_cnt
   END IF
 
   #DISPLAY g_browser_cnt TO FORMONLY.b_count    #總筆數的顯示
   
END FUNCTION
 
 
#+ QBE資料查詢
PRIVATE FUNCTION arti010_construct()
 
   {<Local define>}
   DEFINE lc_qbe_sn   LIKE type_t.num10
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   {</Local define>}
   #add-point:cs段define
   {<point name="cs.define"/>}
   #end add-point    
 
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_rtaa_m.* TO NULL
   CALL g_rtab_d.clear()        

   
   LET g_current_idx = 1
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc_table1 TO NULL

    
   LET g_qryparam.state = 'c'
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid
 
         BEFORE CONSTRUCT
            CALL cl_qbe_init()
            
         #此段落由子樣板a11產生
         #----<<rtaamodu>>----
         ON ACTION controlp INFIELD rtaamodu
            CALL q_common('rtaa_t','rtaamodu',TRUE,FALSE,g_rtaa_m.rtaamodu) RETURNING ls_return
            DISPLAY ls_return TO rtaamodu
            NEXT FIELD rtaamodu

         #----<<rtaaoriu>>----
         ON ACTION controlp INFIELD rtaaoriu
            CALL q_common('rtaa_t','rtaaoriu',TRUE,FALSE,g_rtaa_m.rtaaoriu) RETURNING ls_return
            DISPLAY ls_return TO rtaaoriu
            NEXT FIELD rtaaoriu  

         #----<<rtaauser>>----
         ON ACTION controlp INFIELD rtaauser
            CALL q_common('rtaa_t','rtaauser',TRUE,FALSE,g_rtaa_m.rtaauser) RETURNING ls_return
            DISPLAY ls_return TO rtaauser
            NEXT FIELD rtaauser

         #----<<rtaaorid>>----
         ON ACTION controlp INFIELD rtaaorid
            CALL q_common('rtaa_t','rtaaorid',TRUE,FALSE,g_rtaa_m.rtaaorid) RETURNING ls_return
            DISPLAY ls_return TO rtaaorid
            NEXT FIELD rtaaorid

         #----<<rtaadept>>----
         ON ACTION controlp INFIELD rtaadept
            CALL q_common('rtaa_t','rtaadept',TRUE,FALSE,g_rtaa_m.rtaadept) RETURNING ls_return
            DISPLAY ls_return TO rtaadept
            NEXT FIELD rtaadept

         #----<<rtaabuid>>----
         AFTER FIELD rtaabuid
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)

         #----<<rtaadate>>----
         AFTER FIELD rtaadate
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)


            
         #---------------------------<  Master  >---------------------------
         #----<<rtaa003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaa003
            #add-point:BEFORE FIELD rtaa003
            {<point name="construct.b.rtaa003" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa003
            
            #add-point:AFTER FIELD rtaa003
            {<point name="construct.a.rtaa003" />}
            #END add-point
            

         #Ctrlp:construct.c.rtaa003
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa003
            #add-point:ON ACTION controlp INFIELD rtaa003
            {<point name="construct.c.rtaa003" />}
            #END add-point

         #----<<rtaa001>>----
         #Ctrlp:construct.c.rtaa001
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa001
            #add-point:ON ACTION controlp INFIELD rtaa001
            {<point name="construct.c.rtaa001" />}
            #END add-point

         #此段落由子樣板a01產生
         BEFORE FIELD rtaa001
            #add-point:BEFORE FIELD rtaa001
            {<point name="construct.b.rtaa001" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa001
            
            #add-point:AFTER FIELD rtaa001
            {<point name="construct.a.rtaa001" />}
            #END add-point
            

         #----<<rtaal003>>----
         #----<<rtaa002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaa002
            #add-point:BEFORE FIELD rtaa002
            {<point name="construct.b.rtaa002" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa002
            
            #add-point:AFTER FIELD rtaa002
            {<point name="construct.a.rtaa002" />}
            #END add-point
            

         #Ctrlp:construct.c.rtaa002
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa002
            #add-point:ON ACTION controlp INFIELD rtaa002
            {<point name="construct.c.rtaa002" />}
            #END add-point

         #----<<rtaastus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaastus
            #add-point:BEFORE FIELD rtaastus
            {<point name="construct.b.rtaastus" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaastus
            
            #add-point:AFTER FIELD rtaastus
            {<point name="construct.a.rtaastus" />}
            #END add-point
            

         #Ctrlp:construct.c.rtaastus
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaastus
            #add-point:ON ACTION controlp INFIELD rtaastus
            {<point name="construct.c.rtaastus" />}
            #END add-point

         #----<<rtaamodu>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaamodu
            #add-point:BEFORE FIELD rtaamodu
            {<point name="construct.b.rtaamodu" />}
            #END add-point

         #----<<rtaadate>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaadate
            #add-point:BEFORE FIELD rtaadate
            {<point name="construct.b.rtaadate" />}
            #END add-point

         #----<<rtaaoriu>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaaoriu
            #add-point:BEFORE FIELD rtaaoriu
            {<point name="construct.b.rtaaoriu" />}
            #END add-point

         #----<<rtaaorid>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaaorid
            #add-point:BEFORE FIELD rtaaorid
            {<point name="construct.b.rtaaorid" />}
            #END add-point

         #----<<rtaauser>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaauser
            #add-point:BEFORE FIELD rtaauser
            {<point name="construct.b.rtaauser" />}
            #END add-point

         #----<<rtaadept>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaadept
            #add-point:BEFORE FIELD rtaadept
            {<point name="construct.b.rtaadept" />}
            #END add-point

         #----<<rtaabuid>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaabuid
            #add-point:BEFORE FIELD rtaabuid
            {<point name="construct.b.rtaabuid" />}
            #END add-point


         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc_table1 ON rtab002
           FROM s_detail1[1].rtab002
                      
         BEFORE CONSTRUCT
            CALL cl_qbe_display_condition(lc_qbe_sn)
         
       #---------------------<  Detail: page1  >---------------------
         #----<<rtab002>>----
         #Ctrlp:construct.c.page1.rtab002
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtab002
            #add-point:ON ACTION controlp INFIELD rtab002
            {<point name="construct.c.page1.rtab002" />}
            #END add-point

         #此段落由子樣板a01產生
         BEFORE FIELD rtab002
            #add-point:BEFORE FIELD rtab002
            {<point name="construct.b.page1.rtab002" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtab002
            
            #add-point:AFTER FIELD rtab002
            {<point name="construct.a.page1.rtab002" />}
            #END add-point
            

   
       
      END CONSTRUCT
      

      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令)
      {<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         #add-point:cs段b_dialog
         {<point name="cs.b_dialog"/>}
         #end add-point  
 
      ON ACTION qbe_select     #條件查詢
         CALL cl_qbe_list() RETURNING lc_qbe_sn
         CALL cl_qbe_display_condition(lc_qbe_sn)
 
      ON ACTION qbe_save       #條件儲存
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc_table1

 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
 
 
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION arti010_query()
   #add-point:query段define
   {<point name="query.define"/>}
   #end add-point    
   
   LET INT_FLAG = 0
   LET g_detail_cnt = 0
   LET g_current_idx = 0
   LET g_current_row = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_rtab_d.clear()

   DISPLAY ' ' TO FORMONLY.idx
   DISPLAY ' ' TO FORMONLY.cnt
   DISPLAY ' ' TO FORMONLY.b_index
   DISPLAY ' ' TO FORMONLY.b_count   
   DISPLAY ' ' TO FORMONLY.h_index
   DISPLAY ' ' TO FORMONLY.h_count
   
   CALL arti010_construct()
 
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      INITIALIZE g_rtaa_m.* TO NULL
      LET g_wc = " 1=1"
      LET g_wc2 = " 1=1"
      RETURN
   END IF
   
   CALL arti010_browser_fill()
         
   IF g_browser.getLength() = 0 THEN
      CALL cl_err('',-100,1)
   END IF   
 
END FUNCTION
 
 
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION arti010_fetch(p_flag)
   {<Local define>}
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   DEFINE ls_chk     STRING
   {</Local define>}
   #add-point:fetch段define
   {<point name="fetch.define"/>}
   #end add-point    
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
   
   LET ls_chk = g_browser[g_current_idx].b_id 
   IF ls_chk.getIndexOf('.',1) = 0 THEN
      INITIALIZE g_rtaa_m.* TO NULL
      INITIALIZE g_rtab_d TO NULL
      CALL cl_set_act_visible("statechange,modify,delete,reproduce", FALSE)
      DISPLAY '' TO FORMONLY.b_index
      DISPLAY '' TO FORMONLY.h_index
      RETURN
   END IF
   
   CASE p_flag
      WHEN 'F' LET g_current_idx = 1
      WHEN 'L' LET g_current_idx = g_header_cnt        
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         
         LET g_no_ask = FALSE  
   END CASE 
 
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   LET g_detail_idx = 1
   IF g_detail_cnt > 0 THEN
      LET g_detail_idx = 1
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY ' ' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   
   #代表沒有資料
   IF g_current_idx = 0 THEN
      RETURN
   END IF
   
   #超出範圍
   IF g_current_idx > g_browser.getLength() THEN
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_rtaa_m.rtaa001 = g_browser[g_current_idx].b_rtaa001

   
   #重讀DB,因TEMP有不被更新特性
    SELECT UNIQUE rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid
 INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid
 FROM rtaa_t
 WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001
   IF SQLCA.sqlcode THEN
      CALL cl_err("rtaa_t",SQLCA.sqlcode,1)
      INITIALIZE g_rtaa_m.* TO NULL
      RETURN
   END IF
   
   #若無資料則關閉相關功能
   #此段落由子樣板a20產生
      IF g_rtaa_m.rtaastus = "Y" THEN
         CALL cl_set_act_visible("statechange,modify,delete,reproduce", TRUE)
      ELSE
         CALL cl_set_act_visible("statechange,reproduce", TRUE)
         CALL cl_set_act_visible("modify,delete", FALSE)
      END IF


   
   
   
   #重新顯示   
   CALL arti010_show()
 
END FUNCTION
 
 
#+ 資料新增
PRIVATE FUNCTION arti010_insert()
   #add-point:insert段define
   {<point name="insert.define"/>}
   #end add-point    
   
   CLEAR FORM                    #清畫面欄位內容
   CALL g_rtab_d.clear()    #清除陣列

 
   INITIALIZE g_rtaa_m.* LIKE rtaa_t.*             #DEFAULT 設定
   LET g_rtaa001_t = NULL

 
   WHILE TRUE
      #公用欄位給值
      #此段落由子樣板a14產生    
      LET g_rtaa_m.rtaauser = g_user
      LET g_rtaa_m.rtaadept = g_dept
      LET g_rtaa_m.rtaabuid = cl_get_current()
      LET g_rtaa_m.rtaaoriu = g_user 
      LET g_rtaa_m.rtaaorid = g_dept 
      LET g_rtaa_m.rtaamodu = g_user
      LET g_rtaa_m.rtaadate = cl_get_current()
      LET g_rtaa_m.rtaastus = "Y"


 
      #append欄位給值
      
     
      #單頭預設值
      
  
      #add-point:單頭預設值
      {<point name="insert.default"/>}
      #end add-point 
     
      CALL arti010_input("a")
      
      #add-point:單頭輸入後
      {<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_rtaa_m.* = g_rtaa_m_t.*
         CALL arti010_show()
         CALL cl_err('',9001,0)
         EXIT WHILE
      END IF
      
      CALL g_rtab_d.clear()

 
      LET g_rec_b = 0
      EXIT WHILE
        
   END WHILE
   
END FUNCTION
 
 
#+ 資料修改
PRIVATE FUNCTION arti010_modify()
   {<Local define>}
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:modify段define
   {<point name="modify.define"/>}
   #end add-point    
   
   IF g_rtaa_m.rtaa001 IS NULL

   THEN
      CALL cl_err("","std-00003",0)
      RETURN
   END IF
   
    SELECT UNIQUE rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid
 INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid
 FROM rtaa_t
 WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001
 
   ERROR ""
  
   LET g_rtaa001_t = g_rtaa_m.rtaa001

   BEGIN WORK
   
   OPEN arti010_cl USING g_enterprise,g_rtaa_m.rtaa001

   IF STATUS THEN
      CALL cl_err("OPEN arti010_cl:", STATUS, 1)
      CLOSE arti010_cl
      ROLLBACK WORK
      RETURN
   END IF
 
   #鎖住將被更改或取消的資料
   FETCH arti010_cl INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaamodu_desc,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaoriu_desc,g_rtaa_m.rtaaorid,g_rtaa_m.rtaaorid_desc,g_rtaa_m.rtaauser,g_rtaa_m.rtaauser_desc,g_rtaa_m.rtaadept,g_rtaa_m.rtaadept_desc,g_rtaa_m.rtaabuid
 
   #資料被他人LOCK, 或是sql執行時出現錯誤
   IF SQLCA.sqlcode THEN
      CALL cl_err(g_rtaa_m.rtaa001,SQLCA.sqlcode,0)
      CLOSE arti010_cl
      ROLLBACK WORK
      RETURN
   END IF
   
   
 
   CALL arti010_show()
   WHILE TRUE
      LET g_rtaa001_t = g_rtaa_m.rtaa001

      
      #寫入修改者/修改日期資訊
      LET g_rtaa_m.rtaamodu = g_user 
LET g_rtaa_m.rtaadate = cl_get_current()

 
      #add-point:modify段修改前
      {<point name="modify.before_input"/>}
      #end add-point
      
      CALL arti010_input("u")     #欄位更改
 
      #add-point:modify段修改後
      {<point name="modify.after_input"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_rtaa_m.* = g_rtaa_m_t.*
         CALL arti010_show()
         CALL cl_err('',9001,0)
         EXIT WHILE
      END IF
      
      #若單頭key欄位有變更
      IF g_rtaa_m.rtaa001 != g_rtaa001_t 

      THEN
         BEGIN WORK
         
         #add-point:單身fk修改前
         {<point name="modify.body.b_fk_update"/>}
         #end add-point
         
         #更新單身key值
         UPDATE rtab_t SET rtab001 = g_rtaa_m.rtaa001

          WHERE rtabent = g_enterprise AND rtab001 = g_rtaa001_t

         IF SQLCA.sqlcode THEN
             CALL cl_err("",SQLCA.sqlcode,1) 
             ROLLBACK WORK
             CONTINUE WHILE
         END IF
         

         
         #add-point:單身fk修改後
         {<point name="modify.body.a_fk_update"/>}
         #end add-point
         
         #UPDATE 多語言table key值
         

         COMMIT WORK
      END IF
      
      EXIT WHILE
   END WHILE
 
   #修改歷程記錄
   IF NOT cl_used_modified_record(g_rtaa_m.rtaa001,g_site) THEN 
      ROLLBACK WORK
   END IF
 
   CLOSE arti010_cl
   COMMIT WORK
 
   #流程通知預埋點-U
   CALL cl_flow_notify(g_rtaa_m.rtaa001,'U')
 
END FUNCTION   
 
 
#+ 資料輸入
PRIVATE FUNCTION arti010_input(p_cmd)
   {<Local define>}
   DEFINE  p_cmd           LIKE type_t.chr1
   DEFINE  l_cmd           LIKE type_t.chr1
   DEFINE  l_ac_t          LIKE type_t.num5                #未取消的ARRAY CNT 
   DEFINE  l_n             LIKE type_t.num5                #檢查重複用  
   DEFINE  l_cnt           LIKE type_t.num5                #檢查重複用  
   DEFINE  l_lock_sw       LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert  LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete  LIKE type_t.num5                #可刪除否  
   DEFINE  l_count         LIKE type_t.num5
   DEFINE  l_i             LIKE type_t.num5
   DEFINE  l_insert        BOOLEAN
   DEFINE  ls_return       STRING
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:input段define
   {<point name="input.define"/>}
   #end add-point    
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   LET g_forupd_sql = "SELECT rtab002,'' FROM rtab_t WHERE rtabent=? AND rtab001=? AND rtab002=? FOR UPDATE"
   LET g_forupd_sql = cl_forupd_sql(g_forupd_sql)
   DECLARE arti010_bcl CURSOR FROM g_forupd_sql
   

 
   LET l_allow_insert = cl_detail_input_auth("insert")
   LET l_allow_delete = cl_detail_input_auth("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL arti010_set_entry(p_cmd)
   CALL arti010_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
   
      #單頭段
      INPUT BY NAME g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION
         

         ON ACTION update_item

            LET g_action_choice="update_item"
            IF cl_chk_act_auth() THEN 
               #add-point:ON ACTION update_item
               {<point name="input.master_input.update_item" />}
               #END add-point
            END IF

     
         BEFORE INPUT
            LET g_master_multi_table_t.rtaa001 = g_rtaa_m.rtaa001
LET g_master_multi_table_t.rtaal003 = g_rtaa_m.rtaal003

 
         #---------------------------<  Master  >---------------------------
         #----<<rtaa003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaa003
            #add-point:BEFORE FIELD rtaa003
            {<point name="input.b.rtaa003" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa003
            
            #add-point:AFTER FIELD rtaa003
            {<point name="input.a.rtaa003" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaa003
            #add-point:ON CHANGE rtaa003
            {<point name="input.g.rtaa003" />}
            #END add-point

         #----<<rtaa001>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaa001
            #add-point:BEFORE FIELD rtaa001
            {<point name="input.b.rtaa001" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa001
            
            #add-point:AFTER FIELD rtaa001
            {<point name="input.a.rtaa001" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaa001
            #add-point:ON CHANGE rtaa001
            {<point name="input.g.rtaa001" />}
            #END add-point

         #----<<rtaal003>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaal003
            #add-point:BEFORE FIELD rtaal003
            {<point name="input.b.rtaal003" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaal003
            
            #add-point:AFTER FIELD rtaal003
            {<point name="input.a.rtaal003" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaal003
            #add-point:ON CHANGE rtaal003
            {<point name="input.g.rtaal003" />}
            #END add-point

         #----<<rtaa002>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaa002
            #add-point:BEFORE FIELD rtaa002
            {<point name="input.b.rtaa002" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaa002
            
            #add-point:AFTER FIELD rtaa002
            {<point name="input.a.rtaa002" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaa002
            #add-point:ON CHANGE rtaa002
            {<point name="input.g.rtaa002" />}
            #END add-point

         #----<<rtaastus>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaastus
            #add-point:BEFORE FIELD rtaastus
            {<point name="input.b.rtaastus" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaastus
            
            #add-point:AFTER FIELD rtaastus
            {<point name="input.a.rtaastus" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaastus
            #add-point:ON CHANGE rtaastus
            {<point name="input.g.rtaastus" />}
            #END add-point

         #----<<rtaamodu>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaamodu
            #add-point:BEFORE FIELD rtaamodu
            {<point name="input.b.rtaamodu" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaamodu
            
            #add-point:AFTER FIELD rtaamodu
            {<point name="input.a.rtaamodu" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaamodu
            #add-point:ON CHANGE rtaamodu
            {<point name="input.g.rtaamodu" />}
            #END add-point

         #----<<rtaadate>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaadate
            #add-point:BEFORE FIELD rtaadate
            {<point name="input.b.rtaadate" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaadate
            
            #add-point:AFTER FIELD rtaadate
            {<point name="input.a.rtaadate" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaadate
            #add-point:ON CHANGE rtaadate
            {<point name="input.g.rtaadate" />}
            #END add-point

         #----<<rtaaoriu>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaaoriu
            #add-point:BEFORE FIELD rtaaoriu
            {<point name="input.b.rtaaoriu" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaaoriu
            
            #add-point:AFTER FIELD rtaaoriu
            {<point name="input.a.rtaaoriu" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaaoriu
            #add-point:ON CHANGE rtaaoriu
            {<point name="input.g.rtaaoriu" />}
            #END add-point

         #----<<rtaaorid>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaaorid
            #add-point:BEFORE FIELD rtaaorid
            {<point name="input.b.rtaaorid" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaaorid
            
            #add-point:AFTER FIELD rtaaorid
            {<point name="input.a.rtaaorid" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaaorid
            #add-point:ON CHANGE rtaaorid
            {<point name="input.g.rtaaorid" />}
            #END add-point

         #----<<rtaauser>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaauser
            #add-point:BEFORE FIELD rtaauser
            {<point name="input.b.rtaauser" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaauser
            
            #add-point:AFTER FIELD rtaauser
            {<point name="input.a.rtaauser" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaauser
            #add-point:ON CHANGE rtaauser
            {<point name="input.g.rtaauser" />}
            #END add-point

         #----<<rtaadept>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaadept
            #add-point:BEFORE FIELD rtaadept
            {<point name="input.b.rtaadept" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaadept
            
            #add-point:AFTER FIELD rtaadept
            {<point name="input.a.rtaadept" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaadept
            #add-point:ON CHANGE rtaadept
            {<point name="input.g.rtaadept" />}
            #END add-point

         #----<<rtaabuid>>----
         #此段落由子樣板a01產生
         BEFORE FIELD rtaabuid
            #add-point:BEFORE FIELD rtaabuid
            {<point name="input.b.rtaabuid" />}
            #END add-point

         #此段落由子樣板a02產生
         AFTER FIELD rtaabuid
            
            #add-point:AFTER FIELD rtaabuid
            {<point name="input.a.rtaabuid" />}
            #END add-point
            

         #此段落由子樣板a04產生
         ON CHANGE rtaabuid
            #add-point:ON CHANGE rtaabuid
            {<point name="input.g.rtaabuid" />}
            #END add-point

 #欄位檢查
         #---------------------------<  Master  >---------------------------
         #----<<rtaa003>>----
         #Ctrlp:input.c.rtaa003
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa003
            #add-point:ON ACTION controlp INFIELD rtaa003
            {<point name="input.c.rtaa003" />}
            #END add-point

         #----<<rtaa001>>----
         #Ctrlp:input.c.rtaa001
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa001
            #add-point:ON ACTION controlp INFIELD rtaa001
            {<point name="input.c.rtaa001" />}
            #END add-point

         #----<<rtaal003>>----
         #Ctrlp:input.c.rtaal003
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaal003
            #add-point:ON ACTION controlp INFIELD rtaal003
            {<point name="input.c.rtaal003" />}
            #END add-point

         #----<<rtaa002>>----
         #Ctrlp:input.c.rtaa002
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaa002
            #add-point:ON ACTION controlp INFIELD rtaa002
            {<point name="input.c.rtaa002" />}
            #END add-point

         #----<<rtaastus>>----
         #Ctrlp:input.c.rtaastus
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaastus
            #add-point:ON ACTION controlp INFIELD rtaastus
            {<point name="input.c.rtaastus" />}
            #END add-point

         #----<<rtaamodu>>----
         #Ctrlp:input.c.rtaamodu
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaamodu
            #add-point:ON ACTION controlp INFIELD rtaamodu
            {<point name="input.c.rtaamodu" />}
            #END add-point

         #----<<rtaadate>>----
         #Ctrlp:input.c.rtaadate
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaadate
            #add-point:ON ACTION controlp INFIELD rtaadate
            {<point name="input.c.rtaadate" />}
            #END add-point

         #----<<rtaaoriu>>----
         #Ctrlp:input.c.rtaaoriu
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaaoriu
            #add-point:ON ACTION controlp INFIELD rtaaoriu
            {<point name="input.c.rtaaoriu" />}
            #END add-point

         #----<<rtaaorid>>----
         #Ctrlp:input.c.rtaaorid
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaaorid
            #add-point:ON ACTION controlp INFIELD rtaaorid
            {<point name="input.c.rtaaorid" />}
            #END add-point

         #----<<rtaauser>>----
         #Ctrlp:input.c.rtaauser
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaauser
            #add-point:ON ACTION controlp INFIELD rtaauser
            {<point name="input.c.rtaauser" />}
            #END add-point

         #----<<rtaadept>>----
         #Ctrlp:input.c.rtaadept
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaadept
            #add-point:ON ACTION controlp INFIELD rtaadept
            {<point name="input.c.rtaadept" />}
            #END add-point

         #----<<rtaabuid>>----
         #Ctrlp:input.c.rtaabuid
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtaabuid
            #add-point:ON ACTION controlp INFIELD rtaabuid
            {<point name="input.c.rtaabuid" />}
            #END add-point

 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
                
            CALL cl_showmsg()      #錯誤訊息統整顯示
            DISPLAY BY NAME g_rtaa_m.rtaa001             

 
            IF p_cmd <> 'u' THEN
               BEGIN WORK
               LET l_count = 1  
               
               SELECT COUNT(*) INTO l_count FROM rtaa_t
                WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001

               IF l_count = 0 THEN
                  
                  #add-point:單頭新增前
                  {<point name="input.head.b_insert"/>}
                  #end add-point
                  
                  INSERT INTO rtaa_t (rtaaent,rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid)
                  VALUES (g_enterprise,g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid) # DISK WRITE
                  IF SQLCA.sqlcode THEN
                     CALL cl_err("g_rtaa_m",SQLCA.sqlcode,1)  
                     CONTINUE DIALOG
                  END IF
                  
                           INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         IF g_rtaa_m.rtaa001 = g_master_multi_table_t.rtaa001 AND
         g_rtaa_m.rtaal003 = g_master_multi_table_t.rtaal003 THEN
         ELSE 
            LET l_var_keys[01] = g_rtaa_m.rtaa001
            LET l_field_keys[01] = 'rtaal001'
            LET l_var_keys_bak[01] = g_master_multi_table_t.rtaa001
            LET l_var_keys[02] = g_dlang
            LET l_field_keys[02] = 'rtaal002'
            LET l_var_keys_bak[02] = g_dlang
            LET l_vars[01] = g_rtaa_m.rtaal003
            LET l_fields[01] = 'rtaal003'
            LET l_vars[02] = g_enterprise 
            LET l_fields[02] = 'rtaalent'
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'rtaal_t')
         END IF 

                  COMMIT WORK
                  
                  LET p_cmd = 'u'
 
                  #add-point:單頭新增後
                  {<point name="input.head.a_insert"/>}
                  #end add-point
               ELSE
                  CALL cl_err( g_rtaa_m.rtaa001,'!', 0 )
                  ROLLBACK WORK
                  NEXT FIELD rtaa001
               END IF 
            ELSE
            
               #add-point:單頭修改前
               {<point name="input.head.b_update"/>}
               #end add-point
               
               UPDATE rtaa_t SET (rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid) = (g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid)
                WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa001_t

               IF SQLCA.sqlcode THEN
                  CALL cl_err("g_rtaa_m",SQLCA.sqlcode,1)  
                  ROLLBACK WORK
               ELSE
                  
                           INITIALIZE l_var_keys TO NULL 
         INITIALIZE l_field_keys TO NULL 
         INITIALIZE l_vars TO NULL 
         INITIALIZE l_fields TO NULL 
         IF g_rtaa_m.rtaa001 = g_master_multi_table_t.rtaa001 AND
         g_rtaa_m.rtaal003 = g_master_multi_table_t.rtaal003 THEN
         ELSE 
            LET l_var_keys[01] = g_rtaa_m.rtaa001
            LET l_field_keys[01] = 'rtaal001'
            LET l_var_keys_bak[01] = g_master_multi_table_t.rtaa001
            LET l_var_keys[02] = g_dlang
            LET l_field_keys[02] = 'rtaal002'
            LET l_var_keys_bak[02] = g_dlang
            LET l_vars[01] = g_rtaa_m.rtaal003
            LET l_fields[01] = 'rtaal003'
            LET l_vars[02] = g_enterprise 
            LET l_fields[02] = 'rtaalent'
            CALL cl_multitable(l_var_keys,l_field_keys,l_vars,l_fields,l_var_keys_bak,'rtaal_t')
         END IF 

                  COMMIT WORK
               END IF
               
               #add-point:單頭修改後
               {<point name="input.head.a_update"/>}
               #end add-point
               
            END IF
           #controlp
      END INPUT
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_rtab_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert,
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION
         
         
         BEFORE INPUT
            CALL arti010_b_fill()
            LET g_rec_b = g_rtab_d.getLength()
         
         BEFORE ROW
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_n TO FORMONLY.idx
         
            BEGIN WORK
            OPEN arti010_cl USING g_enterprise,g_rtaa_m.rtaa001

            IF STATUS THEN
               CALL cl_err("OPEN arti010_cl:", STATUS, 1)
               CLOSE arti010_cl
               ROLLBACK WORK
               RETURN
            END IF
                   
            #FETCH arti010_cl INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaamodu_desc,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaoriu_desc,g_rtaa_m.rtaaorid,g_rtaa_m.rtaaorid_desc,g_rtaa_m.rtaauser,g_rtaa_m.rtaauser_desc,g_rtaa_m.rtaadept,g_rtaa_m.rtaadept_desc,g_rtaa_m.rtaabuid # 鎖住將被更改或取消的資料
            #IF SQLCA.sqlcode THEN
            #   CALL cl_err(g_rtaa_m.rtaa001,SQLCA.sqlcode,0)
            #   CLOSE arti010_cl
            #   ROLLBACK WORK
            #   RETURN
            #END IF
            
            LET g_rec_b = g_rtab_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND NOT cl_null(g_rtab_d[l_ac].rtab002) 

            THEN
               LET l_cmd='u'
               LET g_rtab_d_t.* = g_rtab_d[l_ac].*  #BACKUP
               IF NOT arti010_lock_b("rtab_t") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH arti010_bcl INTO g_rtab_d[l_ac].rtab002,g_rtab_d[l_ac].rtab002_desc
                  IF SQLCA.sqlcode THEN
                     CALL cl_err(g_rtab_d_t.rtab002,SQLCA.sqlcode,1)
                     LET l_lock_sw = "Y"
                  END IF
                  CALL arti010_show()
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
            #其他table進行lock
            
        
         BEFORE INSERT
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_rtab_d[l_ac].* TO NULL 
            
            LET g_rtab_d_t.* = g_rtab_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL arti010_set_entry_b()
            CALL arti010_set_no_entry_b()
            #add-point:modify段before insert
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            LET l_count = 1  
            SELECT COUNT(*) INTO l_count FROM rtab_t 
             WHERE rtabent = g_enterprise AND rtab001 = g_rtaa_m.rtaa001

               AND g_rtab_d[l_ac].rtab002 = rtab002

                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前
               {<point name="input.body.b_insert"/>}
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_rtaa_m.rtaa001
               LET gs_keys[2] = g_rtab_d[l_ac].rtab002
               CALL arti010_insert_b('rtab_t',gs_keys)
                           
               #add-point:單身新增後
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               CALL cl_err('INSERT',"std-00006",1)
               INITIALIZE g_rtab_d[l_ac].* TO NULL
               ROLLBACK WORK
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               CALL cl_err("rtab_t",SQLCA.sqlcode,1)  
               ROLLBACK WORK                    
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL arti010_b_fill()
               #資料多語言用-增/改
               
               COMMIT WORK
               #add-point:input段-after_insert
               {<point name="input.body.a_insert"/>}
               #end add-point
               ERROR 'INSERT O.K'
               LET g_rec_b=g_rec_b+1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF NOT cl_null(g_rtab_d[l_ac].rtab002) 

               THEN
               
               #add-point:單身刪除前
               {<point name="input.body.b_delete"/>}
               #end add-point        
               
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               DELETE FROM rtab_t
                WHERE rtabent = g_enterprise AND rtab001 = g_rtaa_m.rtaa001 AND

                      rtab002 = g_rtab_d_t.rtab002

               IF SQLCA.sqlcode THEN
                  CALL cl_err("rtab_t",SQLCA.sqlcode,1)
                  ROLLBACK WORK
                  CANCEL DELETE   
               ELSE
                  LET g_rec_b = g_rec_b-1
                  
                  COMMIT WORK
               END IF 
               CLOSE arti010_bcl
               LET l_count = g_rtab_d.getLength()
            END IF 
            #add-point:單身刪除後
            {<point name="input.body.a_delete"/>}
            #end add-point
            
                           INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_rtaa_m.rtaa001
               LET gs_keys[2] = g_rtab_d[l_ac].rtab002

              
         AFTER DELETE 
            #add-point:單身刪除後2
            {<point name="input.body.after_delete"/>}
            #end add-point
                           CALL arti010_delete_b('rtab_t',gs_keys)
 
         #---------------------<  Detail: page1  >---------------------
         #----<<rtab002>>----
         #此段落由子樣板a02產生
         AFTER FIELD rtab002
            
            #add-point:AFTER FIELD rtab002
            {<point name="input.a.page1.rtab002" />}
            #END add-point
            

         #此段落由子樣板a01產生
         BEFORE FIELD rtab002
            #add-point:BEFORE FIELD rtab002
            {<point name="input.b.page1.rtab002" />}
            #END add-point

         #此段落由子樣板a04產生
         ON CHANGE rtab002
            #add-point:ON CHANGE rtab002
            {<point name="input.g.page1.rtab002" />}
            #END add-point


         #---------------------<  Detail: page1  >---------------------
         #----<<rtab002>>----
         #Ctrlp:input.c.page1.rtab002
#此段落由子樣板a03產生
         ON ACTION controlp INFIELD rtab002
            #add-point:ON ACTION controlp INFIELD rtab002
            {<point name="input.c.page1.rtab002" />}
            #END add-point


 
         ON ROW CHANGE
            IF INT_FLAG THEN
               CALL cl_err('',9001,0)
               LET INT_FLAG = 0
               LET g_rtab_d[l_ac].* = g_rtab_d_t.*
               CLOSE arti010_bcl
               ROLLBACK WORK
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               CALL cl_err(g_rtab_d[l_ac].rtab002,-263,1)
               LET g_rtab_d[l_ac].* = g_rtab_d_t.*
            ELSE
            
               #add-point:單身修改前
               {<point name="input.body.b_update"/>}
               #end add-point
      
               UPDATE rtab_t SET (rtab001,rtab002) = (g_rtaa_m.rtaa001,g_rtab_d[l_ac].rtab002)
                WHERE rtabent = g_enterprise AND rtab001 = g_rtaa_m.rtaa001 

                  AND rtab002 = g_rtab_d_t.rtab002 #項次   

               IF SQLCA.sqlcode THEN
                  CALL cl_err("rtab_t",SQLCA.sqlcode,1)   
                  LET g_rtab_d[l_ac].* = g_rtab_d_t.*
               ELSE
                                 INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_rtaa_m.rtaa001
               LET gs_keys_bak[1] = g_rtaa001_t 
               LET gs_keys[2] = g_rtab_d[l_ac].rtab002
               LET gs_keys_bak[2] = g_rtab_d_t.rtab002
               CALL arti010_update_b('rtab_t',gs_keys,gs_keys_bak)
                  #資料多語言用-增/改
                  
               END IF
               
               #add-point:單身修改後
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            CALL arti010_unlock_b("rtab_t")
            COMMIT WORK
            #其他table進行unlock
            
              
      END INPUT
      

   
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         CALL cl_set_head_visible("","AUTO")
 
      ON ACTION accept
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         LET g_action_choice=""
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET g_action_choice="exit"
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET g_action_choice="exit"
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
         
   END DIALOG
   
   CLOSE arti010_bcl
    
   #add-point:input段after input 
   {<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION
 
 
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION arti010_show()
   {<Local define>}
   DEFINE l_ac_t    LIKE type_t.num5
   DEFINE l_sql     STRING
   {</Local define>}
   #add-point:show段define
   {<point name="show.define"/>}
   #end add-point  
 
   #add-point:show段之前
   {<point name="show.before"/>}
   #end add-point
   
   LET g_rtaa_m_t.* = g_rtaa_m.*      #保存單頭舊值
  
   DISPLAY BY NAME g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaamodu_desc,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaoriu_desc,g_rtaa_m.rtaaorid,g_rtaa_m.rtaaorid_desc,g_rtaa_m.rtaauser,g_rtaa_m.rtaauser_desc,g_rtaa_m.rtaadept,g_rtaa_m.rtaadept_desc,g_rtaa_m.rtaabuid
    
   #顯示狀態(stus)圖片
         #此段落由子樣板a21產生
      CASE g_rtaa_m.rtaastus
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/valid.png")


      END CASE


  
   CALL arti010_b_fill()                 #單身
     
   #帶出公用欄位reference值
   #此段落由子樣板a12產生
      #帶出預設欄位之值
      LET g_rtaa_m.rtaamodu_desc = cl_get_username(g_rtaa_m.rtaamodu)
      LET g_rtaa_m.rtaaoriu_desc = cl_get_username(g_rtaa_m.rtaaoriu)
      LET g_rtaa_m.rtaauser_desc = cl_get_username(g_rtaa_m.rtaauser)
      LET g_rtaa_m.rtaadept_desc = cl_get_deptname(g_rtaa_m.rtaadept)
      LET g_rtaa_m.rtaaorid_desc = cl_get_deptname(g_rtaa_m.rtaaorid)


 
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference
   {<point name="show.head.reference"/>}
   #end add-point
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_rtab_d.getLength()
      #add-point:show段單身reference
      {<point name="show.body.reference"/>}
      #end add-point
   END FOR

   
    
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   #add-point:show段之後
   {<point name="show.after"/>}
   #end add-point
   
END FUNCTION
 
 
#+ 資料複製
PRIVATE FUNCTION arti010_reproduce()
   {<Local define>}
   DEFINE l_newno     LIKE rtaa_t.rtaa001 
   DEFINE l_oldno     LIKE rtaa_t.rtaa001 

   DEFINE l_master    RECORD LIKE rtaa_t.*
   DEFINE l_detail    RECORD LIKE rtab_t.*
   DEFINE l_cnt       LIKE type_t.num5
   {</Local define>}
   #add-point:reproduce段define
   {<point name="reproduce.define"/>}
   #end add-point   
 
   IF g_rtaa_m.rtaa001 IS NULL

   THEN
      CALL cl_err("","std-00003",0)
      RETURN
   END IF
    
   CALL arti010_set_entry('a')
   CALL arti010_set_no_entry('a')
 
   CALL cl_set_head_visible("","YES")
 
   INPUT l_newno   # FROM

    FROM rtaa001 

      BEFORE INPUT
 
      AFTER FIELD rtaa001 
         IF l_newno IS NULL THEN
            NEXT FIELD CURRENT
         END IF
         #add-point:AFTER FIELD rtaa001
         {<point name="reproduce.a.rtaa001" />}
         #end add-point
         

             
      AFTER INPUT
         #確定該key值是否有重複定義
         LET l_cnt = 0
         SELECT COUNT(*) INTO l_cnt FROM rtaa_t 
          WHERE rtaaent = g_enterprise AND rtaa001 = l_newno

         IF l_cnt > 0 THEN
            CALL cl_err("Reproduce","std-00006",1)
            #NEXT FIELD rtaa001 
         END IF
 
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE INPUT
   END INPUT
   
   IF INT_FLAG OR l_newno IS NULL THEN
      LET INT_FLAG = 0
      RETURN
   END IF
   
   BEGIN WORK
 
   SELECT * INTO l_master.* FROM rtaa_t 
    WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001

   LET l_master.rtaa001 = l_newno

   
   #此段落由子樣板a13產生
      LET l_master.rtaauser = g_user
      LET l_master.rtaadept = g_dept
      LET l_master.rtaabuid = cl_get_current()
      LET l_master.rtaaoriu = g_user 
      LET l_master.rtaaorid = g_dept 
      LET l_master.rtaamodu = g_user
      LET l_master.rtaadate = cl_get_current()
      #LET l_master.rtaastus = "Y"


   
   #add-point:單頭複製前
   {<point name="reproduce.head.b_insert"/>}
   #end add-point
   
   INSERT INTO rtaa_t VALUES (l_master.*) #複製單頭        
   IF SQLCA.sqlcode THEN
      CALL cl_err("rtaa_t",SQLCA.sqlcode,1)
      ROLLBACK WORK
      RETURN
   END IF
   
   #add-point:單頭複製後
   {<point name="reproduce.head.a_insert"/>}
   #end add-point
   
   LET g_sql = "SELECT * FROM rtab_t WHERE rtabent = '" ||g_enterprise|| "' AND ",
               " rtab001 = '",g_rtaa_m.rtaa001,"'"

   DECLARE arti010_reproduce CURSOR FROM g_sql
 
   FOREACH arti010_reproduce INTO l_detail.*
      LET l_detail.rtab001 = l_newno

  
      #add-point:單身複製前
      {<point name="reproduce.body.b_insert"/>}
      #end add-point
      
      INSERT INTO rtab_t VALUES (l_detail.*) #複製單身
      IF SQLCA.sqlcode THEN
         CALL cl_err('Insert error!',SQLCA.sqlcode,1)
         ROLLBACK WORK
         RETURN
      END IF
 
      #add-point:單身複製後
      {<point name="reproduce.body.a_insert"/>}
      #end add-point
      
   END FOREACH
   
   COMMIT WORK
   ERROR 'ROW(',l_newno,') O.K'
   LET l_oldno = g_rtaa_m.rtaa001

   
   SELECT rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid FROM rtaa_t 
    WHERE rtaaent = g_enterprise AND rtaa001 = l_newno

      
   CALL arti010_show()
   LET g_rtaa_m.rtaa001 = l_oldno

   
   SELECT rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid FROM rtaa_t 
    WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001

   CALL arti010_show()
 
   DISPLAY BY NAME g_rtaa_m.rtaa001

   
   CLOSE arti010_reproduce
   
END FUNCTION
 
#+ 資料刪除
PRIVATE FUNCTION arti010_delete()
   {<Local define>}
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:delete段define
   {<point name="delete.define"/>}
   #end add-point     
   
   IF g_rtaa_m.rtaa001 IS NULL

   THEN
      CALL cl_err("","std-00003",0)
      RETURN
   END IF
 
    SELECT UNIQUE rtaa003,rtaa001,rtaa002,rtaastus,rtaamodu,rtaadate,rtaaoriu,rtaaorid,rtaauser,rtaadept,rtaabuid
 INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaorid,g_rtaa_m.rtaauser,g_rtaa_m.rtaadept,g_rtaa_m.rtaabuid
 FROM rtaa_t
 WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001
   BEGIN WORK
   
   LET g_master_multi_table_t.rtaa001 = g_rtaa_m.rtaa001
LET g_master_multi_table_t.rtaal003 = g_rtaa_m.rtaal003

 
   OPEN arti010_cl USING g_enterprise,g_rtaa_m.rtaa001

   IF STATUS THEN
      CALL cl_err("OPEN arti010_cl:", STATUS, 1)
      CLOSE arti010_cl
      ROLLBACK WORK
      RETURN
   END IF
 
   FETCH arti010_cl INTO g_rtaa_m.rtaa003,g_rtaa_m.rtaa001,g_rtaa_m.rtaal003,g_rtaa_m.rtaa002,g_rtaa_m.rtaastus,g_rtaa_m.rtaamodu,g_rtaa_m.rtaamodu_desc,g_rtaa_m.rtaadate,g_rtaa_m.rtaaoriu,g_rtaa_m.rtaaoriu_desc,g_rtaa_m.rtaaorid,g_rtaa_m.rtaaorid_desc,g_rtaa_m.rtaauser,g_rtaa_m.rtaauser_desc,g_rtaa_m.rtaadept,g_rtaa_m.rtaadept_desc,g_rtaa_m.rtaabuid              # 鎖住將被更改或取消的資料
   IF SQLCA.sqlcode THEN
      CALL cl_err(g_rtaa_m.rtaa001,SQLCA.sqlcode,0)          #資料被他人LOCK
      ROLLBACK WORK
      RETURN
   END IF
 
   CALL arti010_show()
 
   #IF NOT cl_ask_delete() THEN             #確認一下
   IF cl_ask_del_master() THEN              #確認一下
      INITIALIZE g_doc.* TO NULL         
      LET g_doc.column1 = "rtaa001"       
      LET g_doc.value1 = g_rtaa_m.rtaa001     
      CALL cl_del_doc()   
      
      #add-point:單頭刪除前
      {<point name="delete.head.b_delete"/>}
      #end add-point
  
      #資料備份
      LET g_rtaa001_t = g_rtaa_m.rtaa001

      
      DELETE FROM rtaa_t
       WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001

      
      IF SQLCA.sqlcode THEN
         CALL cl_err(g_rtaa_m.rtaa001,SQLCA.sqlcode,0) 
         ROLLBACK WORK
         RETURN
      END IF
      
      #add-point:單頭刪除後
      {<point name="delete.head.a_delete"/>}
      #end add-point
  
      
      INITIALIZE l_var_keys_bak TO NULL 
   INITIALIZE l_field_keys   TO NULL 
   LET l_field_keys[01] = 'rtaal001'
   LET l_var_keys_bak[01] = g_master_multi_table_t.rtaa001
   LET l_field_keys[02] = 'rtaal002'
   LET l_var_keys_bak[02] = g_dlang
   CALL cl_multitable_delete(l_field_keys,l_var_keys_bak,'rtaal_t')

      #add-point:單身刪除前
      {<point name="delete.body.b_delete"/>}
      #end add-point
      
      DELETE FROM rtab_t
       WHERE rtabent = g_enterprise AND rtab001 = g_rtaa_m.rtaa001

 
      IF SQLCA.sqlcode THEN
         CALL cl_err("rtab_t",SQLCA.sqlcode,0) 
         ROLLBACK WORK
         RETURN
      END IF                                                           
                                                               

                                                               
      #add-point:單身刪除後
      {<point name="delete.body.a_delete"/>}
      #end add-point
      
      CLEAR FORM
      CALL g_rtab_d.clear() 

     
      CALL arti010_ui_browser_refresh()  
      CALL arti010_ui_headershow()  
      CALL arti010_ui_detailshow()
       
      IF g_browser_cnt > 0 THEN 
         CALL arti010_fetch('P')
      ELSE
         LET g_wc = " 1=1"
         CALL arti010_browser_fill()
      END IF
       
   END IF
 
   CLOSE arti010_cl
   COMMIT WORK
 
   #流程通知預埋點-D
   CALL cl_flow_notify(g_rtaa_m.rtaa001,'D')
    
END FUNCTION
 
 
#+ 單身陣列填充
PRIVATE FUNCTION arti010_b_fill()
   {<Local define>}
   DEFINE p_wc2      STRING
   {</Local define>}
   #add-point:b_fill段define
   {<point name="b_fill.define"/>}
   #end add-point     
 
   CALL g_rtab_d.clear()    #g_rtab_d 單頭及單身 

 
   LET g_sql = "SELECT rtab002,'' FROM rtab_t",    
               "",
               " WHERE rtab001=? AND rtabent=?"
 
   IF NOT cl_null(g_wc_table1) THEN
      LET g_sql = g_sql CLIPPED, " AND ", g_wc_table1 CLIPPED
   END IF
 
   LET g_sql = g_sql, " ORDER BY rtab_t.rtab002"
 
   PREPARE arti010_pb FROM g_sql
   DECLARE b_fill_cs CURSOR FOR arti010_pb
 
   LET g_cnt = l_ac
   LET l_ac = 1
 
   OPEN b_fill_cs USING g_enterprise,g_rtaa_m.rtaa001

                                            
   FOREACH b_fill_cs INTO g_rtab_d[l_ac].rtab002,g_rtab_d[l_ac].rtab002_desc
      IF SQLCA.sqlcode THEN
         CALL cl_err("FOREACH:",SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF
     
      #add-point:b_fill段資料填充
      {<point name="b_fill.fill"/>}
      #end add-point
 
      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         CALL cl_err( '', 9035, 0 )
         EXIT FOREACH
      END IF
      
   END FOREACH
   

   
   CALL g_rtab_d.deleteElement(g_rtab_d.getLength())

 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   CLOSE b_fill_cs

   
   FREE arti010_pb

   
END FUNCTION
 
 
#+ 單身db資料刪除
PRIVATE FUNCTION arti010_before_delete()
   #add-point:before_delete段define
   {<point name="before_delete.define"/>}
   #end add-point 
   
   DELETE FROM rtab_t
    WHERE rtabent = g_enterprise AND rtab001 = g_rtaa_m.rtaa001 AND

          rtab002 = g_rtab_d_t.rtab002

   IF SQLCA.sqlcode THEN
      CALL cl_err("rtab_t",SQLCA.sqlcode,1)
      RETURN FALSE 
   END IF
 
   LET g_rec_b = g_rec_b-1
 
   RETURN TRUE
    
END FUNCTION
 
#+ 刪除單身後其他table連動
PRIVATE FUNCTION arti010_delete_b(ps_table,ps_keys_bak)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:delete_b段define
   {<point name="delete_b.define"/>}
   #end add-point     
 
   #判斷是否是同一群組的table
   LET ls_group = "rtab_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 AND
      ps_table <> "rtab_t" THEN
      DELETE FROM rtab_t
       WHERE rtabent = g_enterprise AND
         rtab001 = ps_keys_bak[1] AND rtab002 = ps_keys_bak[2]
 
      IF SQLCA.sqlcode THEN
         CALL cl_err("",SQLCA.sqlcode,0)
      END IF
   END IF
   

   
END FUNCTION
 
#+ 新增單身後其他table連動
PRIVATE FUNCTION arti010_insert_b(ps_table,ps_keys)
   {<Local define>}
   DEFINE ps_table    STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   {</Local define>}
   #add-point:insert_b段define
   {<point name="insert_b.define"/>}
   #end add-point     
   
   #判斷是否是同一群組的table
   LET ls_group = "rtab_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      INSERT INTO rtab_t
                  (rtabent,
                   rtab001,
                   rtab002
                   ) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   )
      IF SQLCA.sqlcode THEN
         CALL cl_err("rtab_t",SQLCA.sqlcode,0)
      END IF
   END IF
   

   
END FUNCTION
 
    
#+ 修改單身後其他table連動
PRIVATE FUNCTION arti010_update_b(ps_table,ps_keys,ps_keys_bak)
   {<Local define>}
   DEFINE ps_table         STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num5 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   {</Local define>}
   #add-point:update_b段define
   {<point name="update_b.define"/>}
   #end add-point     
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "rtab_t,"
   IF ls_group.getIndexOf(ps_table,1) > 0 AND
      ps_table <> "rtab_t" THEN
      UPDATE rtab_t 
         SET (rtab001,
              rtab002
              ) 
              = 
             (ps_keys[1],ps_keys[2]
              ) 
         WHERE rtab001 = ps_keys_bak[1] AND rtab002 = ps_keys_bak[2]
 
      IF SQLCA.sqlcode THEN
         CALL cl_err("",SQLCA.sqlcode,0)
      ELSE
         
      END IF
      
   END IF
   

   
END FUNCTION
 
#+ 連動lock其他單身table資料
PRIVATE FUNCTION arti010_lock_b(ps_table)
 
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:lock_b段define
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #先刷新資料
   CALL arti010_b_fill()
   
   #鎖定整組table
   #LET ls_group = ""
   #僅鎖定自身table
   LET ls_group = "rtab_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN arti010_bcl USING g_enterprise,
                                       g_rtaa_m.rtaa001,g_rtab_d[l_ac].rtab002
                                       
      IF SQLCA.sqlcode THEN
         CALL cl_err("arti010_bcl",SQLCA.sqlcode,1)
         RETURN FALSE
      END IF
   
   END IF
                                    

   
   RETURN TRUE
 
END FUNCTION
 
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION arti010_unlock_b(ps_table)
 
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:unlock_b段define
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   LET ls_group = ""
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE arti010_bcl
   END IF
   

 
END FUNCTION
 
 
#+ 單頭欄位開啟設定
PRIVATE FUNCTION arti010_set_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1  
   {</Local define>}
   #add-point:set_entry段define
   {<point name="set_entry.define"/>}
   #end add-point       
 
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("rtaa001",TRUE)
   END IF
   
END FUNCTION
 
 
#+ 單頭欄位關閉設定
PRIVATE FUNCTION arti010_set_no_entry(p_cmd)
   {<Local define>}
   DEFINE p_cmd   LIKE type_t.chr1   
   {</Local define>}
   #add-point:set_no_entry段define
   {<point name="set_no_entry.define"/>}
   #end add-point     
 
   IF p_cmd = 'u' THEN
      CALL cl_set_comp_entry("rtaa001",FALSE)
   END IF
   
END FUNCTION
 
 
#+ 單身欄位開啟設定
PRIVATE FUNCTION arti010_set_entry_b()
   #add-point:set_entry_b段define
   {<point name="set_entry_b.define"/>}
   #end add-point   
   #add-point:set_entry_b段
   {<point name="set_entry_b.define"/>}
   #end add-point  
END FUNCTION
 
 
#+ 單身欄位關閉設定
PRIVATE FUNCTION arti010_set_no_entry_b()
   #add-point:set_no_entry_b段define
   {<point name="set_no_entry_b.define"/>}
   #end add-point    
   #add-point:set_no_entry_b段
   {<point name="set_no_entry_b.define"/>}
   #end add-point  
END FUNCTION
 
 
#+ 外部參數搜尋, 施工中
PRIVATE FUNCTION arti010_default_search()
   {<Local define>}
   DEFINE li_idx  LIKE type_t.num5
   DEFINE li_cnt  LIKE type_t.num5
   DEFINE ls_wc   STRING
   {</Local define>}
   #add-point:default_search段define
   {<point name="default_search.define"/>}
   #end add-point  
   
   #add-point:default_search段開始前
   {<point name="default_search.before"/>}
   #end add-point  
 
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   LET g_wc = " 1=1"
   
   RETURN
   
   IF NOT cl_null(g_argv[1]) THEN
      LET ls_wc = ls_wc, " rtaa001 = '", g_argv[1], "' AND "
   END IF
 

   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
   ELSE
      IF cl_null(g_wc) THEN
         LET g_wc = " 1=1"
      END IF
   END IF
   
   #add-point:default_search段結束前
   {<point name="default_search.after"/>}
   #end add-point 
 
END FUNCTION
 
#+ 此段落由子樣板a09產生
#+ 確認碼變更
PRIVATE FUNCTION arti010_statechange()
   {<Local define>}
   DEFINE lc_state LIKE type_t.chr5
   {</Local define>}
   #add-point:statechange段define
   {<point name="statechange.define"/>}
   #end add-point  
   
   #add-point:statechange段開始前
   {<point name="statechange.before"/>}
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊

   IF g_rtaa_m.rtaa001 IS NULL

   THEN
      CALL cl_err("","std-00003",0)
      RETURN
   END IF

   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         CASE g_rtaa_m.rtaastus
            WHEN "N"
               HIDE OPTION "invalid"
            WHEN "Y"
               HIDE OPTION "valid"


         END CASE
         
      ON ACTION invalid
         LET lc_state = "N"
         EXIT MENU
      ON ACTION valid
         LET lc_state = "Y"
         EXIT MENU


   END MENU
   
   IF (lc_state <> "N" 
      AND lc_state <> "Y"


      ) OR 
      cl_null(lc_state) THEN
      RETURN
   END IF
   
   #add-point:stus修改前
   {<point name="statechange.b_update"/>}
   #end add-point
      
   UPDATE rtaa_t SET rtaastus = lc_state 
    WHERE rtaaent = g_enterprise AND rtaa001 = g_rtaa_m.rtaa001

  
   IF SQLCA.sqlcode THEN
      CALL cl_err("",SQLCA.sqlcode,0)
   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "authstatus/invalid.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "authstatus/valid.png")


      END CASE
   END IF

   #add-point:stus修改後
   {<point name="statechange.a_update"/>}
   #end add-point

   #add-point:statechange段結束前
   {<point name="statechange.after"/>}
   #end add-point  

END FUNCTION


 
#+ 單身筆數變更
PRIVATE FUNCTION arti010_idx_chk()
   #add-point:idx_chk段define
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_rtab_d.getLength() THEN
         LET g_detail_idx = g_rtab_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_rtab_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_rtab_d.getLength() TO FORMONLY.cnt
   END IF
   

 
END FUNCTION
 
#+ cursor定義
PRIVATE FUNCTION arti010_cursor_define()
   DEFINE ls_sql      STRING
   DEFINE ls_sql_cnt  STRING
 
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET ls_sql = " SELECT UNIQUE rtaa001 ",

                   " FROM rtaa_t ",
                          " ",
                          " LEFT JOIN rtab_t ON rtabent = rtaaent AND rtaa001 = rtab001 ",

                          " LEFT JOIN rtaal_t ON rtaa001 = rtaal001 AND rtaal002 = '",g_lang,"' ",
                          " ",
                   " WHERE ",g_wc, " AND ", g_wc2
      LET ls_sql_cnt = " SELECT COUNT(*) ",
                       " FROM rtaa_t ",
                              " ",
                              " LEFT JOIN rtab_t ON rtabent = rtaaent AND rtaa001 = rtab001 ",

                              " LEFT JOIN rtaal_t ON rtaa001 = rtaal001 AND rtaal002 = '",g_lang,"' ",
                              " ",
                       " WHERE ",g_wc, " AND ", g_wc2
   ELSE
      #單身未輸入搜尋條件
      LET ls_sql = " SELECT UNIQUE rtaa001 ",

                   " FROM rtaa_t ", 
                         " ",
                         " LEFT JOIN rtaal_t ON rtaa001 = rtaal001 AND rtaal002 = '",g_lang,"' ",
                   "WHERE ",g_wc CLIPPED
      LET ls_sql_cnt = " SELECT COUNT(*) ",
                       " FROM rtaa_t ", 
                             " ",
                             " LEFT JOIN rtaal_t ON rtaa001 = rtaal001 AND rtaal002 = '",g_lang,"' ",
                       "WHERE ",g_wc CLIPPED
   END IF
   
 
   PREPARE arti010_prepare FROM ls_sql
   IF SQLCA.sqlcode THEN
      CALL cl_err('prepare:',SQLCA.sqlcode,0) 
   END IF
   DECLARE arti010_cs SCROLL CURSOR WITH HOLD FOR arti010_prepare
   
   PREPARE arti010_prepare_cnt FROM ls_sql_cnt
   EXECUTE arti010_prepare_cnt INTO g_browser_cnt
   
   FREE arti010_prepare_cnt
   
   
END FUNCTION
 
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION arti010_cursor_fetch(p_flag)
   DEFINE p_flag   LIKE type_t.chr1
   DEFINE ls_msg   STRING
 
   CASE p_flag        #從 open cs 取得
      WHEN 'N' 
         FETCH NEXT     arti010_cs INTO g_rtaa_m.rtaa001
      WHEN 'P' 
         FETCH PREVIOUS arti010_cs INTO g_rtaa_m.rtaa001
      WHEN 'F' 
         FETCH FIRST    arti010_cs INTO g_rtaa_m.rtaa001
      WHEN 'L' 
         FETCH LAST     arti010_cs INTO g_rtaa_m.rtaa001
      WHEN '/'
         IF (NOT g_no_ask) THEN
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
 
            PROMPT ls_msg CLIPPED,': ' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl"
            END PROMPT
             
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               EXIT CASE
            END IF
         END IF
         FETCH ABSOLUTE g_jump arti010_cs INTO g_rtaa_m.rtaa001
         LET g_no_ask = FALSE
   END CASE
 
   IF SQLCA.sqlcode THEN
      CALL cl_err('',SQLCA.sqlcode,0)
      INITIALIZE g_rtaa_m.* TO NULL
      RETURN
   ELSE
      CASE p_flag
         WHEN 'F' LET g_current_idx = 1
         WHEN 'P' LET g_current_idx = g_current_idx - 1
         WHEN 'N' LET g_current_idx = g_current_idx + 1
         WHEN 'L' LET g_current_idx = g_browser_cnt
         WHEN '/' LET g_current_idx = g_jump
      END CASE
 
      CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
   END IF
 
   #重讀DB,因TEMP有不被更新特性
   
   IF SQLCA.sqlcode THEN
      CALL cl_err("rtaa_t",SQLCA.sqlcode,1)
   END IF
   
   CALL arti010_show()                      # 重新顯示
    
END FUNCTION
   
#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
 
#+ Tree子節點展開
PRIVATE FUNCTION arti010_browser_expand(p_id)
   {<Local define>}
   DEFINE p_id          LIKE type_t.num10
   DEFINE l_id          LIKE type_t.num10
   DEFINE l_cnt         LIKE type_t.num10
   DEFINE l_keyvalue    LIKE type_t.chr50
   DEFINE l_typevalue   LIKE type_t.chr50
   DEFINE l_type        LIKE type_t.chr50
   DEFINE l_sql         LIKE type_t.chr500
   DEFINE ls_source     LIKE type_t.chr500
   DEFINE ls_exp_code   LIKE type_t.chr500
   DEFINE l_return      LIKE type_t.num5
   {</Local define>}
   #add-point:browser_expand段define
   {<point name="browser_expand.define"/>}
   #end add-point
   
   #若已經展開
   IF g_browser[p_id].b_isExp = 1 THEN
      RETURN
   END IF
   
   LET l_keyvalue = g_browser[p_id].b_rtaa001
   LET l_typevalue = g_browser[p_id].b_rtaa002
   
   LET l_sql = " SELECT UNIQUE '','','','FALSE','','','',rtaa002,rtab002,''",
               " FROM   rtab_t ",
               " INNER JOIN rtaa_t ON rtab002 = rtaa001 ",
               " WHERE  rtab001 = '", l_keyvalue,"' ",
               " AND   = '", l_typevalue,"'", 
               " ORDER BY rtab002"
 
   PREPARE tree_expand FROM l_sql
   DECLARE tree_ex_cur CURSOR FOR tree_expand
  
   LET l_id = p_id + 1
   CALL g_browser.insertElement(l_id)
   LET l_cnt = 1
   FOREACH tree_ex_cur INTO g_browser[l_id].*
      #pid=父節點id
      LET g_browser[l_id].b_pid  = g_browser[p_id].b_id
      #id=本身節點id(採流水號遞增)
      LET g_browser[l_id].b_id   = g_browser[p_id].b_id||"."||l_cnt
      #hasC=確認該節點是否有子孫
      #LET g_browser[l_id].b_rtaa001 = g_browser[l_id].b_rtaa001 CLIPPED
      CALL arti010_desc_show(l_id)
      LET g_browser[l_id].b_hasC = arti010_chk_hasC(l_id)
      LET l_id = l_id + 1
      CALL g_browser.insertElement(l_id)
      LET l_cnt = l_cnt + 1
      
      LET l_return = TRUE
   END FOREACH
   
   #刪除空資料
   CALL g_browser.deleteElement(l_id)
   
   CLOSE tree_ex_cur
   FREE tree_expand
   
END FUNCTION
 
#+ 確認該節點是否有子節點
PRIVATE FUNCTION arti010_chk_hasC(pi_id)
   {<Local define>}
   DEFINE pi_id    INTEGER
   DEFINE li_cnt   INTEGER
   {</Local define>}
   #add-point:chk_hasC段define
   {<point name="chk_hasC.define"/>}
   #end add-point
   
   LET li_cnt = 0
    
    SELECT COUNT(*) INTO li_cnt FROM rtab_t
    INNER JOIN rtaa_t ON rtab002 = rtaa001
    WHERE rtabent = g_enterprise AND rtab001 = g_browser[pi_id].b_rtaa001
     AND  = g_browser[pi_id].b_rtaa002
   
   IF li_cnt > 0 THEN
      RETURN TRUE
   ELSE
      RETURN FALSE
   END IF
 
END FUNCTION
 
#+ 組合顯示在畫面上的資訊
PRIVATE FUNCTION arti010_desc_show(pi_ac)
   {<Local define>}
   DEFINE pi_ac   LIKE type_t.num5
   DEFINE li_tmp  LIKE type_t.num5
   {</Local define>}
   #add-point:desc_show段define
   {<point name="desc_show.define"/>}
   #end add-point
   
   LET li_tmp = l_ac
   LET l_ac = pi_ac
   
   
   #add-point:browser_create段desc處理
   {<point name="desc_show.show"/>} 
   #end add-point
 
   LET l_ac = li_tmp
   
END FUNCTION
 
{<point name="other.function"/>}

