#該程式未解開Section, 採用最新樣板產出!
{<section id="axmp101.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0001(1900-01-01 00:00:00), PR版次:0001(2015-12-07 14:58:46)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000034
#+ Filename...: axmp101
#+ Description: 變更單批處理下傳
#+ Creator....: 02481(2015-09-23 13:38:14)
#+ Modifier...: 00000 -SD/PR- 02481
 
{</section>}
 
{<section id="axmp101.global" >}
#應用 p01 樣板自動產生(Version:18)
#add-point:填寫註解說明
#Memos
#end add-point
#add-point:填寫註解說明(客製用)

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目
IMPORT util
IMPORT xml
IMPORT com
IMPORT FGL lib_cl_schedule
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
   DEFINE g_chk_jobid          LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
DEFINE g_wc              STRING
 
PRIVATE TYPE type_master RECORD
       stagenow LIKE type_t.chr80,
       wc               STRING
       END RECORD
 
#模組變數(Module Variables)
DEFINE g_master type_master
 
#add-point:自定義模組變數(Module Variable)
DEFINE g_middb    STRING
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)

#end add-point
 
#add-point:傳入參數說明

#end add-point
 
{</section>}
 
{<section id="axmp101.main" >}
MAIN
   #add-point:main段define (客製用)
   
   #end add-point 
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define 
   
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #add-point:初始化前定義
   
   #end add-point
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axm","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   LET g_bgjob = "Y"   #直接跑背景
   IF cl_ap_chk_self_exists() THEN
     CALL cl_ap_exitprogram("0")
   END IF 
   #end add-point
 
   #背景(Y) 或半背景(T) 時不做主畫面開窗
   IF g_bgjob = "Y" OR g_bgjob = "T" THEN
      #排程參數由01開始，若不是1開始，表示有保留參數
      LET ls_js = g_argv[01]
     #CALL util.JSON.parse(ls_js,g_master)   #p類主要使用l_param,此處不解析
      #add-point:Service Call
      
      #end add-point
      CALL axmp101_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axmp101 WITH FORM cl_ap_formpath("axm",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL axmp101_init()
 
      #進入選單 Menu (="N")
      CALL axmp101_ui_dialog()
 
      #add-point:畫面關閉前
      
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axmp101
   END IF
 
   #add-point:作業離開前
   
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
{</section>}
 
{<section id="axmp101.init" >}
#+ 初始化作業
PRIVATE FUNCTION axmp101_init()
 
   #add-point:init段define (客製用)
   
   #end add-point
   #add-point:ui_dialog段define 
   
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="axmp101.ui_dialog" >}
#+ 選單功能實際執行處
PRIVATE FUNCTION axmp101_ui_dialog()
 
   #add-point:ui_dialog段define (客製用)
   
   #end add-point
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num10
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE l_dialog ui.DIALOG
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define 
   
   #end add-point
   
   #add-point:ui_dialog段before dialog
   
   #end add-point
 
   WHILE TRUE
      #add-point:ui_dialog段before dialog2
      
      #end add-point
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         
         
         
      
         #add-point:ui_dialog段construct
         
         #end add-point
         #add-point:ui_dialog段input
         
         #end add-point
         #add-point:ui_dialog段自定義display array
         
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         BEFORE DIALOG
            LET l_dialog = ui.DIALOG.getCurrent()
            CALL axmp101_get_buffer(l_dialog)
            #add-point:ui_dialog段before dialog
            
            #end add-point
 
         ON ACTION batch_execute
            LET g_action_choice = "batch_execute"
            ACCEPT DIALOG
 
         #add-point:ui_dialog段before_qbeclear
         
         #end add-point
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE g_master.* TO NULL   #畫面變數清空
            INITIALIZE lc_param.* TO NULL   #傳遞參數變數清空
            #add-point:ui_dialog段qbeclear
            
            #end add-point
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION close
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         
         #end add-point
 
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM   
         INITIALIZE g_master.* TO NULL
         LET g_wc  = ' 1=2'
         LET g_action_choice = ""
         CALL axmp101_init()
         CONTINUE WHILE
      END IF
 
      #檢查批次設定是否有錯(或未設定完成)
      IF NOT cl_schedule_exec_check() THEN
         CONTINUE WHILE
      END IF
      
      LET lc_param.wc = g_master.wc    #把畫面上的wc傳遞到參數變數
      #請在下方的add-point內進行把畫面的輸入資料(g_master)轉換到傳遞參數變數(lc_param)的動作
      #add-point:ui_dialog段exit dialog
      
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)  #r類使用g_master/p類使用lc_param
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         IF g_chk_jobid THEN 
            LET g_jobid = g_schedule.gzpa001
         ELSE 
            LET g_jobid = cl_schedule_get_jobid(g_prog)
         END IF 
 
         #依照指定模式執行報表列印
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL axmp101_process(ls_js)
 
            WHEN g_schedule.gzpa003 = "1"
                 LET ls_js = axmp101_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
 
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
 
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
         END CASE  
 
         IF g_schedule.gzpa003 = "2" OR g_schedule.gzpa003 = "3" THEN 
            CALL cl_ask_confirm3("std-00014","") #設定完成
         END IF    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
 
         #add-point:ui_dialog段after schedule
         
         #end add-point
 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
 
{</section>}
 
{<section id="axmp101.transfer_argv" >}
#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION axmp101_transfer_argv(ls_js)
 
   #add-point:transfer_agrv段define (客製用)
   
   #end add-point
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog       STRING,
             actionid   STRING,
             background LIKE type_t.chr1,
             param      DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
   #add-point:transfer_agrv段define 
   
   #end add-point
 
   LET la_cmdrun.prog = g_prog
   LET la_cmdrun.background = "Y"
   LET la_cmdrun.param[1] = ls_js
 
   #add-point:transfer.argv段程式內容
   
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
 
{</section>}
 
{<section id="axmp101.process" >}
#+ 資料處理   (r類使用g_master為主處理/p類使用l_param為主)
PRIVATE FUNCTION axmp101_process(ls_js)
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE ls_js         STRING
   DEFINE lc_param      type_parameter
   DEFINE li_stus       LIKE type_t.num5
   DEFINE li_count      LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql        STRING             #主SQL
   DEFINE li_p01_status LIKE type_t.num5
   #add-point:process段define 
   DEFINE l_sql      STRING   #单身sql
   DEFINE l_xmee     RECORD
          doctype        LIKE type_t.chr5,  #截取订单单别
          xmeeent        LIKE type_t.chr10,
          xmeesite       LIKE xmee_t.xmeesite,
          xmeedocno      LIKE xmee_t.xmeedocno,
          xmeedocdt      LIKE xmee_t.xmeedocdt,
          xmee001        LIKE xmee_t.xmee001,
          xmee002        LIKE xmee_t.xmee002,
          xmee003        LIKE xmee_t.xmee003,
          xmee004        LIKE xmee_t.xmee004,
          xmee005        LIKE xmee_t.xmee005,
          xmee007        LIKE xmee_t.xmee007,
          xmee008        LIKE xmee_t.xmee008,
          xmee009        LIKE xmee_t.xmee009,
          xmee010        LIKE xmee_t.xmee010,
          xmee011        LIKE xmee_t.xmee011,
          xmee012        LIKE xmee_t.xmee012,
          xmee013        LIKE xmee_t.xmee013,
          xmee015        LIKE xmee_t.xmee015,
          xmee020        LIKE xmee_t.xmee020,
          xmee021        LIKE xmee_t.xmee021,
          xmee022        LIKE xmee_t.xmee022,
          xmee023        LIKE xmee_t.xmee023,
          xmee024        LIKE xmee_t.xmee024,
          xmee025        LIKE xmee_t.xmee025,
          xmee026        LIKE xmee_t.xmee026,
          xmee027        LIKE xmee_t.xmee027,
          xmee035        LIKE xmee_t.xmee035,
          xmee036        LIKE xmee_t.xmee036,
          xmee041        LIKE xmee_t.xmee041,
          xmee042        LIKE xmee_t.xmee042,
          xmee043        LIKE xmee_t.xmee043,
          xmee049        LIKE xmee_t.xmee049,
          xmee071        LIKE xmee_t.xmee071,
          xmee200        LIKE xmee_t.xmee200,
          xmee203        LIKE xmee_t.xmee203,
          xmee900        LIKE xmee_t.xmee900,
          xmee902        LIKE xmee_t.xmee902,
          xmee904        LIKE xmee_t.xmee904,
          xmeestus       LIKE xmee_t.xmeestus,
          status         LIKE xmee_t.xmeestus,
          tran_status    LIKE type_t.chr2,    
          tran_time      LIKE type_t.chr20,
          xmeecrtdt      LIKE xmee_t.xmeecrtdt,
          xmeecrtid      LIKE xmee_t.xmeecrtid,
          xmeemoddt      LIKE xmee_t.xmeemoddt,
          xmeemodid      LIKE xmee_t.xmeemodid,
          xmeecnfdt      LIKE xmee_t.xmeecnfdt,
          xmeecnfid      LIKE xmee_t.xmeecnfid
                     END RECORD
                     
   DEFINE l_xmeg    DYNAMIC ARRAY OF RECORD
          xmegseq        LIKE xmeg_t.xmegseq,
          xmeg001        LIKE xmeg_t.xmeg001,
          xmeg007        LIKE xmeg_t.xmeg007,
          xmeg010        LIKE xmeg_t.xmeg010,
          xmeg012        LIKE xmeg_t.xmeg012,
          xmeg015        LIKE xmeg_t.xmeg015,
          xmeg016        LIKE xmeg_t.xmeg016,
          xmeg017        LIKE xmeg_t.xmeg017,
          xmeg025        LIKE xmeg_t.xmeg025,
          xmeg031        LIKE xmeg_t.xmeg031,
          xmeg046        LIKE xmeg_t.xmeg046,
          xmeg047        LIKE xmeg_t.xmeg047,
          xmeg048        LIKE xmeg_t.xmeg048,
          xmeg050        LIKE xmeg_t.xmeg050
                    END RECORD
   DEFINE l_success2    STRING   
   DEFINE l_only_t      LIKE type_t.chr200
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_str         STRING
   DEFINE l_doctype     STRING
   DEFINE l_request_root xml.DomNode
   DEFINE l_node           xml.DomNode
   DEFINE l_begin    LIKE type_t.num5
   DEFINE l_e8       LIKE type_t.chr1
   DEFINE l_e2length LIKE type_t.num5
   DEFINE l_e4length LIKE type_t.num5
   DEFINE l_e3length LIKE type_t.num5
   DEFINE l_e1length LIKE type_t.num5
   DEFINE l_xmee007     LIKE xmee_t.xmee007
   DEFINE l_xmee_result     DYNAMIC ARRAY OF RECORD
           ERP_FORM_NO   LIKE xmee_t.xmeedocno,
           CHANGE_NUM    LIKE type_t.chr5,
           TENANTGROUP   LIKE type_t.chr10,  
           PO_FORM_TYPE  LIKE type_t.chr5,
           PO_FORM_NO    LIKE xmee_t.xmeedocno,
           tran_status   LIKE type_t.chr2,    
           tran_time     LIKE type_t.chr20                                 
                            END RECORD
   DEFINE l_param   RECORD
             doc_type_parent LIKE type_t.chr5     #单据大类  
                    END RECORD
   DEFINE l_service   RECORD
                        prod     STRING,   #產品別
                        srvname  STRING,   #服務名稱
                        async    BOOLEAN,  #非同步(option)
                        request  STRING,
                        id       STRING,
                        ip       STRING
                      END RECORD
   DEFINE l_resp_root  xml.DomDocument # xml.DomNode
   DEFINE l_j           LIKE type_t.num5 
   DEFINE l_i           LIKE type_t.num5
   DEFINE lr_result         RECORD
          status LIKE type_t.num5,
          data   STRING
                            END RECORD 
   DEFINE l_enterprise  LIKE type_t.num5        
   DEFINE l_pmaa098     LIKE pmaa_t.pmaa098   
   #end add-point
 
  #INITIALIZE lc_param TO NULL           #p類不可以清空
   CALL util.JSON.parse(ls_js,lc_param)  #r類作業被t類呼叫時使用, p類主要解開參數處
   LET li_p01_status = 1
 
  #IF lc_param.wc IS NOT NULL THEN
  #   LET g_bgjob = "T"       #特殊情況,此為t類作業鬆耦合串入報表主程式使用
  #END IF
 
   #add-point:process段前處理
   #切换到T100 中间库
   LET l_success2 = 'Y'
   CALL axmp101_get_doctype_relues() RETURNING l_e8,l_e1length,l_e2length,l_e3length,l_e3length  #单别阶段
   LET l_enterprise = g_enterprise
   
   #20151022---add---begin---   
   #定义cursor 
   LET g_forupd_sql = "SELECT xmeeent,xmeedocno,xmee900,xmee007,xmee008 FROM xmee_t WHERE xmeeent=? AND xmeedocno=? AND xmee900=? FOR UPDATE"
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE axmp101_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
   #20151022---add---end----- 
    
   LET g_middb = cl_eai_db_connect(g_dbs) 
   SET CONNECTION g_middb
   IF  status THEN DISPLAY 'connect to g_middb error:',status END IF
   LET ls_sql = "SELECT  '',xmeeent,xmeesite,xmeedocno,xmeedocdt,xmee001,xmee002,xmee003,xmee004,xmee005,",
                 "xmee007,xmee008,xmee009,xmee010,xmee011,xmee012,xmee013,xmee015,xmee020,xmee021,",
                 "xmee022,xmee023,xmee024,xmee025,xmee026,xmee027,xmee035,xmee036,xmee041, xmee042,xmee043,", 
                 "xmee049,xmee071,xmee200,xmee203,xmee900,xmee902,xmee904,xmeestus,status,tran_status,tran_time,",
                 "xmeecrtdt,xmeecrtid,",
                 "xmeemoddt,xmeemodid,xmeecnfdt,xmeecnfid",
                 " FROM b2b_xmee_t ",
                 " WHERE xmeesite in (select  ooabsite  from all_ooab02_v where ooabent = '" ,l_enterprise,"' and ooab001 = 'S-SYS-0002' and ooab002 = 'Y') ",
                 " AND xmeeent = '",l_enterprise,"'",
                 " AND tran_status = 'N' ",
                 " ORDER BY tran_time ASC"
   PREPARE axmp101_sel_xmee_pr FROM ls_sql
   DECLARE axmp101_sel_xmee_cs CURSOR FOR axmp101_sel_xmee_pr
   LET l_sql = "SELECT xmegseq,xmeg001,xmeg007,xmeg010,xmeg012,xmeg015,xmeg016,",
               "xmeg017,xmeg025,xmeg031,xmeg046,xmeg047,xmeg048,xmeg050 ",
               " FROM b2b_xmeg01_v ",
               " WHERE xmegent = ? AND xmegdocno = ? AND xmeg900 = ? ORDER BY xmegseq "
   
   PREPARE axmp101_sel_xmeg_pr FROM l_sql
   DECLARE axmp101_sel_xmeg_cs CURSOR FOR axmp101_sel_xmeg_pr 
    
   DISPLAY 'start foreach:',cl_get_current()
   INITIALIZE l_xmee.* TO NULL
   FOREACH axmp101_sel_xmee_cs INTO  l_xmee.*
      #20151027---add---begin---
      LET l_pmaa098='N'
      SELECT pmaa098 INTO l_pmaa098 FROM all_pmaa01_v 
       WHERE pmaaent=l_enterprise AND pmaa001=l_xmee.xmee004
      IF l_pmaa098 <> 'Y' THEN
         CONTINUE FOREACH 
      ELSE
        DISPLAY 'l_pmaa098 = y'
        DISPLAY l_xmee.xmeedocno,l_xmee.xmee900
      END IF 
      #20151027---add---end---
      LET l_param.doc_type_parent = '7A'
      CALL cl_ws_create_request() RETURNING l_request_root   #组xml 请求段落
      CALL cl_ws_addParameterRecord(util.JSONObject.fromFGL(l_param))  #组param
      #截取单号中的单别
      LET l_str = l_xmee.xmeedocno
      IF l_e8 = '1' THEN  #据点+单别 取第二段
         LET l_begin = l_e3length + l_e2length
         LET l_doctype = l_str.subString(l_begin+1,l_begin+l_e1length)
      ELSE
         LET l_begin = 0  #单别+据点取第一段
          LET l_doctype = l_str.subString(l_begin+1,l_e1length)
      END IF 
      LET l_xmee.doctype = l_doctype      
      #组xml 
      LET l_node =  cl_ws_addMasterRecord("xmee_t",util.JSONObject.fromFGL(l_xmee))     #单头节点数据获取
      LET l_cnt = 1
      FOREACH  axmp101_sel_xmeg_cs USING l_xmee.xmeeent,l_xmee.xmeedocno,l_xmee.xmee900 INTO l_xmeg[l_cnt].* 
        IF SQLCA.sqlcode THEN
           EXIT FOREACH
         END IF
         CALL cl_ws_addDetailRecord(l_node , "xmeg_t",util.JSONObject.fromFGL(l_xmeg[l_cnt]) , l_cnt)  #单身节点数据获取
         LET l_cnt = l_cnt + 1
      END FOREACH
      CALL l_xmeg.deleteelement(l_cnt)
      LET l_cnt = l_cnt - 1 
      
      #单身组完
      SET CONNECTION g_dbs 
      LET l_service.ip =  cl_get_para(g_enterprise,"","E-SYS-0721")
      LET l_service.id =  cl_get_para(g_enterprise,"","E-SYS-0722")  
      LET l_service.prod    = "EC_B2B"
      LET l_service.srvname = "PurchaseChangeDown"
      LET l_service.request = l_request_root.toString()
      DISPLAY 'start to eai',cl_get_current()
      CALL cl_eai_invokeSrv(util.JSONObject.fromFGL(l_service)) RETURNING lr_result.*    
      DISPLAY 'end to eai',cl_get_current()
      LET l_cnt = 0 
      IF lr_result.status = 0 THEN
       LET l_resp_root = cl_ws_stringToXml(lr_result.data)  #讀取response string
       #讀取 Master node
       
       LET l_cnt = cl_ws_getMasterRecordLength("T_A_PO_CHANGE")  
       IF l_cnt = 0 THEN
          INITIALIZE g_errparam TO NULL
          LET g_errparam.code = 'wss-00002'
          LET g_errparam.extend = ""
          LET g_errparam.popup = TRUE
          CALL cl_err()
          RETURN
       END IF
       FOR l_j = 1 TO l_cnt
           LET l_node = cl_ws_getMasterRecord(l_j,'T_A_PO_CHANGE')
           LET l_xmee_result[l_j].ERP_FORM_NO = cl_ws_getRecordField(l_node ,"ERP_FORM_NO")  
           LET l_xmee_result[l_j].CHANGE_NUM = cl_ws_getRecordField(l_node ,"CHANGE_NUM")
           LET l_xmee_result[l_j].TENANTGROUP = cl_ws_getRecordField(l_node ,"TENANTGROUP")   
           LET l_xmee_result[l_j].PO_FORM_TYPE = cl_ws_getRecordField(l_node ,"PO_FORM_TYPE")
           LET l_xmee_result[l_j].PO_FORM_NO = cl_ws_getRecordField(l_node ,"PO_FORM_NO")
           LET l_xmee_result[l_j].tran_status = cl_ws_getRecordField(l_node ,"tran_status")
           LET l_xmee_result[l_j].tran_time = cl_ws_getRecordField(l_node ,"tran_time")
           IF cl_null(l_xmee_result[l_j].PO_FORM_NO) OR cl_null(l_xmee_result[l_j].PO_FORM_TYPE) THEN
              LET l_xmee007 = ''
              LET l_xmee_result[l_j].PO_FORM_NO = ''
           ELSE
              LET l_xmee007 = '9'           
           END IF
           #更新正式库来源单号，来源类型
           CALL s_transaction_begin() 
           #20151022---add---begin--- 
           OPEN axmp101_cl USING g_enterprise,l_xmee_result[l_j].ERP_FORM_NO,l_xmee_result[l_j].CHANGE_NUM
           IF STATUS THEN
              INITIALIZE g_errparam TO NULL
              LET g_errparam.extend = "OPEN axmp101_cl:"
              LET g_errparam.code   = STATUS
              LET g_errparam.popup  = TRUE
              CALL cl_err()
              CLOSE axmp101_cl
              CALL s_transaction_end('N','0')
              RETURN
           END IF
           #20151022---add---end----- 
           UPDATE xmee_t SET xmee007 = l_xmee007,
                                 xmee008 = l_xmee_result[l_j].PO_FORM_NO
               WHERE  xmeeent = l_xmee_result[l_j].TENANTGROUP
                 AND  xmeedocno = l_xmee_result[l_j].ERP_FORM_NO 
            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.extend = "upd xmee_t"
               LET g_errparam.code   = SQLCA.sqlcode
               LET g_errparam.popup  = TRUE
               CALL cl_err()
               LET l_success2 = 'N'
               CALL s_transaction_end('N','0')
               EXIT FOR
            END IF 
            #IF l_success2 = 'Y' THEN                 #20151022---mark---
               CALL s_transaction_end('Y','0') 
               CLOSE axmp101_cl
            #20151022---mark---begin---
            #ELSE
            #   CALL s_transaction_end('N','0')
            #END IF    
            #20151022---mark---end---            
       END FOR
       #切回中间库更新传输状态
       SET CONNECTION g_middb     
       IF status THEN DISPLAY 'connect to g_middb error:',status END IF
       #IF l_success2 = 'Y' THEN     #20151022---mark---
           FOR l_i = 1 TO l_cnt
             DISPLAY 'tran_status:',l_xmee_result[l_i].tran_status
               UPDATE b2b_xmee_t SET tran_status = l_xmee_result[l_i].tran_status    #传输状态
            WHERE xmeeent = l_xmee_result[l_i].TENANTGROUP
              AND xmeedocno = l_xmee_result[l_i].ERP_FORM_NO
              AND tran_time = l_xmee_result[l_i].tran_time
                  
              IF SQLCA.sqlcode THEN
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.extend = "upd b2b_xmee_t"
                 LET g_errparam.code   = SQLCA.sqlcode
                 LET g_errparam.popup  = TRUE
                 CALL cl_err()
                 LET l_success2 = 'N'
                 EXIT FOR
              END IF                      
           END FOR 
       #END IF                      #20151022---mark---
              
   ELSE
      #呼叫服務失敗
      INITIALIZE g_errparam TO NULL
      LET g_errparam.extend = ""
      LET g_errparam.code   = "aws-00029"
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET l_success2 = 'N'
   END IF  


   END FOREACH
   DISPLAY 'end foreach:',cl_get_current()
   SET CONNECTION g_dbs    #回到正式库
   IF status THEN DISPLAY 'connect to g_dbs error:',status END IF 
  
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE axmp101_process_cs CURSOR FROM ls_sql
#  FOREACH axmp101_process_cs INTO
   #add-point:process段process
   
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      
      #end add-point
      CALL cl_ask_confirm3("std-00012","")
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      
      #end add-point
      CALL cl_schedule_exec_call(li_p01_status)
   END IF
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL axmp101_msgcentre_notify()
 
END FUNCTION
 
{</section>}
 
{<section id="axmp101.get_buffer" >}
PRIVATE FUNCTION axmp101_get_buffer(p_dialog)
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE p_dialog   ui.DIALOG
   #add-point:process段define
   
   #end add-point
 
   
 
   CALL cl_schedule_get_buffer(p_dialog)
 
   #add-point:get_buffer段其他欄位處理
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="axmp101.msgcentre_notify" >}
PRIVATE FUNCTION axmp101_msgcentre_notify()
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE lc_state LIKE type_t.chr5
   #add-point:process段define
   
   #end add-point
 
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = "process"
 
   #add-point:msgcentre其他通知
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
{</section>}
 
{<section id="axmp101.other_function" readonly="Y" >}
#add-point:自定義元件(Function)

################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axmp101_get_doctype_relues()
DEFINE l_e8  LIKE type_t.chr1
DEFINE l_e1  LIKE type_t.chr1
DEFINE l_e2  LIKE type_t.chr1
DEFINE l_e3  LIKE type_t.chr1
DEFINE l_e4  LIKE type_t.chr1
DEFINE l_e5  LIKE type_t.chr1
DEFINE l_e2length LIKE type_t.num5
DEFINE l_e4length LIKE type_t.num5
DEFINE l_e3length LIKE type_t.num5
DEFINE l_e1length LIKE type_t.num5

SELECT a.ooaa002,b.OOAA002,c.OOAA002,d.OOAA002,e.OOAA002,f.OOAA002
 INTO l_e8,l_e1,l_e2,l_e3,l_e4,l_e5
 FROM ooaa_t a,ooaa_t b, ooaa_t c, ooaa_t d, ooaa_t e, ooaa_t f 
 
where a.ooaa001 = 'E-COM-0008' and a.ooaaent = g_enterprise
and b.ooaa001 = 'E-COM-0001' and b.ooaaent = g_enterprise
and c.ooaa001 = 'E-COM-0002' and c.ooaaent = g_enterprise
and d.ooaa001 = 'E-COM-0003' and d.ooaaent = g_enterprise
and e.ooaa001 = 'E-COM-0004' and e.ooaaent = g_enterprise
and f.ooaa001 = 'E-COM-0005' and f.ooaaent = g_enterprise

LET l_e2length = 0   
LET l_e4length = 0 

IF l_e2 = 'Y' THEN
    LET l_e2length = 1
ELSE
    LET l_e2length = 0
END IF

IF l_e4 = 'Y' THEN
    LET l_e4length = 1
ELSE
    LET l_e4length = 0
END IF

LET l_e1length = l_e1

LET l_e3length = l_e3

RETURN l_e8,l_e1length,l_e2length,l_e3length,l_e3length
END FUNCTION

#end add-point
 
{</section>}
 
