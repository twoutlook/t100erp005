#該程式未解開Section, 採用最新樣板產出!
{<section id="axmt410_01.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0001(2014-07-07 17:56:45), PR版次:0001(2014-10-15 09:45:31)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000091
#+ Filename...: axmt410_01
#+ Description: 報價分量計價維護作業
#+ Creator....: 03079(2014-06-30 17:40:24)
#+ Modifier...: 03079 -SD/PR- 03079
 
{</section>}
 
{<section id="axmt410_01.global" >}
#應用 c02b 樣板自動產生(Version:9)
#add-point:填寫註解說明
#Memos
#end add-point
#add-point:填寫註解說明(客製用)

#end add-point
 
IMPORT os
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目
IMPORT util
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔

#end add-point
 
#單身 type 宣告
PRIVATE TYPE type_g_xmfg_d        RECORD
       xmfgdocno LIKE xmfg_t.xmfgdocno, 
   xmfgseq LIKE xmfg_t.xmfgseq, 
   xmfg001 LIKE xmfg_t.xmfg001, 
   xmfg002 LIKE xmfg_t.xmfg002, 
   xmfg003 LIKE xmfg_t.xmfg003, 
   xmfg004 LIKE xmfg_t.xmfg004, 
   xmfgsite LIKE xmfg_t.xmfgsite
       END RECORD
 
 
#add-point:自定義模組變數(Module Variable)(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理)
DEFINE g_xmfgdocno           LIKE xmfg_t.xmfgdocno
DEFINE g_xmfgseq             LIKE xmfg_t.xmfgseq
DEFINE l_ac_t                LIKE type_t.num5 
DEFINE g_xmff004             LIKE xmff_t.xmff004      #單位 
#end add-point
 
DEFINE g_xmfg_d          DYNAMIC ARRAY OF type_g_xmfg_d
DEFINE g_xmfg_d_t        type_g_xmfg_d
 
 
DEFINE g_xmfgdocno_t   LIKE xmfg_t.xmfgdocno    #Key值備份
DEFINE g_xmfgseq_t      LIKE xmfg_t.xmfgseq    #Key值備份
DEFINE g_xmfg001_t      LIKE xmfg_t.xmfg001    #Key值備份
DEFINE g_xmfg002_t      LIKE xmfg_t.xmfg002    #Key值備份
 
 
DEFINE l_ac                  LIKE type_t.num10
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rec_b               LIKE type_t.num10 
DEFINE g_detail_idx          LIKE type_t.num10
 
#add-point:自定義客戶專用模組變數(Module Variable)

#end add-point
    
#add-point:傳入參數說明(global.argv)

#end add-point    
 
{</section>}
 
{<section id="axmt410_01.input" >}
#+ 資料輸入
PUBLIC FUNCTION axmt410_01(--)
   #add-point:input段變數傳入
   p_xmfgdocno,p_xmfgseq,p_xmff001,p_xmff002,p_xmff004,p_transaction
   #end add-point
   )
   #add-point:input段define
   
   #end add-point
   DEFINE l_ac_t          LIKE type_t.num10       #未取消的ARRAY CNT 
   DEFINE l_allow_insert  LIKE type_t.num5        #可新增否 
   DEFINE l_allow_delete  LIKE type_t.num5        #可刪除否  
   DEFINE l_count         LIKE type_t.num10
   DEFINE l_insert        LIKE type_t.num5
   DEFINE l_cmd           LIKE type_t.chr5
   #add-point:input段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理)
   DEFINE p_xmfgdocno     LIKE xmfg_t.xmfgdocno
   DEFINE p_xmfgseq       LIKE xmfg_t.xmfgseq 
   DEFINE p_xmff001       LIKE xmff_t.xmff001
   DEFINE p_xmff002       LIKE xmff_t.xmff002
   DEFINE p_xmff004       LIKE xmff_t.xmff004 
   DEFINE p_transaction   LIKE type_t.chr1        #是否已在transaction中  
   DEFINE l_xmfd          RECORD LIKE xmfd_t.*
   DEFINE l_xmff          RECORD LIKE xmff_t.*
   DEFINE l_xmfg          RECORD LIKE xmfg_t.*
   DEFINE l_stus          LIKE type_t.chr1
   DEFINE l_forupd_sql    STRING
   DEFINE l_lock_sw       LIKE type_t.chr1
   DEFINE l_imaal003      LIKE imaal_t.imaal003
   DEFINE l_imaal004      LIKE imaal_t.imaal004

   DEFINE l_ooca002       LIKE ooca_t.ooca002
   DEFINE l_ooca004       LIKE ooca_t.ooca004
   DEFINE l_success       LIKE type_t.num5
   DEFINE l_round         LIKE xmfg_t.xmfg001
   DEFINE l_num           LIKE xmfg_t.xmfg001
   DEFINE l_xmfg002       LIKE xmfg_t.xmfg002
   #end add-point
 
   #畫面開啟 (identifier)
   OPEN WINDOW w_axmt410_01 WITH FORM cl_ap_formpath("axm","axmt410_01")
 
   #瀏覽頁簽資料初始化
   CALL cl_ui_init()
   
   LET g_qryparam.state = "i"
   
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   
   #輸入前處理
   #add-point:單身前置處理
   WHENEVER ERROR CONTINUE
   
   #如果沒有設定的話 就預設為未開transaction
   IF cl_null(p_transaction) THEN
      LET p_transaction = 'N'
   END IF
   
   DISPLAY p_xmfgdocno TO xmffdocno
   DISPLAY p_xmfgseq   TO xmffseq

   INITIALIZE l_xmfd.* TO NULL
   INITIALIZE l_xmff.* TO NULL

   LET g_xmfgdocno = p_xmfgdocno
   LET g_xmfgseq   = p_xmfgseq

   SELECT * INTO l_xmfd.*
     FROM xmfd_t
    WHERE xmfdent = g_enterprise
      AND xmfddocno = g_xmfgdocno
   SELECT * INTO l_xmff.*
     FROM xmff_t
    WHERE xmffent   = g_enterprise
      AND xmffdocno = g_xmfgdocno
      
   IF cl_null(l_xmff.xmff001) THEN
      LET l_xmff.xmff001 = p_xmff001
   END IF
   IF cl_null(l_xmff.xmff002) THEN
      LET l_xmff.xmff002 = p_xmff002
   END IF
   IF cl_null(l_xmff.xmff004) THEN
      LET l_xmff.xmff004 = p_xmff004
   END IF

   LET g_xmff004 = l_xmff.xmff004

   DISPLAY l_xmfd.xmfd010 TO xmfd010
   DISPLAY l_xmff.xmff001 TO xmff001
   DISPLAY l_xmff.xmff002 TO xmff002

   CALL s_desc_get_item_desc(l_xmff.xmff001) RETURNING l_imaal003,l_imaal004
   DISPLAY l_imaal003 TO imaal003
   DISPLAY l_imaal004 TO imaal004 

   WHENEVER ERROR CALL cl_err_msg_log 
   
   CALL axmt410_01_b_fill(p_xmfgdocno,p_xmfgseq)

   LET l_stus = ''
   SELECT xmfdstus INTO l_stus
     FROM xmfd_t
    WHERE xmfdent = g_enterprise
      AND xmfddocno = p_xmfgdocno
   IF l_stus != 'N' THEN
      LET INT_FLAG = FALSE
      CLOSE WINDOW w_axmt410_01
      RETURN
   END IF

   LET l_forupd_sql = "SELECT xmfgdocno,xmfgseq,xmfg001,xmfg002,xmfg003,xmfg004,xmfgsite ",
                      "  FROM xmfg_t ",
                      " WHERE xmfgdocno = ? ",
                      "   AND xmfgseq = ? ",
                      "   AND xmfg001 = ? ",
                      "   AND xmfg002 = ? ",
                      "   FOR UPDATE "
   LET l_forupd_sql = cl_sql_forupd(l_forupd_sql)
   PREPARE axmt410_01_b FROM l_forupd_sql
   DECLARE axmt410_01_cs CURSOR FOR axmt410_01_b
   LET INT_FLAG = FALSE
   #end add-point
  
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
   
      #輸入開始
      INPUT ARRAY g_xmfg_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = l_allow_insert,
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
         
         #自訂ACTION
         #add-point:單身前置處理
         
         #end add-point
         
         #自訂ACTION(detail_input)
         
         
         BEFORE INPUT
            #add-point:單身輸入前處理
         
         BEFORE ROW
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET l_lock_sw = 'N'
            DISPLAY l_ac TO FORMONLY.idx

            IF p_transaction = 'N' THEN
               CALL s_transaction_begin()
            END IF

            IF g_rec_b >= l_ac THEN
               LET l_cmd = 'u'
               LET g_xmfg_d_t.* = g_xmfg_d[l_ac].*   #BACKUP 
               OPEN axmt410_01_cs USING p_xmfgdocno,p_xmfgseq,g_xmfg_d[l_ac].xmfg001,g_xmfg_d[l_ac].xmfg002
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "axmt410_01_cs"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET l_lock_sw = 'Y'
               ELSE
                  FETCH axmt410_01_cs INTO g_xmfg_d[l_ac].*
                  IF SQLCA.sqlcode THEN
                     LET l_lock_sw = 'Y'
                  END IF
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd = 'a'
            END IF 
            
         BEFORE INSERT
            IF p_transaction = 'N' THEN
               CALL s_transaction_begin()
            END IF
            LET l_cmd = 'a'
            INITIALIZE g_xmfg_d_t.* TO NULL
            INITIALIZE g_xmfg_d[l_ac].* TO NULL
            LET g_xmfg_d[l_ac].xmfgdocno = p_xmfgdocno
            LET g_xmfg_d[l_ac].xmfgseq   = p_xmfgseq
            LET g_xmfg_d[l_ac].xmfgsite  = g_site 
            
            LET l_xmfg002 = 0
            SELECT MAX(xmfg002) INTO l_xmfg002
              FROM xmfg_t
             WHERE xmfgent   = g_enterprise
               AND xmfgdocno = p_xmfgdocno
               AND xmfgseq   = p_xmfgseq
            IF cl_null(l_xmfg002) THEN
               LET l_xmfg002 = 0
            END IF

            IF NOT cl_null(g_xmff004) THEN
               LET l_ooca002 = 0         #小數位數 
               LET l_ooca004 = NULL      #捨入類型  

               LET l_round = 0
               LET l_num = 0
               CALL s_aooi250_get_msg(g_xmff004)
                    RETURNING l_success,l_ooca002,l_ooca004
               IF l_success THEN
                  LET l_round = util.Math.pow(10,l_ooca002)
                  LET l_num = 1 / l_round
                  LET g_xmfg_d[l_ac].xmfg001 = l_xmfg002 + l_num 
                  
                  CALL axmt410_01_round(g_xmfg_d[l_ac].xmfg001) RETURNING g_xmfg_d[l_ac].xmfg001
               END IF
            END IF
            
            LET g_xmfg_d[l_ac].xmfg004 = 0

            LET g_xmfg_d_t.* = g_xmfg_d[l_ac].*
            CALL cl_show_fld_cont() 
            
         AFTER INSERT
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               CANCEL INSERT
            END IF

            INITIALIZE l_xmfg.* TO NULL
            LET l_xmfg.xmfgdocno = g_xmfg_d[l_ac].xmfgdocno
            LET l_xmfg.xmfgent   = g_enterprise
            LET l_xmfg.xmfgsite  = g_site
            LET l_xmfg.xmfgseq   = g_xmfg_d[l_ac].xmfgseq
            LET l_xmfg.xmfg001   = g_xmfg_d[l_ac].xmfg001
            LET l_xmfg.xmfg002   = g_xmfg_d[l_ac].xmfg002
            LET l_xmfg.xmfg003   = g_xmfg_d[l_ac].xmfg003
            LET l_xmfg.xmfg004   = g_xmfg_d[l_ac].xmfg004

            LET l_count = 0
            SELECT COUNT(*) INTO l_count
              FROM xmfg_t
             WHERE xmfgent = g_enterprise
               AND xmfgdocno = p_xmfgdocno
               AND xmfgseq   = p_xmfgseq
               AND xmfg001   = g_xmfg_d[l_ac].xmfg001
               AND xmfg002   = g_xmfg_d[l_ac].xmfg002

            #資料未重覆 插入新增資料  
            IF l_count = 0 THEN
               INSERT INTO xmfg_t VALUES(l_xmfg.*)
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "xmfg_t"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CONTINUE DIALOG
               END IF
            ELSE
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "std-00006"
               LET g_errparam.extend = 'INSERT'
               LET g_errparam.popup = TRUE
               CALL cl_err()

               INITIALIZE g_xmfg_d[l_ac].* TO NULL
               IF p_transaction = 'N' THEN
                  CALL s_transaction_end('N',0)
               END IF
               CANCEL INSERT
            END IF

            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = "xmfg_t"
               LET g_errparam.popup = TRUE
               CALL cl_err()

               IF p_transaction = 'N' THEN
                  CALL s_transaction_end('N',0)
               END IF
               CANCEL INSERT
            ELSE
               IF p_transaction = 'N' THEN
                  CALL s_transaction_end('Y',0)
               END IF
               ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
         
         BEFORE DELETE
            IF NOT cl_null(p_xmfgdocno) AND NOT cl_null(p_xmfgseq) AND
               NOT cl_null(g_xmfg_d[l_ac].xmfg001) AND
               NOT cl_null(g_xmfg_d[l_ac].xmfg002) THEN

               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = 'Y' THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = -263
                  LET g_errparam.extend = ""
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  CANCEL DELETE
               END IF

               DELETE FROM xmfg_t
                WHERE xmfgent = g_enterprise
                  AND xmfgdocno = p_xmfgdocno
                  AND xmfgseq   = p_xmfgseq
                  AND xmfg001   = g_xmfg_d_t.xmfg001
                  AND xmfg002   = g_xmfg_d_t.xmfg002
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = 'xmfg_t'
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  IF p_transaction = 'N' THEN
                     CALL s_transaction_end('N',0)
                  END IF
                  CANCEL DELETE
               ELSE
                  LET g_rec_b = g_rec_b - 1
                  IF p_transaction = 'N' THEN
                     CALL s_transaction_end('Y',0)
                  END IF
               END IF
               CLOSE axmt410_01_cs

            END IF
         
         ON ROW CHANGE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = 9001
               LET g_errparam.extend = ''
               LET g_errparam.popup = FALSE
               CALL cl_err()

               LET INT_FLAG = 0
               LET g_xmfg_d[l_ac].* = g_xmfg_d_t.*
               CLOSE axmt410_01_cs
               IF p_transaction = 'N' THEN
                  CALL s_transaction_end('N',0)
               END IF
               EXIT DIALOG
            END IF

            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = -263
               LET g_errparam.extend = l_xmfg.xmfg001
               LET g_errparam.popup = TRUE
               CALL cl_err()

               LET g_xmfg_d[l_ac].* = g_xmfg_d_t.*
            ELSE
               UPDATE xmfg_t SET (xmfg001,xmfg002,xmfg003,xmfg004) =
                                 (g_xmfg_d[l_ac].xmfg001,g_xmfg_d[l_ac].xmfg002,
                                  g_xmfg_d[l_ac].xmfg003,g_xmfg_d[l_ac].xmfg004)
                WHERE xmfgent = g_enterprise
                  AND xmfgdocno = p_xmfgdocno
                  AND xmfgseq = p_xmfgseq
                  AND xmfg001 = g_xmfg_d_t.xmfg001
                  AND xmfg002 = g_xmfg_d_t.xmfg002
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = 'xmfg_t'
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  LET g_xmfg_d[l_ac].* = g_xmfg_d_t.*
                  IF p_transaction = 'N' THEN
                     CALL s_transaction_end('N',0)
                  END IF
               ELSE
                  IF p_transaction = 'N' THEN
                     CALL s_transaction_end('Y',0)
                  END IF
               END IF
            END IF
         
         AFTER ROW
            CLOSE axmt410_01_cs
            #end add-point
          
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfgdocno
            #add-point:BEFORE FIELD xmfgdocno name="input.b.page1.xmfgdocno"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfgdocno
            
            #add-point:AFTER FIELD xmfgdocno name="input.a.page1.xmfgdocno"
            


            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfgdocno
            #add-point:ON CHANGE xmfgdocno name="input.g.page1.xmfgdocno"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfgseq
            #add-point:BEFORE FIELD xmfgseq name="input.b.page1.xmfgseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfgseq
            
            #add-point:AFTER FIELD xmfgseq name="input.a.page1.xmfgseq"
            


            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfgseq
            #add-point:ON CHANGE xmfgseq name="input.g.page1.xmfgseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfg001
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmfg_d[l_ac].xmfg001,"0.000","1","","","azz-00079",1) THEN
               NEXT FIELD xmfg001
            END IF 
 
 
 
            #add-point:AFTER FIELD xmfg001 name="input.a.page1.xmfg001"
            #此段落由子樣板a05產生
            IF NOT cl_null(g_xmfg_d[l_ac].xmfg001) THEN
               IF NOT cl_null(g_xmfg_d[l_ac].xmfg002) THEN
                  IF g_xmfg_d[l_ac].xmfg001 > g_xmfg_d[l_ac].xmfg002 THEN    #起始數量不可大於截止數量  
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'apm-00228'
                     LET g_errparam.extend = g_xmfg_d[l_ac].xmfg001
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET g_xmfg_d[l_ac].xmfg001 = g_xmfg_d_t.xmfg001
                     NEXT FIELD CURRENT
                  END IF
               END IF

               IF NOT axmt410_01_xmfg001_chk(g_xmfg_d[l_ac].xmfg001,g_xmfg_d[l_ac].xmfg002) THEN
                  LET g_xmfg_d[l_ac].xmfg001 = g_xmfg_d_t.xmfg001
                  NEXT FIELD CURRENT
               END IF

            END IF 
            
            IF g_xmfg_d[l_ac].xmfgdocno IS NOT NULL AND g_xmfg_d[l_ac].xmfgseq IS NOT NULL AND g_xmfg_d[l_ac].xmfg001 IS NOT NULL AND g_xmfg_d[l_ac].xmfg002 IS NOT NULL THEN  
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_xmfg_d[l_ac].xmfgdocno != g_xmfg_d_t.xmfgdocno OR g_xmfg_d[l_ac].xmfgseq != g_xmfg_d_t.xmfgseq OR g_xmfg_d[l_ac].xmfg001 != g_xmfg_d_t.xmfg001 OR g_xmfg_d[l_ac].xmfg002 != g_xmfg_d_t.xmfg002)) THEN
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM xmfg_t WHERE "||"xmfgent = '" ||g_enterprise|| "' AND "||"xmfgdocno = '"||g_xmfg_d[l_ac].xmfgdocno ||"' AND "|| "xmfgseq = '"||g_xmfg_d[l_ac].xmfgseq ||"' AND "|| "xmfg001 = '"||g_xmfg_d[l_ac].xmfg001 ||"' AND "|| "xmfg002 = '"||g_xmfg_d[l_ac].xmfg002 ||"'",'std-00004',0) THEN
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            
            CALL axmt410_01_round(g_xmfg_d[l_ac].xmfg001) RETURNING g_xmfg_d[l_ac].xmfg001


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfg001
            #add-point:BEFORE FIELD xmfg001 name="input.b.page1.xmfg001"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfg001
            #add-point:ON CHANGE xmfg001 name="input.g.page1.xmfg001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfg002
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmfg_d[l_ac].xmfg002,"0.000","1","","","azz-00079",1) THEN
               NEXT FIELD xmfg002
            END IF 
 
 
 
            #add-point:AFTER FIELD xmfg002 name="input.a.page1.xmfg002"
            IF NOT cl_null(g_xmfg_d[l_ac].xmfg002) THEN
               IF NOT cl_null(g_xmfg_d[l_ac].xmfg001) THEN
                  IF g_xmfg_d[l_ac].xmfg002 < g_xmfg_d[l_ac].xmfg001 THEN   #截止數量不可小於起始數量   
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'apm-00229'
                     LET g_errparam.extend = g_xmfg_d[l_ac].xmfg002
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET g_xmfg_d[l_ac].xmfg002 = g_xmfg_d_t.xmfg002
                     NEXT FIELD CURRENT
                  END IF
               END IF

               IF NOT axmt410_01_xmfg001_chk(g_xmfg_d[l_ac].xmfg001,g_xmfg_d[l_ac].xmfg002) THEN
                  LET g_xmfg_d[l_ac].xmfg002 = g_xmfg_d_t.xmfg002
                  NEXT FIELD CURRENT
               END IF
            END IF 
            
            IF g_xmfg_d[l_ac].xmfgdocno IS NOT NULL AND g_xmfg_d[l_ac].xmfgseq IS NOT NULL AND g_xmfg_d[l_ac].xmfg001 IS NOT NULL AND g_xmfg_d[l_ac].xmfg002 IS NOT NULL THEN  
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_xmfg_d[l_ac].xmfgdocno != g_xmfg_d_t.xmfgdocno OR g_xmfg_d[l_ac].xmfgseq != g_xmfg_d_t.xmfgseq OR g_xmfg_d[l_ac].xmfg001 != g_xmfg_d_t.xmfg001 OR g_xmfg_d[l_ac].xmfg002 != g_xmfg_d_t.xmfg002)) THEN
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM xmfg_t WHERE "||"xmfgent = '" ||g_enterprise|| "' AND "||"xmfgdocno = '"||g_xmfg_d[l_ac].xmfgdocno ||"' AND "|| "xmfgseq = '"||g_xmfg_d[l_ac].xmfgseq ||"' AND "|| "xmfg001 = '"||g_xmfg_d[l_ac].xmfg001 ||"' AND "|| "xmfg002 = '"||g_xmfg_d[l_ac].xmfg002 ||"'",'std-00004',0) THEN
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            CALL axmt410_01_round(g_xmfg_d[l_ac].xmfg002) RETURNING g_xmfg_d[l_ac].xmfg002

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfg002
            #add-point:BEFORE FIELD xmfg002 name="input.b.page1.xmfg002"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfg002
            #add-point:ON CHANGE xmfg002 name="input.g.page1.xmfg002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfg003
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmfg_d[l_ac].xmfg003,"0.000","1","","","azz-00079",1) THEN
               NEXT FIELD xmfg003
            END IF 
 
 
 
            #add-point:AFTER FIELD xmfg003 name="input.a.page1.xmfg003"
            IF NOT cl_null(g_xmfg_d[l_ac].xmfg003) THEN 
               #呼叫幣別取位應用元件對單價作取位(依詢價單單頭幣別做取位基準)
               CALL s_curr_round(g_site,l_xmfd.xmfd010,g_xmfg_d[l_ac].xmfg003,'1')
                    RETURNING g_xmfg_d[l_ac].xmfg003
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfg003
            #add-point:BEFORE FIELD xmfg003 name="input.b.page1.xmfg003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfg003
            #add-point:ON CHANGE xmfg003 name="input.g.page1.xmfg003"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfg004
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmfg_d[l_ac].xmfg004,"0","1","100","1","azz-00087",1) THEN
               NEXT FIELD xmfg004
            END IF 
 
 
 
            #add-point:AFTER FIELD xmfg004 name="input.a.page1.xmfg004"
            IF NOT cl_null(g_xmfg_d[l_ac].xmfg004) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfg004
            #add-point:BEFORE FIELD xmfg004 name="input.b.page1.xmfg004"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfg004
            #add-point:ON CHANGE xmfg004 name="input.g.page1.xmfg004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmfgsite
            #add-point:BEFORE FIELD xmfgsite name="input.b.page1.xmfgsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmfgsite
            
            #add-point:AFTER FIELD xmfgsite name="input.a.page1.xmfgsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmfgsite
            #add-point:ON CHANGE xmfgsite name="input.g.page1.xmfgsite"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page1.xmfgdocno
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfgdocno
            #add-point:ON ACTION controlp INFIELD xmfgdocno name="input.c.page1.xmfgdocno"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfgseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfgseq
            #add-point:ON ACTION controlp INFIELD xmfgseq name="input.c.page1.xmfgseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfg001
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfg001
            #add-point:ON ACTION controlp INFIELD xmfg001 name="input.c.page1.xmfg001"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfg002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfg002
            #add-point:ON ACTION controlp INFIELD xmfg002 name="input.c.page1.xmfg002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfg003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfg003
            #add-point:ON ACTION controlp INFIELD xmfg003 name="input.c.page1.xmfg003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfg004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfg004
            #add-point:ON ACTION controlp INFIELD xmfg004 name="input.c.page1.xmfg004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmfgsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmfgsite
            #add-point:ON ACTION controlp INFIELD xmfgsite name="input.c.page1.xmfgsite"
            
            #END add-point
 
 
 
 
         #自訂ACTION
         #add-point:單身其他段落處理(EX:on row change, etc...)
         
         #end add-point
 
         AFTER INPUT
            #add-point:單身輸入後處理
            
            #end add-point
            
      END INPUT
      
 
      
      #add-point:自定義input
      
      #end add-point
    
      #公用action
      ON ACTION accept
         ACCEPT DIALOG
        
      ON ACTION cancel
         #add-point:cancel
         
         #end add-point
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION close
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit
         LET INT_FLAG = TRUE 
         EXIT DIALOG
   
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
 
   #add-point:畫面關閉前
   
   #end add-point
   
   #畫面關閉
   CLOSE WINDOW w_axmt410_01 
   
   #add-point:input段after input 
   LET INT_FLAG = FALSE
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="axmt410_01.other_dialog" readonly="Y" >}

 
{</section>}
 
{<section id="axmt410_01.other_function" readonly="Y" >}

################################################################################
# Descriptions...: 分量計價單身填充
# Memo...........:
# Usage..........: CALL axmt410_01_b_fill(p_xmfgdocno,p_xmfgseq)
# Input parameter: p_xmfgdocno：單號 
#                  p_xmfgseq：項次
# Date & Author..: 2014/07/03 By ming
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt410_01_b_fill(p_xmfgdocno,p_xmfgseq)
   DEFINE p_xmfgdocno     LIKE xmfg_t.xmfgdocno
   DEFINE p_xmfgseq       LIKE xmfg_t.xmfgseq
   DEFINE l_sql           STRING

   LET l_sql = "SELECT xmfgdocno,xmfgseq,xmfg001,xmfg002,xmfg003,xmfg004,xmfgsite ",
               "  FROM xmfg_t ",
               " WHERE xmfgent = '",g_enterprise,"' ",
               "   AND xmfgdocno = '",p_xmfgdocno,"' ",
               "   AND xmfgseq = '",p_xmfgseq,"' "
   PREPARE axmt410_01_pb FROM l_sql
   DECLARE b_fill_curs CURSOR FOR axmt410_01_pb

   CALL g_xmfg_d.clear()
   LET l_ac_t = l_ac
   LET l_ac = 1

   FOREACH b_fill_curs INTO g_xmfg_d[l_ac].*
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'FOREACH:'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         EXIT FOREACH
      END IF

      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         EXIT FOREACH
      END IF
   END FOREACH 
   
   CALL g_xmfg_d.deleteElement(g_xmfg_d.getLength())
   LET g_rec_b = l_ac - 1
   DISPLAY g_rec_b TO FORMONLY.cnt
   LET l_ac = l_ac_t
   CLOSE b_fill_curs
   FREE axmt410_01_pb
END FUNCTION

################################################################################
# Descriptions...: 起始數量檢查
# Memo...........:
# Usage..........: CALL axmt410_01_xmfg001_chk(p_xmfg001,p_xmfg002)
#                  RETURNING TRUE/FALSE
# Date & Author..: 2014/07/07 By ming
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt410_01_xmfg001_chk(p_xmfg001,p_xmfg002)
   DEFINE p_xmfg001     LIKE xmfg_t.xmfg001
   DEFINE p_xmfg002     LIKE xmfg_t.xmfg002
   DEFINE l_count       LIKE type_t.num5
   DEFINE l_sql         STRING

   #如果之前沒資料就不檢查 
   LET l_count = 0
   SELECT COUNT(*) INTO l_count
     FROM xmfg_t
    WHERE xmfgent   = g_enterprise
      AND xmfgdocno = g_xmfgdocno
      AND xmfgseq   = g_xmfgseq
   IF cl_null(l_count) THEN
      LET l_count = 0
   END IF
   IF l_count = 0 THEN
      RETURN TRUE
   END IF 
   
   #起始值或截止值落入先前存在的區間(排除此筆)  
   LET l_count = NULL
   LET l_sql = "SELECT COUNT(*) ",
               "  FROM xmfg_t ",
               " WHERE xmfgent = '",g_enterprise,"' ",
               "   AND xmfgdocno = '",g_xmfgdocno,"' ",
               "   AND xmfgseq = '",g_xmfgseq,"' ",
               "   AND ((xmfg001 BETWEEN ",p_xmfg001," AND ",p_xmfg002,") ",
               "    OR (xmfg002 BETWEEN ",p_xmfg001," AND ",p_xmfg002,")) "
   IF NOT cl_null(g_xmfg_d_t.xmfg001) AND NOT cl_null(g_xmfg_d_t.xmfg002) THEN
      LET l_sql = l_sql CLIPPED," AND xmfg001 <> ",g_xmfg_d_t.xmfg001,
                                " AND xmfg002 <> ",g_xmfg_d_t.xmfg002
   END IF
   PREPARE axmt410_01_sel_xmfg001_chkp1 FROM l_sql
   EXECUTE axmt410_01_sel_xmfg001_chkp1 INTO l_count
   IF cl_null(l_count) THEN
      LET l_count = 0
   END IF 
   
   IF l_count = 0 THEN
      #起始值或截止值落入輸入的區間(排除此筆)  
      LET l_count = NULL
      LET l_sql = "SELECT COUNT(*) ",
                  "  FROM xmfg_t ",
                  " WHERE xmfgent = '",g_enterprise,"' ",
                  "   AND xmfgdocno = '",g_xmfgdocno,"' ",
                  "   AND xmfgseq = '",g_xmfgseq,"' ",
                  "   AND ((xmfg001 <= ",p_xmfg001," AND xmfg002 >= ",p_xmfg001,") ",
                  "    OR (xmfg002 >= ",p_xmfg002," AND xmfg001 <= ",p_xmfg002,")) "
      IF NOT cl_null(g_xmfg_d_t.xmfg001) AND NOT cl_null(g_xmfg_d_t.xmfg002) THEN
         LET l_sql = l_sql CLIPPED," AND xmfg001 <> ",g_xmfg_d_t.xmfg001,
                                   " AND xmfg002 <> ",g_xmfg_d_t.xmfg002
      END IF
      PREPARE axmt410_01_sel_xmfg001_chkp2 FROM l_sql
      EXECUTE axmt410_01_sel_xmfg001_chkp2 INTO l_count

      IF cl_null(l_count) THEN
         LET l_count = 0
      END IF

      IF l_count = 0 THEN

      ELSE
         #起始值或截止值落入輸入的區間(排除此筆)
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'apm-00227'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN FALSE
      END IF
   ELSE 
      #起始值或截止值落入輸入的區間(排除此筆)
      INITIALIZE g_errparam TO NULL
         LET g_errparam.code = 'apm-00227'
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()

      RETURN FALSE
   END IF

   RETURN TRUE
   
END FUNCTION

################################################################################
# Descriptions...: 依單位取位 
# Memo...........:
# Usage..........: CALL axmt410_01_round(p_xmfg001)
#                  RETURNING r_xmfg001
# Date & Author..: 2014/07/07 By ming
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt410_01_round(p_xmfg001)
   DEFINE p_xmfg001     LIKE xmfg_t.xmfg001
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_ooca002     LIKE ooca_t.ooca002
   DEFINE l_ooca004     LIKE ooca_t.ooca004
   DEFINE r_xmfg001     LIKE xmfg_t.xmfg001

   LET l_success = NULL
   LET l_ooca002 = 0
   LET l_ooca004 = NULL

   LET r_xmfg001 = p_xmfg001

   IF NOT cl_null(p_xmfg001) THEN
      IF NOT cl_null(g_xmff004) THEN
         CALL s_aooi250_get_msg(g_xmff004) RETURNING l_success,l_ooca002,l_ooca004
         IF l_success THEN
            CALL s_num_round(l_ooca004,p_xmfg001,l_ooca002) RETURNING r_xmfg001
         END IF
      END IF
   END IF

   RETURN r_xmfg001
END FUNCTION

 
{</section>}
 
