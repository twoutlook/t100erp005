#該程式未解開Section, 採用最新樣板產出!
{<section id="axmt610.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0026(2017-02-15 18:00:51), PR版次:0026(2017-02-22 13:30:10)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000211
#+ Filename...: axmt610
#+ Description: 包裝單維護作業
#+ Creator....: 01996(2014-05-12 21:59:42)
#+ Modifier...: 08992 -SD/PR- 06021
 
{</section>}
 
{<section id="axmt610.global" >}
#應用 t01 樣板自動產生(Version:79)
#add-point:填寫註解說明 name="global.memo" 
#151210-00009#1  2015/12/30 By earl         多角流水號一致時，開窗、校驗調整
#150721-00001#1  2016/01/08 By earl         控制組過濾、單據別與客戶預設資料調整
#160318-00025#15 2016/04/07 BY 07900        重复错误讯息的修改
#160613-00038#1  2016/06/14 By 06821        s_aooi200_chk_slip傳入值(原寫死程式代號)，改用g_prog處理
#160812-00017#6  2016/08/19 By 06814        在satatchange( )的FUNCTION中，有RETURN指令但沒有加上transaction_end( ) 
#                                           造成transaction沒有結束就直接RETURN
#160818-00017#44 2016/08/28 By lixh         单据类作业修改，删除时需重新检查状态
#160908-00016#1  2016/09/13 By 06948        輸入數量時，需檢核單身總數量是否已達出通單數量，若超出數量需控卡
#161109-00085#7  2016/11/10 By lienjunqi    整批調整系統星號寫法
#161109-00085#65 2016/12/01 By 08171        整批調整系統星號寫法
#161207-00033#18 2016/12/20 By 08993        一次性交易對象名稱顯示要改抓pmak003
#160913-00029#1  2017/01/12 By lixh         单身xmemsite栏位未给值
#170119-00008#3  2017/01/19 By 06137        1.新增时，部门开窗和手动输入检核不一致，开窗开不出其他法人归属的部门，但手动输入提交OK
#                                           2.新增时，“来源单号“会开出分销的出通单号(来源类型：1:出货通知单)
#                                           3.新增时，“来源单号“会开出分销的出货单(来源类型：2:出货单)
#                                           4.新增时，“来源单号“会开出分销的退厂单(来源类型：3:仓退单)
#                                           5.新增时，“来源单号“会开出分销的调拨配送单(来源类型：4:调拨单)
#161031-00025#30 2017/02/07  By 08992      1.將aooi360_01以嵌入的方式，用頁籤放在axmt610單頭多帳期頁籤與異動資訊頁籤中間
#                                           要可修改
#                                           控制類型 =3:內部資訊傳遞 取消不要了
#                                           項次固定寫入0
#                                         2.原axmt610的備註action，改為確認後可執行，直接修改單頭新的"備註"頁籤
#                                         3.axmt610單身最後面增加顯示"長備註"欄位，一樣抓取aooi360的備註顯示
#                                           項次 = 單身項次
#                                           控制類型 = 列印在後
#170216-00017#1  2017/02/18  By 07024     當來源類型為 1:出通單 或 2:出貨單時，
#                                         (1)單身輸入完第一筆時，若單頭的多角流程編號為空，把單身的多角流程編號回寫至單頭(xmel015)
#                                         (2)單身輸入的來源單號-多角流程編號，需與單頭的多角流程編號相同(單頭的xmel015需有值)
#                                         (3)當單身沒資料、單頭也沒來源單號時，需清空多角流程編號\
#170214-00043#1  2017/02/22 By ouhz         调整单身维护了来源单号，项次后，自动带出料件编号信息
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目 name="global.import"
IMPORT FGL aoo_aooi360_01   #161031-00025#30
#end add-point 
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"
#161031-00025#30-s
GLOBALS
TYPE type_g_ooff_d        RECORD
       ooff001 LIKE ooff_t.ooff001, 
   ooff002 LIKE ooff_t.ooff002, 
   ooff004 LIKE ooff_t.ooff004, 
   ooff005 LIKE ooff_t.ooff005, 
   ooff006 LIKE ooff_t.ooff006, 
   ooff007 LIKE ooff_t.ooff007, 
   ooff008 LIKE ooff_t.ooff008, 
   ooff009 LIKE ooff_t.ooff009, 
   ooff010 LIKE ooff_t.ooff010, 
   ooff011 LIKE ooff_t.ooff011, 
   ooff003 LIKE ooff_t.ooff003, 
   ooff012 LIKE ooff_t.ooff012, 
   ooff013 LIKE ooff_t.ooff013, 
   ooff014 LIKE ooff_t.ooff014
       END RECORD
 
DEFINE g_ooff_d4          DYNAMIC ARRAY OF type_g_ooff_d

DEFINE g_detail_insert   LIKE type_t.num5   #單身的新增權限
DEFINE g_detail_delete   LIKE type_t.num5   #單身的刪除權限
DEFINE g_wc2_i36001      STRING             #备注单身QBE條件
DEFINE g_d_idx_i36001    LIKE type_t.num5   #备注单身所在筆數
DEFINE g_d_cnt_i36001    LIKE type_t.num5   #备注单身總筆數
DEFINE g_appoint_idx     LIKE type_t.num5   #指定進入單身行數
DEFINE g_ooff001_d       LIKE ooff_t.ooff001
DEFINE g_ooff002_d       LIKE ooff_t.ooff002
DEFINE g_ooff003_d       LIKE ooff_t.ooff003
DEFINE g_ooff004_d       LIKE ooff_t.ooff004
DEFINE g_ooff005_d       LIKE ooff_t.ooff005
DEFINE g_ooff006_d       LIKE ooff_t.ooff006
DEFINE g_ooff007_d       LIKE ooff_t.ooff007
DEFINE g_ooff008_d       LIKE ooff_t.ooff008
DEFINE g_ooff009_d       LIKE ooff_t.ooff009
DEFINE g_ooff010_d       LIKE ooff_t.ooff010
DEFINE g_ooff011_d       LIKE ooff_t.ooff011
END GLOBALS
#161031-00025#30-e
#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_xmel_m        RECORD
       xmeldocno LIKE xmel_t.xmeldocno, 
   xmeldocno_desc LIKE type_t.chr80, 
   xmeldocdt LIKE xmel_t.xmeldocdt, 
   xmel003 LIKE xmel_t.xmel003, 
   xmel003_desc LIKE type_t.chr80, 
   xmel001 LIKE xmel_t.xmel001, 
   xmel001_desc LIKE type_t.chr80, 
   xmel002 LIKE xmel_t.xmel002, 
   xmel002_desc LIKE type_t.chr80, 
   xmelstus LIKE xmel_t.xmelstus, 
   xmel004 LIKE xmel_t.xmel004, 
   xmel005 LIKE xmel_t.xmel005, 
   xmel006 LIKE xmel_t.xmel006, 
   xmel007 LIKE xmel_t.xmel007, 
   xmel007_desc LIKE type_t.chr80, 
   xmel008 LIKE xmel_t.xmel008, 
   xmel009 LIKE xmel_t.xmel009, 
   xmel009_desc LIKE type_t.chr80, 
   xmel011 LIKE xmel_t.xmel011, 
   xmel012 LIKE xmel_t.xmel012, 
   xmel013 LIKE xmel_t.xmel013, 
   xmel013_desc LIKE type_t.chr80, 
   xmel014 LIKE xmel_t.xmel014, 
   l_a LIKE type_t.chr500, 
   xmel010 LIKE xmel_t.xmel010, 
   xmel010_desc LIKE type_t.chr80, 
   xmel018 LIKE xmel_t.xmel018, 
   xmel019 LIKE xmel_t.xmel019, 
   xmel020 LIKE xmel_t.xmel020, 
   xmel021 LIKE xmel_t.xmel021, 
   xmelsite LIKE xmel_t.xmelsite, 
   xmel015 LIKE xmel_t.xmel015, 
   xmel015_desc LIKE type_t.chr80, 
   xmel016 LIKE xmel_t.xmel016, 
   xmel017 LIKE xmel_t.xmel017, 
   xmelownid LIKE xmel_t.xmelownid, 
   xmelownid_desc LIKE type_t.chr80, 
   xmelowndp LIKE xmel_t.xmelowndp, 
   xmelowndp_desc LIKE type_t.chr80, 
   xmelcrtid LIKE xmel_t.xmelcrtid, 
   xmelcrtid_desc LIKE type_t.chr80, 
   xmelcrtdp LIKE xmel_t.xmelcrtdp, 
   xmelcrtdp_desc LIKE type_t.chr80, 
   xmelcrtdt LIKE xmel_t.xmelcrtdt, 
   xmelmodid LIKE xmel_t.xmelmodid, 
   xmelmodid_desc LIKE type_t.chr80, 
   xmelmoddt LIKE xmel_t.xmelmoddt, 
   xmelcnfid LIKE xmel_t.xmelcnfid, 
   xmelcnfid_desc LIKE type_t.chr80, 
   xmelcnfdt LIKE xmel_t.xmelcnfdt
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_xmem_d        RECORD
       xmemseq LIKE xmem_t.xmemseq, 
   xmem001 LIKE xmem_t.xmem001, 
   xmem002 LIKE xmem_t.xmem002, 
   xmem003 LIKE xmem_t.xmem003, 
   xmem003_desc LIKE type_t.chr500, 
   xmem003_desc_desc LIKE type_t.chr500, 
   xmem004 LIKE xmem_t.xmem004, 
   xmem005 LIKE xmem_t.xmem005, 
   xmem005_desc LIKE type_t.chr500, 
   xmem006 LIKE xmem_t.xmem006, 
   xmem007 LIKE xmem_t.xmem007, 
   xmem008 LIKE xmem_t.xmem008, 
   xmem009 LIKE xmem_t.xmem009, 
   xmem010 LIKE xmem_t.xmem010, 
   xmem011 LIKE xmem_t.xmem011, 
   xmem012 LIKE xmem_t.xmem012, 
   xmem013 LIKE xmem_t.xmem013, 
   xmem014 LIKE xmem_t.xmem014, 
   xmem015 LIKE xmem_t.xmem015, 
   xmem016 LIKE xmem_t.xmem016, 
   xmem017 LIKE xmem_t.xmem017, 
   xmem018 LIKE xmem_t.xmem018, 
   xmem019 LIKE xmem_t.xmem019, 
   xmemsite LIKE xmem_t.xmemsite, 
   ooff013 LIKE type_t.chr500
       END RECORD
 
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
            b_xmeldocno LIKE xmel_t.xmeldocno,
   b_xmeldocno_desc LIKE type_t.chr80,
      b_xmeldocdt LIKE xmel_t.xmeldocdt,
      b_xmel001 LIKE xmel_t.xmel001,
   b_xmel001_desc LIKE type_t.chr80,
      b_xmel002 LIKE xmel_t.xmel002,
   b_xmel002_desc LIKE type_t.chr80
       END RECORD
       
#add-point:自定義模組變數(Module Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
#mod--161109-00085#7-s
#DEFINE g_ooef     RECORD LIKE ooef_t.* 
DEFINE g_ooef   RECORD  #組織基本資料檔
       ooefent LIKE ooef_t.ooefent, #企業編號
       ooefstus LIKE ooef_t.ooefstus, #狀態碼
       ooef001 LIKE ooef_t.ooef001, #組織編號
       ooef002 LIKE ooef_t.ooef002, #統一編號
       ooef004 LIKE ooef_t.ooef004, #單據別參照表號
       ooef005 LIKE ooef_t.ooef005, #單據據點編號
       ooef006 LIKE ooef_t.ooef006, #所屬國家地區
       ooef007 LIKE ooef_t.ooef007, #上市櫃公司編號
       ooef008 LIKE ooef_t.ooef008, #行事曆參照表號
       ooef009 LIKE ooef_t.ooef009, #製造行事曆對應類別
       ooef010 LIKE ooef_t.ooef010, #辦公行事曆對應類別
       ooef011 LIKE ooef_t.ooef011, #專屬國家地區功能
       ooef012 LIKE ooef_t.ooef012, #聯絡對象識別碼
       ooef013 LIKE ooef_t.ooef013, #日期顯示格式
       ooefownid LIKE ooef_t.ooefownid, #資料所有者
       ooefowndp LIKE ooef_t.ooefowndp, #資料所有部門
       ooefcrtid LIKE ooef_t.ooefcrtid, #資料建立者
       ooefcrtdp LIKE ooef_t.ooefcrtdp, #資料建立部門
       ooefcrtdt LIKE ooef_t.ooefcrtdt, #資料創建日
       ooefmodid LIKE ooef_t.ooefmodid, #資料修改者
       ooefmoddt LIKE ooef_t.ooefmoddt, #最近修改日
       ooef014 LIKE ooef_t.ooef014, #幣別參照表號
       ooef015 LIKE ooef_t.ooef015, #匯率參照表號
       ooef016 LIKE ooef_t.ooef016, #主幣別編號
       ooef017 LIKE ooef_t.ooef017, #法人歸屬
       ooef018 LIKE ooef_t.ooef018, #時區
       ooef019 LIKE ooef_t.ooef019, #稅區
       ooef020 LIKE ooef_t.ooef020, #工商登記號
       ooef021 LIKE ooef_t.ooef021, #法人代表
       ooef022 LIKE ooef_t.ooef022, #註冊資本
       ooef003 LIKE ooef_t.ooef003, #法人否
       ooef023 LIKE ooef_t.ooef023, #數字/金額顯示格式
       ooef024 LIKE ooef_t.ooef024, #據點對應客戶/供應商編號
       ooef025 LIKE ooef_t.ooef025, #品管參照表號
       ooef026 LIKE ooef_t.ooef026, #預設存款銀行帳戶
       ooef100 LIKE ooef_t.ooef100, #門店狀態
       ooef101 LIKE ooef_t.ooef101, #層級類型
       ooef102 LIKE ooef_t.ooef102, #業態
       ooef103 LIKE ooef_t.ooef103, #渠道
       ooef104 LIKE ooef_t.ooef104, #商圈
       ooef105 LIKE ooef_t.ooef105, #可比店
       ooef106 LIKE ooef_t.ooef106, #價格參考標準
       ooef107 LIKE ooef_t.ooef107, #店慶會計期
       ooef108 LIKE ooef_t.ooef108, #散客編號
       ooef109 LIKE ooef_t.ooef109, #開業日期
       ooef110 LIKE ooef_t.ooef110, #閉店日期
       ooef111 LIKE ooef_t.ooef111, #測量面積
       ooef112 LIKE ooef_t.ooef112, #建築面積
       ooef113 LIKE ooef_t.ooef113, #經營面積
       ooef114 LIKE ooef_t.ooef114, #合作對象總數
       ooef115 LIKE ooef_t.ooef115, #24小時營業否
       ooef120 LIKE ooef_t.ooef120, #本店取貨訂定比例
       ooef121 LIKE ooef_t.ooef121, #異店取貨訂定比例
       ooef122 LIKE ooef_t.ooef122, #總部配送訂定比例
       ooef123 LIKE ooef_t.ooef123, #預設收貨成本倉
       ooef124 LIKE ooef_t.ooef124, #預設出貨成本倉
       ooef125 LIKE ooef_t.ooef125, #預設在途成本倉
       ooef150 LIKE ooef_t.ooef150, #門店類別
       ooef151 LIKE ooef_t.ooef151, #規模類別
       ooef152 LIKE ooef_t.ooef152, #門店週期
       ooef153 LIKE ooef_t.ooef153, #銷售區域
       ooef154 LIKE ooef_t.ooef154, #銷售省區
       ooef155 LIKE ooef_t.ooef155, #銷售地區
       ooef156 LIKE ooef_t.ooef156, #銷售片區
       ooef157 LIKE ooef_t.ooef157, #其他屬性1
       ooef158 LIKE ooef_t.ooef158, #其他屬性2
       ooef159 LIKE ooef_t.ooef159, #其他屬性3
       ooef160 LIKE ooef_t.ooef160, #其他屬性4
       ooef161 LIKE ooef_t.ooef161, #其他屬性5
       ooef162 LIKE ooef_t.ooef162, #其他屬性6
       ooef163 LIKE ooef_t.ooef163, #其他屬性7
       ooef164 LIKE ooef_t.ooef164, #其他屬性8
       ooef165 LIKE ooef_t.ooef165, #其他屬性9
       ooef166 LIKE ooef_t.ooef166, #其他屬性10
       ooef167 LIKE ooef_t.ooef167, #其他屬性11
       ooef168 LIKE ooef_t.ooef168, #其他屬性12
       ooef169 LIKE ooef_t.ooef169, #其他屬性13
       ooef170 LIKE ooef_t.ooef170, #其他屬性14
       ooef171 LIKE ooef_t.ooef171, #其他屬性15
       ooef172 LIKE ooef_t.ooef172, #其他屬性16
       ooef173 LIKE ooef_t.ooef173, #其他屬性17
       ooefunit LIKE ooef_t.ooefunit, #應用組織
       ooef200 LIKE ooef_t.ooef200, #分群編號
       ooef201 LIKE ooef_t.ooef201, #營運據點
       ooef202 LIKE ooef_t.ooef202, #預測組織
       ooef203 LIKE ooef_t.ooef203, #部門組織
       ooef204 LIKE ooef_t.ooef204, #核算組織
       ooef205 LIKE ooef_t.ooef205, #預算組織
       ooef206 LIKE ooef_t.ooef206, #資金組織
       ooef207 LIKE ooef_t.ooef207, #資產組織
       ooef208 LIKE ooef_t.ooef208, #銷售組織
       ooef209 LIKE ooef_t.ooef209, #銷售範圍
       ooef210 LIKE ooef_t.ooef210, #採購組織
       ooef211 LIKE ooef_t.ooef211, #物流組織
       ooef212 LIKE ooef_t.ooef212, #結算組織
       ooef213 LIKE ooef_t.ooef213, #nouse
       ooef214 LIKE ooef_t.ooef214, #nouse
       ooef215 LIKE ooef_t.ooef215, #nouse
       ooef216 LIKE ooef_t.ooef216, #nouse
       ooef217 LIKE ooef_t.ooef217, #nouse
       ooef301 LIKE ooef_t.ooef301, #營銷中心
       ooef302 LIKE ooef_t.ooef302, #配送中心
       ooef303 LIKE ooef_t.ooef303, #採購中心
       ooef304 LIKE ooef_t.ooef304, #門店
       ooef305 LIKE ooef_t.ooef305, #辦事處
       ooef306 LIKE ooef_t.ooef306, #nouse
       ooef307 LIKE ooef_t.ooef307, #nouse
       ooef308 LIKE ooef_t.ooef308, #nouse
       ooef309 LIKE ooef_t.ooef309, #nouse
       ooef310 LIKE ooef_t.ooef310, #nouse
       ooef126 LIKE ooef_t.ooef126, #預設收貨非成本倉
       ooef127 LIKE ooef_t.ooef127, #預設出貨非成本倉
       ooef128 LIKE ooef_t.ooef128, #預設在途非成本倉
       ooef116 LIKE ooef_t.ooef116 #語言別
               END RECORD
#mod--161109-00085#7-e
#DEFINE g_detail_insert   LIKE type_t.chr1   #161031-00025#30 mark
DEFINE g_detail_insert1   LIKE type_t.chr1   #161031-00025#30 add
DEFINE g_aic_doc         LIKE type_t.num5    #151210-00009#1  2015/12/30 By earl add
#170119-00008#3 Add By Ken 170119(S)
DEFINE g_slip_wc1        STRING              #出通單過濾開窗條件SQL
DEFINE g_slip_wc2        STRING              #出貨單過濾開窗條件SQL
DEFINE g_slip_wc3        STRING              #倉退單過濾開窗條件SQL
DEFINE g_slip_wc4        STRING              #調撥單(一階段)過濾開窗條件SQL
DEFINE g_slip_wc5        STRING              #調撥單(二階段)過濾開窗條件SQL
DEFINE g_prog_o          STRING
#170119-00008#3 Add By Ken 170119(E)
DEFINE g_detail_id          STRING           #紀錄停留在哪個Page #161031-00025#30 add
#end add-point
       
#模組變數(Module Variables)
DEFINE g_xmel_m          type_g_xmel_m
DEFINE g_xmel_m_t        type_g_xmel_m
DEFINE g_xmel_m_o        type_g_xmel_m
DEFINE g_xmel_m_mask_o   type_g_xmel_m #轉換遮罩前資料
DEFINE g_xmel_m_mask_n   type_g_xmel_m #轉換遮罩後資料
 
   DEFINE g_xmeldocno_t LIKE xmel_t.xmeldocno
 
 
DEFINE g_xmem_d          DYNAMIC ARRAY OF type_g_xmem_d
DEFINE g_xmem_d_t        type_g_xmem_d
DEFINE g_xmem_d_o        type_g_xmem_d
DEFINE g_xmem_d_mask_o   DYNAMIC ARRAY OF type_g_xmem_d #轉換遮罩前資料
DEFINE g_xmem_d_mask_n   DYNAMIC ARRAY OF type_g_xmem_d #轉換遮罩後資料
 
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
 
 
DEFINE g_wc2_extend          STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                         #Current Dialog
                                                               
DEFINE g_pagestart           LIKE type_t.num10                 
DEFINE gwin_curr             ui.Window                         #Current Window
DEFINE gfrm_curr             ui.Form                           #Current Form
DEFINE g_page_action         STRING                            #page action
DEFINE g_header_hidden       LIKE type_t.num5                  #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5                  #隱藏工作Panel
DEFINE g_page                STRING                            #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10                  #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx_tmp      LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10                  #單身2目前所在筆數
DEFINE g_detail_idx_list     DYNAMIC ARRAY OF LIKE type_t.num10 #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10                  #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10                  #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10                  #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                             #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10                  #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                            #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10                  #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5                   #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
DEFINE g_idx_group           om.SaxAttributes              #頁籤群組
DEFINE g_master_commit       LIKE type_t.chr1              #確認單頭是否修改過
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"

#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"

#end add-point
 
{</section>}
 
{<section id="axmt610.main" >}
#應用 a26 樣板自動產生(Version:7)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define(客製用) name="main.define_customerization"
   
   #end add-point   
   #add-point:main段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="main.define"
   
   #end add-point   
   
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axm","")
 
   #add-point:作業初始化 name="main.init"
   #mod--161109-00085#7-s
   #SELECT * INTO g_ooef.* FROM ooef_t WHERE ooefent = g_enterprise AND ooef001 = g_site
   SELECT ooefent,ooefstus,ooef001,ooef002,ooef004,
          ooef005,ooef006,ooef007,ooef008,ooef009,
          ooef010,ooef011,ooef012,ooef013,ooefownid,
          ooefowndp,ooefcrtid,ooefcrtdp,ooefcrtdt,ooefmodid,
          ooefmoddt,ooef014,ooef015,ooef016,ooef017,
          ooef018,ooef019,ooef020,ooef021,ooef022,
          ooef003,ooef023,ooef024,ooef025,ooef026,
          ooef100,ooef101,ooef102,ooef103,ooef104,
          ooef105,ooef106,ooef107,ooef108,ooef109,
          ooef110,ooef111,ooef112,ooef113,ooef114,
          ooef115,ooef120,ooef121,ooef122,ooef123,
          ooef124,ooef125,ooef150,ooef151,ooef152,
          ooef153,ooef154,ooef155,ooef156,ooef157,
          ooef158,ooef159,ooef160,ooef161,ooef162,
          ooef163,ooef164,ooef165,ooef166,ooef167,
          ooef168,ooef169,ooef170,ooef171,ooef172,
          ooef173,ooefunit,ooef200,ooef201,ooef202,
          ooef203,ooef204,ooef205,ooef206,ooef207,
          ooef208,ooef209,ooef210,ooef211,ooef212,
          ooef213,ooef214,ooef215,ooef216,ooef217,
          ooef301,ooef302,ooef303,ooef304,ooef305,
          ooef306,ooef307,ooef308,ooef309,ooef310,
          ooef126,ooef127,ooef128,ooef116 
   INTO g_ooef.ooefent,g_ooef.ooefstus,g_ooef.ooef001,g_ooef.ooef002,g_ooef.ooef004,
        g_ooef.ooef005,g_ooef.ooef006,g_ooef.ooef007,g_ooef.ooef008,g_ooef.ooef009,
        g_ooef.ooef010,g_ooef.ooef011,g_ooef.ooef012,g_ooef.ooef013,g_ooef.ooefownid,
        g_ooef.ooefowndp,g_ooef.ooefcrtid,g_ooef.ooefcrtdp,g_ooef.ooefcrtdt,g_ooef.ooefmodid,
        g_ooef.ooefmoddt,g_ooef.ooef014,g_ooef.ooef015,g_ooef.ooef016,g_ooef.ooef017,
        g_ooef.ooef018,g_ooef.ooef019,g_ooef.ooef020,g_ooef.ooef021,g_ooef.ooef022,
        g_ooef.ooef003,g_ooef.ooef023,g_ooef.ooef024,g_ooef.ooef025,g_ooef.ooef026,
        g_ooef.ooef100,g_ooef.ooef101,g_ooef.ooef102,g_ooef.ooef103,g_ooef.ooef104,
        g_ooef.ooef105,g_ooef.ooef106,g_ooef.ooef107,g_ooef.ooef108,g_ooef.ooef109,
        g_ooef.ooef110,g_ooef.ooef111,g_ooef.ooef112,g_ooef.ooef113,g_ooef.ooef114,
        g_ooef.ooef115,g_ooef.ooef120,g_ooef.ooef121,g_ooef.ooef122,g_ooef.ooef123,
        g_ooef.ooef124,g_ooef.ooef125,g_ooef.ooef150,g_ooef.ooef151,g_ooef.ooef152,
        g_ooef.ooef153,g_ooef.ooef154,g_ooef.ooef155,g_ooef.ooef156,g_ooef.ooef157,
        g_ooef.ooef158,g_ooef.ooef159,g_ooef.ooef160,g_ooef.ooef161,g_ooef.ooef162,
        g_ooef.ooef163,g_ooef.ooef164,g_ooef.ooef165,g_ooef.ooef166,g_ooef.ooef167,
        g_ooef.ooef168,g_ooef.ooef169,g_ooef.ooef170,g_ooef.ooef171,g_ooef.ooef172,
        g_ooef.ooef173,g_ooef.ooefunit,g_ooef.ooef200,g_ooef.ooef201,g_ooef.ooef202,
        g_ooef.ooef203,g_ooef.ooef204,g_ooef.ooef205,g_ooef.ooef206,g_ooef.ooef207,
        g_ooef.ooef208,g_ooef.ooef209,g_ooef.ooef210,g_ooef.ooef211,g_ooef.ooef212,
        g_ooef.ooef213,g_ooef.ooef214,g_ooef.ooef215,g_ooef.ooef216,g_ooef.ooef217,
        g_ooef.ooef301,g_ooef.ooef302,g_ooef.ooef303,g_ooef.ooef304,g_ooef.ooef305,
        g_ooef.ooef306,g_ooef.ooef307,g_ooef.ooef308,g_ooef.ooef309,g_ooef.ooef310,
        g_ooef.ooef126,g_ooef.ooef127,g_ooef.ooef128,g_ooef.ooef116 
   FROM ooef_t WHERE ooefent = g_enterprise AND ooef001 = g_site
   #mod--161109-00085#7-e
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define name="main.define_sql"
   
   #end add-point
   LET g_forupd_sql = " SELECT xmeldocno,'',xmeldocdt,xmel003,'',xmel001,'',xmel002,'',xmelstus,xmel004, 
       xmel005,xmel006,xmel007,'',xmel008,xmel009,'',xmel011,xmel012,xmel013,'',xmel014,'',xmel010,'', 
       xmel018,xmel019,xmel020,xmel021,xmelsite,xmel015,'',xmel016,xmel017,xmelownid,'',xmelowndp,'', 
       xmelcrtid,'',xmelcrtdp,'',xmelcrtdt,xmelmodid,'',xmelmoddt,xmelcnfid,'',xmelcnfdt", 
                      " FROM xmel_t",
                      " WHERE xmelent= ? AND xmeldocno=? FOR UPDATE"
   #add-point:SQL_define name="main.after_define_sql"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE axmt610_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT DISTINCT t0.xmeldocno,t0.xmeldocdt,t0.xmel003,t0.xmel001,t0.xmel002,t0.xmelstus, 
       t0.xmel004,t0.xmel005,t0.xmel006,t0.xmel007,t0.xmel008,t0.xmel009,t0.xmel011,t0.xmel012,t0.xmel013, 
       t0.xmel014,t0.xmel010,t0.xmel018,t0.xmel019,t0.xmel020,t0.xmel021,t0.xmelsite,t0.xmel015,t0.xmel016, 
       t0.xmel017,t0.xmelownid,t0.xmelowndp,t0.xmelcrtid,t0.xmelcrtdp,t0.xmelcrtdt,t0.xmelmodid,t0.xmelmoddt, 
       t0.xmelcnfid,t0.xmelcnfdt,t1.pmaal004 ,t2.ooag011 ,t3.ooefl003 ,t4.oocql004 ,t5.oocql004 ,t6.icaal003 , 
       t7.ooag011 ,t8.ooefl003 ,t9.ooag011 ,t10.ooefl003 ,t11.ooag011 ,t12.ooag011",
               " FROM xmel_t t0",
                              " LEFT JOIN pmaal_t t1 ON t1.pmaalent="||g_enterprise||" AND t1.pmaal001=t0.xmel003 AND t1.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.xmel001  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.xmel002 AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t4 ON t4.oocqlent="||g_enterprise||" AND t4.oocql001='263' AND t4.oocql002=t0.xmel007 AND t4.oocql003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t5 ON t5.oocqlent="||g_enterprise||" AND t5.oocql001='209' AND t5.oocql002=t0.xmel013 AND t5.oocql003='"||g_dlang||"' ",
               " LEFT JOIN icaal_t t6 ON t6.icaalent="||g_enterprise||" AND t6.icaal001=t0.xmel015 AND t6.icaal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t7 ON t7.ooagent="||g_enterprise||" AND t7.ooag001=t0.xmelownid  ",
               " LEFT JOIN ooefl_t t8 ON t8.ooeflent="||g_enterprise||" AND t8.ooefl001=t0.xmelowndp AND t8.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t9 ON t9.ooagent="||g_enterprise||" AND t9.ooag001=t0.xmelcrtid  ",
               " LEFT JOIN ooefl_t t10 ON t10.ooeflent="||g_enterprise||" AND t10.ooefl001=t0.xmelcrtdp AND t10.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t11 ON t11.ooagent="||g_enterprise||" AND t11.ooag001=t0.xmelmodid  ",
               " LEFT JOIN ooag_t t12 ON t12.ooagent="||g_enterprise||" AND t12.ooag001=t0.xmelcnfid  ",
 
               " WHERE t0.xmelent = " ||g_enterprise|| " AND t0.xmeldocno = ?"
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define name="main.after_refresh_sql"
   
   #end add-point
   PREPARE axmt610_master_referesh FROM g_sql
 
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call name="main.servicecall"
      
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axmt610 WITH FORM cl_ap_formpath("axm",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL axmt610_init()   
 
      #進入選單 Menu (="N")
      CALL axmt610_ui_dialog() 
      
      #add-point:畫面關閉前 name="main.before_close"
      
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_axmt610
      
   END IF 
   
   CLOSE axmt610_cl
   
   
 
   #add-point:作業離開前 name="main.exit"
   
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
 
 
{</section>}
 
{<section id="axmt610.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION axmt610_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   
   #end add-point    
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   
   #end add-point
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   
   #各個page指標
   LET g_detail_idx_list[1] = 1 
 
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
      CALL cl_set_combo_scc_part('xmelstus','13','N,Y,A,D,R,W,X')
 
      CALL cl_set_combo_scc('xmel004','2069') 
   CALL cl_set_combo_scc('xmel011','62') 
   CALL cl_set_combo_scc('xmel012','62') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
   
   #page群組
   LET g_idx_group = om.SaxAttributes.create()
   CALL g_idx_group.addAttribute("'1',","1")
 
 
   #add-point:畫面資料初始化 name="init.init"
   #161031-00025#30-s
   #子程式畫面取代主程式元件
   CALL cl_ui_replace_sub_window(cl_ap_formpath("aoo", "aooi360_01"), "grid_remarks", "Table", "s_detail1_aooi360_01")
   CALL cl_set_combo_scc_part('ooff012','11','1,2,4')
   CALL cl_set_comp_visible("ooff003",FALSE)
   #161031-00025#30-e
   CALL cl_set_combo_scc_part('xmel012','2512','1,2')
   
   #151210-00009#1  2015/12/30 By earl s
   IF cl_get_para(g_enterprise,'','E-BAS-0018') = 'Y' THEN
      LET g_aic_doc = TRUE
   ELSE
      LET g_aic_doc = FALSE
   END IF
   #151210-00009#1  2015/12/30 By earl e
   
   #170119-00008#3 Add By Ken 170119(S)
   LET g_prog_o = g_prog                #先備份
   LET g_prog = 'axmt520' 
   CALL s_aooi200_filter_slip('xmdgdocno') RETURNING g_slip_wc1    #出通單開窗過濾SQL  
   LET g_prog = 'axmt540'   
   CALL s_aooi200_filter_slip('xmdkdocno') RETURNING g_slip_wc2    #出貨單開窗過濾SQL   
   LET g_prog = 'apmt580'   
   CALL s_aooi200_filter_slip('pmdsdocno') RETURNING g_slip_wc3    #倉退單開窗過濾SQL 
   LET g_prog = 'aint330'   
   CALL s_aooi200_filter_slip('indcdocno') RETURNING g_slip_wc4    #調撥單(一階段)開窗過濾SQL 
   LET g_prog = 'aint340'   
   CALL s_aooi200_filter_slip('indcdocno') RETURNING g_slip_wc5    #調撥單(二階段)開窗過濾SQL    
   LET g_prog = g_prog_o                #還原備份   
   #170119-00008#3 Add By Ken 170119(E)
   #end add-point
   
   #初始化搜尋條件
   CALL axmt610_default_search()
    
END FUNCTION
 
{</section>}
 
{<section id="axmt610.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION axmt610_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   
   #end add-point
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   DEFINE  l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE  l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE  l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   #因應查詢方案進行處理
   IF g_default THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #action default動作
   #應用 a42 樣板自動產生(Version:3)
   #進入程式時預設執行的動作
   CASE g_actdefault
      WHEN "insert"
         LET g_action_choice="insert"
         LET g_actdefault = ""
         IF cl_auth_chk_act("insert") THEN
            CALL axmt610_insert()
            #add-point:ON ACTION insert name="menu.default.insert"
            
            #END add-point
         END IF
 
      #add-point:action default自訂 name="ui_dialog.action_default"
      
      #end add-point
      OTHERWISE
   END CASE
 
 
 
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE g_xmel_m.* TO NULL
         CALL g_xmem_d.clear()
 
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL axmt610_init()
      END IF
   
      CALL lib_cl_dlg.cl_dlg_before_display()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
         
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL axmt610_fetch('') # reload data
               LET l_ac = 1
               CALL axmt610_ui_detailshow() #Setting the current row 
         
               CALL axmt610_idx_chk()
               #NEXT FIELD xmemseq
         
               ON ACTION qbefield_user   #欄位隱藏設定 
                  LET g_action_choice="qbefield_user"
                  CALL cl_ui_qbefield_user()
         END DISPLAY
    
         DISPLAY ARRAY g_xmem_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL axmt610_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[1] = l_ac
               CALL g_idx_group.addAttribute("'1',",l_ac)
               
               #add-point:page1, before row動作 name="ui_dialog.page1.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL axmt610_idx_chk()
               #add-point:page1自定義行為 name="ui_dialog.page1.before_display"
               
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION detail_qrystr
               MENU "" ATTRIBUTE(STYLE="popup")
                  #add-point:ON ACTION detail_qrystr相關動作 name="menu.detail_show.page1_sub.detail_qrystr"
                  BEFORE MENU
                     IF cl_null(g_xmem_d[l_ac].xmem001) THEN
                        HIDE OPTION "prog_axmt520"
                        EXIT MENU
                     END IF                     
                  #END add-point
                                 #應用 a43 樣板自動產生(Version:4)
               ON ACTION prog_axmt520
                  LET g_action_choice="prog_axmt520"
                  IF cl_auth_chk_act("prog_axmt520") THEN
                     
                     #add-point:ON ACTION prog_axmt520 name="menu.detail_show.page1_sub.prog_axmt520"
               #應用 a41 樣板自動產生(Version:2)
               #使用JSON格式組合參數與作業編號(串查)
               CALL axmt610_qrystr(g_xmem_d[l_ac].xmem001)
                     #END add-point
                     
                  END IF
 
 
 
 
               END MENU
 
 
 
               #add-point:ON ACTION detail_qrystr name="menu.detail_show.page1.detail_qrystr"
               
               #END add-point
 
 
 
 
               
            #add-point:page1自定義行為 name="ui_dialog.page1.action"
            
            #end add-point
               
         END DISPLAY
        
 
         
 
         
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         SUBDIALOG aoo_aooi360_01.aooi360_01_display     #161031-00025#30 add
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            #先填充browser資料
            CALL axmt610_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL axmt610_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL axmt610_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL axmt610_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2 name="ui_dialog.before_dialog2"

            #150721-00001#1  2016/01/08 By earl mod s
            CALL axmt610_set_act_visible()
            CALL axmt610_set_act_no_visible()
            #150721-00001#1  2016/01/08 By earl mod e

            #end add-point
 
         #add-point:ui_dialog段more_action name="ui_dialog.more_action"
         #161031-00025#30-s
         ON ACTION remarks_page
            LET g_detail_id = "remarks_page"
            NEXT FIELD ooff012
         #161031-00025#30-e
         #end add-point
 
         #狀態碼切換
         ON ACTION statechange
            LET g_action_choice = "statechange"
            CALL axmt610_statechange()
            #根據資料狀態切換action狀態
            CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
            CALL axmt610_set_act_visible()   
            CALL axmt610_set_act_no_visible()
            IF NOT (g_xmel_m.xmeldocno IS NULL
 
              ) THEN
               #組合條件
               LET g_add_browse = " xmelent = " ||g_enterprise|| " AND",
                                  " xmeldocno = '", g_xmel_m.xmeldocno, "' "
 
               #填到對應位置
               CALL axmt610_browser_fill("")
            END IF
         #應用 a32 樣板自動產生(Version:3)
         #簽核狀況
         ON ACTION bpm_status
            #查詢簽核狀況, 統一建立HyperLink
            CALL cl_bpm_status()
            #add-point:ON ACTION bpm_status name="menu.bpm_status"
            
            #END add-point
 
 
 
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "xmel_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "xmem_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  #組合g_wc2
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
 
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
               END IF
               CALL axmt610_browser_fill("F")   #browser_fill()會將notice區塊清空
               CALL cl_notice()   #重新顯示,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "xmel_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "xmem_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1)
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
                  #取得條件後需要重查、跳到結果第一筆資料的功能程式段
                  CALL axmt610_browser_fill("F")
                  IF g_browser_cnt = 0 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "-100" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     CLEAR FORM
                  ELSE
                     CALL axmt610_fetch("F")
                  END IF
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            CALL cl_notice()
          
         #應用 a49 樣板自動產生(Version:4)
            #過濾瀏覽頁資料
            ON ACTION filter
               LET g_action_choice = "fetch"
               #add-point:filter action name="ui_dialog.action.filter"
               
               #end add-point
               CALL axmt610_filter()
               EXIT DIALOG
 
 
 
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL axmt610_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL axmt610_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL axmt610_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL axmt610_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL axmt610_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL axmt610_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL axmt610_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL axmt610_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL axmt610_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL axmt610_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_xmem_d)
                  LET g_export_id[1]   = "s_detail1"
 
                  #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
                  #161031-00025#30-s
                  LET g_export_node[2] = base.typeInfo.create(g_ooff_d4)
                  LET g_export_id[2]   = "s_detail1_aooi360_01"
                  #161031-00025#30-e
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
         #瀏覽頁折疊
         ON ACTION worksheethidden   
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            IF lb_first THEN
               LET lb_first = FALSE
               NEXT FIELD xmemseq
            END IF
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL axmt610_delete()
               #add-point:ON ACTION delete name="menu.delete"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               CALL axmt610_insert()
               #add-point:ON ACTION insert name="menu.insert"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL axmt610_query()
               #add-point:ON ACTION query name="menu.query"
               
               #END add-point
               #應用 a59 樣板自動產生(Version:3)  
               CALL g_curr_diag.setCurrentRow("s_detail1",1)
 
 
 
 
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output name="menu.output"
               LET g_rep_wc = "xmelent ="|| g_enterprise ||" AND xmeldocno ='"|| g_xmel_m.xmeldocno||"'"
#               CALL axmr610_g01("xmelent ="|| g_enterprise ||" AND xmeldocno ='"|| g_xmel_m.xmeldocno||"'")
               
               #END add-point
               &include "erp/axm/axmt610_rep.4gl"
               #add-point:ON ACTION output.after name="menu.after_output"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION quickprint
            LET g_action_choice="quickprint"
            IF cl_auth_chk_act("quickprint") THEN
               
               #add-point:ON ACTION quickprint name="menu.quickprint"
               LET g_rep_wc = "xmelent ="|| g_enterprise ||" AND xmeldocno ='"|| g_xmel_m.xmeldocno||"'"
#               CALL axmr610_g01("xmelent ="|| g_enterprise ||" AND xmeldocno ='"|| g_xmel_m.xmeldocno||"'")
               
               #END add-point
               &include "erp/axm/axmt610_rep.4gl"
               #add-point:ON ACTION quickprint.after name="menu.after_quickprint"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION make_detail
            LET g_action_choice="make_detail"
            IF cl_auth_chk_act("make_detail") THEN
               
               #add-point:ON ACTION make_detail name="menu.make_detail"
               IF g_xmel_m.xmel004 !='6' THEN
                  #170216-00017#1-s-mod
                  #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
                  CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
                  #170216-00017#1-e-mod
                  CALL axmt610_b_fill()
               END IF
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION xmel_memo
            LET g_action_choice="xmel_memo"
            IF cl_auth_chk_act("xmel_memo") THEN
               
               #add-point:ON ACTION xmel_memo name="menu.xmel_memo"
               #CALL aooi360_02('6','axmt610',g_xmel_m.xmeldocno,'','','','','','','','','')  #161031-00025#30 mark
               #161031-00025#30-s
               IF NOT cl_null(g_xmel_m.xmeldocno) THEN
                  CALL axmt610_remaks()
               END IF
               #161031-00025#30-e
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL axmt610_modify()
               #add-point:ON ACTION modify name="menu.modify"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL axmt610_modify()
               #add-point:ON ACTION modify_detail name="menu.modify_detail"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION prog_xmel005
            LET g_action_choice="prog_xmel005"
            IF cl_auth_chk_act("prog_xmel005") THEN
               
               #add-point:ON ACTION prog_xmel005 name="menu.prog_xmel005"
               #應用 a41 樣板自動產生(Version:2)
               #使用JSON格式組合參數與作業編號(串查)
               CALL axmt610_qrystr(g_xmel_m.xmel005)
               #END add-point
               
            END IF
 
 
 
 
         
         #應用 a46 樣板自動產生(Version:3)
         #新增相關文件
         ON ACTION related_document
            CALL axmt610_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document name="ui_dialog.dialog.related_document"
               
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL axmt610_set_pk_array()
            #add-point:ON ACTION agendum name="ui_dialog.dialog.agendum"
            
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL axmt610_set_pk_array()
            #add-point:ON ACTION followup name="ui_dialog.dialog.followup"
            
            #END add-point
            CALL cl_user_overview_follow(g_xmel_m.xmeldocdt)
 
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG
 
      #(ver:79) ---add start---
      #add-point:ui_dialog段 after dialog name="ui_dialog.exit_dialog"
      
      #end add-point
      #(ver:79) --- add end ---
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前 name="ui_dialog.b_exit"
         
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
 
{</section>}
 
{<section id="axmt610.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION axmt610_browser_fill(ps_page_action)
   #add-point:browser_fill段define(客製用) name="browser_fill.define_customerization"
   
   #end add-point  
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="browser_fill.define"
   DEFINE l_slip            STRING
   #end add-point    
   
   #add-point:Function前置處理 name="browser_fill.before_browser_fill"
   #161031-00025#30-s
   IF cl_null(g_add_browse) THEN
      CALL aooi360_01_clear_detail()   #清除备注单身
   END IF
   #161031-00025#30-e
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前 name="browser_fill.before_foreach"
   LET l_wc = l_wc," AND xmelsite = '",g_site,"'"
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT DISTINCT xmeldocno ",
                      " FROM xmel_t ",
                      " ",
                      " LEFT JOIN xmem_t ON xmement = xmelent AND xmeldocno = xmemdocno ", "  ",
                      #add-point:browser_fill段sql(xmem_t1) name="browser_fill.cnt.join.}"
                      " LEFT JOIN ooff_t ON ooffent = xmelent AND ooff001 = '7' 
                        AND ooff002 = '",g_prog,"' AND xmeldocno = ooff003  AND ooff004 = xmemseq ",  "  ",   #161031-00025#30 add
                      #end add-point
 
 
                      " ", 
                      " ", 
 
 
                      " WHERE xmelent = " ||g_enterprise|| " AND xmement = " ||g_enterprise|| " AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("xmel_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT DISTINCT xmeldocno ",
                      " FROM xmel_t ", 
                      "  ",
                      "  ",
                      " WHERE xmelent = " ||g_enterprise|| " AND ",l_wc CLIPPED, cl_sql_add_filter("xmel_t")
   END IF
   
   #add-point:browser_fill,cnt wc name="browser_fill.cnt_sqlwc"
   #161031-00025#30-s
   IF NOT cl_null(g_wc2_i36001) AND g_wc2_i36001 <> " 1=1" THEN
      LET l_sub_sql = l_sub_sql CLIPPED, " AND EXISTS (SELECT ooff003 FROM ooff_t 
                                                        WHERE ooffent = ",g_enterprise," AND ooff001 = '6' 
                                                          AND ooff002 = '",g_prog,"' AND ooff003 = xmeldocno
                                                          AND ooff004 = '0' AND ",g_wc2_i36001 CLIPPED ,")" 
   END IF                                                    
   #161031-00025#30-e
   #end add-point
   
   LET g_sql = " SELECT COUNT(1) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前 name="browser_fill.before_count"
   
   #end add-point
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE header_cnt_pre FROM g_sql
      EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
      FREE header_cnt_pre
   END IF
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code = 9035 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_xmel_m.* TO NULL
      CALL g_xmem_d.clear()        
 
      #add-point:browser_fill g_add_browse段額外處理 name="browser_fill.add_browse.other"
      
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.xmeldocno,t0.xmeldocdt,t0.xmel001,t0.xmel002 Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.xmelstus,t0.xmeldocno,t0.xmeldocdt,t0.xmel001,t0.xmel002,t1.ooag011 , 
          t2.ooefl003 ",
                  " FROM xmel_t t0",
                  "  ",
                  "  LEFT JOIN xmem_t ON xmement = xmelent AND xmeldocno = xmemdocno ", "  ", 
                  #add-point:browser_fill段sql(xmem_t1) name="browser_fill.join.xmem_t1"
                  " LEFT JOIN ooff_t ON ooffent = xmelent AND ooff001 = '7' 
                    AND ooff002 = '",g_prog,"' AND xmeldocno = ooff003  AND ooff004 = xmemseq ",  "  ",   #161031-00025#30 add
                  #end add-point
 
 
                  " ", 
 
 
                                 " LEFT JOIN ooag_t t1 ON t1.ooagent="||g_enterprise||" AND t1.ooag001=t0.xmel001  ",
               " LEFT JOIN ooefl_t t2 ON t2.ooeflent="||g_enterprise||" AND t2.ooefl001=t0.xmel002 AND t2.ooefl002='"||g_dlang||"' ",
 
                  " WHERE t0.xmelent = " ||g_enterprise|| " AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("xmel_t")
   ELSE
      #單身無輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.xmelstus,t0.xmeldocno,t0.xmeldocdt,t0.xmel001,t0.xmel002,t1.ooag011 , 
          t2.ooefl003 ",
                  " FROM xmel_t t0",
                  "  ",
                                 " LEFT JOIN ooag_t t1 ON t1.ooagent="||g_enterprise||" AND t1.ooag001=t0.xmel001  ",
               " LEFT JOIN ooefl_t t2 ON t2.ooeflent="||g_enterprise||" AND t2.ooefl001=t0.xmel002 AND t2.ooefl002='"||g_dlang||"' ",
 
                  " WHERE t0.xmelent = " ||g_enterprise|| " AND ",l_wc, cl_sql_add_filter("xmel_t")
   END IF
   #add-point:browser_fill,sql wc name="browser_fill.fill_sqlwc"
   #161031-00025#30-s
   IF NOT cl_null(g_wc2_i36001) AND g_wc2_i36001 <> " 1=1" THEN
      LET g_sql = g_sql CLIPPED, " AND EXISTS (SELECT ooff003 FROM ooff_t 
                                                        WHERE ooffent = ",g_enterprise," AND ooff001 = '6' 
                                                          AND ooff002 = '",g_prog,"' AND ooff003 = xmeldocno
                                                          AND ooff004 = '0' AND ",g_wc2_i36001 CLIPPED ,")" 
   END IF                                                    
   #161031-00025#30-e
   #end add-point
   LET g_sql = g_sql, " ORDER BY xmeldocno ",g_order
 
   #add-point:browser_fill,before_prepare name="browser_fill.before_prepare"
   
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"xmel_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE browse_pre FROM g_sql
      DECLARE browse_cur CURSOR FOR browse_pre
      
      #add-point:browser_fill段open cursor name="browser_fill.open"
      
      #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_xmeldocno,g_browser[g_cnt].b_xmeldocdt, 
          g_browser[g_cnt].b_xmel001,g_browser[g_cnt].b_xmel002,g_browser[g_cnt].b_xmel001_desc,g_browser[g_cnt].b_xmel002_desc 
 
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference name="browser_fill.reference"
      CALL s_aooi200_get_slip(g_browser[g_cnt].b_xmeldocno) RETURNING g_success,l_slip
      CALL s_aooi200_get_slip_desc(l_slip) RETURNING g_browser[g_cnt].b_xmeldocno_desc
      DISPLAY BY NAME g_browser[g_cnt].b_xmeldocno_desc
         #end add-point
      
         #遮罩相關處理
         CALL axmt610_browser_mask()
      
               #應用 a24 樣板自動產生(Version:3)
      #browser顯示圖片
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/unconfirmed.png"
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/confirmed.png"
         WHEN "A"
            LET g_browser[g_cnt].b_statepic = "stus/16/approved.png"
         WHEN "D"
            LET g_browser[g_cnt].b_statepic = "stus/16/withdraw.png"
         WHEN "R"
            LET g_browser[g_cnt].b_statepic = "stus/16/rejection.png"
         WHEN "W"
            LET g_browser[g_cnt].b_statepic = "stus/16/signing.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/invalid.png"
         
      END CASE
 
 
 
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_browse THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      FREE browse_pre
   END IF
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_xmeldocno) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
 
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前 name="browser_fill.after"
   CALL axmt610_fetch('')
   #end add-point   
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION axmt610_ui_headershow()
   #add-point:ui_headershow段define(客製用) name="ui_headershow.define_customerization"
   
   #end add-point  
   #add-point:ui_headershow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_headershow.define"
   
   #end add-point      
   
   #add-point:Function前置處理  name="ui_headershow.pre_function"
   
   #end add-point
   
   LET g_xmel_m.xmeldocno = g_browser[g_current_idx].b_xmeldocno   
 
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
   CALL axmt610_xmel_t_mask()
   CALL axmt610_show()
      
END FUNCTION
 
{</section>}
 
{<section id="axmt610.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION axmt610_ui_detailshow()
   #add-point:ui_detailshow段define(客製用) name="ui_detailshow.define_customerization"
   
   #end add-point    
   #add-point:ui_detailshow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_detailshow.define"
   
   #end add-point    
 
   #add-point:Function前置處理 name="ui_detailshow.before"
   
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
 
   END IF
   
   #add-point:ui_detailshow段after name="ui_detailshow.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION axmt610_ui_browser_refresh()
   #add-point:ui_browser_refresh段define(客製用) name="ui_browser_refresh.define_customerization"
   
   #end add-point    
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_browser_refresh.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="ui_browser_refresh.pre_function"
   
   #end add-point
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_xmeldocno = g_xmel_m.xmeldocno 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after name="ui_browser_refresh.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION axmt610_construct()
   #add-point:cs段define(客製用) name="cs.define_customerization"
   
   #end add-point    
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   DEFINE la_wc       DYNAMIC ARRAY OF RECORD
          tableid     STRING,
          wc          STRING
          END RECORD
   DEFINE li_idx      LIKE type_t.num10
   #add-point:cs段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="cs.define"
 
   #end add-point    
   
   #add-point:Function前置處理  name="cs.pre_function"
   CALL aooi360_01_clear_detail()   #清除备注单身  #161031-00025#30
   #end add-point
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_xmel_m.* TO NULL
   CALL g_xmem_d.clear()        
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前 name="cs.before_construct"
   
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON xmeldocno,xmeldocno_desc,xmeldocdt,xmel003,xmel001,xmel002,xmelstus, 
          xmel004,xmel005,xmel006,xmel007,xmel008,xmel009,xmel009_desc,xmel011,xmel012,xmel013,xmel014, 
          l_a,xmel010,xmel010_desc,xmel018,xmel019,xmel020,xmel021,xmelsite,xmel015,xmel016,xmel017, 
          xmelownid,xmelowndp,xmelcrtid,xmelcrtdp,xmelcrtdt,xmelmodid,xmelmoddt,xmelcnfid,xmelcnfdt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.head.before_construct"
            
            #end add-point 
            
         #公用欄位開窗相關處理
         #應用 a11 樣板自動產生(Version:3)
         #共用欄位查詢處理  
         ##----<<xmelcrtdt>>----
         AFTER FIELD xmelcrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
 
         #----<<xmelmoddt>>----
         AFTER FIELD xmelmoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<xmelcnfdt>>----
         AFTER FIELD xmelcnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<xmelpstdt>>----
 
 
 
            
         #一般欄位開窗相關處理    
                  #Ctrlp:construct.c.xmeldocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmeldocno
            #add-point:ON ACTION controlp INFIELD xmeldocno name="construct.c.xmeldocno"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmeldocno()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmeldocno  #顯示到畫面上
            NEXT FIELD xmeldocno                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmeldocno
            #add-point:BEFORE FIELD xmeldocno name="construct.b.xmeldocno"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmeldocno
            
            #add-point:AFTER FIELD xmeldocno name="construct.a.xmeldocno"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmeldocno_desc
            #add-point:BEFORE FIELD xmeldocno_desc name="construct.b.xmeldocno_desc"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmeldocno_desc
            
            #add-point:AFTER FIELD xmeldocno_desc name="construct.a.xmeldocno_desc"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmeldocno_desc
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmeldocno_desc
            #add-point:ON ACTION controlp INFIELD xmeldocno_desc name="construct.c.xmeldocno_desc"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmeldocdt
            #add-point:BEFORE FIELD xmeldocdt name="construct.b.xmeldocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmeldocdt
            
            #add-point:AFTER FIELD xmeldocdt name="construct.a.xmeldocdt"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmeldocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmeldocdt
            #add-point:ON ACTION controlp INFIELD xmeldocdt name="construct.c.xmeldocdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmel003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel003
            #add-point:ON ACTION controlp INFIELD xmel003 name="construct.c.xmel003"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = g_site
            CALL q_pmaa001_6()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel003  #顯示到畫面上
            NEXT FIELD xmel003                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel003
            #add-point:BEFORE FIELD xmel003 name="construct.b.xmel003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel003
            
            #add-point:AFTER FIELD xmel003 name="construct.a.xmel003"
 
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel001
            #add-point:ON ACTION controlp INFIELD xmel001 name="construct.c.xmel001"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel001  #顯示到畫面上
            NEXT FIELD xmel001                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel001
            #add-point:BEFORE FIELD xmel001 name="construct.b.xmel001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel001
            
            #add-point:AFTER FIELD xmel001 name="construct.a.xmel001"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel002
            #add-point:ON ACTION controlp INFIELD xmel002 name="construct.c.xmel002"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel002  #顯示到畫面上
            NEXT FIELD xmel002                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel002
            #add-point:BEFORE FIELD xmel002 name="construct.b.xmel002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel002
            
            #add-point:AFTER FIELD xmel002 name="construct.a.xmel002"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelstus
            #add-point:BEFORE FIELD xmelstus name="construct.b.xmelstus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelstus
            
            #add-point:AFTER FIELD xmelstus name="construct.a.xmelstus"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmelstus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelstus
            #add-point:ON ACTION controlp INFIELD xmelstus name="construct.c.xmelstus"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel004
            #add-point:BEFORE FIELD xmel004 name="construct.b.xmel004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel004
            
            #add-point:AFTER FIELD xmel004 name="construct.a.xmel004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel004
            #add-point:ON ACTION controlp INFIELD xmel004 name="construct.c.xmel004"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmel005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel005
            #add-point:ON ACTION controlp INFIELD xmel005 name="construct.c.xmel005"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmel005()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel005  #顯示到畫面上
            NEXT FIELD xmel005                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel005
            #add-point:BEFORE FIELD xmel005 name="construct.b.xmel005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel005
            
            #add-point:AFTER FIELD xmel005 name="construct.a.xmel005"
 
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel006
            #add-point:BEFORE FIELD xmel006 name="construct.b.xmel006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel006
            
            #add-point:AFTER FIELD xmel006 name="construct.a.xmel006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel006
            #add-point:ON ACTION controlp INFIELD xmel006 name="construct.c.xmel006"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmel007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel007
            #add-point:ON ACTION controlp INFIELD xmel007 name="construct.c.xmel007"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = 263
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel007  #顯示到畫面上
            NEXT FIELD xmel007                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel007
            #add-point:BEFORE FIELD xmel007 name="construct.b.xmel007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel007
            
            #add-point:AFTER FIELD xmel007 name="construct.a.xmel007"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel008
            #add-point:BEFORE FIELD xmel008 name="construct.b.xmel008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel008
            
            #add-point:AFTER FIELD xmel008 name="construct.a.xmel008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel008
            #add-point:ON ACTION controlp INFIELD xmel008 name="construct.c.xmel008"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel009
            #add-point:BEFORE FIELD xmel009 name="construct.b.xmel009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel009
            
            #add-point:AFTER FIELD xmel009 name="construct.a.xmel009"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel009
            #add-point:ON ACTION controlp INFIELD xmel009 name="construct.c.xmel009"
            
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmda037_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel009  #顯示到畫面上
            NEXT FIELD xmel009 
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel009_desc
            #add-point:BEFORE FIELD xmel009_desc name="construct.b.xmel009_desc"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel009_desc
            
            #add-point:AFTER FIELD xmel009_desc name="construct.a.xmel009_desc"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel009_desc
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel009_desc
            #add-point:ON ACTION controlp INFIELD xmel009_desc name="construct.c.xmel009_desc"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel011
            #add-point:BEFORE FIELD xmel011 name="construct.b.xmel011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel011
            
            #add-point:AFTER FIELD xmel011 name="construct.a.xmel011"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel011
            #add-point:ON ACTION controlp INFIELD xmel011 name="construct.c.xmel011"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel012
            #add-point:BEFORE FIELD xmel012 name="construct.b.xmel012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel012
            
            #add-point:AFTER FIELD xmel012 name="construct.a.xmel012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel012
            #add-point:ON ACTION controlp INFIELD xmel012 name="construct.c.xmel012"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmel013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel013
            #add-point:ON ACTION controlp INFIELD xmel013 name="construct.c.xmel013"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = 209
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel013  #顯示到畫面上
            NEXT FIELD xmel013                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel013
            #add-point:BEFORE FIELD xmel013 name="construct.b.xmel013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel013
            
            #add-point:AFTER FIELD xmel013 name="construct.a.xmel013"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel014
            #add-point:BEFORE FIELD xmel014 name="construct.b.xmel014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel014
            
            #add-point:AFTER FIELD xmel014 name="construct.a.xmel014"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel014
            #add-point:ON ACTION controlp INFIELD xmel014 name="construct.c.xmel014"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD l_a
            #add-point:BEFORE FIELD l_a name="construct.b.l_a"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD l_a
            
            #add-point:AFTER FIELD l_a name="construct.a.l_a"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.l_a
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD l_a
            #add-point:ON ACTION controlp INFIELD l_a name="construct.c.l_a"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel010
            #add-point:BEFORE FIELD xmel010 name="construct.b.xmel010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel010
            
            #add-point:AFTER FIELD xmel010 name="construct.a.xmel010"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel010
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel010
            #add-point:ON ACTION controlp INFIELD xmel010 name="construct.c.xmel010"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmda038_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel010  #顯示到畫面上
            NEXT FIELD xmel010 
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel010_desc
            #add-point:BEFORE FIELD xmel010_desc name="construct.b.xmel010_desc"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel010_desc
            
            #add-point:AFTER FIELD xmel010_desc name="construct.a.xmel010_desc"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel010_desc
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel010_desc
            #add-point:ON ACTION controlp INFIELD xmel010_desc name="construct.c.xmel010_desc"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel018
            #add-point:BEFORE FIELD xmel018 name="construct.b.xmel018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel018
            
            #add-point:AFTER FIELD xmel018 name="construct.a.xmel018"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel018
            #add-point:ON ACTION controlp INFIELD xmel018 name="construct.c.xmel018"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel019
            #add-point:BEFORE FIELD xmel019 name="construct.b.xmel019"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel019
            
            #add-point:AFTER FIELD xmel019 name="construct.a.xmel019"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel019
            #add-point:ON ACTION controlp INFIELD xmel019 name="construct.c.xmel019"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel020
            #add-point:BEFORE FIELD xmel020 name="construct.b.xmel020"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel020
            
            #add-point:AFTER FIELD xmel020 name="construct.a.xmel020"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel020
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel020
            #add-point:ON ACTION controlp INFIELD xmel020 name="construct.c.xmel020"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel021
            #add-point:BEFORE FIELD xmel021 name="construct.b.xmel021"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel021
            
            #add-point:AFTER FIELD xmel021 name="construct.a.xmel021"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel021
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel021
            #add-point:ON ACTION controlp INFIELD xmel021 name="construct.c.xmel021"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelsite
            #add-point:BEFORE FIELD xmelsite name="construct.b.xmelsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelsite
            
            #add-point:AFTER FIELD xmelsite name="construct.a.xmelsite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmelsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelsite
            #add-point:ON ACTION controlp INFIELD xmelsite name="construct.c.xmelsite"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmel015
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel015
            #add-point:ON ACTION controlp INFIELD xmel015 name="construct.c.xmel015"
            #應用 a08 樣板自動產生(Version:2)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_icaa001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmel015  #顯示到畫面上
            NEXT FIELD xmel015                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel015
            #add-point:BEFORE FIELD xmel015 name="construct.b.xmel015"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel015
            
            #add-point:AFTER FIELD xmel015 name="construct.a.xmel015"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel016
            #add-point:BEFORE FIELD xmel016 name="construct.b.xmel016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel016
            
            #add-point:AFTER FIELD xmel016 name="construct.a.xmel016"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel016
            #add-point:ON ACTION controlp INFIELD xmel016 name="construct.c.xmel016"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel017
            #add-point:BEFORE FIELD xmel017 name="construct.b.xmel017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel017
            
            #add-point:AFTER FIELD xmel017 name="construct.a.xmel017"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmel017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel017
            #add-point:ON ACTION controlp INFIELD xmel017 name="construct.c.xmel017"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmelownid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelownid
            #add-point:ON ACTION controlp INFIELD xmelownid name="construct.c.xmelownid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelownid  #顯示到畫面上
            NEXT FIELD xmelownid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelownid
            #add-point:BEFORE FIELD xmelownid name="construct.b.xmelownid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelownid
            
            #add-point:AFTER FIELD xmelownid name="construct.a.xmelownid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmelowndp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelowndp
            #add-point:ON ACTION controlp INFIELD xmelowndp name="construct.c.xmelowndp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelowndp  #顯示到畫面上
            NEXT FIELD xmelowndp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelowndp
            #add-point:BEFORE FIELD xmelowndp name="construct.b.xmelowndp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelowndp
            
            #add-point:AFTER FIELD xmelowndp name="construct.a.xmelowndp"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmelcrtid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelcrtid
            #add-point:ON ACTION controlp INFIELD xmelcrtid name="construct.c.xmelcrtid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelcrtid  #顯示到畫面上
            NEXT FIELD xmelcrtid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelcrtid
            #add-point:BEFORE FIELD xmelcrtid name="construct.b.xmelcrtid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelcrtid
            
            #add-point:AFTER FIELD xmelcrtid name="construct.a.xmelcrtid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xmelcrtdp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelcrtdp
            #add-point:ON ACTION controlp INFIELD xmelcrtdp name="construct.c.xmelcrtdp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelcrtdp  #顯示到畫面上
            NEXT FIELD xmelcrtdp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelcrtdp
            #add-point:BEFORE FIELD xmelcrtdp name="construct.b.xmelcrtdp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelcrtdp
            
            #add-point:AFTER FIELD xmelcrtdp name="construct.a.xmelcrtdp"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelcrtdt
            #add-point:BEFORE FIELD xmelcrtdt name="construct.b.xmelcrtdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmelmodid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelmodid
            #add-point:ON ACTION controlp INFIELD xmelmodid name="construct.c.xmelmodid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelmodid  #顯示到畫面上
            NEXT FIELD xmelmodid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelmodid
            #add-point:BEFORE FIELD xmelmodid name="construct.b.xmelmodid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelmodid
            
            #add-point:AFTER FIELD xmelmodid name="construct.a.xmelmodid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelmoddt
            #add-point:BEFORE FIELD xmelmoddt name="construct.b.xmelmoddt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.xmelcnfid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelcnfid
            #add-point:ON ACTION controlp INFIELD xmelcnfid name="construct.c.xmelcnfid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmelcnfid  #顯示到畫面上
            NEXT FIELD xmelcnfid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelcnfid
            #add-point:BEFORE FIELD xmelcnfid name="construct.b.xmelcnfid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelcnfid
            
            #add-point:AFTER FIELD xmelcnfid name="construct.a.xmelcnfid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelcnfdt
            #add-point:BEFORE FIELD xmelcnfdt name="construct.b.xmelcnfdt"
            
            #END add-point
 
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON xmemseq,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007,xmem008, 
          xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018,xmem019,xmemsite, 
          ooff013
           FROM s_detail1[1].xmemseq,s_detail1[1].xmem001,s_detail1[1].xmem002,s_detail1[1].xmem003, 
               s_detail1[1].xmem004,s_detail1[1].xmem005,s_detail1[1].xmem006,s_detail1[1].xmem007,s_detail1[1].xmem008, 
               s_detail1[1].xmem009,s_detail1[1].xmem010,s_detail1[1].xmem011,s_detail1[1].xmem012,s_detail1[1].xmem013, 
               s_detail1[1].xmem014,s_detail1[1].xmem015,s_detail1[1].xmem016,s_detail1[1].xmem017,s_detail1[1].xmem018, 
               s_detail1[1].xmem019,s_detail1[1].xmemsite,s_detail1[1].ooff013
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmemseq
            #add-point:BEFORE FIELD xmemseq name="construct.b.page1.xmemseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmemseq
            
            #add-point:AFTER FIELD xmemseq name="construct.a.page1.xmemseq"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmemseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmemseq
            #add-point:ON ACTION controlp INFIELD xmemseq name="construct.c.page1.xmemseq"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.xmem001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem001
            #add-point:ON ACTION controlp INFIELD xmem001 name="construct.c.page1.xmem001"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmel005()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmem001  #顯示到畫面上
            NEXT FIELD xmem001                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem001
            #add-point:BEFORE FIELD xmem001 name="construct.b.page1.xmem001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem001
            
            #add-point:AFTER FIELD xmem001 name="construct.a.page1.xmem001"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem002
            #add-point:BEFORE FIELD xmem002 name="construct.b.page1.xmem002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem002
            
            #add-point:AFTER FIELD xmem002 name="construct.a.page1.xmem002"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem002
            #add-point:ON ACTION controlp INFIELD xmem002 name="construct.c.page1.xmem002"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.xmem003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem003
            #add-point:ON ACTION controlp INFIELD xmem003 name="construct.c.page1.xmem003"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_imaf001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmem003  #顯示到畫面上
            NEXT FIELD xmem003                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem003
            #add-point:BEFORE FIELD xmem003 name="construct.b.page1.xmem003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem003
            
            #add-point:AFTER FIELD xmem003 name="construct.a.page1.xmem003"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem004
            #add-point:BEFORE FIELD xmem004 name="construct.b.page1.xmem004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem004
            
            #add-point:AFTER FIELD xmem004 name="construct.a.page1.xmem004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem004
            #add-point:ON ACTION controlp INFIELD xmem004 name="construct.c.page1.xmem004"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.xmem005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem005
            #add-point:ON ACTION controlp INFIELD xmem005 name="construct.c.page1.xmem005"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_xmam001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmem005  #顯示到畫面上
            NEXT FIELD xmem005                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem005
            #add-point:BEFORE FIELD xmem005 name="construct.b.page1.xmem005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem005
            
            #add-point:AFTER FIELD xmem005 name="construct.a.page1.xmem005"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem006
            #add-point:BEFORE FIELD xmem006 name="construct.b.page1.xmem006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem006
            
            #add-point:AFTER FIELD xmem006 name="construct.a.page1.xmem006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem006
            #add-point:ON ACTION controlp INFIELD xmem006 name="construct.c.page1.xmem006"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem007
            #add-point:BEFORE FIELD xmem007 name="construct.b.page1.xmem007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem007
            
            #add-point:AFTER FIELD xmem007 name="construct.a.page1.xmem007"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem007
            #add-point:ON ACTION controlp INFIELD xmem007 name="construct.c.page1.xmem007"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem008
            #add-point:BEFORE FIELD xmem008 name="construct.b.page1.xmem008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem008
            
            #add-point:AFTER FIELD xmem008 name="construct.a.page1.xmem008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem008
            #add-point:ON ACTION controlp INFIELD xmem008 name="construct.c.page1.xmem008"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem009
            #add-point:BEFORE FIELD xmem009 name="construct.b.page1.xmem009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem009
            
            #add-point:AFTER FIELD xmem009 name="construct.a.page1.xmem009"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem009
            #add-point:ON ACTION controlp INFIELD xmem009 name="construct.c.page1.xmem009"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem010
            #add-point:BEFORE FIELD xmem010 name="construct.b.page1.xmem010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem010
            
            #add-point:AFTER FIELD xmem010 name="construct.a.page1.xmem010"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem010
            #add-point:ON ACTION controlp INFIELD xmem010 name="construct.c.page1.xmem010"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem011
            #add-point:BEFORE FIELD xmem011 name="construct.b.page1.xmem011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem011
            
            #add-point:AFTER FIELD xmem011 name="construct.a.page1.xmem011"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem011
            #add-point:ON ACTION controlp INFIELD xmem011 name="construct.c.page1.xmem011"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem012
            #add-point:BEFORE FIELD xmem012 name="construct.b.page1.xmem012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem012
            
            #add-point:AFTER FIELD xmem012 name="construct.a.page1.xmem012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem012
            #add-point:ON ACTION controlp INFIELD xmem012 name="construct.c.page1.xmem012"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.xmem013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem013
            #add-point:ON ACTION controlp INFIELD xmem013 name="construct.c.page1.xmem013"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooca001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xmem013  #顯示到畫面上
            NEXT FIELD xmem013                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem013
            #add-point:BEFORE FIELD xmem013 name="construct.b.page1.xmem013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem013
            
            #add-point:AFTER FIELD xmem013 name="construct.a.page1.xmem013"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem014
            #add-point:BEFORE FIELD xmem014 name="construct.b.page1.xmem014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem014
            
            #add-point:AFTER FIELD xmem014 name="construct.a.page1.xmem014"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem014
            #add-point:ON ACTION controlp INFIELD xmem014 name="construct.c.page1.xmem014"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem015
            #add-point:BEFORE FIELD xmem015 name="construct.b.page1.xmem015"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem015
            
            #add-point:AFTER FIELD xmem015 name="construct.a.page1.xmem015"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem015
            #add-point:ON ACTION controlp INFIELD xmem015 name="construct.c.page1.xmem015"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem016
            #add-point:BEFORE FIELD xmem016 name="construct.b.page1.xmem016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem016
            
            #add-point:AFTER FIELD xmem016 name="construct.a.page1.xmem016"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem016
            #add-point:ON ACTION controlp INFIELD xmem016 name="construct.c.page1.xmem016"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem017
            #add-point:BEFORE FIELD xmem017 name="construct.b.page1.xmem017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem017
            
            #add-point:AFTER FIELD xmem017 name="construct.a.page1.xmem017"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem017
            #add-point:ON ACTION controlp INFIELD xmem017 name="construct.c.page1.xmem017"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem018
            #add-point:BEFORE FIELD xmem018 name="construct.b.page1.xmem018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem018
            
            #add-point:AFTER FIELD xmem018 name="construct.a.page1.xmem018"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem018
            #add-point:ON ACTION controlp INFIELD xmem018 name="construct.c.page1.xmem018"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem019
            #add-point:BEFORE FIELD xmem019 name="construct.b.page1.xmem019"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem019
            
            #add-point:AFTER FIELD xmem019 name="construct.a.page1.xmem019"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmem019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem019
            #add-point:ON ACTION controlp INFIELD xmem019 name="construct.c.page1.xmem019"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmemsite
            #add-point:BEFORE FIELD xmemsite name="construct.b.page1.xmemsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmemsite
            
            #add-point:AFTER FIELD xmemsite name="construct.a.page1.xmemsite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.xmemsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmemsite
            #add-point:ON ACTION controlp INFIELD xmemsite name="construct.c.page1.xmemsite"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD ooff013
            #add-point:BEFORE FIELD ooff013 name="construct.b.page1.ooff013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD ooff013
            
            #add-point:AFTER FIELD ooff013 name="construct.a.page1.ooff013"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.ooff013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD ooff013
            #add-point:ON ACTION controlp INFIELD ooff013 name="construct.c.page1.ooff013"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
      
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令) name="cs.add_cs"
      SUBDIALOG aoo_aooi360_01.aooi360_01_construct   #备注单身  #161031-00025#30
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="cs.b_dialog"
         #2015/09/07 by stellar add ----- (S)
         LET g_xmem_d[1].xmemseq = ""
         DISPLAY ARRAY g_xmem_d TO s_detail1.*
            BEFORE DISPLAY
               EXIT DISPLAY
         END DISPLAY
         #2015/09/07 by stellar add ----- (E)
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
         IF NOT cl_null(ls_wc) THEN
            CALL util.JSON.parse(ls_wc, la_wc)
            INITIALIZE g_wc, g_wc2, g_wc2_table1, g_wc2_extend TO NULL
 
            FOR li_idx = 1 TO la_wc.getLength()
               CASE
                  WHEN la_wc[li_idx].tableid = "xmel_t" 
                     LET g_wc = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "xmem_t" 
                     LET g_wc2_table1 = la_wc[li_idx].wc
 
               END CASE
            END FOR
         END IF
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
 
 
 
   
   #add-point:cs段結束前 name="cs.after_construct"
   
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.filter" >}
#應用 a50 樣板自動產生(Version:8)
#+ filter過濾功能
PRIVATE FUNCTION axmt610_filter()
   #add-point:filter段define name="filter.define_customerization"
   
   #end add-point   
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="filter.pre_function"
   
   #end add-point
   
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter.trim()
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter_t, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON xmeldocno,xmeldocdt,xmel001,xmel002
                          FROM s_browse[1].b_xmeldocno,s_browse[1].b_xmeldocdt,s_browse[1].b_xmel001, 
                              s_browse[1].b_xmel002
 
         BEFORE CONSTRUCT
               DISPLAY axmt610_filter_parser('xmeldocno') TO s_browse[1].b_xmeldocno
            DISPLAY axmt610_filter_parser('xmeldocdt') TO s_browse[1].b_xmeldocdt
            DISPLAY axmt610_filter_parser('xmel001') TO s_browse[1].b_xmel001
            DISPLAY axmt610_filter_parser('xmel002') TO s_browse[1].b_xmel002
      
         #add-point:filter段cs_ctrl name="filter.cs_ctrl"
         
         #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs name="filter.add_cs"
      
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog name="filter.b_dialog"
         
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL axmt610_filter_show('xmeldocno')
   CALL axmt610_filter_show('xmeldocdt')
   CALL axmt610_filter_show('xmel001')
   CALL axmt610_filter_show('xmel002')
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION axmt610_filter_parser(ps_field)
   #add-point:filter段define name="filter_parser.define_customerization"
   
   #end add-point    
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num10
   DEFINE li_tmp2    LIKE type_t.num10
   DEFINE ls_var     STRING
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter_parser.define"
   
   #end add-point    
   
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION axmt610_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
 
   LET ls_name = "formonly.b_", ps_field
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
 
   #顯示資料組合
   LET ls_condition = axmt610_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
 
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION axmt610_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   
   #end add-point   
   DEFINE ls_wc STRING
   #add-point:query段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="query.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_xmem_d.clear()
 
   
   #add-point:query段other name="query.other"
   CALL aooi360_01_clear_detail()   #清除备注单身  #161031-00025#30 add
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL axmt610_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      CALL axmt610_browser_fill("")
      CALL axmt610_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_detail_idx_list[1] = 1
 
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
      CALL axmt610_filter_show('xmeldocno')
   CALL axmt610_filter_show('xmeldocdt')
   CALL axmt610_filter_show('xmel001')
   CALL axmt610_filter_show('xmel002')
   CALL axmt610_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "-100" 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   ELSE
      CALL axmt610_fetch("F") 
      #顯示單身筆數
      CALL axmt610_idx_chk()
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION axmt610_fetch(p_flag)
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   
   #end add-point    
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="fetch.pre_function"
   
   #end add-point
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   #清空第二階單身
 
   
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #避免超出browser資料筆數上限
   IF g_current_idx > g_browser.getLength() THEN
      LET g_browser_idx = g_browser.getLength()
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_xmel_m.xmeldocno = g_browser[g_current_idx].b_xmeldocno
 
   
   #重讀DB,因TEMP有不被更新特性
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
   #遮罩相關處理
   LET g_xmel_m_mask_o.* =  g_xmel_m.*
   CALL axmt610_xmel_t_mask()
   LET g_xmel_m_mask_n.* =  g_xmel_m.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL axmt610_set_act_visible()   
   CALL axmt610_set_act_no_visible()
   
   #add-point:fetch段action控制 name="fetch.action_control"
   
   #end add-point  
   
   
   
   #add-point:fetch結束前 name="fetch.after"
   
   #end add-point
   
   #保存單頭舊值
   LET g_xmel_m_t.* = g_xmel_m.*
   LET g_xmel_m_o.* = g_xmel_m.*
   
   LET g_data_owner = g_xmel_m.xmelownid      
   LET g_data_dept  = g_xmel_m.xmelowndp
   
   #重新顯示   
   CALL axmt610_show()
 
   #應用 a56 樣板自動產生(Version:3)
   #檢查此單據是否需顯示BPM簽核狀況按鈕 
   IF cl_bpm_chk() THEN
      CALL cl_set_act_visible("bpm_status",TRUE)
   ELSE
      CALL cl_set_act_visible("bpm_status",FALSE)
   END IF
 
 
 
 
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.insert" >}
#+ 資料新增
PRIVATE FUNCTION axmt610_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   
   #end add-point    
   #add-point:insert段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="insert.pre_function"
   
   #end add-point
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_xmem_d.clear()   
 
 
   INITIALIZE g_xmel_m.* TO NULL             #DEFAULT 設定
   
   LET g_xmeldocno_t = NULL
 
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before name="insert.before"
   CALL aooi360_01_clear_detail()   #清除备注单身  #161031-00025#30
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_xmel_m.xmelownid = g_user
      LET g_xmel_m.xmelowndp = g_dept
      LET g_xmel_m.xmelcrtid = g_user
      LET g_xmel_m.xmelcrtdp = g_dept 
      LET g_xmel_m.xmelcrtdt = cl_get_current()
      LET g_xmel_m.xmelmodid = g_user
      LET g_xmel_m.xmelmoddt = cl_get_current()
      LET g_xmel_m.xmelstus = 'N'
 
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_xmel_m.xmelstus = "N"
      LET g_xmel_m.xmel004 = "1"
      LET g_xmel_m.xmel011 = "1"
      LET g_xmel_m.xmel012 = "1"
 
  
      #add-point:單頭預設值 name="insert.default"
      LET g_xmel_m.xmeldocdt = g_today
      LET g_xmel_m.xmelsite = g_site
      LET g_xmel_m.xmel001 = g_user
      SELECT ooag003 INTO g_xmel_m.xmel002 FROM ooag_t
       WHERE ooag001 = g_xmel_m.xmel001 AND ooagent = g_enterprise
      CALL axmt610_xmel001_desc()
      CALL axmt610_xmel002_desc()
      LET g_xmel_m.xmel006 = g_today
      LET g_xmel_m_t.* = g_xmel_m.*
      LET g_xmel_m.xmel016 = 'N'   #add--2015/07/13 By shiun
      #161031-00025#30-s
      LET g_ooff001_d = '6'   #6.單據單頭備註
      LET g_ooff002_d = g_prog
      LET g_ooff003_d = ''    #单号
      LET g_ooff004_d = '0'     #项次
      LET g_ooff005_d = ' '
      LET g_ooff006_d = ' '
      LET g_ooff007_d = ' '
      LET g_ooff008_d = ' '
      LET g_ooff009_d = ' '
      LET g_ooff010_d = ' '
      LET g_ooff011_d = ' '
      #161031-00025#30-e
      #end add-point 
      
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET g_xmel_m_t.* = g_xmel_m.*
      LET g_xmel_m_o.* = g_xmel_m.*
      
      #顯示狀態(stus)圖片
            #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_xmel_m.xmelstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
    
      CALL axmt610_input("a")
      
      #add-point:單頭輸入後 name="insert.after_insert"
      
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
      END IF
      
      IF NOT g_master_insert THEN
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_xmel_m.* TO NULL
         INITIALIZE g_xmem_d TO NULL
 
         #add-point:取消新增後 name="insert.cancel"
         
         #end add-point 
         CALL axmt610_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_xmem_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL axmt610_set_act_visible()   
   CALL axmt610_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " xmelent = " ||g_enterprise|| " AND",
                      " xmeldocno = '", g_xmel_m.xmeldocno, "' "
 
                      
   #add-point:組合新增資料的條件後 name="insert.after.add_browse"
   
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL axmt610_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE axmt610_cl
   
   CALL axmt610_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
   
   #遮罩相關處理
   LET g_xmel_m_mask_o.* =  g_xmel_m.*
   CALL axmt610_xmel_t_mask()
   LET g_xmel_m_mask_n.* =  g_xmel_m.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel003_desc, 
       g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc,g_xmel_m.xmelstus, 
       g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008, 
       g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel013_desc, 
       g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc,g_xmel_m.xmel018,g_xmel_m.xmel019, 
       g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel015_desc,g_xmel_m.xmel016, 
       g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc,g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc, 
       g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt, 
       g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc, 
       g_xmel_m.xmelcnfdt
   
   #add-point:新增結束後 name="insert.after"
   CALL axmt610_show()  #161207-00033#18
   #end add-point 
   
   LET g_data_owner = g_xmel_m.xmelownid      
   LET g_data_dept  = g_xmel_m.xmelowndp
   
   #功能已完成,通報訊息中心
   CALL axmt610_msgcentre_notify('insert')
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.modify" >}
#+ 資料修改
PRIVATE FUNCTION axmt610_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   
   #end add-point    
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
 
 
   #add-point:modify段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="modify.pre_function"
   
   #end add-point
   
   #保存單頭舊值
   LET g_xmel_m_t.* = g_xmel_m.*
   LET g_xmel_m_o.* = g_xmel_m.*
   
   IF g_xmel_m.xmeldocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
   CALL s_transaction_begin()
   
   OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN axmt610_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
   #檢查是否允許此動作
   IF NOT axmt610_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_xmel_m_mask_o.* =  g_xmel_m.*
   CALL axmt610_xmel_t_mask()
   LET g_xmel_m_mask_n.* =  g_xmel_m.*
   
   
   
   #add-point:modify段show之前 name="modify.before_show"
   
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
 
 
   
   CALL axmt610_show()
   #add-point:modify段show之後 name="modify.after_show"
   
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
 
 
    
   WHILE TRUE
      LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_xmel_m.xmelmodid = g_user 
LET g_xmel_m.xmelmoddt = cl_get_current()
LET g_xmel_m.xmelmodid_desc = cl_get_username(g_xmel_m.xmelmodid)
      
      #add-point:modify段修改前 name="modify.before_input"
      
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      LET g_master_commit = "N"
      CALL axmt610_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後 name="modify.after_input"
      
      #end add-point
      
      IF g_update OR NOT INT_FLAG THEN
         #若有modid跟moddt則進行update
         UPDATE xmel_t SET (xmelmodid,xmelmoddt) = (g_xmel_m.xmelmodid,g_xmel_m.xmelmoddt)
          WHERE xmelent = g_enterprise AND xmeldocno = g_xmeldocno_t
 
      END IF
    
      IF INT_FLAG THEN
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         #若單頭無commit則還原
         IF g_master_commit = "N" THEN
            LET g_xmel_m.* = g_xmel_m_t.*
            CALL axmt610_show()
         END IF
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF g_xmel_m.xmeldocno != g_xmel_m_t.xmeldocno
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前 name="modify.body.b_fk_update"
         
         #end add-point
         
         #更新單身key值
         UPDATE xmem_t SET xmemdocno = g_xmel_m.xmeldocno
 
          WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m_t.xmeldocno
 
            
         #add-point:單身fk修改中 name="modify.body.m_fk_update"
         
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "xmem_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後 name="modify.body.a_fk_update"
         
         #end add-point
         
 
         
 
         
         #UPDATE 多語言table key值
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL axmt610_set_act_visible()   
   CALL axmt610_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " xmelent = " ||g_enterprise|| " AND",
                      " xmeldocno = '", g_xmel_m.xmeldocno, "' "
 
   #填到對應位置
   CALL axmt610_browser_fill("")
 
   CLOSE axmt610_cl
   
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL axmt610_msgcentre_notify('modify')
 
END FUNCTION 
 
{</section>}
 
{<section id="axmt610.input" >}
#+ 資料輸入
PRIVATE FUNCTION axmt610_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   
   #end add-point  
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_ac_t                LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   DEFINE  l_success             LIKE type_t.num5
   DEFINE  l_flag                LIKE type_t.num5
   DEFINE  l_oocq019             LIKE oocq_t.oocq019    
   #mod--161109-00085#7-s
   #DEFINE  l_imaa    RECORD LIKE imaa_t.*
   DEFINE l_imaa RECORD  #料件主檔
       imaaent LIKE imaa_t.imaaent, #企業編號
       imaa001 LIKE imaa_t.imaa001, #料號
       imaa002 LIKE imaa_t.imaa002, #目前版本
       imaa003 LIKE imaa_t.imaa003, #主分群碼
       imaa004 LIKE imaa_t.imaa004, #料件類別
       imaa005 LIKE imaa_t.imaa005, #特徵組別
       imaa006 LIKE imaa_t.imaa006, #基礎單位
       imaa009 LIKE imaa_t.imaa009, #產品分類
       imaa010 LIKE imaa_t.imaa010, #生命週期狀態
       imaa011 LIKE imaa_t.imaa011, #產出類型
       imaa012 LIKE imaa_t.imaa012, #允許副產品
       imaa013 LIKE imaa_t.imaa013, #目錄編號
       imaa014 LIKE imaa_t.imaa014, #產品條碼編號
       imaa016 LIKE imaa_t.imaa016, #毛重
       imaa017 LIKE imaa_t.imaa017, #淨重
       imaa018 LIKE imaa_t.imaa018, #重量單位
       imaa019 LIKE imaa_t.imaa019, #長度
       imaa020 LIKE imaa_t.imaa020, #寬度
       imaa021 LIKE imaa_t.imaa021, #高度
       imaa022 LIKE imaa_t.imaa022, #長度單位
       imaa023 LIKE imaa_t.imaa023, #面積
       imaa024 LIKE imaa_t.imaa024, #面積單位
       imaa025 LIKE imaa_t.imaa025, #體積
       imaa026 LIKE imaa_t.imaa026, #體積單位
       imaa027 LIKE imaa_t.imaa027, #為包裝容器
       imaa028 LIKE imaa_t.imaa028, #容量
       imaa029 LIKE imaa_t.imaa029, #容量單位
       imaa030 LIKE imaa_t.imaa030, #超量容差(%)
       imaa031 LIKE imaa_t.imaa031, #載重量
       imaa032 LIKE imaa_t.imaa032, #載重單位
       imaa033 LIKE imaa_t.imaa033, #超重容差(%)
       imaa034 LIKE imaa_t.imaa034, #料號來源
       imaa035 LIKE imaa_t.imaa035, #來源參考料號
       imaa036 LIKE imaa_t.imaa036, #記錄位置(插件)
       imaa037 LIKE imaa_t.imaa037, #組裝位置須勾稽
       imaa038 LIKE imaa_t.imaa038, #工程料件
       imaa039 LIKE imaa_t.imaa039, #轉正式料號
       imaa040 LIKE imaa_t.imaa040, #轉正式料號時間
       imaa041 LIKE imaa_t.imaa041, #工程圖號
       imaa042 LIKE imaa_t.imaa042, #主要模具編號
       imaa043 LIKE imaa_t.imaa043, #據點研發可調整元件
       imaa044 LIKE imaa_t.imaa044, #AVL控管點
       imaa045 LIKE imaa_t.imaa045, #生產國家地區
       imaa100 LIKE imaa_t.imaa100, #條碼分類
       imaa101 LIKE imaa_t.imaa101, #主供應商
       imaa102 LIKE imaa_t.imaa102, #保質期(月)
       imaa103 LIKE imaa_t.imaa103, #保質期(天)
       imaa104 LIKE imaa_t.imaa104, #庫存單位
       imaa105 LIKE imaa_t.imaa105, #銷售單位
       imaa106 LIKE imaa_t.imaa106, #銷售計價單位
       imaa107 LIKE imaa_t.imaa107, #採購單位
       imaa108 LIKE imaa_t.imaa108, #商品種類
       imaa109 LIKE imaa_t.imaa109, #條碼類型
       imaa110 LIKE imaa_t.imaa110, #季節性商品
       imaa111 LIKE imaa_t.imaa111, #開始日期
       imaa112 LIKE imaa_t.imaa112, #結束日期
       imaa113 LIKE imaa_t.imaa113, #傳秤因子
       imaa114 LIKE imaa_t.imaa114, #計價幣別
       imaa115 LIKE imaa_t.imaa115, #預計進貨價格
       imaa116 LIKE imaa_t.imaa116, #預計銷貨價格
       imaa117 LIKE imaa_t.imaa117, #進銷差率
       imaa118 LIKE imaa_t.imaa118, #試銷期(天)
       imaa119 LIKE imaa_t.imaa119, #試銷金額
       imaa120 LIKE imaa_t.imaa120, #試銷數量
       imaa121 LIKE imaa_t.imaa121, #是否網路經營
       imaa122 LIKE imaa_t.imaa122, #產地分類
       imaa123 LIKE imaa_t.imaa123, #產地說明
       imaa124 LIKE imaa_t.imaa124, #進銷項稅別
       imaa125 LIKE imaa_t.imaa125, #一次性商品
       imaa126 LIKE imaa_t.imaa126, #品牌
       imaa127 LIKE imaa_t.imaa127, #系列
       imaa128 LIKE imaa_t.imaa128, #型別
       imaa129 LIKE imaa_t.imaa129, #功能
       imaa130 LIKE imaa_t.imaa130, #主材
       imaa131 LIKE imaa_t.imaa131, #價格帶
       imaa132 LIKE imaa_t.imaa132, #其他屬性一
       imaa133 LIKE imaa_t.imaa133, #其他屬性二
       imaa134 LIKE imaa_t.imaa134, #其他屬性三
       imaa135 LIKE imaa_t.imaa135, #其他屬性四
       imaa136 LIKE imaa_t.imaa136, #其他屬性五
       imaa137 LIKE imaa_t.imaa137, #其他屬性六
       imaa138 LIKE imaa_t.imaa138, #其他屬性七
       imaa139 LIKE imaa_t.imaa139, #其他屬性八
       imaa140 LIKE imaa_t.imaa140, #其他屬性九
       imaa141 LIKE imaa_t.imaa141, #其他屬性十
       imaa142 LIKE imaa_t.imaa142, #制定組織
       imaa143 LIKE imaa_t.imaa143, #產品組編號
       imaa144 LIKE imaa_t.imaa144, #庫存多單位
       imaa145 LIKE imaa_t.imaa145, #採購計價單位
       imaa146 LIKE imaa_t.imaa146, #成本單位
       imaastus LIKE imaa_t.imaastus, #狀態碼
       imaaownid LIKE imaa_t.imaaownid, #資料所有者
       imaaowndp LIKE imaa_t.imaaowndp, #資料所屬部門
       imaacrtid LIKE imaa_t.imaacrtid, #資料建立者
       imaacrtdp LIKE imaa_t.imaacrtdp, #資料建立部門
       imaacrtdt LIKE imaa_t.imaacrtdt, #資料創建日
       imaamodid LIKE imaa_t.imaamodid, #資料修改者
       imaamoddt LIKE imaa_t.imaamoddt, #最近修改日
       imaacnfid LIKE imaa_t.imaacnfid, #資料確認者
       imaacnfdt LIKE imaa_t.imaacnfdt, #資料確認日
       #161109-00085#65 --s add
       imaaud001 LIKE imaa_t.imaaud001, #自定義欄位(文字)001
       imaaud002 LIKE imaa_t.imaaud002, #自定義欄位(文字)002
       imaaud003 LIKE imaa_t.imaaud003, #自定義欄位(文字)003
       imaaud004 LIKE imaa_t.imaaud004, #自定義欄位(文字)004
       imaaud005 LIKE imaa_t.imaaud005, #自定義欄位(文字)005
       imaaud006 LIKE imaa_t.imaaud006, #自定義欄位(文字)006
       imaaud007 LIKE imaa_t.imaaud007, #自定義欄位(文字)007
       imaaud008 LIKE imaa_t.imaaud008, #自定義欄位(文字)008
       imaaud009 LIKE imaa_t.imaaud009, #自定義欄位(文字)009
       imaaud010 LIKE imaa_t.imaaud010, #自定義欄位(文字)010
       imaaud011 LIKE imaa_t.imaaud011, #自定義欄位(數字)011
       imaaud012 LIKE imaa_t.imaaud012, #自定義欄位(數字)012
       imaaud013 LIKE imaa_t.imaaud013, #自定義欄位(數字)013
       imaaud014 LIKE imaa_t.imaaud014, #自定義欄位(數字)014
       imaaud015 LIKE imaa_t.imaaud015, #自定義欄位(數字)015
       imaaud016 LIKE imaa_t.imaaud016, #自定義欄位(數字)016
       imaaud017 LIKE imaa_t.imaaud017, #自定義欄位(數字)017
       imaaud018 LIKE imaa_t.imaaud018, #自定義欄位(數字)018
       imaaud019 LIKE imaa_t.imaaud019, #自定義欄位(數字)019
       imaaud020 LIKE imaa_t.imaaud020, #自定義欄位(數字)020
       imaaud021 LIKE imaa_t.imaaud021, #自定義欄位(日期時間)021
       imaaud022 LIKE imaa_t.imaaud022, #自定義欄位(日期時間)022
       imaaud023 LIKE imaa_t.imaaud023, #自定義欄位(日期時間)023
       imaaud024 LIKE imaa_t.imaaud024, #自定義欄位(日期時間)024
       imaaud025 LIKE imaa_t.imaaud025, #自定義欄位(日期時間)025
       imaaud026 LIKE imaa_t.imaaud026, #自定義欄位(日期時間)026
       imaaud027 LIKE imaa_t.imaaud027, #自定義欄位(日期時間)027
       imaaud028 LIKE imaa_t.imaaud028, #自定義欄位(日期時間)028
       imaaud029 LIKE imaa_t.imaaud029, #自定義欄位(日期時間)029
       imaaud030 LIKE imaa_t.imaaud030, #自定義欄位(日期時間)030
       #161109-00085#65 --e add
       imaa147 LIKE imaa_t.imaa147, #預設商品臨期比例
       imaa148 LIKE imaa_t.imaa148, #商品臨期天數
       imaa149 LIKE imaa_t.imaa149, #臨期控管方式
       imaa150 LIKE imaa_t.imaa150, #輔材
       imaa151 LIKE imaa_t.imaa151, #等級
       imaa152 LIKE imaa_t.imaa152, #顏色
       imaa153 LIKE imaa_t.imaa153, #型號
       imaa154 LIKE imaa_t.imaa154, #年份
       imaa155 LIKE imaa_t.imaa155, #訂貨季
       imaa156 LIKE imaa_t.imaa156, #性別
       imaa157 LIKE imaa_t.imaa157, #標牌價
       imaa158 LIKE imaa_t.imaa158, #上市日
       imaa159 LIKE imaa_t.imaa159, #每m²克重
       imaa160 LIKE imaa_t.imaa160, #面料幅寬
       imaa161 LIKE imaa_t.imaa161  #觸屏分類編號
               END RECORD
   #DEFINE  l_imaa_1  RECORD LIKE imaa_t.*
   DEFINE l_imaa_1 RECORD  #料件主檔
       imaaent LIKE imaa_t.imaaent, #企業編號
       imaa001 LIKE imaa_t.imaa001, #料號
       imaa002 LIKE imaa_t.imaa002, #目前版本
       imaa003 LIKE imaa_t.imaa003, #主分群碼
       imaa004 LIKE imaa_t.imaa004, #料件類別
       imaa005 LIKE imaa_t.imaa005, #特徵組別
       imaa006 LIKE imaa_t.imaa006, #基礎單位
       imaa009 LIKE imaa_t.imaa009, #產品分類
       imaa010 LIKE imaa_t.imaa010, #生命週期狀態
       imaa011 LIKE imaa_t.imaa011, #產出類型
       imaa012 LIKE imaa_t.imaa012, #允許副產品
       imaa013 LIKE imaa_t.imaa013, #目錄編號
       imaa014 LIKE imaa_t.imaa014, #產品條碼編號
       imaa016 LIKE imaa_t.imaa016, #毛重
       imaa017 LIKE imaa_t.imaa017, #淨重
       imaa018 LIKE imaa_t.imaa018, #重量單位
       imaa019 LIKE imaa_t.imaa019, #長度
       imaa020 LIKE imaa_t.imaa020, #寬度
       imaa021 LIKE imaa_t.imaa021, #高度
       imaa022 LIKE imaa_t.imaa022, #長度單位
       imaa023 LIKE imaa_t.imaa023, #面積
       imaa024 LIKE imaa_t.imaa024, #面積單位
       imaa025 LIKE imaa_t.imaa025, #體積
       imaa026 LIKE imaa_t.imaa026, #體積單位
       imaa027 LIKE imaa_t.imaa027, #為包裝容器
       imaa028 LIKE imaa_t.imaa028, #容量
       imaa029 LIKE imaa_t.imaa029, #容量單位
       imaa030 LIKE imaa_t.imaa030, #超量容差(%)
       imaa031 LIKE imaa_t.imaa031, #載重量
       imaa032 LIKE imaa_t.imaa032, #載重單位
       imaa033 LIKE imaa_t.imaa033, #超重容差(%)
       imaa034 LIKE imaa_t.imaa034, #料號來源
       imaa035 LIKE imaa_t.imaa035, #來源參考料號
       imaa036 LIKE imaa_t.imaa036, #記錄位置(插件)
       imaa037 LIKE imaa_t.imaa037, #組裝位置須勾稽
       imaa038 LIKE imaa_t.imaa038, #工程料件
       imaa039 LIKE imaa_t.imaa039, #轉正式料號
       imaa040 LIKE imaa_t.imaa040, #轉正式料號時間
       imaa041 LIKE imaa_t.imaa041, #工程圖號
       imaa042 LIKE imaa_t.imaa042, #主要模具編號
       imaa043 LIKE imaa_t.imaa043, #據點研發可調整元件
       imaa044 LIKE imaa_t.imaa044, #AVL控管點
       imaa045 LIKE imaa_t.imaa045, #生產國家地區
       imaa100 LIKE imaa_t.imaa100, #條碼分類
       imaa101 LIKE imaa_t.imaa101, #主供應商
       imaa102 LIKE imaa_t.imaa102, #保質期(月)
       imaa103 LIKE imaa_t.imaa103, #保質期(天)
       imaa104 LIKE imaa_t.imaa104, #庫存單位
       imaa105 LIKE imaa_t.imaa105, #銷售單位
       imaa106 LIKE imaa_t.imaa106, #銷售計價單位
       imaa107 LIKE imaa_t.imaa107, #採購單位
       imaa108 LIKE imaa_t.imaa108, #商品種類
       imaa109 LIKE imaa_t.imaa109, #條碼類型
       imaa110 LIKE imaa_t.imaa110, #季節性商品
       imaa111 LIKE imaa_t.imaa111, #開始日期
       imaa112 LIKE imaa_t.imaa112, #結束日期
       imaa113 LIKE imaa_t.imaa113, #傳秤因子
       imaa114 LIKE imaa_t.imaa114, #計價幣別
       imaa115 LIKE imaa_t.imaa115, #預計進貨價格
       imaa116 LIKE imaa_t.imaa116, #預計銷貨價格
       imaa117 LIKE imaa_t.imaa117, #進銷差率
       imaa118 LIKE imaa_t.imaa118, #試銷期(天)
       imaa119 LIKE imaa_t.imaa119, #試銷金額
       imaa120 LIKE imaa_t.imaa120, #試銷數量
       imaa121 LIKE imaa_t.imaa121, #是否網路經營
       imaa122 LIKE imaa_t.imaa122, #產地分類
       imaa123 LIKE imaa_t.imaa123, #產地說明
       imaa124 LIKE imaa_t.imaa124, #進銷項稅別
       imaa125 LIKE imaa_t.imaa125, #一次性商品
       imaa126 LIKE imaa_t.imaa126, #品牌
       imaa127 LIKE imaa_t.imaa127, #系列
       imaa128 LIKE imaa_t.imaa128, #型別
       imaa129 LIKE imaa_t.imaa129, #功能
       imaa130 LIKE imaa_t.imaa130, #主材
       imaa131 LIKE imaa_t.imaa131, #價格帶
       imaa132 LIKE imaa_t.imaa132, #其他屬性一
       imaa133 LIKE imaa_t.imaa133, #其他屬性二
       imaa134 LIKE imaa_t.imaa134, #其他屬性三
       imaa135 LIKE imaa_t.imaa135, #其他屬性四
       imaa136 LIKE imaa_t.imaa136, #其他屬性五
       imaa137 LIKE imaa_t.imaa137, #其他屬性六
       imaa138 LIKE imaa_t.imaa138, #其他屬性七
       imaa139 LIKE imaa_t.imaa139, #其他屬性八
       imaa140 LIKE imaa_t.imaa140, #其他屬性九
       imaa141 LIKE imaa_t.imaa141, #其他屬性十
       imaa142 LIKE imaa_t.imaa142, #制定組織
       imaa143 LIKE imaa_t.imaa143, #產品組編號
       imaa144 LIKE imaa_t.imaa144, #庫存多單位
       imaa145 LIKE imaa_t.imaa145, #採購計價單位
       imaa146 LIKE imaa_t.imaa146, #成本單位
       imaastus LIKE imaa_t.imaastus, #狀態碼
       imaaownid LIKE imaa_t.imaaownid, #資料所有者
       imaaowndp LIKE imaa_t.imaaowndp, #資料所屬部門
       imaacrtid LIKE imaa_t.imaacrtid, #資料建立者
       imaacrtdp LIKE imaa_t.imaacrtdp, #資料建立部門
       imaacrtdt LIKE imaa_t.imaacrtdt, #資料創建日
       imaamodid LIKE imaa_t.imaamodid, #資料修改者
       imaamoddt LIKE imaa_t.imaamoddt, #最近修改日
       imaacnfid LIKE imaa_t.imaacnfid, #資料確認者
       imaacnfdt LIKE imaa_t.imaacnfdt, #資料確認日
       #161109-00085#65 --s add
       imaaud001 LIKE imaa_t.imaaud001, #自定義欄位(文字)001
       imaaud002 LIKE imaa_t.imaaud002, #自定義欄位(文字)002
       imaaud003 LIKE imaa_t.imaaud003, #自定義欄位(文字)003
       imaaud004 LIKE imaa_t.imaaud004, #自定義欄位(文字)004
       imaaud005 LIKE imaa_t.imaaud005, #自定義欄位(文字)005
       imaaud006 LIKE imaa_t.imaaud006, #自定義欄位(文字)006
       imaaud007 LIKE imaa_t.imaaud007, #自定義欄位(文字)007
       imaaud008 LIKE imaa_t.imaaud008, #自定義欄位(文字)008
       imaaud009 LIKE imaa_t.imaaud009, #自定義欄位(文字)009
       imaaud010 LIKE imaa_t.imaaud010, #自定義欄位(文字)010
       imaaud011 LIKE imaa_t.imaaud011, #自定義欄位(數字)011
       imaaud012 LIKE imaa_t.imaaud012, #自定義欄位(數字)012
       imaaud013 LIKE imaa_t.imaaud013, #自定義欄位(數字)013
       imaaud014 LIKE imaa_t.imaaud014, #自定義欄位(數字)014
       imaaud015 LIKE imaa_t.imaaud015, #自定義欄位(數字)015
       imaaud016 LIKE imaa_t.imaaud016, #自定義欄位(數字)016
       imaaud017 LIKE imaa_t.imaaud017, #自定義欄位(數字)017
       imaaud018 LIKE imaa_t.imaaud018, #自定義欄位(數字)018
       imaaud019 LIKE imaa_t.imaaud019, #自定義欄位(數字)019
       imaaud020 LIKE imaa_t.imaaud020, #自定義欄位(數字)020
       imaaud021 LIKE imaa_t.imaaud021, #自定義欄位(日期時間)021
       imaaud022 LIKE imaa_t.imaaud022, #自定義欄位(日期時間)022
       imaaud023 LIKE imaa_t.imaaud023, #自定義欄位(日期時間)023
       imaaud024 LIKE imaa_t.imaaud024, #自定義欄位(日期時間)024
       imaaud025 LIKE imaa_t.imaaud025, #自定義欄位(日期時間)025
       imaaud026 LIKE imaa_t.imaaud026, #自定義欄位(日期時間)026
       imaaud027 LIKE imaa_t.imaaud027, #自定義欄位(日期時間)027
       imaaud028 LIKE imaa_t.imaaud028, #自定義欄位(日期時間)028
       imaaud029 LIKE imaa_t.imaaud029, #自定義欄位(日期時間)029
       imaaud030 LIKE imaa_t.imaaud030, #自定義欄位(日期時間)030
       #161109-00085#65 --e add
       imaa147 LIKE imaa_t.imaa147, #預設商品臨期比例
       imaa148 LIKE imaa_t.imaa148, #商品臨期天數
       imaa149 LIKE imaa_t.imaa149, #臨期控管方式
       imaa150 LIKE imaa_t.imaa150, #輔材
       imaa151 LIKE imaa_t.imaa151, #等級
       imaa152 LIKE imaa_t.imaa152, #顏色
       imaa153 LIKE imaa_t.imaa153, #型號
       imaa154 LIKE imaa_t.imaa154, #年份
       imaa155 LIKE imaa_t.imaa155, #訂貨季
       imaa156 LIKE imaa_t.imaa156, #性別
       imaa157 LIKE imaa_t.imaa157, #標牌價
       imaa158 LIKE imaa_t.imaa158, #上市日
       imaa159 LIKE imaa_t.imaa159, #每m²克重
       imaa160 LIKE imaa_t.imaa160, #面料幅寬
       imaa161 LIKE imaa_t.imaa161  #觸屏分類編號
               END RECORD
   #mod--161109-00085#7-e
   DEFINE  l_xmam004             LIKE xmam_t.xmam004
   DEFINE  l_where               STRING  #150909 earl add
   DEFINE  l_xmem012             LIKE xmem_t.xmem012     #160908-00016#1 add
   DEFINE  l_xmdh016             LIKE xmdh_t.xmdh016     #160908-00016#1 add
   #end add-point  
   
   #add-point:Function前置處理  name="input.pre_function"
   
   #end add-point
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel003_desc, 
       g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc,g_xmel_m.xmelstus, 
       g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008, 
       g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel013_desc, 
       g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc,g_xmel_m.xmel018,g_xmel_m.xmel019, 
       g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel015_desc,g_xmel_m.xmel016, 
       g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc,g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc, 
       g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt, 
       g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc, 
       g_xmel_m.xmelcnfdt
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql name="input.define_sql"
   
   #end add-point 
   LET g_forupd_sql = "SELECT xmemseq,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007,xmem008, 
       xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018,xmem019,xmemsite  
       FROM xmem_t WHERE xmement=? AND xmemdocno=? AND xmemseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE axmt610_bcl CURSOR FROM g_forupd_sql
   
 
   
 
 
   #add-point:input段define_sql name="input.other_sql"
   
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL axmt610_set_entry(p_cmd)
   #add-point:set_entry後 name="input.after_set_entry"
   #將單身輸入權限放入共用變數給嵌入的子程式用, 若子程式要自己控管, 還是可以從子程式中覆蓋掉值
   #161031-00025#30-s
   LET g_detail_insert = l_allow_insert
   LET g_detail_delete = l_allow_delete
   #161031-00025#30-e
   #end add-point
   CALL axmt610_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002, 
       g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008, 
       g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.l_a, 
       g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite, 
       g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017
   
   LET lb_reproduce = FALSE
   LET l_ac_t = 1
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前 name="input.before_input"
   LET g_errshow = 1
   #LET g_detail_insert = 'N' #161031-00025#30 mark
   LET g_detail_insert1 = 'N' #161031-00025#30 add
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
{</section>}
 
{<section id="axmt610.input.head" >}
      #單頭段
      INPUT BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002, 
          g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008, 
          g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.l_a, 
          g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite, 
          g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN axmt610_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE axmt610_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL axmt610_set_entry(p_cmd)
            #add-point:資料輸入前 name="input.m.before_input"
             
            #end add-point
            CALL axmt610_set_no_entry(p_cmd)
    
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmeldocno
            
            #add-point:AFTER FIELD xmeldocno name="input.a.xmeldocno"
            CALL s_aooi200_get_slip_desc(g_xmel_m.xmeldocno) RETURNING g_xmel_m.xmeldocno_desc
            DISPLAY BY NAME g_xmel_m.xmeldocno_desc

            #此段落由子樣板a05產生
            IF  NOT cl_null(g_xmel_m.xmeldocno) THEN 
               IF p_cmd = 'a' OR ( p_cmd = 'u' AND (g_xmel_m.xmeldocno != g_xmeldocno_t )) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM xmel_t WHERE "||"xmelent = '" ||g_enterprise|| "' AND "||"xmeldocno = '"||g_xmel_m.xmeldocno ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
               
               #IF NOT s_aooi200_chk_slip(g_site,'',g_xmel_m.xmeldocno,'axmt610') THEN #160613-00038#1 mark
               IF NOT s_aooi200_chk_slip(g_site,'',g_xmel_m.xmeldocno,g_prog) THEN     #160613-00038#1 add
                  LET g_xmel_m.xmeldocno = g_xmel_m_t.xmeldocno
                  CALL s_aooi200_get_slip_desc(g_xmel_m.xmeldocno) RETURNING g_xmel_m.xmeldocno_desc
                  DISPLAY BY NAME g_xmel_m.xmeldocno_desc
                  
                  NEXT FIELD CURRENT
               END IF
               
               #150721-00001#1  2016/01/08 By earl mod s
               #檢核輸入的單據別是否可以被key人員對應的控制組使用,'2' 為銷售控制組類型
               CALL s_control_chk_doc('1',g_xmel_m.xmeldocno,'2',g_user,g_dept,'','') RETURNING l_success,l_flag
               IF NOT l_success OR NOT l_flag THEN
                  LET g_xmel_m.xmeldocno = g_xmel_m_t.xmeldocno
                  CALL s_aooi200_get_slip_desc(g_xmel_m.xmeldocno) RETURNING g_xmel_m.xmeldocno_desc
                  DISPLAY BY NAME g_xmel_m.xmeldocno_desc
                  
                  NEXT FIELD CURRENT
               END IF
               #150721-00001#1  2016/01/08 By earl mod e
               
               #150909 earl add s
               #檢核前後置單別的合理性
               IF NOT cl_null(g_xmel_m.xmel005) THEN
                  IF NOT s_aooi210_check_doc(g_site,'',g_xmel_m.xmel005,g_xmel_m.xmeldocno,'3','') THEN
                     LET g_xmel_m.xmeldocno = g_xmel_m_t.xmeldocno
                     CALL s_aooi200_get_slip_desc(g_xmel_m.xmeldocno) RETURNING g_xmel_m.xmeldocno_desc
                     DISPLAY BY NAME g_xmel_m.xmeldocno_desc
                     
                     NEXT FIELD CURRENT
                  END IF
               END IF
               #150909 earl add e
               
            END IF


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmeldocno
            #add-point:BEFORE FIELD xmeldocno name="input.b.xmeldocno"
            CALL s_aooi200_get_slip_desc(g_xmel_m.xmeldocno) RETURNING g_xmel_m.xmeldocno_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmeldocno
            #add-point:ON CHANGE xmeldocno name="input.g.xmeldocno"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmeldocdt
            #add-point:BEFORE FIELD xmeldocdt name="input.b.xmeldocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmeldocdt
            
            #add-point:AFTER FIELD xmeldocdt name="input.a.xmeldocdt"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmeldocdt
            #add-point:ON CHANGE xmeldocdt name="input.g.xmeldocdt"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel003
            
            #add-point:AFTER FIELD xmel003 name="input.a.xmel003"
            CALL axmt610_xmel003_desc()
            IF NOT cl_null(g_xmel_m.xmel003) THEN 
               #此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               #160318-00025#15 by 07900 --add-str 
                LET g_errshow = TRUE #是否開窗
               #160318-00025#15 by 07900 --add-end
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmel_m.xmel003
               LET g_chkparam.arg2 = g_site
               #160318-00025#15 by 07900 --add-str 
                LET g_chkparam.err_str[1] ="apm-00201:sub-01302|axmm200|",cl_get_progname("axmm200",g_lang,"2"),"|:EXEPROGaxmm200"
               #160318-00025#15 by 07900 --add-end 
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_pmaa001_3") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_xmel_m.xmel003 = g_xmel_m_t.xmel003
                  NEXT FIELD CURRENT
               END IF
               
               CALL s_control_chk_doc('3',g_xmel_m.xmeldocno,g_xmel_m.xmel003,'','','','') RETURNING l_success,l_flag
               IF l_success THEN 
                  IF NOT l_flag THEN 
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'axm-00006'
                     LET g_errparam.extend = g_xmel_m.xmel003
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET g_xmel_m.xmel003 = g_xmel_m_t.xmel003
                     NEXT FIELD CURRENT
                  END IF
               ELSE
                  LET g_xmel_m.xmel003 = g_xmel_m_t.xmel003
                  NEXT FIELD CURRENT                      
               END IF

            END IF 
            


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel003
            #add-point:BEFORE FIELD xmel003 name="input.b.xmel003"
            CALL axmt610_xmel003_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel003
            #add-point:ON CHANGE xmel003 name="input.g.xmel003"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel001
            
            #add-point:AFTER FIELD xmel001 name="input.a.xmel001"
            CALL axmt610_xmel001_desc()
            IF NOT cl_null(g_xmel_m.xmel001) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               #160318-00025#15 by 07900 --add-str 
               LET g_errshow = TRUE #是否開窗
               #160318-00025#15 by 07900 --add-end
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmel_m.xmel001
               #160318-00025#15 by 07900 --add-str 
               LET g_chkparam.err_str[1] ="aim-00070:sub-01302|aooi130|",cl_get_progname("aooi130",g_lang,"2"),"|:EXEPROGaooi130"
               #160318-00025#15 by 07900 --add-end  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooag001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_xmel_m.xmel001 = g_xmel_m_t.xmel001
                  NEXT FIELD CURRENT
               END IF
               
               
            END IF 
            


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel001
            #add-point:BEFORE FIELD xmel001 name="input.b.xmel001"
            CALL axmt610_xmel001_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel001
            #add-point:ON CHANGE xmel001 name="input.g.xmel001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel002
            
            #add-point:AFTER FIELD xmel002 name="input.a.xmel002"
            CALL axmt610_xmel002_desc()
            IF NOT cl_null(g_xmel_m.xmel002) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               #160318-00025#15 by 07900 --add-str 
               LET g_errshow = TRUE #是否開窗
               #160318-00025#15 by 07900 --add-end
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmel_m.xmel002
               LET g_chkparam.arg2 = g_xmel_m.xmeldocdt
               #160318-00025#15 by 07900 --add-str 
               LET g_chkparam.err_str[1] ="aoo-00029:sub-01302|aooi125|",cl_get_progname("aooi125",g_lang,"2"),"|:EXEPROGaooi125"
               #160318-00025#15 by 07900 --add-end  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooeg001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  LET g_xmel_m.xmel002 = g_xmel_m_t.xmel002
                  NEXT FIELD CURRENT
               END IF
            

            END IF 
            


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel002
            #add-point:BEFORE FIELD xmel002 name="input.b.xmel002"
            CALL axmt610_xmel002_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel002
            #add-point:ON CHANGE xmel002 name="input.g.xmel002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelstus
            #add-point:BEFORE FIELD xmelstus name="input.b.xmelstus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelstus
            
            #add-point:AFTER FIELD xmelstus name="input.a.xmelstus"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmelstus
            #add-point:ON CHANGE xmelstus name="input.g.xmelstus"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel004
            #add-point:BEFORE FIELD xmel004 name="input.b.xmel004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel004
            
            #add-point:AFTER FIELD xmel004 name="input.a.xmel004"
            IF NOT cl_null(g_xmel_m.xmel004) AND g_xmel_m.xmel004 != g_xmel_m_t.xmel004 THEN
               INITIALIZE g_xmel_m.xmel005 TO NULL
               INITIALIZE g_xmel_m.xmel006 TO NULL
               INITIALIZE g_xmel_m.xmel007 TO NULL
               INITIALIZE g_xmel_m.xmel007_desc TO NULL
               INITIALIZE g_xmel_m.xmel008 TO NULL
               INITIALIZE g_xmel_m.xmel009 TO NULL
               INITIALIZE g_xmel_m.xmel009_desc TO NULL
               INITIALIZE g_xmel_m.xmel010 TO NULL
               INITIALIZE g_xmel_m.xmel010_desc TO NULL
               INITIALIZE g_xmel_m.xmel013 TO NULL
               DISPLAY BY NAME g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,
                               g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel010,
                               g_xmel_m.xmel010_desc,g_xmel_m.xmel013
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel004
            #add-point:ON CHANGE xmel004 name="input.g.xmel004"
            CALL axmt610_set_entry(p_cmd)
            CALL axmt610_set_no_entry(p_cmd)
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel005
            #add-point:BEFORE FIELD xmel005 name="input.b.xmel005"
            CALL axmt610_xmel004_ref()
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel005
            
            #add-point:AFTER FIELD xmel005 name="input.a.xmel005"
            IF NOT cl_null(g_xmel_m.xmel005) THEN
            
               #151210-00009#1  2015/12/30 By earl mod s
               IF NOT axmt610_from_chk(g_xmel_m.xmel005,'1') THEN
                  LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
                  NEXT FIELD CURRENT
               END IF
#               #150909 earl add s
#               IF NOT s_aooi210_check_doc(g_site,'',g_xmel_m.xmel005,g_xmel_m.xmeldocno,'4','') THEN
#                  LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                  NEXT FIELD CURRENT
#               END IF
#               #150909 earl add e
#            
#               INITIALIZE g_chkparam.* TO NULL
#               #設定g_chkparam.*的參數 
#               #呼叫檢查存在並帶值的library
#               
#               CASE g_xmel_m.xmel004 
#                  WHEN '1'
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
#                     IF NOT cl_null(g_xmel_m.xmel003)THEN
#                        LET g_chkparam.arg2 = g_xmel_m.xmel003
#                        IF NOT cl_chk_exist("v_xmdgdocno_2") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     ELSE
#                        IF NOT cl_chk_exist("v_xmdgdocno") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     END IF
#                     
#                  WHEN '2'
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
#                     IF NOT cl_null(g_xmel_m.xmel003) THEN
#                        LET g_chkparam.arg2 = g_xmel_m.xmel003
#                        IF NOT cl_chk_exist("v_xmdkdocno_7") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     ELSE
#                        IF NOT cl_chk_exist("v_xmdkdocno_3") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     END IF
#                  WHEN '3'
#                     
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
#                     IF NOT cl_null(g_xmel_m.xmel003) THEN
#                        LET g_chkparam.arg2 = g_xmel_m.xmel003
#                        IF NOT cl_chk_exist("v_pmdsdocno_13") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     ELSE
#                        IF NOT cl_chk_exist("v_pmdsdocno") THEN
#                           LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                           NEXT FIELD CURRENT
#                        END IF
#                     END IF
#                     
#                  WHEN '4'
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
#                     IF NOT cl_chk_exist("v_indcdocno") THEN
#                        LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                        NEXT FIELD CURRENT
#                     END IF
#                  WHEN '5' 
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
#                     IF NOT cl_chk_exist("v_inbadocno_5") THEN
#                        LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                        NEXT FIELD CURRENT
#                     END IF
#                  #add by lixh 20150526      
#                  WHEN "7"  #RMA覆出單                   
#                     LET g_chkparam.arg1 = g_xmel_m.xmel005
##                     IF NOT cl_chk_exist("v_rmdadocno") THEN
##                        LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
##                        NEXT FIELD CURRENT
##                     END IF 
#                 #add by lixh 20150526                          
#               END CASE
#               #add--2015/07/13 By shiun--(S)
#               IF NOT axmt610_icaa001_chk(g_xmel_m.xmel004,g_xmel_m.xmel005) THEN
#                  LET g_xmel_m.xmel005 = g_xmel_m_t.xmel005
#                  NEXT FIELD CURRENT
#               END IF
#               #add--2015/07/13 By shiun--(E)
               #151210-00009#1  2015/12/30 By earl mod e
            #170216-00017#1-s-add
            ELSE
               IF g_xmem_d.getLength() = 0 THEN
                  LET g_xmel_m.xmel015 = ''
                  LET g_xmel_m.xmel015_desc = ''
                  DISPLAY BY NAME g_xmel_m.xmel015,g_xmel_m.xmel015_desc
               END IF
            #170216-00017#1-e-add
            END IF
            CALL axmt610_xmel004_ref()
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel005
            #add-point:ON CHANGE xmel005 name="input.g.xmel005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel006
            #add-point:BEFORE FIELD xmel006 name="input.b.xmel006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel006
            
            #add-point:AFTER FIELD xmel006 name="input.a.xmel006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel006
            #add-point:ON CHANGE xmel006 name="input.g.xmel006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel007
            
            #add-point:AFTER FIELD xmel007 name="input.a.xmel007"
            CALL axmt610_xmel007_desc()
            IF NOT cl_null(g_xmel_m.xmel007) THEN
               IF NOT s_azzi650_chk_exist(263,g_xmel_m.xmel007) THEN
                  LET g_xmel_m.xmel007 = g_xmel_m_t.xmel007
                  NEXT FIELD CURRENT
               END IF
               IF NOT cl_null(g_xmel_m.xmel009) THEN
                  IF NOT axmt610_xmel009_xmel010_chk(g_xmel_m.xmel009) THEN
                     INITIALIZE g_xmel_m.xmel009 TO NULL
                     INITIALIZE g_xmel_m.xmel010 TO NULL
                     NEXT FIELD xmel009
                  END IF
               END IF 
               
               IF NOT cl_null(g_xmel_m.xmel010) THEN
                  IF NOT axmt610_xmel009_xmel010_chk(g_xmel_m.xmel010) THEN
                     INITIALIZE g_xmel_m.xmel009 TO NULL
                     INITIALIZE g_xmel_m.xmel010 TO NULL
                     NEXT FIELD xmel010
                  END IF
               END IF
            END IF         
 
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel007
            #add-point:BEFORE FIELD xmel007 name="input.b.xmel007"
            CALL axmt610_xmel007_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel007
            #add-point:ON CHANGE xmel007 name="input.g.xmel007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel008
            #add-point:BEFORE FIELD xmel008 name="input.b.xmel008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel008
            
            #add-point:AFTER FIELD xmel008 name="input.a.xmel008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel008
            #add-point:ON CHANGE xmel008 name="input.g.xmel008"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel009
            
            #add-point:AFTER FIELD xmel009 name="input.a.xmel009"
            CALL axmt610_xmel009_desc()
            IF NOT cl_null(g_xmel_m.xmel009) THEN
               IF NOT axmt610_xmel009_xmel010_chk(g_xmel_m.xmel009) THEN
                  LET g_xmel_m.xmel009 = g_xmel_m_t.xmel009
                  NEXT FIELD CURRENT
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel009
            #add-point:BEFORE FIELD xmel009 name="input.b.xmel009"
            CALL axmt610_xmel009_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel009
            #add-point:ON CHANGE xmel009 name="input.g.xmel009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel011
            #add-point:BEFORE FIELD xmel011 name="input.b.xmel011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel011
            
            #add-point:AFTER FIELD xmel011 name="input.a.xmel011"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel011
            #add-point:ON CHANGE xmel011 name="input.g.xmel011"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel012
            #add-point:BEFORE FIELD xmel012 name="input.b.xmel012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel012
            
            #add-point:AFTER FIELD xmel012 name="input.a.xmel012"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel012
            #add-point:ON CHANGE xmel012 name="input.g.xmel012"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel013
            
            #add-point:AFTER FIELD xmel013 name="input.a.xmel013"
            CALL axmt610_xmel013_desc()
            IF NOT cl_null(g_xmel_m.xmel013) THEN
               IF NOT s_azzi650_chk_exist(209,g_xmel_m.xmel013) THEN
                  LET g_xmel_m.xmel013 = g_xmel_m_t.xmel013
                  NEXT FIELD CURRENT
               END IF
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel013
            #add-point:BEFORE FIELD xmel013 name="input.b.xmel013"
            CALL axmt610_xmel013_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel013
            #add-point:ON CHANGE xmel013 name="input.g.xmel013"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel014
            #add-point:BEFORE FIELD xmel014 name="input.b.xmel014"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel014
            
            #add-point:AFTER FIELD xmel014 name="input.a.xmel014"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel014
            #add-point:ON CHANGE xmel014 name="input.g.xmel014"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD l_a
            #add-point:BEFORE FIELD l_a name="input.b.l_a"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD l_a
            
            #add-point:AFTER FIELD l_a name="input.a.l_a"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE l_a
            #add-point:ON CHANGE l_a name="input.g.l_a"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel010
            
            #add-point:AFTER FIELD xmel010 name="input.a.xmel010"
            CALL axmt610_xmel010_desc()
            IF NOT cl_null(g_xmel_m.xmel010) THEN
               IF NOT axmt610_xmel009_xmel010_chk(g_xmel_m.xmel010) THEN
                  LET g_xmel_m.xmel010 = g_xmel_m_t.xmel010
                  NEXT FIELD CURRENT
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel010
            #add-point:BEFORE FIELD xmel010 name="input.b.xmel010"
            CALL axmt610_xmel010_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel010
            #add-point:ON CHANGE xmel010 name="input.g.xmel010"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel018
            #add-point:BEFORE FIELD xmel018 name="input.b.xmel018"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel018
            
            #add-point:AFTER FIELD xmel018 name="input.a.xmel018"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel018
            #add-point:ON CHANGE xmel018 name="input.g.xmel018"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel019
            #add-point:BEFORE FIELD xmel019 name="input.b.xmel019"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel019
            
            #add-point:AFTER FIELD xmel019 name="input.a.xmel019"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel019
            #add-point:ON CHANGE xmel019 name="input.g.xmel019"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel020
            #add-point:BEFORE FIELD xmel020 name="input.b.xmel020"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel020
            
            #add-point:AFTER FIELD xmel020 name="input.a.xmel020"
            #2015/09/07 by stellar add ----- (S)
            IF NOT cl_null(g_xmel_m.xmel020) THEN
               IF NOT cl_null(g_xmel_m.xmel021) THEN
                  IF g_xmel_m.xmel020 > g_xmel_m.xmel021 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'axm-00713'
                     LET g_errparam.extend = g_xmel_m.xmel020," > ",g_xmel_m.xmel021
                     LET g_errparam.popup = TRUE
                     
                     CALL cl_err()
                     
                     LET g_xmel_m.xmel020 = g_xmel_m_t.xmel020
                     DISPLAY BY NAME g_xmel_m.xmel020
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            #2015/09/07 by stellar add ----- (E)
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel020
            #add-point:ON CHANGE xmel020 name="input.g.xmel020"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel021
            #add-point:BEFORE FIELD xmel021 name="input.b.xmel021"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel021
            
            #add-point:AFTER FIELD xmel021 name="input.a.xmel021"
            #2015/09/07 by stellar add ----- (S)
            IF NOT cl_null(g_xmel_m.xmel021) THEN
               IF NOT cl_null(g_xmel_m.xmel020) THEN
                  IF g_xmel_m.xmel020 > g_xmel_m.xmel021 THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'axm-00713'
                     LET g_errparam.extend = g_xmel_m.xmel020," > ",g_xmel_m.xmel021
                     LET g_errparam.popup = TRUE
                     
                     CALL cl_err()
                     
                     LET g_xmel_m.xmel021 = g_xmel_m_t.xmel021
                     DISPLAY BY NAME g_xmel_m.xmel021
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            #2015/09/07 by stellar add ----- (E)
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel021
            #add-point:ON CHANGE xmel021 name="input.g.xmel021"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmelsite
            #add-point:BEFORE FIELD xmelsite name="input.b.xmelsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmelsite
            
            #add-point:AFTER FIELD xmelsite name="input.a.xmelsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmelsite
            #add-point:ON CHANGE xmelsite name="input.g.xmelsite"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel015
            
            #add-point:AFTER FIELD xmel015 name="input.a.xmel015"
            CALL axmt610_xmel015_ref()
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel015
            #add-point:BEFORE FIELD xmel015 name="input.b.xmel015"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel015
            #add-point:ON CHANGE xmel015 name="input.g.xmel015"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel016
            #add-point:BEFORE FIELD xmel016 name="input.b.xmel016"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel016
            
            #add-point:AFTER FIELD xmel016 name="input.a.xmel016"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel016
            #add-point:ON CHANGE xmel016 name="input.g.xmel016"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmel017
            #add-point:BEFORE FIELD xmel017 name="input.b.xmel017"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmel017
            
            #add-point:AFTER FIELD xmel017 name="input.a.xmel017"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmel017
            #add-point:ON CHANGE xmel017 name="input.g.xmel017"
            
            #END add-point 
 
 
 #欄位檢查
                  #Ctrlp:input.c.xmeldocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmeldocno
            #add-point:ON ACTION controlp INFIELD xmeldocno name="input.c.xmeldocno"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmeldocno             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_ooef.ooef004 #
            #LET g_qryparam.arg2 = "axmt610" #   #160705-00042#6 160711 by sakura mark
            LET g_qryparam.arg2 = g_prog         #160705-00042#6 160711 by sakura add
            
            #150909 earl mod s
            IF NOT cl_null(g_xmel_m.xmel005) THEN
               CALL s_aooi210_get_search_sql(g_site,'',g_xmel_m.xmel005,g_prog) RETURNING l_success,l_where
            ELSE
               LET l_success = TRUE
               LET l_where = "1=1"
            END IF
            
            IF l_success THEN
               #151210-00009#1  2015/12/30 By earl s
               IF g_aic_doc THEN
                  LET l_where = l_where,
                                " AND NOT EXISTS (SELECT 1 FROM icaa_t,icab_t a,icac_t ",
                                "                  WHERE icaaent = a.icabent AND a.icabent = icacent AND icacent = ",g_enterprise,
                                "                    AND icaa001 = a.icab001 AND a.icab001 = icac001",
                                "                    AND a.icab002 = icac002",
                                "                    AND a.icab003 = '",g_site,"'",
                                "                    AND ooba002 = icac005",
                                #排除正拋初始站、逆拋最終站、逆拋中斷初始站
                                "                    AND NOT ((icaa003 = '1'",
                                "                              AND (icaa014 = '1' OR (icaa014 = '2' AND icaa005 = 'Y')) AND a.icab002 = '0')",
                                "                          OR ((icaa003 = '1' OR icaa003 = '2')",
                                "                              AND icaa014 = '2' AND a.icab002 = (SELECT MAX(b.icab002) FROM icab_t b",
                                "                                                                  WHERE b.icabent = icaaent",
                                "                                                                    AND b.icab001 = icaa001))",
                                "                            )",
                                "                )"
               END IF
               #151210-00009#1  2015/12/30 By earl e
               
               LET g_qryparam.where = l_where
               CALL q_ooba002_1()                                #呼叫開窗
               LET g_xmel_m.xmeldocno = g_qryparam.return1              
               DISPLAY g_xmel_m.xmeldocno TO xmeldocno              #
            END IF
            #150909 earl mod e

            NEXT FIELD xmeldocno                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmeldocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmeldocdt
            #add-point:ON ACTION controlp INFIELD xmeldocdt name="input.c.xmeldocdt"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel003
            #add-point:ON ACTION controlp INFIELD xmel003 name="input.c.xmel003"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel003             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_site #

            
            CALL q_pmaa001_6()                                #呼叫開窗

            LET g_xmel_m.xmel003 = g_qryparam.return1              

            DISPLAY g_xmel_m.xmel003 TO xmel003              #

            NEXT FIELD xmel003                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmel001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel001
            #add-point:ON ACTION controlp INFIELD xmel001 name="input.c.xmel001"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel001             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_ooag001()                                #呼叫開窗

            LET g_xmel_m.xmel001 = g_qryparam.return1              

            DISPLAY g_xmel_m.xmel001 TO xmel001              #

            NEXT FIELD xmel001                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmel002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel002
            #add-point:ON ACTION controlp INFIELD xmel002 name="input.c.xmel002"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel002             #給予default值
            LET g_qryparam.default2 = "" #g_xmel_m.ooeg001 #部門編號
            #給予arg
            LET g_qryparam.arg1 = g_today #

            
            CALL q_ooeg001()                                #呼叫開窗

            LET g_xmel_m.xmel002 = g_qryparam.return1              
            #LET g_xmel_m.ooeg001 = g_qryparam.return2 
            DISPLAY g_xmel_m.xmel002 TO xmel002              #
            #DISPLAY g_xmel_m.ooeg001 TO ooeg001 #部門編號
            NEXT FIELD xmel002                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmelstus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelstus
            #add-point:ON ACTION controlp INFIELD xmelstus name="input.c.xmelstus"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel004
            #add-point:ON ACTION controlp INFIELD xmel004 name="input.c.xmel004"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel005
            #add-point:ON ACTION controlp INFIELD xmel005 name="input.c.xmel005"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            
            LET g_qryparam.default1 = g_xmel_m.xmel005             #給予default值
            LET g_qryparam.default2 = "" #g_xmel_m.ooeg001 #部門編號
            
            LET g_qryparam.where = " 1=1 "
            #給予arg

            CASE g_xmel_m.xmel004 
               WHEN '1'
                  IF NOT cl_null(g_xmel_m.xmel003) THEN 
                     LET g_qryparam.where = " xmdg007 = '",g_xmel_m.xmel003,"'"
                  END IF
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','xmdgdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     #170119-00008#3 Add By Ken 170119(S)
                     IF NOT cl_null(g_slip_wc1) AND l_where = "1=1" THEN
                        LET g_qryparam.where = g_qryparam.where," AND ",g_slip_wc1
                     ELSE
                     #170119-00008#3 Add By Ken 170119(E)
                        LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     END IF
                     CALL q_xmdgdocno()
                  END IF
                  #150909 earl mod e
                  
               WHEN '2'
                  LET g_qryparam.arg1 = '1'
                  LET g_qryparam.arg2 = 'Y'
                  IF NOT cl_null(g_xmel_m.xmel003) THEN 
                     LET g_qryparam.where = " xmdk009 = '",g_xmel_m.xmel003,"'"
                  END IF
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','xmdkdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     #170119-00008#3 Add By Ken 170119(S)
                     IF NOT cl_null(g_slip_wc2) AND l_where = "1=1" THEN
                        LET g_qryparam.where = g_qryparam.where," AND ",g_slip_wc2
                     ELSE
                     #170119-00008#3 Add By Ken 170119(E)                  
                        LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     END IF
                     CALL q_xmdkdocno_2()
                  END IF
                  #150909 earl mod e
                  
               WHEN '3'
                  IF NOT cl_null(g_xmel_m.xmel003) THEN 
                     LET g_qryparam.where = " pmds007 = '",g_xmel_m.xmel003,"'"
                  END IF
                  LET g_qryparam.where = " pmds000 = '7'"
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','pmdsdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     #170119-00008#3 Add By Ken 170119(S)
                     IF NOT cl_null(g_slip_wc3) AND l_where = "1=1" THEN
                        LET g_qryparam.where = g_qryparam.where," AND ",g_slip_wc3
                     ELSE
                     #170119-00008#3 Add By Ken 170119(E)                  
                        LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     END IF
                     CALL q_pmdsdocno_1()
                  END IF
                  #150909 earl mod e
                  
               WHEN '4'
                  LET g_qryparam.where = " indcsite = '",g_site,"'"
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','indcdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     #170119-00008#3 Add By Ken 170119(S)
                     IF NOT cl_null(g_slip_wc4) AND NOT cl_null(g_slip_wc5) AND l_where = "1=1" THEN
                        LET g_qryparam.where = g_qryparam.where," AND (",g_slip_wc4," OR ",g_slip_wc5,") "
                     ELSE
                     #170119-00008#3 Add By Ken 170119(E)                  
                        LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     END IF
                     CALL q_indcdocno_1()
                  END IF
                  #150909 earl mod e
                  
               WHEN '5' 
                  LET g_qryparam.arg1 = '1'
                  LET g_qryparam.where = " inbastus = 'Y'"
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','inbadocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_inbadocno_5()
                  END IF
                  #150909 earl mod e
                  
            #add by lixh 20150526
               WHEN "7"   #覆出單 (armt400) 
                  #add by lixh 20160405
                  LET g_qryparam.where = " 1=1"
                  IF NOT cl_null(g_xmel_m.xmel003) THEN 
                     LET g_qryparam.where = g_qryparam.where, " AND rmda005 = '",g_xmel_m.xmel003,"'"
                  END IF    
                  #add by lixh 20160405                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','rmdadocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_rmdadocno_1()
                  END IF
                  #150909 earl mod e
            #add by lixh 20150526
            
            END CASE
            
            #150909 earl mod s
            IF l_success THEN
               LET g_xmel_m.xmel005 = g_qryparam.return1              
               DISPLAY g_xmel_m.xmel005 TO xmel005              #
            END IF
            #150909 earl mod e
            
            NEXT FIELD xmel005
            #END add-point
 
 
         #Ctrlp:input.c.xmel006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel006
            #add-point:ON ACTION controlp INFIELD xmel006 name="input.c.xmel006"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel007
            #add-point:ON ACTION controlp INFIELD xmel007 name="input.c.xmel007"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel007             #給予default值
            LET g_qryparam.default2 = "" #g_xmel_m.oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = 263 #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_xmel_m.xmel007 = g_qryparam.return1              
            #LET g_xmel_m.oocq002 = g_qryparam.return2 
            DISPLAY g_xmel_m.xmel007 TO xmel007              #
            #DISPLAY g_xmel_m.oocq002 TO oocq002 #應用分類碼
            NEXT FIELD xmel007                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmel008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel008
            #add-point:ON ACTION controlp INFIELD xmel008 name="input.c.xmel008"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel009
            #add-point:ON ACTION controlp INFIELD xmel009 name="input.c.xmel009"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel009
            IF NOT cl_null(g_xmel_m.xmel007) THEN
               SELECT oocq019 INTO l_oocq019 FROM oocq_t WHERE oocqent = g_enterprise
                 AND oocq001 = 263 AND oocq002 = g_xmel_m.xmel007
               CASE WHEN l_oocq019 MATCHES '[14]'
                       LET g_qryparam.arg1 = 315
                       CALL q_oocq002()
                    WHEN l_oocq019 = '2'
                       LET g_qryparam.arg1 = 262
                       CALL q_oocq002()
                    WHEN l_oocq019 = '3'
                       LET g_qryparam.arg1 = 276
                       CALL q_oocq002()
               END CASE                        
            END IF
            LET g_xmel_m.xmel009 = g_qryparam.return1              
            DISPLAY g_xmel_m.xmel009 TO xmel009           
            NEXT FIELD xmel009 
            #END add-point
 
 
         #Ctrlp:input.c.xmel011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel011
            #add-point:ON ACTION controlp INFIELD xmel011 name="input.c.xmel011"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel012
            #add-point:ON ACTION controlp INFIELD xmel012 name="input.c.xmel012"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel013
            #add-point:ON ACTION controlp INFIELD xmel013 name="input.c.xmel013"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel013             #給予default值
            LET g_qryparam.default2 = "" #g_xmel_m.oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = 209 #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_xmel_m.xmel013 = g_qryparam.return1              
            #LET g_xmel_m.oocq002 = g_qryparam.return2 
            DISPLAY g_xmel_m.xmel013 TO xmel013              #
            #DISPLAY g_xmel_m.oocq002 TO oocq002 #應用分類碼
            NEXT FIELD xmel013                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.xmel014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel014
            #add-point:ON ACTION controlp INFIELD xmel014 name="input.c.xmel014"
            
            #END add-point
 
 
         #Ctrlp:input.c.l_a
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD l_a
            #add-point:ON ACTION controlp INFIELD l_a name="input.c.l_a"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel010
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel010
            #add-point:ON ACTION controlp INFIELD xmel010 name="input.c.xmel010"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmel_m.xmel010
            IF NOT cl_null(g_xmel_m.xmel007) THEN
               SELECT oocq019 INTO l_oocq019 FROM oocq_t WHERE oocqent = g_enterprise
                 AND oocq001 = 263 AND oocq002 = g_xmel_m.xmel007
               CASE WHEN l_oocq019 MATCHES '[14]'
                       LET g_qryparam.arg1 = 315
                       CALL q_oocq002()
                    WHEN l_oocq019 = '2'
                       LET g_qryparam.arg1 = 262
                       CALL q_oocq002()
                    WHEN l_oocq019 = '3'
                       LET g_qryparam.arg1 = 276
                       CALL q_oocq002()
               END CASE                        
            ELSE
               CALL q_oock004()
            END IF
            LET g_xmel_m.xmel010 = g_qryparam.return1              
            DISPLAY g_xmel_m.xmel010 TO xmel010           
            NEXT FIELD xmel010 
            #END add-point
 
 
         #Ctrlp:input.c.xmel018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel018
            #add-point:ON ACTION controlp INFIELD xmel018 name="input.c.xmel018"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel019
            #add-point:ON ACTION controlp INFIELD xmel019 name="input.c.xmel019"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel020
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel020
            #add-point:ON ACTION controlp INFIELD xmel020 name="input.c.xmel020"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel021
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel021
            #add-point:ON ACTION controlp INFIELD xmel021 name="input.c.xmel021"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmelsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmelsite
            #add-point:ON ACTION controlp INFIELD xmelsite name="input.c.xmelsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel015
            #add-point:ON ACTION controlp INFIELD xmel015 name="input.c.xmel015"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel016
            #add-point:ON ACTION controlp INFIELD xmel016 name="input.c.xmel016"
            
            #END add-point
 
 
         #Ctrlp:input.c.xmel017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmel017
            #add-point:ON ACTION controlp INFIELD xmel017 name="input.c.xmel017"
            
            #END add-point
 
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_xmel_m.xmeldocno
                        
            #add-point:單頭INPUT後 name="input.head.after_input"
            
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前 name="input.head.b_insert"
               #CALL s_aooi200_gen_docno(g_site,g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt,'axmt610') RETURNING g_success,g_xmel_m.xmeldocno #160613-00038#1 mark
               CALL s_aooi200_gen_docno(g_site,g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt,g_prog) RETURNING g_success,g_xmel_m.xmeldocno     #160613-00038#1 add
               IF NOT g_success THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = SQLCA.sqlcode
                  LET g_errparam.extend = "g_xmel_m"
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
  
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               #end add-point
               
               INSERT INTO xmel_t (xmelent,xmeldocno,xmeldocdt,xmel003,xmel001,xmel002,xmelstus,xmel004, 
                   xmel005,xmel006,xmel007,xmel008,xmel009,xmel011,xmel012,xmel013,xmel014,xmel010,xmel018, 
                   xmel019,xmel020,xmel021,xmelsite,xmel015,xmel016,xmel017,xmelownid,xmelowndp,xmelcrtid, 
                   xmelcrtdp,xmelcrtdt,xmelmodid,xmelmoddt,xmelcnfid,xmelcnfdt)
               VALUES (g_enterprise,g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel001, 
                   g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006, 
                   g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
                   g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019, 
                   g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016, 
                   g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp, 
                   g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt)  
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_xmel_m:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中 name="input.head.m_insert"
               LET g_ooff003_d = g_xmel_m.xmeldocno   #161031-00025#30 add
               #end add-point
               
               
               
               
               #add-point:單頭新增後 name="input.head.a_insert"
               IF g_xmel_m.xmel004 != '6' THEN
                  #170216-00017#1-s-mod
                  #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
                  CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
                  #170216-00017#1-e-mod
                  CALL axmt610_b_fill()
                  #LET g_detail_insert = 'Y' #161031-00025#30 mark
                  LET g_detail_insert1 = 'Y' #161031-00025#30 add
               END IF
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL axmt610_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL axmt610_b_fill()
                  CALL axmt610_b_fill2('0')
               END IF
               
               #add-point:單頭新增後 name="input.head.a_insert2"
               
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前 name="input.head.b_update"
               
               #end add-point
               
               #將遮罩欄位還原
               CALL axmt610_xmel_t_mask_restore('restore_mask_o')
               
               UPDATE xmel_t SET (xmeldocno,xmeldocdt,xmel003,xmel001,xmel002,xmelstus,xmel004,xmel005, 
                   xmel006,xmel007,xmel008,xmel009,xmel011,xmel012,xmel013,xmel014,xmel010,xmel018,xmel019, 
                   xmel020,xmel021,xmelsite,xmel015,xmel016,xmel017,xmelownid,xmelowndp,xmelcrtid,xmelcrtdp, 
                   xmelcrtdt,xmelmodid,xmelmoddt,xmelcnfid,xmelcnfdt) = (g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
                   g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004, 
                   g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009, 
                   g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010, 
                   g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite, 
                   g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelowndp, 
                   g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid,g_xmel_m.xmelmoddt, 
                   g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt)
                WHERE xmelent = g_enterprise AND xmeldocno = g_xmeldocno_t
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "xmel_t:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中 name="input.head.m_update"
               
               #end add-point
               
               
               
               
               #將遮罩欄位進行遮蔽
               CALL axmt610_xmel_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(g_xmel_m_t)
               LET g_log2 = util.JSON.stringify(g_xmel_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後 name="input.head.a_update"
               IF g_xmel_m.xmel004 != '6' AND NOT cl_null(g_xmel_m.xmel005) AND 
                  NOT cl_null(g_xmel_m_t.xmel005) AND g_xmel_m.xmel005 != g_xmel_m_t.xmel005 THEN
                  DELETE FROM xmem_t WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
                  #170216-00017#1-s-mod
                  #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
                  CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
                  #170216-00017#1-e-mod
                  CALL axmt610_b_fill()
                  #LET g_detail_insert = 'Y' #161031-00025#30 mark
                  LET g_detail_insert1 = 'Y' #161031-00025#30 add
               END IF
               
               IF g_xmel_m.xmel004 != '6' AND NOT cl_null(g_xmel_m_t.xmel005) AND cl_null(g_xmel_m.xmel005) THEN
                  DELETE FROM xmem_t WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
                  #170216-00017#1-s-mod
                  #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
                  CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
                  #170216-00017#1-e-mod
                  CALL axmt610_b_fill()
                  #LET g_detail_insert = 'Y' #161031-00025#30 mark
                  LET g_detail_insert1 = 'Y' #161031-00025#30 add
               END IF
               
               IF g_xmel_m.xmel004 != '6' AND cl_null(g_xmel_m_t.xmel005) AND NOT cl_null(g_xmel_m.xmel005) THEN
                  DELETE FROM xmem_t WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
                  #170216-00017#1-s-mod
                  #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
                  CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
                  #170216-00017#1-e-mod
                  CALL axmt610_b_fill()
                  #LET g_detail_insert = 'Y' #161031-00025#30 mark
                  LET g_detail_insert1 = 'Y' #161031-00025#30 add
               END IF
               #end add-point
            END IF
            
            LET g_master_commit = "Y"
            LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
            
      END INPUT
   
 
{</section>}
 
{<section id="axmt610.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_xmem_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body.before_input2"
            LET l_n = 0
            SELECT COUNT(*) INTO l_n FROM xmem_t WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
            #IF l_n = 0 AND g_xmel_m.xmel004 != 6 AND g_detail_insert = 'N' THEN #161031-00025#30 mark
            IF l_n = 0 AND g_xmel_m.xmel004 != 6 AND g_detail_insert1 = 'N' THEN #161031-00025#30 add
               #170216-00017#1-s-mod
               #CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012)
               CALL axmt610_01(g_xmel_m.xmeldocno,g_xmel_m.xmel003,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel015)
               #170216-00017#1-e-mod
            END IF
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_xmem_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL axmt610_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
            END IF
            LET g_loc = 'm'
            LET g_rec_b = g_xmem_d.getLength()
            #add-point:資料輸入前 name="input.d.before_input"
            
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_detail_idx_list[1] = l_ac
            LET g_current_page = 1
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN axmt610_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE axmt610_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_xmem_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_xmem_d[l_ac].xmemseq IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_xmem_d_t.* = g_xmem_d[l_ac].*  #BACKUP
               LET g_xmem_d_o.* = g_xmem_d[l_ac].*  #BACKUP
               CALL axmt610_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body.after_set_entry_b"
               INITIALIZE l_imaa.* TO NULL
               INITIALIZE l_imaa_1.* TO NULL
               #mod--161109-00085#7-s
               #SELECT * INTO l_imaa.* FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
               SELECT imaaent,imaa001,imaa002,imaa003,imaa004,
                      imaa005,imaa006,imaa009,imaa010,imaa011,
                      imaa012,imaa013,imaa014,imaa016,imaa017,
                      imaa018,imaa019,imaa020,imaa021,imaa022,
                      imaa023,imaa024,imaa025,imaa026,imaa027,
                      imaa028,imaa029,imaa030,imaa031,imaa032,
                      imaa033,imaa034,imaa035,imaa036,imaa037,
                      imaa038,imaa039,imaa040,imaa041,imaa042,
                      imaa043,imaa044,imaa045,imaa100,imaa101,
                      imaa102,imaa103,imaa104,imaa105,imaa106,
                      imaa107,imaa108,imaa109,imaa110,imaa111,
                      imaa112,imaa113,imaa114,imaa115,imaa116,
                      imaa117,imaa118,imaa119,imaa120,imaa121,
                      imaa122,imaa123,imaa124,imaa125,imaa126,
                      imaa127,imaa128,imaa129,imaa130,imaa131,
                      imaa132,imaa133,imaa134,imaa135,imaa136,
                      imaa137,imaa138,imaa139,imaa140,imaa141,
                      imaa142,imaa143,imaa144,imaa145,imaa146,
                      imaastus,imaaownid,imaaowndp,imaacrtid,imaacrtdp,
                      imaacrtdt,imaamodid,imaamoddt,imaacnfid,imaacnfdt,
                      #161109-00085#65 --s add
                      imaaud001,imaaud002,imaaud003,imaaud004,imaaud005,
                      imaaud006,imaaud007,imaaud008,imaaud009,imaaud010,
                      imaaud011,imaaud012,imaaud013,imaaud014,imaaud015,
                      imaaud016,imaaud017,imaaud018,imaaud019,imaaud020,
                      imaaud021,imaaud022,imaaud023,imaaud024,imaaud025,
                      imaaud026,imaaud027,imaaud028,imaaud029,imaaud030,
                      #161109-00085#65 --e add
                      imaa147,imaa148,imaa149,imaa150,imaa151,
                      imaa152,imaa153,imaa154,imaa155,imaa156,
                      imaa157,imaa158,imaa159,imaa160,imaa161
               INTO l_imaa.imaaent,l_imaa.imaa001,l_imaa.imaa002,l_imaa.imaa003,l_imaa.imaa004,
                    l_imaa.imaa005,l_imaa.imaa006,l_imaa.imaa009,l_imaa.imaa010,l_imaa.imaa011,
                    l_imaa.imaa012,l_imaa.imaa013,l_imaa.imaa014,l_imaa.imaa016,l_imaa.imaa017,
                    l_imaa.imaa018,l_imaa.imaa019,l_imaa.imaa020,l_imaa.imaa021,l_imaa.imaa022,
                    l_imaa.imaa023,l_imaa.imaa024,l_imaa.imaa025,l_imaa.imaa026,l_imaa.imaa027,
                    l_imaa.imaa028,l_imaa.imaa029,l_imaa.imaa030,l_imaa.imaa031,l_imaa.imaa032,
                    l_imaa.imaa033,l_imaa.imaa034,l_imaa.imaa035,l_imaa.imaa036,l_imaa.imaa037,
                    l_imaa.imaa038,l_imaa.imaa039,l_imaa.imaa040,l_imaa.imaa041,l_imaa.imaa042,
                    l_imaa.imaa043,l_imaa.imaa044,l_imaa.imaa045,l_imaa.imaa100,l_imaa.imaa101,
                    l_imaa.imaa102,l_imaa.imaa103,l_imaa.imaa104,l_imaa.imaa105,l_imaa.imaa106,
                    l_imaa.imaa107,l_imaa.imaa108,l_imaa.imaa109,l_imaa.imaa110,l_imaa.imaa111,
                    l_imaa.imaa112,l_imaa.imaa113,l_imaa.imaa114,l_imaa.imaa115,l_imaa.imaa116,
                    l_imaa.imaa117,l_imaa.imaa118,l_imaa.imaa119,l_imaa.imaa120,l_imaa.imaa121,
                    l_imaa.imaa122,l_imaa.imaa123,l_imaa.imaa124,l_imaa.imaa125,l_imaa.imaa126,
                    l_imaa.imaa127,l_imaa.imaa128,l_imaa.imaa129,l_imaa.imaa130,l_imaa.imaa131,
                    l_imaa.imaa132,l_imaa.imaa133,l_imaa.imaa134,l_imaa.imaa135,l_imaa.imaa136,
                    l_imaa.imaa137,l_imaa.imaa138,l_imaa.imaa139,l_imaa.imaa140,l_imaa.imaa141,
                    l_imaa.imaa142,l_imaa.imaa143,l_imaa.imaa144,l_imaa.imaa145,l_imaa.imaa146,
                    l_imaa.imaastus,l_imaa.imaaownid,l_imaa.imaaowndp,l_imaa.imaacrtid,l_imaa.imaacrtdp,
                    l_imaa.imaacrtdt,l_imaa.imaamodid,l_imaa.imaamoddt,l_imaa.imaacnfid,l_imaa.imaacnfdt,
                    #161109-00085#65 --s add
                    l_imaa_1.imaaud001,l_imaa_1.imaaud002,l_imaa_1.imaaud003,l_imaa_1.imaaud004,l_imaa_1.imaaud005,
                    l_imaa_1.imaaud006,l_imaa_1.imaaud007,l_imaa_1.imaaud008,l_imaa_1.imaaud009,l_imaa_1.imaaud010,
                    l_imaa_1.imaaud011,l_imaa_1.imaaud012,l_imaa_1.imaaud013,l_imaa_1.imaaud014,l_imaa_1.imaaud015,
                    l_imaa_1.imaaud016,l_imaa_1.imaaud017,l_imaa_1.imaaud018,l_imaa_1.imaaud019,l_imaa_1.imaaud020,
                    l_imaa_1.imaaud021,l_imaa_1.imaaud022,l_imaa_1.imaaud023,l_imaa_1.imaaud024,l_imaa_1.imaaud025,
                    l_imaa_1.imaaud026,l_imaa_1.imaaud027,l_imaa_1.imaaud028,l_imaa_1.imaaud029,l_imaa_1.imaaud030,
                    #161109-00085#65 --e add
                    l_imaa.imaa147,l_imaa.imaa148,l_imaa.imaa149,l_imaa.imaa150,l_imaa.imaa151,
                    l_imaa.imaa152,l_imaa.imaa153,l_imaa.imaa154,l_imaa.imaa155,l_imaa.imaa156,
                    l_imaa.imaa157,l_imaa.imaa158,l_imaa.imaa159,l_imaa.imaa160,l_imaa.imaa161
               FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
               #mod--161109-00085#7-e
               SELECT xmam004 INTO l_xmam004 FROM xmam_t WHERE xmament = g_enterprise AND xmam001 = g_xmem_d[l_ac].xmem005
               #mod--161109-00085#7-s
               #   SELECT * INTO l_imaa_1.* FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = l_xmam004
               SELECT imaaent,imaa001,imaa002,imaa003,imaa004,
                      imaa005,imaa006,imaa009,imaa010,imaa011,
                      imaa012,imaa013,imaa014,imaa016,imaa017,
                      imaa018,imaa019,imaa020,imaa021,imaa022,
                      imaa023,imaa024,imaa025,imaa026,imaa027,
                      imaa028,imaa029,imaa030,imaa031,imaa032,
                      imaa033,imaa034,imaa035,imaa036,imaa037,
                      imaa038,imaa039,imaa040,imaa041,imaa042,
                      imaa043,imaa044,imaa045,imaa100,imaa101,
                      imaa102,imaa103,imaa104,imaa105,imaa106,
                      imaa107,imaa108,imaa109,imaa110,imaa111,
                      imaa112,imaa113,imaa114,imaa115,imaa116,
                      imaa117,imaa118,imaa119,imaa120,imaa121,
                      imaa122,imaa123,imaa124,imaa125,imaa126,
                      imaa127,imaa128,imaa129,imaa130,imaa131,
                      imaa132,imaa133,imaa134,imaa135,imaa136,
                      imaa137,imaa138,imaa139,imaa140,imaa141,
                      imaa142,imaa143,imaa144,imaa145,imaa146,
                      imaastus,imaaownid,imaaowndp,imaacrtid,imaacrtdp,
                      imaacrtdt,imaamodid,imaamoddt,imaacnfid,imaacnfdt,
                      #161109-00085#65 --s add
                      imaaud001,imaaud002,imaaud003,imaaud004,imaaud005,
                      imaaud006,imaaud007,imaaud008,imaaud009,imaaud010,
                      imaaud011,imaaud012,imaaud013,imaaud014,imaaud015,
                      imaaud016,imaaud017,imaaud018,imaaud019,imaaud020,
                      imaaud021,imaaud022,imaaud023,imaaud024,imaaud025,
                      imaaud026,imaaud027,imaaud028,imaaud029,imaaud030,
                      #161109-00085#65 --e add
                      imaa147,imaa148,imaa149,imaa150,imaa151,
                      imaa152,imaa153,imaa154,imaa155,imaa156,
                      imaa157,imaa158,imaa159,imaa160,imaa161 
               INTO l_imaa_1.imaaent,l_imaa_1.imaa001,l_imaa_1.imaa002,l_imaa_1.imaa003,l_imaa_1.imaa004,
                    l_imaa_1.imaa005,l_imaa_1.imaa006,l_imaa_1.imaa009,l_imaa_1.imaa010,l_imaa_1.imaa011,
                    l_imaa_1.imaa012,l_imaa_1.imaa013,l_imaa_1.imaa014,l_imaa_1.imaa016,l_imaa_1.imaa017,
                    l_imaa_1.imaa018,l_imaa_1.imaa019,l_imaa_1.imaa020,l_imaa_1.imaa021,l_imaa_1.imaa022,
                    l_imaa_1.imaa023,l_imaa_1.imaa024,l_imaa_1.imaa025,l_imaa_1.imaa026,l_imaa_1.imaa027,
                    l_imaa_1.imaa028,l_imaa_1.imaa029,l_imaa_1.imaa030,l_imaa_1.imaa031,l_imaa_1.imaa032,
                    l_imaa_1.imaa033,l_imaa_1.imaa034,l_imaa_1.imaa035,l_imaa_1.imaa036,l_imaa_1.imaa037,
                    l_imaa_1.imaa038,l_imaa_1.imaa039,l_imaa_1.imaa040,l_imaa_1.imaa041,l_imaa_1.imaa042,
                    l_imaa_1.imaa043,l_imaa_1.imaa044,l_imaa_1.imaa045,l_imaa_1.imaa100,l_imaa_1.imaa101,
                    l_imaa_1.imaa102,l_imaa_1.imaa103,l_imaa_1.imaa104,l_imaa_1.imaa105,l_imaa_1.imaa106,
                    l_imaa_1.imaa107,l_imaa_1.imaa108,l_imaa_1.imaa109,l_imaa_1.imaa110,l_imaa_1.imaa111,
                    l_imaa_1.imaa112,l_imaa_1.imaa113,l_imaa_1.imaa114,l_imaa_1.imaa115,l_imaa_1.imaa116,
                    l_imaa_1.imaa117,l_imaa_1.imaa118,l_imaa_1.imaa119,l_imaa_1.imaa120,l_imaa_1.imaa121,
                    l_imaa_1.imaa122,l_imaa_1.imaa123,l_imaa_1.imaa124,l_imaa_1.imaa125,l_imaa_1.imaa126,
                    l_imaa_1.imaa127,l_imaa_1.imaa128,l_imaa_1.imaa129,l_imaa_1.imaa130,l_imaa_1.imaa131,
                    l_imaa_1.imaa132,l_imaa_1.imaa133,l_imaa_1.imaa134,l_imaa_1.imaa135,l_imaa_1.imaa136,
                    l_imaa_1.imaa137,l_imaa_1.imaa138,l_imaa_1.imaa139,l_imaa_1.imaa140,l_imaa_1.imaa141,
                    l_imaa_1.imaa142,l_imaa_1.imaa143,l_imaa_1.imaa144,l_imaa_1.imaa145,l_imaa_1.imaa146,
                    l_imaa_1.imaastus,l_imaa_1.imaaownid,l_imaa_1.imaaowndp,l_imaa_1.imaacrtid,l_imaa_1.imaacrtdp,
                    l_imaa_1.imaacrtdt,l_imaa_1.imaamodid,l_imaa_1.imaamoddt,l_imaa_1.imaacnfid,l_imaa_1.imaacnfdt,
                    #161109-00085#65 --s add
                    l_imaa_1.imaaud001,l_imaa_1.imaaud002,l_imaa_1.imaaud003,l_imaa_1.imaaud004,l_imaa_1.imaaud005,
                    l_imaa_1.imaaud006,l_imaa_1.imaaud007,l_imaa_1.imaaud008,l_imaa_1.imaaud009,l_imaa_1.imaaud010,
                    l_imaa_1.imaaud011,l_imaa_1.imaaud012,l_imaa_1.imaaud013,l_imaa_1.imaaud014,l_imaa_1.imaaud015,
                    l_imaa_1.imaaud016,l_imaa_1.imaaud017,l_imaa_1.imaaud018,l_imaa_1.imaaud019,l_imaa_1.imaaud020,
                    l_imaa_1.imaaud021,l_imaa_1.imaaud022,l_imaa_1.imaaud023,l_imaa_1.imaaud024,l_imaa_1.imaaud025,
                    l_imaa_1.imaaud026,l_imaa_1.imaaud027,l_imaa_1.imaaud028,l_imaa_1.imaaud029,l_imaa_1.imaaud030,
                    #161109-00085#65 --e add
                    l_imaa_1.imaa147,l_imaa_1.imaa148,l_imaa_1.imaa149,l_imaa_1.imaa150,l_imaa_1.imaa151,
                    l_imaa_1.imaa152,l_imaa_1.imaa153,l_imaa_1.imaa154,l_imaa_1.imaa155,l_imaa_1.imaa156,
                    l_imaa_1.imaa157,l_imaa_1.imaa158,l_imaa_1.imaa159,l_imaa_1.imaa160,l_imaa_1.imaa161 
               FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = l_xmam004
               #mod--161109-00085#7-e
               #end add-point  
               CALL axmt610_set_no_entry_b(l_cmd)
               IF NOT axmt610_lock_b("xmem_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH axmt610_bcl INTO g_xmem_d[l_ac].xmemseq,g_xmem_d[l_ac].xmem001,g_xmem_d[l_ac].xmem002, 
                      g_xmem_d[l_ac].xmem003,g_xmem_d[l_ac].xmem004,g_xmem_d[l_ac].xmem005,g_xmem_d[l_ac].xmem006, 
                      g_xmem_d[l_ac].xmem007,g_xmem_d[l_ac].xmem008,g_xmem_d[l_ac].xmem009,g_xmem_d[l_ac].xmem010, 
                      g_xmem_d[l_ac].xmem011,g_xmem_d[l_ac].xmem012,g_xmem_d[l_ac].xmem013,g_xmem_d[l_ac].xmem014, 
                      g_xmem_d[l_ac].xmem015,g_xmem_d[l_ac].xmem016,g_xmem_d[l_ac].xmem017,g_xmem_d[l_ac].xmem018, 
                      g_xmem_d[l_ac].xmem019,g_xmem_d[l_ac].xmemsite
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_xmem_d_t.xmemseq,":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_xmem_d_mask_o[l_ac].* =  g_xmem_d[l_ac].*
                  CALL axmt610_xmem_t_mask()
                  LET g_xmem_d_mask_n[l_ac].* =  g_xmem_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL axmt610_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
        
         BEFORE INSERT  
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_xmem_d[l_ac].* TO NULL 
            INITIALIZE g_xmem_d_t.* TO NULL 
            INITIALIZE g_xmem_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
            
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            LET g_xmem_d[l_ac].xmemsite = g_site  #160913-00029#1
            #end add-point
            LET g_xmem_d_t.* = g_xmem_d[l_ac].*     #新輸入資料
            LET g_xmem_d_o.* = g_xmem_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL axmt610_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"
            
            #end add-point
            CALL axmt610_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_xmem_d[li_reproduce_target].* = g_xmem_d[li_reproduce].*
 
               LET g_xmem_d[li_reproduce_target].xmemseq = NULL
 
            END IF
            
 
            #add-point:modify段before insert name="input.body.before_insert"
            IF NOT cl_null(g_xmel_m.xmel005) THEN
               LET g_xmem_d[l_ac].xmem001 = g_xmel_m.xmel005
            END IF
            SELECT MAX(xmemseq) + 1 INTO g_xmem_d[l_ac].xmemseq 
              FROM xmem_t WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
            IF g_xmel_m.xmel011 = '1' THEN           #150610 add
               LET g_xmem_d[l_ac].xmem013 = 'KG'
            ELSE
               LET g_xmem_d[l_ac].xmem013 = 'PON'
            END IF
            IF cl_null(g_xmem_d[l_ac].xmemseq) THEN LET g_xmem_d[l_ac].xmemseq = 1 END IF 
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM xmem_t 
             WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
 
               AND xmemseq = g_xmem_d[l_ac].xmemseq
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_xmel_m.xmeldocno
               LET gs_keys[2] = g_xmem_d[g_detail_idx].xmemseq
               CALL axmt610_insert_b('xmem_t',gs_keys,"'1'")
                           
               #add-point:單身新增後 name="input.body.a_insert"
               #161031-00025#30-s
               IF NOT cl_null(g_xmem_d[l_ac].ooff013) THEN
                  CALL s_aooi360_gen('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,'','','','','','','','1',g_xmem_d[l_ac].ooff013) RETURNING l_success
               END IF
               #161031-00025#30-e
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               INITIALIZE g_xmem_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL axmt610_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert name="input.body.a_insert2"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_xmel_m.xmeldocno
 
               LET gs_keys[gs_keys.getLength()+1] = g_xmem_d_t.xmemseq
 
            
               #刪除同層單身
               IF NOT axmt610_delete_b('xmem_t',gs_keys,"'1'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE axmt610_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT axmt610_key_delete_b(gs_keys,'xmem_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE axmt610_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身刪除中 name="input.body.m_delete"
               #161031-00025#30-s
               CALL s_aooi360_del('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d_t.xmemseq,'','','','','','','','1') RETURNING l_success
               #161031-00025#30-e
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE axmt610_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"
               
               #end add-point
               LET l_count = g_xmem_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
               
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_xmem_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmemseq
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmemseq,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmemseq
            END IF 
 
 
 
            #add-point:AFTER FIELD xmemseq name="input.a.page1.xmemseq"
            IF NOT cl_null(g_xmem_d[l_ac].xmemseq) THEN 
            END IF 


            #此段落由子樣板a05產生
            IF  g_xmel_m.xmeldocno IS NOT NULL AND g_xmem_d[g_detail_idx].xmemseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_xmel_m.xmeldocno != g_xmeldocno_t OR g_xmem_d[g_detail_idx].xmemseq != g_xmem_d_t.xmemseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM xmem_t WHERE "||"xmement = '" ||g_enterprise|| "' AND "||"xmemdocno = '"||g_xmel_m.xmeldocno ||"' AND "|| "xmemseq = '"||g_xmem_d[g_detail_idx].xmemseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmemseq
            #add-point:BEFORE FIELD xmemseq name="input.b.page1.xmemseq"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmemseq
            #add-point:ON CHANGE xmemseq name="input.g.page1.xmemseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem001
            #add-point:BEFORE FIELD xmem001 name="input.b.page1.xmem001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem001
            
            #add-point:AFTER FIELD xmem001 name="input.a.page1.xmem001"
            IF NOT cl_null(g_xmem_d[l_ac].xmem001) THEN
               #151210-00009#1  2015/12/30 By earl mod s
               IF NOT axmt610_from_chk(g_xmem_d[l_ac].xmem001,'2') THEN
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF

#               #150909 earl add s
#               IF NOT s_aooi210_check_doc(g_site,'',g_xmem_d[l_ac].xmem001,g_xmel_m.xmeldocno,'4','') THEN
#                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                  NEXT FIELD CURRENT
#               END IF
#               #150909 earl add e
#            
#               CASE g_xmel_m.xmel004 
#                  WHEN '1'
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
#                     IF NOT cl_chk_exist("v_xmdgdocno") THEN
#                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                        NEXT FIELD CURRENT
#                     END IF
#                  WHEN '2'
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
#                     IF NOT cl_chk_exist("v_xmdkdocno_3") THEN
#                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                        NEXT FIELD CURRENT
#                     END IF
#                  WHEN '3'
#                     
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
#                     IF NOT cl_chk_exist("v_pmdsdocno") THEN
#                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                        NEXT FIELD CURRENT
#                     END IF
#                  WHEN '4'
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
#                     IF NOT cl_chk_exist("v_indcdocno") THEN
#                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                        NEXT FIELD CURRENT
#                     END IF
#                  WHEN '5' 
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
#                     IF NOT cl_chk_exist("v_inbadocno_5") THEN
#                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                        NEXT FIELD CURRENT
#                     END IF
#                 #add by lixh 20150527  
#                  WHEN '7'    
#                     LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
##                     IF NOT cl_chk_exist("v_rmdadocno") THEN
##                        LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
##                        NEXT FIELD CURRENT
##                     END IF                   
#                 #add by lixh 20150527                   
#               END CASE
#               #add--2015/07/13 By shiun--(S)
#               IF NOT axmt610_icaa001_chk(g_xmel_m.xmel004,g_xmem_d[l_ac].xmem001) THEN
#                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
#                  NEXT FIELD CURRENT
#               END IF
#               #add--2015/07/13 By shiun--(E)
               #151210-00009#1  2015/12/30 By earl mod e
            END IF
            
            IF NOT cl_null(g_xmem_d[l_ac].xmem001) AND NOT cl_null(g_xmem_d[l_ac].xmem002) THEN    
               IF NOT axmt610_xmem001_xmem002_chk() THEN
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF
               IF NOT axmt610_xmem001_xmxm002_exists() THEN
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF
               IF cl_null(g_xmem_d_o.xmem001) OR (NOT cl_null(g_xmem_d_o.xmem001) AND g_xmem_d_o.xmem001 != g_xmem_d[l_ac].xmem001) THEN
                  CALL axmt610_xmem001_xmem002_ref() 
               END IF
               IF NOT axmt610_xmem004_chk() THEN
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF
            #add by lixh 20150527

            #add by lixh 20150527
            END IF
            LET g_xmem_d_o.xmem001 = g_xmem_d[l_ac].xmem001
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem001
            #add-point:ON CHANGE xmem001 name="input.g.page1.xmem001"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem002
            #add-point:BEFORE FIELD xmem002 name="input.b.page1.xmem002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem002
            
            #add-point:AFTER FIELD xmem002 name="input.a.page1.xmem002"
            IF NOT cl_null(g_xmem_d[l_ac].xmem001) AND NOT cl_null(g_xmem_d[l_ac].xmem002) THEN    
               IF NOT axmt610_xmem001_xmem002_chk() THEN
                  LET g_xmem_d[l_ac].xmem002 = g_xmem_d_t.xmem002
                  NEXT FIELD CURRENT
               END IF
               IF NOT axmt610_xmem001_xmxm002_exists() THEN
                  LET g_xmem_d[l_ac].xmem002 = g_xmem_d_t.xmem002
                  NEXT FIELD CURRENT
               END IF
               IF cl_null(g_xmem_d_o.xmem002) OR (NOT cl_null(g_xmem_d_o.xmem002) AND g_xmem_d_o.xmem002 != g_xmem_d[l_ac].xmem002) THEN
                  CALL axmt610_xmem001_xmem002_ref()
               END IF
               IF NOT axmt610_xmem004_chk() THEN
                  LET g_xmem_d[l_ac].xmem002 = g_xmem_d_t.xmem002
                  NEXT FIELD CURRENT
               END IF
            END IF
            LET g_xmem_d_o.xmem002 = g_xmem_d[l_ac].xmem002
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem002
            #add-point:ON CHANGE xmem002 name="input.g.page1.xmem002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem003
            
            #add-point:AFTER FIELD xmem003 name="input.a.page1.xmem003"
            CALL axmt610_xmem003_desc()
            IF NOT cl_null(g_xmem_d[l_ac].xmem003) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem003
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_imaf001_1") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_xmem_d[l_ac].xmem003 = g_xmem_d_t.xmem003
                  NEXT FIELD CURRENT
               END IF
            
               CALL s_control_chk_doc('4',g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmem003,'','','','') RETURNING g_success,l_flag
               IF g_success THEN
                  IF NOT l_flag THEN
                     LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                     NEXT FIELD CURRENT
                  END IF
               ELSE
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF
               
               CALL s_control_chk_doc('5',g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmem003,'','','','') RETURNING g_success,l_flag
               IF g_success THEN
                  IF NOT l_flag THEN
                     LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                     NEXT FIELD CURRENT
                  END IF
               ELSE
                  LET g_xmem_d[l_ac].xmem001 = g_xmem_d_t.xmem001
                  NEXT FIELD CURRENT
               END IF

            END IF 
            CALL axmt610_xmem003_ref()


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem003
            #add-point:BEFORE FIELD xmem003 name="input.b.page1.xmem003"
            CALL axmt610_xmem003_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem003
            #add-point:ON CHANGE xmem003 name="input.g.page1.xmem003"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem004
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem004,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem004
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem004 name="input.a.page1.xmem004"
            IF NOT cl_null(g_xmem_d[l_ac].xmem004) THEN 
               IF NOT cl_null(g_xmem_d[l_ac].xmem001) AND NOT cl_null(g_xmem_d[l_ac].xmem002) THEN
                  IF NOT axmt610_xmem004_chk() THEN
                     LET g_xmem_d[l_ac].xmem004 = g_xmem_d_t.xmem004
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem004
            #add-point:BEFORE FIELD xmem004 name="input.b.page1.xmem004"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem004
            #add-point:ON CHANGE xmem004 name="input.g.page1.xmem004"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem005
            
            #add-point:AFTER FIELD xmem005 name="input.a.page1.xmem005"
            IF NOT cl_null(g_xmem_d[l_ac].xmem005) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem005
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_xmam001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_xmem_d[l_ac].xmem005 = g_xmem_d_t.xmem005
                  NEXT FIELD CURRENT
               END IF
            
               CALL axmt610_xmem005_ref()
               CALL axmt610_xmem005_desc()   #150910-00007#1 150916 by sakura add
            END IF 
            

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem005
            #add-point:BEFORE FIELD xmem005 name="input.b.page1.xmem005"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem005
            #add-point:ON CHANGE xmem005 name="input.g.page1.xmem005"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem006
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem006,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem006
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem006 name="input.a.page1.xmem006"
            IF NOT cl_null(g_xmem_d[l_ac].xmem006) THEN 
#               IF g_xmem_d[l_ac].xmem007 < 1 THEN
#                  LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010
#               ELSE
#                  LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010 + g_xmem_d[l_ac].xmem007 - 1
#               END IF
#               LET g_xmem_d[l_ac].xmem014 = g_xmem_d[l_ac].xmem006 * l_imaa.imaa017
#               LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem014
#               
#               LET g_xmem_d[l_ac].xmem016 = g_xmem_d[l_ac].xmem006 * (l_imaa_1.imaa016 + l_imaa.imaa016)
#               LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem016
#               
#               LET g_xmem_d[l_ac].xmem018 = l_imaa_1.imaa019 * l_imaa_1.imaa020 * l_imaa_1.imaa021 * 0.0000353
#               IF g_xmel_m.xmel012 = '1' THEN
#                  LET g_xmem_d[l_ac].xmem018 = g_xmem_d[l_ac].xmem018 / 35.315 
#               END IF
#               LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007
               CALL axmt610_xmem005_ref()
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem006
            #add-point:BEFORE FIELD xmem006 name="input.b.page1.xmem006"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem006
            #add-point:ON CHANGE xmem006 name="input.g.page1.xmem006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem007
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem007,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem007
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem007 name="input.a.page1.xmem007"
            IF NOT cl_null(g_xmem_d[l_ac].xmem007) THEN 
#               IF g_xmem_d[l_ac].xmem007 < 1 THEN
#                  LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010
#               ELSE
#                  LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010 + g_xmem_d[l_ac].xmem007 - 1
#               END IF
#               LET g_xmem_d[l_ac].xmem014 = g_xmem_d[l_ac].xmem006 * l_imaa.imaa017
#               LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem014
#               
#               LET g_xmem_d[l_ac].xmem016 = g_xmem_d[l_ac].xmem006 * (l_imaa_1.imaa016 + l_imaa.imaa016)
#               LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem016
#               
#               LET g_xmem_d[l_ac].xmem018 = l_imaa_1.imaa019 * l_imaa_1.imaa020 * l_imaa_1.imaa021 * 0.0000353
#               IF g_xmel_m.xmel012 = '1' THEN
#                  LET g_xmem_d[l_ac].xmem018 = g_xmem_d[l_ac].xmem018 / 35.315 
#               END IF
#               LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007

                #160908-00016#1 --- add start ---
                LET l_xmem012 = 0
                LET l_xmdh016 = 0
                #取得包裝單數量
                LET g_sql = " SELECT SUM(xmem012) FROM xmem_t ",
                            "  WHERE xmement = ",g_enterprise,
                            "    AND xmem001 = '",g_xmem_d[l_ac].xmem001,"'",
                            "    AND xmem002 = ",g_xmem_d[l_ac].xmem002,
                            "    AND xmemseq <> ",g_xmem_d[l_ac].xmemseq
                PREPARE sel_sum_xmem012 FROM g_sql
                EXECUTE sel_sum_xmem012 INTO l_xmem012
                IF cl_null(l_xmem012) THEN
                   LET l_xmem012 = 0
                END IF
                IF NOT cl_null(g_xmem_d[l_ac].xmem006) THEN
                      LET l_xmem012 = l_xmem012 + (g_xmem_d[l_ac].xmem006 * g_xmem_d[l_ac].xmem007)
                END IF 
                
                #取得出通單數量
                LET g_sql = "SELECT SUM(xmdh016) FROM xmdh_t ",
                            " WHERE xmdhent = ",g_enterprise,
                            "   AND xmdhsite = '",g_site,"'",
                            "   AND xmdhdocno = '",g_xmem_d[l_ac].xmem001,"'",
                            "   AND xmdhseq = ",g_xmem_d[l_ac].xmem002
                PREPARE sel_sum_xmdh016 FROM g_sql
                EXECUTE sel_sum_xmdh016 INTO l_xmdh016
                IF cl_null(l_xmdh016) THEN
                   LET l_xmdh016 = 0
                END IF
                
                LET l_xmem012 = l_xmdh016 - l_xmem012
                IF l_xmem012 < 0 OR g_xmem_d[l_ac].xmem007 > l_xmdh016 THEN
                   INITIALIZE g_errparam TO NULL 
                   LET g_errparam.extend = '' 
                   LET g_errparam.code   = 'axm-00796'
                   LET g_errparam.replace[1] = g_xmem_d[l_ac].xmem001
                   LET g_errparam.replace[2] = g_xmem_d[l_ac].xmem002
                   LET g_errparam.popup  = TRUE 
                   CALL cl_err()
                   NEXT FIELD xmem007
                ELSE
                #160908-00016#1 --- add end ---
                   IF NOT cl_null(g_xmem_d[l_ac].xmem014) THEN
                      LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem014 * g_xmem_d[l_ac].xmem007
                   END IF
                   IF NOT cl_null(g_xmem_d[l_ac].xmem016) THEN
                      LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem016 * g_xmem_d[l_ac].xmem007
                   END IF 
                   IF NOT cl_null(g_xmem_d[l_ac].xmem018) THEN
                      LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007
                   END IF 
                   
                   IF NOT cl_null(g_xmem_d[l_ac].xmem006) THEN
                      LET g_xmem_d[l_ac].xmem012 = g_xmem_d[l_ac].xmem006 * g_xmem_d[l_ac].xmem007
                   END IF
                END IF    #160908-00016#1 add
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem007
            #add-point:BEFORE FIELD xmem007 name="input.b.page1.xmem007"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem007
            #add-point:ON CHANGE xmem007 name="input.g.page1.xmem007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem008
            #add-point:BEFORE FIELD xmem008 name="input.b.page1.xmem008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem008
            
            #add-point:AFTER FIELD xmem008 name="input.a.page1.xmem008"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem008
            #add-point:ON CHANGE xmem008 name="input.g.page1.xmem008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem009
            #add-point:BEFORE FIELD xmem009 name="input.b.page1.xmem009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem009
            
            #add-point:AFTER FIELD xmem009 name="input.a.page1.xmem009"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem009
            #add-point:ON CHANGE xmem009 name="input.g.page1.xmem009"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem010
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem010,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem010
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem010 name="input.a.page1.xmem010"
            IF NOT cl_null(g_xmem_d[l_ac].xmem010) THEN 
               IF NOT cl_null(g_xmem_d[l_ac].xmem010) THEN 
                  IF g_xmem_d[l_ac].xmem007 < 1 THEN
                     LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010
                  ELSE
                     LET g_xmem_d[l_ac].xmem011 = g_xmem_d[l_ac].xmem010 + g_xmem_d[l_ac].xmem007 - 1
                  END IF  
               END IF 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem010
            #add-point:BEFORE FIELD xmem010 name="input.b.page1.xmem010"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem010
            #add-point:ON CHANGE xmem010 name="input.g.page1.xmem010"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem011
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem011,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem011
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem011 name="input.a.page1.xmem011"
            IF NOT cl_null(g_xmem_d[l_ac].xmem011) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem011
            #add-point:BEFORE FIELD xmem011 name="input.b.page1.xmem011"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem011
            #add-point:ON CHANGE xmem011 name="input.g.page1.xmem011"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem012
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem012,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem012
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem012 name="input.a.page1.xmem012"
            IF NOT cl_null(g_xmem_d[l_ac].xmem012) THEN 
               
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem012
            #add-point:BEFORE FIELD xmem012 name="input.b.page1.xmem012"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem012
            #add-point:ON CHANGE xmem012 name="input.g.page1.xmem012"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem013
            
            #add-point:AFTER FIELD xmem013 name="input.a.page1.xmem013"
            IF NOT cl_null(g_xmem_d[l_ac].xmem013) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
                #160318-00025#15 by 07900 --add-str 
               LET g_errshow = TRUE #是否開窗
               #160318-00025#15 by 07900 --add-end
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem013
               #160318-00025#15 by 07900 --add-str 
               LET g_chkparam.err_str[1] ="aim-00005:sub-01302|aooi250|",cl_get_progname("aooi250",g_lang,"2"),"|:EXEPROGaooi250"
               #160318-00025#15 by 07900 --add-end 
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooca001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
            

            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem013
            #add-point:BEFORE FIELD xmem013 name="input.b.page1.xmem013"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem013
            #add-point:ON CHANGE xmem013 name="input.g.page1.xmem013"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem014
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem014,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem014
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem014 name="input.a.page1.xmem014"
            IF NOT cl_null(g_xmem_d[l_ac].xmem014) THEN 
               IF NOT cl_null(g_xmem_d[l_ac].xmem007) THEN 
                  LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem014
               END IF 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem014
            #add-point:BEFORE FIELD xmem014 name="input.b.page1.xmem014"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem014
            #add-point:ON CHANGE xmem014 name="input.g.page1.xmem014"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem015
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem015,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem015
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem015 name="input.a.page1.xmem015"
            IF NOT cl_null(g_xmem_d[l_ac].xmem015) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem015
            #add-point:BEFORE FIELD xmem015 name="input.b.page1.xmem015"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem015
            #add-point:ON CHANGE xmem015 name="input.g.page1.xmem015"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem016
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem016,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem016
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem016 name="input.a.page1.xmem016"
            IF NOT cl_null(g_xmem_d[l_ac].xmem016) THEN 
               IF NOT cl_null(g_xmem_d[l_ac].xmem007) THEN 
                  LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem016
               END IF 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem016
            #add-point:BEFORE FIELD xmem016 name="input.b.page1.xmem016"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem016
            #add-point:ON CHANGE xmem016 name="input.g.page1.xmem016"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem017
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem017,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem017
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem017 name="input.a.page1.xmem017"
            IF NOT cl_null(g_xmem_d[l_ac].xmem017) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem017
            #add-point:BEFORE FIELD xmem017 name="input.b.page1.xmem017"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem017
            #add-point:ON CHANGE xmem017 name="input.g.page1.xmem017"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem018
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem018,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem018
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem018 name="input.a.page1.xmem018"
            IF NOT cl_null(g_xmem_d[l_ac].xmem018) THEN 
               IF NOT cl_null(g_xmem_d[l_ac].xmem007) THEN 
                  LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007
               END IF 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem018
            #add-point:BEFORE FIELD xmem018 name="input.b.page1.xmem018"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem018
            #add-point:ON CHANGE xmem018 name="input.g.page1.xmem018"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmem019
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_xmem_d[l_ac].xmem019,"0.000","0","","","azz-00079",1) THEN
               NEXT FIELD xmem019
            END IF 
 
 
 
            #add-point:AFTER FIELD xmem019 name="input.a.page1.xmem019"
            IF NOT cl_null(g_xmem_d[l_ac].xmem019) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmem019
            #add-point:BEFORE FIELD xmem019 name="input.b.page1.xmem019"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmem019
            #add-point:ON CHANGE xmem019 name="input.g.page1.xmem019"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xmemsite
            #add-point:BEFORE FIELD xmemsite name="input.b.page1.xmemsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xmemsite
            
            #add-point:AFTER FIELD xmemsite name="input.a.page1.xmemsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE xmemsite
            #add-point:ON CHANGE xmemsite name="input.g.page1.xmemsite"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD ooff013
            #add-point:BEFORE FIELD ooff013 name="input.b.page1.ooff013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD ooff013
            
            #add-point:AFTER FIELD ooff013 name="input.a.page1.ooff013"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE ooff013
            #add-point:ON CHANGE ooff013 name="input.g.page1.ooff013"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page1.xmemseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmemseq
            #add-point:ON ACTION controlp INFIELD xmemseq name="input.c.page1.xmemseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem001
            #add-point:ON ACTION controlp INFIELD xmem001 name="input.c.page1.xmem001"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmem_d[l_ac].xmem001             #給予default值
            LET g_qryparam.default2 = "" #g_xmel_m.ooeg001 #部門編號
            LET g_qryparam.where = " 1=1 "
            #給予arg

            CASE g_xmel_m.xmel004 
               WHEN '1'
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','xmdgdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_xmdgdocno()
                  END IF
                  #150909 earl mod e
                  
               WHEN '2'
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','xmdkdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_xmdkdocno_1()
                  END IF
                  #150909 earl mod e
                  
               WHEN '3'
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','pmdsdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_pmdsdocno_1()
                  END IF
                  #150909 earl mod e
                  
               WHEN '4'
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','indcdocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_indcdocno_1()
                  END IF
                  #150909 earl mod e
                  
               WHEN '5' 
                  LET g_qryparam.arg1 = g_site
                  
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','inbadocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_inbadocno_1()
                  END IF
                  #150909 earl mod e
                                   
            #add by lixh 20150527
               WHEN '7'
                  #150909 earl mod s
                  #組合過濾前後置單據資料SQL
                  CALL s_aooi210_get_check_sql(g_site,'',g_xmel_m.xmeldocno,'4','','rmdadocno') RETURNING l_success,l_where
                  IF l_success THEN
                     LET g_qryparam.where = g_qryparam.where," AND ",l_where
                     CALL q_rmdadocno_1()       
                  END IF
                  #150909 earl mod e
               
            #add by lixh 20150527            
            END CASE
            
            #150909 earl mod s
            IF l_success THEN
               LET g_xmem_d[l_ac].xmem001 = g_qryparam.return1              
               DISPLAY g_xmem_d[l_ac].xmem001 TO xmem001              #
            END IF
            #150909 earl mod e
            
            NEXT FIELD xmem001
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem002
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem002
            #add-point:ON ACTION controlp INFIELD xmem002 name="input.c.page1.xmem002"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem003
            #add-point:ON ACTION controlp INFIELD xmem003 name="input.c.page1.xmem003"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmem_d[l_ac].xmem003             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_imaf001()                                #呼叫開窗

            LET g_xmem_d[l_ac].xmem003 = g_qryparam.return1              

            DISPLAY g_xmem_d[l_ac].xmem003 TO xmem003              #

            NEXT FIELD xmem003                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem004
            #add-point:ON ACTION controlp INFIELD xmem004 name="input.c.page1.xmem004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem005
            #add-point:ON ACTION controlp INFIELD xmem005 name="input.c.page1.xmem005"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmem_d[l_ac].xmem005             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_xmam001()                                #呼叫開窗

            LET g_xmem_d[l_ac].xmem005 = g_qryparam.return1              

            DISPLAY g_xmem_d[l_ac].xmem005 TO xmem005              #
            CALL axmt610_xmem005_desc()   #150910-00007#1 150916 by sakura add

            NEXT FIELD xmem005                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem006
            #add-point:ON ACTION controlp INFIELD xmem006 name="input.c.page1.xmem006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem007
            #add-point:ON ACTION controlp INFIELD xmem007 name="input.c.page1.xmem007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem008
            #add-point:ON ACTION controlp INFIELD xmem008 name="input.c.page1.xmem008"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem009
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem009
            #add-point:ON ACTION controlp INFIELD xmem009 name="input.c.page1.xmem009"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem010
            #add-point:ON ACTION controlp INFIELD xmem010 name="input.c.page1.xmem010"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem011
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem011
            #add-point:ON ACTION controlp INFIELD xmem011 name="input.c.page1.xmem011"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem012
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem012
            #add-point:ON ACTION controlp INFIELD xmem012 name="input.c.page1.xmem012"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem013
            #add-point:ON ACTION controlp INFIELD xmem013 name="input.c.page1.xmem013"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_xmem_d[l_ac].xmem013             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_ooca001_1()                                #呼叫開窗

            LET g_xmem_d[l_ac].xmem013 = g_qryparam.return1              

            DISPLAY g_xmem_d[l_ac].xmem013 TO xmem013              #

            NEXT FIELD xmem013                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem014
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem014
            #add-point:ON ACTION controlp INFIELD xmem014 name="input.c.page1.xmem014"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem015
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem015
            #add-point:ON ACTION controlp INFIELD xmem015 name="input.c.page1.xmem015"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem016
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem016
            #add-point:ON ACTION controlp INFIELD xmem016 name="input.c.page1.xmem016"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem017
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem017
            #add-point:ON ACTION controlp INFIELD xmem017 name="input.c.page1.xmem017"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem018
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem018
            #add-point:ON ACTION controlp INFIELD xmem018 name="input.c.page1.xmem018"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmem019
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmem019
            #add-point:ON ACTION controlp INFIELD xmem019 name="input.c.page1.xmem019"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.xmemsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xmemsite
            #add-point:ON ACTION controlp INFIELD xmemsite name="input.c.page1.xmemsite"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.ooff013
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD ooff013
            #add-point:ON ACTION controlp INFIELD ooff013 name="input.c.page1.ooff013"
            #161031-00025#30-s
            IF NOT cl_null(g_xmel_m.xmeldocno) AND l_ac > 0 THEN
               CALL aooi360_02('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,'','','','','','','','1')
               CALL s_aooi360_sel('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,'','','','','','','','1') RETURNING l_success,g_xmem_d[l_ac].ooff013
               LET g_ooff001_d = '6'   #6.單據單頭備註
               LET g_ooff002_d = g_prog
               LET g_ooff003_d = g_xmel_m.xmeldocno   #单号
               LET g_ooff004_d = 0     #项次
               LET g_ooff005_d = ' '
               LET g_ooff006_d = ' '
               LET g_ooff007_d = ' '
               LET g_ooff008_d = ' '
               LET g_ooff009_d = ' '
               LET g_ooff010_d = ' '
               LET g_ooff011_d = ' '
               CALL aooi360_01_b_fill(g_ooff001_d,g_ooff002_d,g_ooff003_d,g_ooff004_d,g_ooff005_d,g_ooff006_d,g_ooff007_d,g_ooff008_d,g_ooff009_d,g_ooff010_d,g_ooff011_d)   #备注单身 
            END IF
            #161031-00025#30-e
            #END add-point
 
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_xmem_d[l_ac].* = g_xmem_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE axmt610_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_xmem_d[l_ac].xmemseq 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_xmem_d[l_ac].* = g_xmem_d_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               CALL axmt610_xmem_t_mask_restore('restore_mask_o')
      
               UPDATE xmem_t SET (xmemdocno,xmemseq,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006, 
                   xmem007,xmem008,xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017, 
                   xmem018,xmem019,xmemsite) = (g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,g_xmem_d[l_ac].xmem001, 
                   g_xmem_d[l_ac].xmem002,g_xmem_d[l_ac].xmem003,g_xmem_d[l_ac].xmem004,g_xmem_d[l_ac].xmem005, 
                   g_xmem_d[l_ac].xmem006,g_xmem_d[l_ac].xmem007,g_xmem_d[l_ac].xmem008,g_xmem_d[l_ac].xmem009, 
                   g_xmem_d[l_ac].xmem010,g_xmem_d[l_ac].xmem011,g_xmem_d[l_ac].xmem012,g_xmem_d[l_ac].xmem013, 
                   g_xmem_d[l_ac].xmem014,g_xmem_d[l_ac].xmem015,g_xmem_d[l_ac].xmem016,g_xmem_d[l_ac].xmem017, 
                   g_xmem_d[l_ac].xmem018,g_xmem_d[l_ac].xmem019,g_xmem_d[l_ac].xmemsite)
                WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno 
 
                  AND xmemseq = g_xmem_d_t.xmemseq #項次   
 
                  
               #add-point:單身修改中 name="input.body.m_update"
               
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_xmem_d[l_ac].* = g_xmem_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "xmem_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_xmem_d[l_ac].* = g_xmem_d_t.*  
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()                   
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_xmel_m.xmeldocno
               LET gs_keys_bak[1] = g_xmeldocno_t
               LET gs_keys[2] = g_xmem_d[g_detail_idx].xmemseq
               LET gs_keys_bak[2] = g_xmem_d_t.xmemseq
               CALL axmt610_update_b('xmem_t',gs_keys,gs_keys_bak,"'1'")
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL axmt610_xmem_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(g_xmem_d[g_detail_idx].xmemseq = g_xmem_d_t.xmemseq 
 
                  ) THEN
                  LET gs_keys[01] = g_xmel_m.xmeldocno
 
                  LET gs_keys[gs_keys.getLength()+1] = g_xmem_d_t.xmemseq
 
                  CALL axmt610_key_update_b(gs_keys,'xmem_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_xmel_m),util.JSON.stringify(g_xmem_d_t)
               LET g_log2 = util.JSON.stringify(g_xmel_m),util.JSON.stringify(g_xmem_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               #161031-00025#30-s
               CALL s_aooi360_del('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d_t.xmemseq,'','','','','','','','1') RETURNING l_success
               IF NOT cl_null(g_xmem_d[l_ac].ooff013) THEN
                  CALL s_aooi360_gen('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,'','','','','','','','1',g_xmem_d[l_ac].ooff013) RETURNING l_success
               END IF
               #161031-00025#30-e
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            #170216-00017#1-s-add
            IF NOT axmt610_xmel015_upd(g_xmem_d[l_ac].xmem001) THEN
               IF s_transaction_chk("Y",0) THEN
                  CALL s_transaction_end('N','0')
               END IF
               RETURN 
            END IF
            #170216-00017#1-e-add
            #end add-point
            CALL axmt610_unlock_b("xmem_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            
            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_xmem_d[li_reproduce_target].* = g_xmem_d[li_reproduce].*
 
               LET g_xmem_d[li_reproduce_target].xmemseq = NULL
 
            ELSE
               CALL FGL_SET_ARR_CURR(g_xmem_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_xmem_d.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
 
      
 
 
 
 
{</section>}
 
{<section id="axmt610.input.other" >}
      
      #add-point:自定義input name="input.more_input"
      SUBDIALOG aoo_aooi360_01.aooi360_01_input   #备注单身  #161031-00025#30
      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog name="input.before_dialog"
         #161031-00025#30-s
         #為了修改功能doubleClick可以直接進入單身, 需指定要進入哪一個單身
         IF NOT cl_null(p_cmd) AND p_cmd != 'a' THEN
            CASE g_aw
               WHEN "s_detail1_aooi360_01"
                  NEXT FIELD ooff012     
            END CASE
         END IF
         #161031-00025#30-e
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_idx_group.getValue("'1',"))      
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field name="input.next_field"
            
            #end add-point  
            NEXT FIELD xmeldocno
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD xmemseq
 
               #add-point:input段modify_detail  name="input.modify_detail.other"
               
               #end add-point  
            END CASE
         END IF
      
      AFTER DIALOG
         #add-point:input段after_dialog name="input.after_dialog"
         
         #end add-point    
         
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept  name="input.accept"
         
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         #add-point:input段cancel name="input.cancel"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         #add-point:input段close name="input.close"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         #add-point:input段exit name="input.exit"
         
         #end add-point
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input  name="input.after_input"
   
   #end add-point    
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION axmt610_show()
   #add-point:show段define(客製用) name="show.define_customerization"
   
   #end add-point  
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="show.define"
   DEFINE l_slip   STRING
   #end add-point  
   
   #add-point:Function前置處理 name="show.before"
   
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL axmt610_b_fill() #單身填充
      CALL axmt610_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #應用 a12 樣板自動產生(Version:4)
 
 
 
   
   #顯示followup圖示
   #應用 a48 樣板自動產生(Version:3)
   CALL axmt610_set_pk_array()
   #add-point:ON ACTION agendum name="show.follow_pic"
   
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference name="show.head.reference"
            IF NOT cl_null(g_xmel_m.xmeldocno) THEN
               CALL s_aooi200_get_slip(g_xmel_m.xmeldocno) RETURNING g_success,l_slip
               CALL s_aooi200_get_slip_desc(l_slip) RETURNING g_xmel_m.xmeldocno_desc
            END IF
            DISPLAY BY NAME g_xmel_m.xmeldocno_desc
            CALL axmt610_xmel009_desc()
            CALL axmt610_xmel010_desc()
            CALL axmt610_xmel015_ref()   #add--2015/07/13 By shiun
            CALL axmt610_xmel003_desc()  #161207-00033#18

#            CALL axmt610_xmel001_desc()
#
#            CALL axmt610_xmel002_desc()
#
#            CALL axmt610_xmel007_desc()
#
#            CALL axmt610_xmel013_desc()
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelownid
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelownid_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelownid_desc
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelowndp
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelowndp_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelowndp_desc
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelcrtid
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelcrtid_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelcrtid_desc
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelcrtdp
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelcrtdp_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelcrtdp_desc
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelmodid
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelmodid_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelmodid_desc
#
#            INITIALIZE g_ref_fields TO NULL
#            LET g_ref_fields[1] = g_xmel_m.xmelcnfid
#            CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
#            LET g_xmel_m.xmelcnfid_desc = '', g_rtn_fields[1] , ''
#            DISPLAY BY NAME g_xmel_m.xmelcnfid_desc

            

   #end add-point
   
   #遮罩相關處理
   LET g_xmel_m_mask_o.* =  g_xmel_m.*
   CALL axmt610_xmel_t_mask()
   LET g_xmel_m_mask_n.* =  g_xmel_m.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel003_desc, 
       g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc,g_xmel_m.xmelstus, 
       g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008, 
       g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel013_desc, 
       g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc,g_xmel_m.xmel018,g_xmel_m.xmel019, 
       g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel015_desc,g_xmel_m.xmel016, 
       g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc,g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc, 
       g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt, 
       g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc, 
       g_xmel_m.xmelcnfdt
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_xmel_m.xmelstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_xmem_d.getLength()
      #add-point:show段單身reference name="show.body.reference"

#            CALL axmt610_xmem003_desc()

      #end add-point
   END FOR
   
 
   
    
   
   #add-point:show段other name="show.other"
   
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL axmt610_detail_show()
 
   #add-point:show段之後 name="show.after"
 
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION axmt610_detail_show()
   #add-point:detail_show段define(客製用) name="detail_show.define_customerization"
   
   #end add-point  
   #add-point:detail_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="detail_show.before"
   
   #end add-point
   
   #add-point:detail_show段之後 name="detail_show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION axmt610_reproduce()
   #add-point:reproduce段define(客製用) name="reproduce.define_customerization"
   
   #end add-point   
   DEFINE l_newno     LIKE xmel_t.xmeldocno 
   DEFINE l_oldno     LIKE xmel_t.xmeldocno 
 
   DEFINE l_master    RECORD LIKE xmel_t.* #此變數樣板目前無使用
   DEFINE l_detail    RECORD LIKE xmem_t.* #此變數樣板目前無使用
 
 
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="reproduce.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="reproduce.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   LET g_master_insert = FALSE
   
   IF g_xmel_m.xmeldocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
    
   LET g_xmel_m.xmeldocno = ""
 
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_xmel_m.xmelownid = g_user
      LET g_xmel_m.xmelowndp = g_dept
      LET g_xmel_m.xmelcrtid = g_user
      LET g_xmel_m.xmelcrtdp = g_dept 
      LET g_xmel_m.xmelcrtdt = cl_get_current()
      LET g_xmel_m.xmelmodid = g_user
      LET g_xmel_m.xmelmoddt = cl_get_current()
      LET g_xmel_m.xmelstus = 'N'
 
 
 
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前 name="reproduce.head.b_input"
   LET g_xmel_m.xmeldocdt = g_today
   LET g_xmel_m.xmelsite = g_site
   LET g_xmel_m.xmel001 = g_user
   SELECT ooag003 INTO g_xmel_m.xmel002 FROM ooag_t
    WHERE ooag001 = g_xmel_m.xmel001 AND ooagent = g_enterprise
   CALL axmt610_xmel001_desc()
   CALL axmt610_xmel002_desc()
   LET g_xmel_m_t.* = g_xmel_m.*
   #end add-point
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_xmel_m.xmelstus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #清空key欄位的desc
      LET g_xmel_m.xmeldocno_desc = ''
   DISPLAY BY NAME g_xmel_m.xmeldocno_desc
 
   
   CALL axmt610_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_xmel_m.* TO NULL
      INITIALIZE g_xmem_d TO NULL
 
      #add-point:複製取消後 name="reproduce.cancel"
      
      #end add-point
      CALL axmt610_show()
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code = 9001 
      LET g_errparam.popup = FALSE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL axmt610_set_act_visible()   
   CALL axmt610_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " xmelent = " ||g_enterprise|| " AND",
                      " xmeldocno = '", g_xmel_m.xmeldocno, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL axmt610_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後 name="reproduce.after_reproduce"
   
   #end add-point
   
   CALL axmt610_idx_chk()
   
   LET g_data_owner = g_xmel_m.xmelownid      
   LET g_data_dept  = g_xmel_m.xmelowndp
   
   #功能已完成,通報訊息中心
   CALL axmt610_msgcentre_notify('reproduce')
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION axmt610_detail_reproduce()
   #add-point:delete段define(客製用) name="detail_reproduce.define_customerization"
   
   #end add-point    
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE xmem_t.* #此變數樣板目前無使用
 
 
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_reproduce.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="detail_reproduce.pre_function"
   
   #end add-point
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE axmt610_detail
   
   #add-point:單身複製前1 name="detail_reproduce.body.table1.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM xmem_t
    WHERE xmement = g_enterprise AND xmemdocno = g_xmeldocno_t
 
    INTO TEMP axmt610_detail
 
   #將key修正為調整後   
   UPDATE axmt610_detail 
      #更新key欄位
      SET xmemdocno = g_xmel_m.xmeldocno
 
      #更新共用欄位
      
 
   #add-point:單身修改前 name="detail_reproduce.body.table1.b_update"
   
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO xmem_t SELECT * FROM axmt610_detail
   
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1 name="detail_reproduce.body.table1.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE axmt610_detail
   
   #add-point:單身複製後1 name="detail_reproduce.body.table1.a_insert"
   
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.delete" >}
#+ 資料刪除
PRIVATE FUNCTION axmt610_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   
   #end add-point     
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete.pre_function"
   
   #end add-point
   
   IF g_xmel_m.xmeldocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   
   
   CALL s_transaction_begin()
 
   OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN axmt610_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
   
   #檢查是否允許此動作
   IF NOT axmt610_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_xmel_m_mask_o.* =  g_xmel_m.*
   CALL axmt610_xmel_t_mask()
   LET g_xmel_m_mask_n.* =  g_xmel_m.*
   
   CALL axmt610_show()
   
   #add-point:delete段before ask name="delete.before_ask"
   
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前 name="delete.head.b_delete"
      
      #end add-point   
      
      #應用 a47 樣板自動產生(Version:4)
      #刪除相關文件
      CALL axmt610_set_pk_array()
      #add-point:相關文件刪除前 name="delete.befroe.related_document_remove"
      
      #end add-point   
      CALL cl_doc_remove()  
 
 
 
  
  
      #資料備份
      LET g_xmeldocno_t = g_xmel_m.xmeldocno
 
 
      DELETE FROM xmel_t
       WHERE xmelent = g_enterprise AND xmeldocno = g_xmel_m.xmeldocno
 
       
      #add-point:單頭刪除中 name="delete.head.m_delete"
      IF NOT s_aooi200_del_docno(g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt) THEN
         CALL s_transaction_end('N','0')
         RETURN
      END IF 
      
      IF NOT s_aooi360_del('6','axmt610',g_xmel_m.xmeldocno,'','','','','','','','','4') THEN
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      #end add-point
       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_xmel_m.xmeldocno,":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF
      
      #add-point:單頭刪除後 name="delete.head.a_delete"
      #161031-00025#30-s
      #单头的aooi360_01的备注单身资料同步删除
      DELETE FROM ooff_t
       WHERE ooffent = g_enterprise AND ooff001 IN ('6','7')
         AND ooff002 = g_prog AND ooff003 = g_xmel_m.xmeldocno
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_xmel_m.xmeldocno,":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN
      END IF   
      CALL aooi360_01_clear_detail()   #清除备注单身  
      #161031-00025#30-e
      #end add-point
  
      #add-point:單身刪除前 name="delete.body.b_delete"
      
      #end add-point
      
      DELETE FROM xmem_t
       WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
 
 
      #add-point:單身刪除中 name="delete.body.m_delete"
      
      #end add-point
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF    
 
      #add-point:單身刪除後 name="delete.body.a_delete"
      
      #end add-point
      
            
                                                               
 
 
 
      
      #修改歷程記錄(刪除)
      LET g_log1 = util.JSON.stringify(g_xmel_m)   #(ver:78)
      IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:78)
         CLOSE axmt610_cl
         CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL g_xmem_d.clear() 
 
     
      CALL axmt610_ui_browser_refresh()  
      #CALL axmt610_ui_headershow()  
      #CALL axmt610_ui_detailshow()
 
      #add-point:多語言刪除 name="delete.lang.before_delete"
      
      #end add-point
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
 
   
      #add-point:多語言刪除 name="delete.lang.delete"
      
      #end add-point
      
      IF g_browser_cnt > 0 THEN 
         #CALL axmt610_browser_fill("")
         CALL axmt610_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
      
      CALL s_transaction_end('Y','0')
   ELSE
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE axmt610_cl
 
   #功能已完成,通報訊息中心
   CALL axmt610_msgcentre_notify('delete')
    
END FUNCTION
 
{</section>}
 
{<section id="axmt610.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION axmt610_b_fill()
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   
   #end add-point     
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   DEFINE l_success     LIKE type_t.num5 #161031-00025#30 add
   #end add-point     
   
   #add-point:Function前置處理  name="b_fill.pre_function"
   
   #end add-point
   
   #清空第一階單身
   CALL g_xmem_d.clear()
 
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   
   #end add-point
   
   #判斷是否填充
   IF axmt610_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.long_sql_if"
      
      #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT xmemseq,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007, 
             xmem008,xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018, 
             xmem019,xmemsite ,t1.imaal003 ,t2.imaal004 ,t3.xmaml003 FROM xmem_t",   
                     " INNER JOIN xmel_t ON xmelent = " ||g_enterprise|| " AND xmeldocno = xmemdocno ",
 
                     #"",
                     
                     "",
                     #下層單身所需的join條件
 
                                    " LEFT JOIN imaal_t t1 ON t1.imaalent="||g_enterprise||" AND t1.imaal001=xmem003 AND t1.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent="||g_enterprise||" AND t2.imaal001=xmem003 AND t2.imaal002='"||g_dlang||"' ",
               " LEFT JOIN xmaml_t t3 ON t3.xmamlent="||g_enterprise||" AND t3.xmaml001=xmem005 AND t3.xmaml002='"||g_dlang||"' ",
 
                     " WHERE xmement=? AND xmemdocno=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body.fill_sql"
         #161031-00025#30-s
         LET g_sql = "SELECT  DISTINCT xmemseq,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007, 
             xmem008,xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018, 
             xmem019,xmemsite ,t1.imaal003 ,t2.imaal004 ,t3.xmaml003 FROM xmem_t",   
                     " INNER JOIN xmel_t ON xmelent = " ||g_enterprise|| " AND xmeldocno = xmemdocno ",
 
                     #"",
                     
                     "",
                     #下層單身所需的join條件
 
                                    " LEFT JOIN imaal_t t1 ON t1.imaalent="||g_enterprise||" AND t1.imaal001=xmem003 AND t1.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent="||g_enterprise||" AND t2.imaal001=xmem003 AND t2.imaal002='"||g_dlang||"' ",
               " LEFT JOIN xmaml_t t3 ON t3.xmamlent="||g_enterprise||" AND t3.xmaml001=xmem005 AND t3.xmaml002='"||g_dlang||"' ",
               " LEFT JOIN ooff_t  ON ooffent="||g_enterprise||" AND ooff002 = '",g_prog,"' AND ooff003 = xmemdocno AND ooff004 = xmemseq",   
                     " WHERE xmement=? AND xmemdocno=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #161031-00025#30-e
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY xmem_t.xmemseq"
         
         #add-point:單身填充控制 name="b_fill.sql"
         
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE axmt610_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR axmt610_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
   #  OPEN b_fill_cs USING g_enterprise,g_xmel_m.xmeldocno   #(ver:78)
                                               
      FOREACH b_fill_cs USING g_enterprise,g_xmel_m.xmeldocno INTO g_xmem_d[l_ac].xmemseq,g_xmem_d[l_ac].xmem001, 
          g_xmem_d[l_ac].xmem002,g_xmem_d[l_ac].xmem003,g_xmem_d[l_ac].xmem004,g_xmem_d[l_ac].xmem005, 
          g_xmem_d[l_ac].xmem006,g_xmem_d[l_ac].xmem007,g_xmem_d[l_ac].xmem008,g_xmem_d[l_ac].xmem009, 
          g_xmem_d[l_ac].xmem010,g_xmem_d[l_ac].xmem011,g_xmem_d[l_ac].xmem012,g_xmem_d[l_ac].xmem013, 
          g_xmem_d[l_ac].xmem014,g_xmem_d[l_ac].xmem015,g_xmem_d[l_ac].xmem016,g_xmem_d[l_ac].xmem017, 
          g_xmem_d[l_ac].xmem018,g_xmem_d[l_ac].xmem019,g_xmem_d[l_ac].xmemsite,g_xmem_d[l_ac].xmem003_desc, 
          g_xmem_d[l_ac].xmem003_desc_desc,g_xmem_d[l_ac].xmem005_desc   #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill.fill"
         #161031-00025#30-s
         CALL s_aooi360_sel('7',g_prog,g_xmel_m.xmeldocno,g_xmem_d[l_ac].xmemseq,'','','','','','','','1') RETURNING l_success,g_xmem_d[l_ac].ooff013
         #161031-00025#30-e
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
    
 
   
   #add-point:browser_fill段其他table處理 name="browser_fill.other_fill"
   #161031-00025#30-s
   LET g_ooff001_d = '6'   #6.單據單頭備註
   LET g_ooff002_d = g_prog
   LET g_ooff003_d = g_xmel_m.xmeldocno   #单号
   LET g_ooff004_d = '0'     #项次
   LET g_ooff005_d = ' '
   LET g_ooff006_d = ' '
   LET g_ooff007_d = ' '
   LET g_ooff008_d = ' '
   LET g_ooff009_d = ' '
   LET g_ooff010_d = ' '
   LET g_ooff011_d = ' '
   CALL aooi360_01_b_fill(g_ooff001_d,g_ooff002_d,g_ooff003_d,g_ooff004_d,g_ooff005_d,g_ooff006_d,g_ooff007_d,g_ooff008_d,g_ooff009_d,g_ooff010_d,g_ooff011_d)   #备注单身 
   #161031-00025#30-e
   #end add-point
   
   CALL g_xmem_d.deleteElement(g_xmem_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE axmt610_pb
 
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO g_xmem_d.getLength()
      LET g_xmem_d_mask_o[l_ac].* =  g_xmem_d[l_ac].*
      CALL axmt610_xmem_t_mask()
      LET g_xmem_d_mask_n[l_ac].* =  g_xmem_d[l_ac].*
   END FOR
   
 
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION axmt610_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"
      
      #end add-point    
      DELETE FROM xmem_t
       WHERE xmement = g_enterprise AND
         xmemdocno = ps_keys_bak[1] AND xmemseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ":",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_xmem_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
 
   
 
   
   #add-point:delete_b段other name="delete_b.other"
   
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION axmt610_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="insert_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"
      
      #end add-point 
      INSERT INTO xmem_t
                  (xmement,
                   xmemdocno,
                   xmemseq
                   ,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007,xmem008,xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018,xmem019,xmemsite) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_xmem_d[g_detail_idx].xmem001,g_xmem_d[g_detail_idx].xmem002,g_xmem_d[g_detail_idx].xmem003, 
                       g_xmem_d[g_detail_idx].xmem004,g_xmem_d[g_detail_idx].xmem005,g_xmem_d[g_detail_idx].xmem006, 
                       g_xmem_d[g_detail_idx].xmem007,g_xmem_d[g_detail_idx].xmem008,g_xmem_d[g_detail_idx].xmem009, 
                       g_xmem_d[g_detail_idx].xmem010,g_xmem_d[g_detail_idx].xmem011,g_xmem_d[g_detail_idx].xmem012, 
                       g_xmem_d[g_detail_idx].xmem013,g_xmem_d[g_detail_idx].xmem014,g_xmem_d[g_detail_idx].xmem015, 
                       g_xmem_d[g_detail_idx].xmem016,g_xmem_d[g_detail_idx].xmem017,g_xmem_d[g_detail_idx].xmem018, 
                       g_xmem_d[g_detail_idx].xmem019,g_xmem_d[g_detail_idx].xmemsite)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert"
      
      #end add-point 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_xmem_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"
      
      #end add-point 
   END IF
   
 
   
 
   
   #add-point:insert_b段other name="insert_b.other"
   
   #end add-point     
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION axmt610_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   
   #end add-point   
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="update_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "xmem_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update"
      
      #end add-point 
      
      #將遮罩欄位還原
      CALL axmt610_xmem_t_mask_restore('restore_mask_o')
               
      UPDATE xmem_t 
         SET (xmemdocno,
              xmemseq
              ,xmem001,xmem002,xmem003,xmem004,xmem005,xmem006,xmem007,xmem008,xmem009,xmem010,xmem011,xmem012,xmem013,xmem014,xmem015,xmem016,xmem017,xmem018,xmem019,xmemsite) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_xmem_d[g_detail_idx].xmem001,g_xmem_d[g_detail_idx].xmem002,g_xmem_d[g_detail_idx].xmem003, 
                  g_xmem_d[g_detail_idx].xmem004,g_xmem_d[g_detail_idx].xmem005,g_xmem_d[g_detail_idx].xmem006, 
                  g_xmem_d[g_detail_idx].xmem007,g_xmem_d[g_detail_idx].xmem008,g_xmem_d[g_detail_idx].xmem009, 
                  g_xmem_d[g_detail_idx].xmem010,g_xmem_d[g_detail_idx].xmem011,g_xmem_d[g_detail_idx].xmem012, 
                  g_xmem_d[g_detail_idx].xmem013,g_xmem_d[g_detail_idx].xmem014,g_xmem_d[g_detail_idx].xmem015, 
                  g_xmem_d[g_detail_idx].xmem016,g_xmem_d[g_detail_idx].xmem017,g_xmem_d[g_detail_idx].xmem018, 
                  g_xmem_d[g_detail_idx].xmem019,g_xmem_d[g_detail_idx].xmemsite) 
         WHERE xmement = g_enterprise AND xmemdocno = ps_keys_bak[1] AND xmemseq = ps_keys_bak[2]
      #add-point:update_b段修改中 name="update_b.m_update"
      
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "xmem_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "xmem_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL axmt610_xmem_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      
      #end add-point  
   END IF
   
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   
 
   
 
   
   #add-point:update_b段other name="update_b.other"
   
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.key_update_b" >}
#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION axmt610_key_update_b(ps_keys_bak,ps_table)
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_key       DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_update_b.pre_function"
   
   #end add-point
   
 
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.key_delete_b" >}
#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION axmt610_key_delete_b(ps_keys_bak,ps_table)
   #add-point:delete_b段define(客製用) name="key_delete_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_delete_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_delete_b.pre_function"
   
   #end add-point
   
 
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION axmt610_lock_b(ps_table,ps_page)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   
   #end add-point   
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   
   #end add-point
    
   #先刷新資料
   #CALL axmt610_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "xmem_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN axmt610_bcl USING g_enterprise,
                                       g_xmel_m.xmeldocno,g_xmem_d[g_detail_idx].xmemseq     
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "axmt610_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
 
   
 
   
   #add-point:lock_b段other name="lock_b.other"
   
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION axmt610_unlock_b(ps_table,ps_page)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   
   #end add-point  
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   
   #end add-point
    
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE axmt610_bcl
   END IF
   
 
   
 
 
   #add-point:unlock_b段other name="unlock_b.other"
   
   #end add-point  
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION axmt610_set_entry(p_cmd)
   #add-point:set_entry段define(客製用) name="set_entry.define_customerization"
   
   #end add-point       
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry.define"
   
   #end add-point       
   
   #add-point:Function前置處理  name="set_entry.pre_function"
   
   #end add-point
   
   CALL cl_set_comp_entry("xmeldocno",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("xmeldocno",TRUE)
      CALL cl_set_comp_entry("xmeldocdt",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry段欄位控制 name="set_entry.field_control"
      CALL cl_set_comp_entry("xmeldocdt",TRUE)
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後 name="set_entry.after_control"
   CALL cl_set_comp_entry("xmel007,xmel008,xmel009,xmel010,xmel013",TRUE)   #151026-00001 by whitney del xmel006
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION axmt610_set_no_entry(p_cmd)
   #add-point:set_no_entry段define(客製用) name="set_no_entry.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_no_entry.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("xmeldocno",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry段欄位控制 name="set_no_entry.field_control"
      
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("xmeldocno",FALSE)
   END IF 
 
#  IF p_cmd = 'u' THEN  #docdt欄位依照設定關閉(FALSE則為設定不同意修正) #(ver:78)
      IF NOT cl_chk_update_docdt() THEN
         CALL cl_set_comp_entry("xmeldocdt",FALSE)
      END IF
#  END IF 
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   IF NOT cl_null(g_xmel_m.xmeldocno) AND NOT cl_null(g_xmel_m.xmeldocdt) THEN
      CALL cl_set_comp_entry("xmeldocno,xmeldocdt",FALSE)
   END IF
   IF g_xmel_m.xmel004 != '6' THEN
      CALL cl_set_comp_entry("xmel007,xmel008,xmel009,xmel010,xmel013",FALSE)  #151026-00001 by whitney del xmel006
   END IF
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION axmt610_set_entry_b(p_cmd)
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   
   #end add-point
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制 name="set_entry_b.field_control"
      
      #end add-point  
   END IF
   
   #add-point:set_entry_b段 name="set_entry_b.set_entry_b"
   CALL cl_set_comp_entry("xmem001",TRUE)
   #end add-point  
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION axmt610_set_no_entry_b(p_cmd)
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   
   #end add-point    
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段 name="set_no_entry_b.set_no_entry_b"
   IF NOT cl_null(g_xmel_m.xmel005) THEN
      CALL cl_set_comp_entry("xmem001",FALSE)
   END IF
   #end add-point     
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION axmt610_set_act_visible()
   #add-point:set_act_visible段define(客製用) name="set_act_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible.define"
   
   #end add-point   
   #add-point:set_act_visible段 name="set_act_visible.set_act_visible"
   
   #150721-00001#1  2016/01/08 By earl mod s
   #整體單據Action控制
   CALL cl_set_act_visible("insert", TRUE)
   
   IF NOT cl_null(g_xmel_m.xmeldocno) THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
      CALL cl_set_act_visible("make_detail",TRUE)
   END IF
   #150721-00001#1  2016/01/08 By earl mod e

   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION axmt610_set_act_no_visible()
   #add-point:set_act_no_visible段define(客製用) name="set_act_no_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible.define"
   #150721-00001#1  2016/01/08 By earl add s
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_flag        LIKE type_t.num5
   #150721-00001#1  2016/01/08 By earl add e
   #end add-point   
   #add-point:set_act_no_visible段 name="set_act_no_visible.set_act_no_visible"
   IF g_xmel_m.xmelstus NOT MATCHES '[NDR]' THEN
      CALL cl_set_act_visible("modify,delete,modify_detail",FALSE)
      CALL cl_set_act_visible("make_detail",FALSE)  #160804-00074 by whitney add
   END IF

   #150721-00001#1  2016/01/08 By earl add s
   CALL s_control_chk_group('5','2',g_user,g_dept,g_site,'','','','') RETURNING l_success,l_flag
   IF NOT l_success OR NOT l_flag THEN    #處理狀態為FALSE 或 不在控制組範圍內
      CALL cl_set_act_visible("insert", FALSE)
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", FALSE)
      CALL cl_set_act_visible("make_detail",FALSE)
   END IF
   #150721-00001#1  2016/01/08 By earl add e

   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION axmt610_set_act_visible_b()
   #add-point:set_act_visible_b段define(客製用) name="set_act_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible_b.define"
   
   #end add-point   
   #add-point:set_act_visible_b段 name="set_act_visible_b.set_act_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION axmt610_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define(客製用) name="set_act_no_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible_b.define"
   
   #end add-point   
   #add-point:set_act_no_visible_b段 name="set_act_no_visible_b.set_act_no_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION axmt610_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   
   #end add-point  
   DEFINE li_idx     LIKE type_t.num10
   DEFINE li_cnt     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE ls_where   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="default_search.before"
   
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " xmeldocno = '", g_argv[01], "' AND "
   END IF
   
 
   
   #add-point:default_search段after sql name="default_search.after_sql"
   
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      
      #預設查詢條件
      CALL cl_qbe_get_default_qryplan() RETURNING ls_where
      IF NOT cl_null(ls_where) THEN
         CALL util.JSON.parse(ls_where, la_wc)
         INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
         FOR li_idx = 1 TO la_wc.getLength()
            CASE
               WHEN la_wc[li_idx].tableid = "xmel_t" 
                  LET g_wc = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "xmem_t" 
                  LET g_wc2_table1 = la_wc[li_idx].wc
 
               WHEN la_wc[li_idx].tableid = "EXTENDWC"
                  LET g_wc2_extend = la_wc[li_idx].wc
            END CASE
         END FOR
         IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
 
            OR NOT cl_null(g_wc2_extend)
            THEN
            #組合g_wc2
            IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
               LET g_wc2 = g_wc2_table1
            END IF
 
            IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
            END IF
         
            IF g_wc2.subString(1,5) = " AND " THEN
               LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
            END IF
         END IF
      END IF
    
      IF cl_null(g_wc) AND cl_null(g_wc2) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.state_change" >}
   #應用 a09 樣板自動產生(Version:17)
#+ 確認碼變更 
PRIVATE FUNCTION axmt610_statechange()
   #add-point:statechange段define(客製用) name="statechange.define_customerization"
   
   #end add-point  
   DEFINE lc_state LIKE type_t.chr5
   #add-point:statechange段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="statechange.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="statechange.before"
   IF g_xmel_m.xmelstus = 'X' THEN
      RETURN
   END IF
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_xmel_m.xmeldocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   CALL s_transaction_begin()
   
   OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno
   IF STATUS THEN
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN axmt610_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #顯示最新的資料
   EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
       g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
       g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
       g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
       g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
       g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
       g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
       g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
       g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
       g_xmel_m.xmelcnfid_desc
   
 
   #檢查是否允許此動作
   IF NOT axmt610_action_chk() THEN
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #將資料顯示到畫面上
   DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel003_desc, 
       g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc,g_xmel_m.xmelstus, 
       g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008, 
       g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel013_desc, 
       g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc,g_xmel_m.xmel018,g_xmel_m.xmel019, 
       g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel015_desc,g_xmel_m.xmel016, 
       g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc,g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc, 
       g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt, 
       g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc, 
       g_xmel_m.xmelcnfdt
 
   CASE g_xmel_m.xmelstus
      WHEN "N"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
      WHEN "Y"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
      WHEN "A"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
      WHEN "D"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
      WHEN "R"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
      WHEN "W"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
      WHEN "X"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
      
   END CASE
 
   #add-point:資料刷新後 name="statechange.after_refresh"
   CALL axmt610_show()  #161207-00033#18
   #end add-point
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         HIDE OPTION "approved"
         HIDE OPTION "rejection"
         CASE g_xmel_m.xmelstus
            
            WHEN "N"
               HIDE OPTION "unconfirmed"
            WHEN "Y"
               HIDE OPTION "confirmed"
            WHEN "A"
               HIDE OPTION "approved"
            WHEN "D"
               HIDE OPTION "withdraw"
            WHEN "R"
               HIDE OPTION "rejection"
            WHEN "W"
               HIDE OPTION "signing"
            WHEN "X"
               HIDE OPTION "invalid"
         END CASE
     
      #add-point:menu前 name="statechange.before_menu"
      CALL cl_set_act_visible("signing,withdraw",FALSE)
      CALL cl_set_act_visible("unconfirmed,invalid,confirmed",TRUE)
      CALL cl_set_act_visible("closed",FALSE)

      CASE g_xmel_m.xmelstus
         WHEN "N"  
            CALL cl_set_act_visible("unconfirmed",FALSE)
            #需提交至BPM時，則顯示「提交」功能並隱藏「確認」功能
            IF cl_bpm_chk() THEN
                CALL cl_set_act_visible("signing",TRUE)
                CALL cl_set_act_visible("confirmed",FALSE)
            END IF
 
         WHEN "R"   #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed",FALSE)

         WHEN "D"   #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed",FALSE) 
          
         WHEN "X"
            CALL cl_set_act_visible("unconfirmed,invalid,confirmed",FALSE)

         WHEN "Y"
            CALL cl_set_act_visible("invalid,confirmed",FALSE)
         
         WHEN "W"    #只能顯示抽單;其餘應用功能皆隱藏
             CALL cl_set_act_visible("withdraw",TRUE)  
             CALL cl_set_act_visible("unconfirmed,invalid,confirmed",FALSE)
         
         WHEN "A"     #只能顯示確認; 其餘應用功能皆隱藏
             CALL cl_set_act_visible("confirmed ",TRUE)  
             CALL cl_set_act_visible("unconfirmed,invalid",FALSE)

      END CASE
      #end add-point
      
      #應用 a36 樣板自動產生(Version:5)
      #提交
      ON ACTION signing
         IF cl_auth_chk_act("signing") THEN
            IF NOT axmt610_send() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE axmt610_cl
            RETURN
         END IF
    
      #抽單
      ON ACTION withdraw
         IF cl_auth_chk_act("withdraw") THEN
            IF NOT axmt610_draw_out() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE axmt610_cl
            RETURN
         END IF
 
 
 
	  
      ON ACTION unconfirmed
         IF cl_auth_chk_act("unconfirmed") THEN
            LET lc_state = "N"
            #add-point:action控制 name="statechange.unconfirmed"
            
            #end add-point
         END IF
         EXIT MENU
      ON ACTION confirmed
         IF cl_auth_chk_act("confirmed") THEN
            LET lc_state = "Y"
            #add-point:action控制 name="statechange.confirmed"
            
            #end add-point
         END IF
         EXIT MENU
      ON ACTION approved
         IF cl_auth_chk_act("approved") THEN
            LET lc_state = "A"
            #add-point:action控制 name="statechange.approved"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION withdraw
      #   IF cl_auth_chk_act("withdraw") THEN
      #      LET lc_state = "D"
      #      #add-point:action控制 name="statechange.withdraw"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION rejection
         IF cl_auth_chk_act("rejection") THEN
            LET lc_state = "R"
            #add-point:action控制 name="statechange.rejection"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION signing
      #   IF cl_auth_chk_act("signing") THEN
      #      LET lc_state = "W"
      #      #add-point:action控制 name="statechange.signing"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION invalid
         IF cl_auth_chk_act("invalid") THEN
            LET lc_state = "X"
            #add-point:action控制 name="statechange.invalid"
            
            #end add-point
         END IF
         EXIT MENU
 
      #add-point:stus控制 name="statechange.more_control"
      
      #end add-point
      
   END MENU
   
   #確認被選取的狀態碼在清單中
   IF (lc_state <> "N" 
      AND lc_state <> "Y"
      AND lc_state <> "A"
      AND lc_state <> "D"
      AND lc_state <> "R"
      AND lc_state <> "W"
      AND lc_state <> "X"
      ) OR 
      g_xmel_m.xmelstus = lc_state OR cl_null(lc_state) THEN
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:stus修改前 name="statechange.b_update"
   IF lc_state = 'Y' THEN
      IF cl_ask_confirm("aim-00108") THEN
         IF s_axmt610_confirm_chk(g_xmel_m.xmeldocno) THEN
            CALL s_transaction_begin()
            IF s_axmt610_confirm_upd(g_xmel_m.xmeldocno) THEN
               CALL s_transaction_end('Y','0')
            ELSE
               CALL s_transaction_end('N','0')
               RETURN
            END IF
         ELSE
            CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
            RETURN 
         END IF
      ELSE
         CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
         RETURN
      END IF
   END IF
   
   IF lc_state = 'N' THEN
      IF cl_ask_confirm("aim-00110") THEN
         IF s_axmt610_unconfirm_chk(g_xmel_m.xmeldocno) THEN
            CALL s_transaction_begin()
            IF s_axmt610_unconfirm_upd(g_xmel_m.xmeldocno) THEN
               CALL s_transaction_end('Y','0')
            ELSE
               CALL s_transaction_end('N','0')
               RETURN
            END IF
         ELSE
            CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
            RETURN 
         END IF
      ELSE
         CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
         RETURN
      END IF
   END IF
   
   IF lc_state = 'X' THEN
      IF cl_ask_confirm("aim-00109") THEN
         IF s_axmt610_void_chk(g_xmel_m.xmeldocno) THEN
            CALL s_transaction_begin()
            IF s_axmt610_void_upd(g_xmel_m.xmeldocno) THEN
               CALL s_transaction_end('Y','0')
            ELSE
               CALL s_transaction_end('N','0')
               RETURN
            END IF
         ELSE
            CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
            RETURN 
         END IF
      ELSE
         CALL s_transaction_end('N','0')   #160812-00017#6 20160819 add by beckxie
         RETURN
      END IF
   END IF
   #end add-point
   
   LET g_xmel_m.xmelmodid = g_user
   LET g_xmel_m.xmelmoddt = cl_get_current()
   LET g_xmel_m.xmelstus = lc_state
   
   #異動狀態碼欄位/修改人/修改日期
   UPDATE xmel_t 
      SET (xmelstus,xmelmodid,xmelmoddt) 
        = (g_xmel_m.xmelstus,g_xmel_m.xmelmodid,g_xmel_m.xmelmoddt)     
    WHERE xmelent = g_enterprise AND xmeldocno = g_xmel_m.xmeldocno
 
    
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
    
      #撈取異動後的資料
      EXECUTE axmt610_master_referesh USING g_xmel_m.xmeldocno INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocdt, 
          g_xmel_m.xmel003,g_xmel_m.xmel001,g_xmel_m.xmel002,g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005, 
          g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel011,g_xmel_m.xmel012, 
          g_xmel_m.xmel013,g_xmel_m.xmel014,g_xmel_m.xmel010,g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020, 
          g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid, 
          g_xmel_m.xmelowndp,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid, 
          g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfdt,g_xmel_m.xmel003_desc,g_xmel_m.xmel001_desc, 
          g_xmel_m.xmel002_desc,g_xmel_m.xmel007_desc,g_xmel_m.xmel013_desc,g_xmel_m.xmel015_desc,g_xmel_m.xmelownid_desc, 
          g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelmodid_desc, 
          g_xmel_m.xmelcnfid_desc
      
      #將資料顯示到畫面上
      DISPLAY BY NAME g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003, 
          g_xmel_m.xmel003_desc,g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc, 
          g_xmel_m.xmelstus,g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc, 
          g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012, 
          g_xmel_m.xmel013,g_xmel_m.xmel013_desc,g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc, 
          g_xmel_m.xmel018,g_xmel_m.xmel019,g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015, 
          g_xmel_m.xmel015_desc,g_xmel_m.xmel016,g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc, 
          g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc,g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp, 
          g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt,g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt, 
          g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc,g_xmel_m.xmelcnfdt
   END IF
 
   #add-point:stus修改後 name="statechange.a_update"
   CALL axmt610_show()  #161207-00033#18
   #end add-point
 
   #add-point:statechange段結束前 name="statechange.after"
   
   #end add-point  
 
   CLOSE axmt610_cl
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL axmt610_msgcentre_notify('statechange:'||lc_state)
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="axmt610.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION axmt610_idx_chk()
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   
   #end add-point  
   #add-point:idx_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_xmem_d.getLength() THEN
         LET g_detail_idx = g_xmem_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_xmem_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_xmem_d.getLength() TO FORMONLY.cnt
   END IF
   
 
   
   #add-point:idx_chk段other name="idx_chk.other"
   
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION axmt610_b_fill2(pi_idx)
   #add-point:b_fill2段define(客製用) name="b_fill2.define_customerization"
   
   #end add-point
   DEFINE pi_idx                 LIKE type_t.num10
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"
   
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
   LET li_detail_idx_tmp = g_detail_idx
   
 
      
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"
   
   #end add-point
    
   LET l_ac = li_ac
   
   CALL axmt610_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION axmt610_fill_chk(ps_idx)
   #add-point:fill_chk段define(客製用) name="fill_chk.define_customerization"
   
   #end add-point
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fill_chk.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="fill_chk.before_chk"
   
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk name="fill_chk.other_chk"
      
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk name="fill_chk.after_chk"
   
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="axmt610.status_show" >}
PRIVATE FUNCTION axmt610_status_show()
   #add-point:status_show段define(客製用) name="status_show.define_customerization"
   
   #end add-point
   #add-point:status_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="status_show.define"
   
   #end add-point
   
   #add-point:status_show段status_show name="status_show.status_show"
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="axmt610.mask_functions" >}
&include "erp/axm/axmt610_mask.4gl"
 
{</section>}
 
{<section id="axmt610.signature" >}
   #應用 a39 樣板自動產生(Version:10)
#+ BPM提交
PRIVATE FUNCTION axmt610_send()
   #add-point:send段define(客製用) name="send.define_customerization"
   
   #end add-point 
   #add-point:send段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="send.define"
   
   #end add-point 
   
   #add-point:Function前置處理  name="send.pre_function"
   
   #end add-point
   
   #依據單據個數，需要指定所有單身條件為" 1=1"  (單身有幾個就要設幾個)
   LET g_wc2_table1 = " 1=1"
 
 
   CALL axmt610_show()
   CALL axmt610_set_pk_array()
   
   #add-point: 初始化的ADP name="send.before_send"
   
   #end add-point
   
   #公用變數初始化
   CALL cl_bpm_data_init()
                  
   #依照主檔/單身個數產生 CALL cl_bpm_set_master_data() / cl_bpm_set_detail_data() 
   #單頭固定為 CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(xxxx)) 傳入參數: (1)單頭陣列  ; 回傳值: 無
   CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(g_xmel_m))
                              
   #單身固定為 CALL cl_bpm_set_detail_data(s_detailX, util.JSONArray.fromFGL(xxxx)) 傳入參數: (1)單身SR名稱  (2)單身陣列  ; 回傳值: 無
   CALL cl_bpm_set_detail_data("s_detail1", util.JSONArray.fromFGL(g_xmem_d))
 
 
   # cl_bpm_cli() 裡有包含以前的aws_condition()=>送簽資料檢核和更新單據狀況碼為'W'
   # cl_bpm_cli() 傳入參數:無  ;  回傳值: 0 開單失敗; 1 開單成功
 
   #add-point: 提交前的ADP name="send.before_cli"
   IF s_axmt610_confirm_chk(g_xmel_m.xmeldocno) THEN
      RETURN FALSE

   END IF
   #end add-point
 
   #開單失敗
   IF NOT cl_bpm_cli() THEN 
      RETURN FALSE
   END IF
 
   #add-point: 提交後的ADP name="send.after_send"
   
   #end add-point
 
   #此段落不需要刪除資料,但是否需要refresh圖片樣式???
   #CALL axmt610_ui_browser_refresh()
 
   #重新指定此筆單據資料狀態圖片=>送簽中
   LET g_browser[g_current_idx].b_statepic = "stus/16/signing.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL axmt610_ui_headershow()
   CALL axmt610_ui_detailshow()
 
   RETURN TRUE
   
END FUNCTION
 
 
 
#應用 a40 樣板自動產生(Version:9)
#+ BPM抽單
PRIVATE FUNCTION axmt610_draw_out()
   #add-point:draw段define name="draw.define_customerization"
   
   #end add-point
   #add-point:draw段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="draw.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="draw.pre_function"
   
   #end add-point
   
   #抽單失敗
   IF NOT cl_bpm_draw_out() THEN 
      RETURN FALSE
   END IF    
          
   #重新指定此筆單據資料狀態圖片=>抽單
   LET g_browser[g_current_idx].b_statepic = "stus/16/draw_out.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL axmt610_ui_headershow()  
   CALL axmt610_ui_detailshow()
 
   #add-point:Function後置處理  name="draw.after_function"
   
   #end add-point
 
   RETURN TRUE
   
END FUNCTION
 
 
 
 
 
{</section>}
 
{<section id="axmt610.set_pk_array" >}
   #應用 a51 樣板自動產生(Version:8)
#+ 給予pk_array內容
PRIVATE FUNCTION axmt610_set_pk_array()
   #add-point:set_pk_array段define name="set_pk_array.define_customerization"
   
   #end add-point
   #add-point:set_pk_array段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_pk_array.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="set_pk_array.before"
   
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_xmel_m.xmeldocno
   LET g_pk_array[1].column = 'xmeldocno'
 
   
   #add-point:set_pk_array段之後 name="set_pk_array.after"
   
   #end add-point  
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="axmt610.other_dialog" readonly="Y" >}
   
 
{</section>}
 
{<section id="axmt610.msgcentre_notify" >}
#應用 a66 樣板自動產生(Version:6)
PRIVATE FUNCTION axmt610_msgcentre_notify(lc_state)
   #add-point:msgcentre_notify段define name="msgcentre_notify.define_customerization"
   
   #end add-point   
   DEFINE lc_state LIKE type_t.chr80
   #add-point:msgcentre_notify段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="msgcentre_notify.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="msgcentre_notify.pre_function"
   
   #end add-point
   
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = lc_state
 
   #PK資料填寫
   CALL axmt610_set_pk_array()
   #單頭資料填寫
   LET g_msgparam.data[1] = util.JSON.stringify(g_xmel_m)
 
   #add-point:msgcentre其他通知 name="msgcentre_notify.process"
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="axmt610.action_chk" >}
#+ 修改/刪除前行為檢查(是否可允許此動作), 若有其他行為須管控也可透過此段落
PRIVATE FUNCTION axmt610_action_chk()
   #add-point:action_chk段define(客製用) name="action_chk.define_customerization"
   
   #end add-point
   #add-point:action_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="action_chk.define"
   
   #end add-point
   
   #add-point:action_chk段action_chk name="action_chk.action_chk"
   #160818-00017#44-s
   SELECT xmelstus INTO g_xmel_m.xmelstus FROM xmel_t
    WHERE xmelent = g_enterprise
      AND xmelsite = g_site
      AND xmeldocno = g_xmel_m.xmeldocno
   IF (g_action_choice="modify" OR g_action_choice="delete" OR g_action_choice="modify_detail")  THEN
     LET g_errno = NULL
     CASE g_xmel_m.xmelstus
        WHEN 'W'
           LET g_errno = 'sub-01347'
        WHEN 'X'
           LET g_errno = 'sub-00229'
        WHEN 'Y'
           LET g_errno = 'sub-00178'
     END CASE

     IF NOT cl_null(g_errno) THEN
        INITIALIZE g_errparam TO NULL
        LET g_errparam.code = g_errno
        LET g_errparam.extend = g_xmel_m.xmeldocno
        LET g_errparam.popup = TRUE
        CALL cl_err()
        LET g_errno = NULL
        CALL axmt610_set_act_visible()
        CALL axmt610_set_act_no_visible()
        CALL axmt610_show()
        RETURN FALSE
     END IF
   END IF      
   #160818-00017#44-e
   #end add-point
      
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="axmt610.other_function" readonly="Y" >}
#161207-00033#18
PRIVATE FUNCTION axmt610_xmel003_desc()

   LET g_xmel_m.xmel003_desc = ''
   
   CASE g_xmel_m.xmel004
     WHEN '1' #出通
         CALL s_desc_axm_get_oneturn_guest_desc('2',g_xmel_m.xmel005) RETURNING g_xmel_m.xmel003_desc
     WHEN '2' #出貨
         CALL s_desc_axm_get_oneturn_guest_desc('3',g_xmel_m.xmel005) RETURNING g_xmel_m.xmel003_desc
   END CASE
   
   IF cl_null(g_xmel_m.xmel003_desc) THEN
      INITIALIZE g_ref_fields TO NULL
      LET g_ref_fields[1] = g_xmel_m.xmel003
      CALL ap_ref_array2(g_ref_fields,"SELECT pmaal004 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
      LET g_xmel_m.xmel003_desc = '', g_rtn_fields[1] , ''
   END IF
   
   DISPLAY BY NAME g_xmel_m.xmel003_desc

END FUNCTION

PRIVATE FUNCTION axmt610_xmel001_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel001
   CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
   LET g_xmel_m.xmel001_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel001_desc
END FUNCTION

PRIVATE FUNCTION axmt610_xmel002_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel002
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmel_m.xmel002_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel002_desc
END FUNCTION

PRIVATE FUNCTION axmt610_xmem003_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmem_d[l_ac].xmem003
   CALL ap_ref_array2(g_ref_fields,"SELECT imaal003,imaal004 FROM imaal_t WHERE imaalent='"||g_enterprise||"' AND imaal001=? AND imaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmem_d[l_ac].xmem003_desc = '', g_rtn_fields[1] , ''
   LET g_xmem_d[l_ac].xmem003_desc_desc = g_rtn_fields[1]
   DISPLAY BY NAME g_xmem_d[l_ac].xmem003_desc,g_xmem_d[l_ac].xmem003_desc_desc
END FUNCTION

PRIVATE FUNCTION axmt610_xmel004_ref()
   INITIALIZE g_xmel_m.xmel006 TO NULL
   INITIALIZE g_xmel_m.xmel007 TO NULL
   INITIALIZE g_xmel_m.xmel007_desc TO NULL
   INITIALIZE g_xmel_m.xmel008 TO NULL
   INITIALIZE g_xmel_m.xmel009 TO NULL
   INITIALIZE g_xmel_m.xmel010 TO NULL
   INITIALIZE g_xmel_m.xmel013 TO NULL
   CASE g_xmel_m.xmel004
      WHEN '1'
         SELECT xmdg022,xmdg018,oocql004,xmdg021,xmdg019,
                xmdg020,xmdg030,xmdg007,
                xmdg056,'N',''  #150716 earl mod
           INTO g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008,g_xmel_m.xmel009,
                g_xmel_m.xmel010,g_xmel_m.xmel013,g_xmel_m.xmel003,
                g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017
           FROM xmdg_t LEFT OUTER JOIN oocql_t ON oocqlent = xmdgent AND oocql001 = 263 AND oocql002 = xmdg018 AND oocql003 = g_dlang
          WHERE xmdgent = g_enterprise AND xmdgdocno = g_xmel_m.xmel005
      WHEN '2'
         SELECT xmdk026,xmdk022,oocql004,xmdk025,xmdk023,
                xmdk024,xmdk033,xmdk009,
                xmdk044,'N',''  #150716 earl mod
           INTO g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008,g_xmel_m.xmel009,
                g_xmel_m.xmel010,g_xmel_m.xmel013,g_xmel_m.xmel003,
                g_xmel_m.xmel015,g_xmel_m.xmel016,g_xmel_m.xmel017
           FROM xmdk_t LEFT OUTER JOIN oocql_t ON oocqlent = xmdkent AND oocql001 = 263 AND oocql002 = xmdk022 AND oocql003 = g_dlang
          WHERE xmdkent = g_enterprise AND xmdkdocno = g_xmel_m.xmel005
      WHEN '3'
      
      WHEN '4'
         SELECT indc106,oocql004,indc107,indc108
           INTO g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel009,g_xmel_m.xmel010
           FROM indc_t LEFT OUTER JOIN oocql_t ON oocqlent = indcent AND oocql001 = 263 AND oocql002 = indc106 AND oocql003 = g_dlang
          WHERE indcent = g_enterprise AND indcdocno = g_xmel_m.xmel005
          
   #add by lixh 20150526
   
      WHEN '7'  #覆出單
#         SELECT rmda012,rmda016,rmda013,rmda014 INTO g_xmel_m.xmel007,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel010 FROM xmel_t
#          WHERE rmdaent = g_enterprise
#            AND rmdadocno = g_xmel_m.xmel005 
         
   #add by lixh 20150526
   END CASE
   DISPLAY BY NAME g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008,g_xmel_m.xmel009,g_xmel_m.xmel010,g_xmel_m.xmel013
   CALL axmt610_xmel007_desc()
   CALL axmt610_xmel009_desc()
   CALL axmt610_xmel010_desc()
   CALL axmt610_xmel003_desc()#150610
   CALL axmt610_xmel015_ref()   #add--2015/07/13 By shiun
END FUNCTION

PRIVATE FUNCTION axmt610_xmel007_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel007
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='263' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmel_m.xmel007_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel007_desc
END FUNCTION

PRIVATE FUNCTION axmt610_xmel009_xmel010_chk(p_value)
DEFINE l_oocq019  LIKE oocq_t.oocq019
DEFINE p_value    LIKE oock_t.oock003
   IF NOT cl_null(g_xmel_m.xmel007) THEN
      SELECT oocq019 INTO l_oocq019 FROM oocq_t
       WHERE oocqent = g_enterprise AND oocq001 = 263 AND oocq002 = g_xmel_m.xmel007 
      CASE WHEN l_oocq019 MATCHES '[14]' 
               IF NOT s_azzi650_chk_exist(315,p_value) THEN
                  RETURN FALSE
               END IF
           WHEN l_oocq019 = '2'
               IF NOT s_azzi650_chk_exist(262,p_value) THEN
                  RETURN FALSE
               END IF
           WHEN l_oocq019 = '3'
              IF NOT s_azzi650_chk_exist(276,p_value) THEN
                 RETURN FALSE
              END IF
      END CASE
   END IF 
   RETURN TRUE
END FUNCTION

PRIVATE FUNCTION axmt610_xmel013_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel013
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='209' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmel_m.xmel013_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel013_desc
END FUNCTION

PRIVATE FUNCTION axmt610_set_visible()
   IF g_xmel_m.xmel004 != '6' THEN
      CALL cl_set_comp_visible("xmem001,xmem002",TRUE)
   ELSE
      CALL cl_set_comp_visible("xmem001,xmem002",FALSE)
   END IF
END FUNCTION

PRIVATE FUNCTION axmt610_xmem001_xmem002_chk()
   INITIALIZE g_chkparam.* TO NULL
    #160318-00025#15 by 07900 --add-str 
    LET g_errshow = TRUE #是否開窗
    #160318-00025#15 by 07900 --add-end 
   LET g_chkparam.arg1 = g_xmem_d[l_ac].xmem001
   LET g_chkparam.arg2 = g_xmem_d[l_ac].xmem002
   CASE g_xmel_m.xmel004 
      WHEN '1'
         #160318-00025#15 by 07900 --add-str 
         LET g_chkparam.err_str[1] ="axm-00070:sub-01302|axmt520|",cl_get_progname("axmt520",g_lang,"2"),"|:EXEPROGaxmt520"
         #160318-00025#15 by 07900 --add-end
         IF NOT cl_chk_exist("v_xmdhseq") THEN
            RETURN FALSE
         END IF
      WHEN '2'
         #160318-00025#15 by 07900 --add-str 
         LET g_chkparam.err_str[1] ="axm-00208:sub-01306|axmt540|",cl_get_progname("axmt540",g_lang,"2"),"|:EXEPROGaxmt540"
         #160318-00025#15 by 07900 --add-end
         IF NOT cl_chk_exist("v_xmdlseq_1") THEN
            RETURN FALSE
         END IF
      WHEN '3'
         #160318-00025#15 by 07900 --add-str 
         LET g_chkparam.err_str[1] ="aqc-00048:sub-01302|apmt520|",cl_get_progname("apmt520",g_lang,"2"),"|:EXEPROGapmt520"
         #160318-00025#15 by 07900 --add-end
         IF NOT cl_chk_exist("v_pmdtdocno") THEN
            RETURN FALSE
         END IF
      WHEN '4'
         IF NOT cl_chk_exist("v_indddocno") THEN
            RETURN FALSE
         END IF
      WHEN '5' 
         #160318-00025#15 by 07900 --add-str 
         LET g_chkparam.err_str[1] ="aqc-00093:sub-01317|aint301|",cl_get_progname("aint301",g_lang,"2"),"|:EXEPROGaint301"
         #160318-00025#15 by 07900 --add-end
         IF NOT cl_chk_exist("v_inbbseq_3") THEN
            RETURN FALSE
         END IF
   #add by lixh 20150527  
      WHEN '7' 
         IF NOT cl_chk_exist("v_rmdbseq") THEN
            RETURN FALSE
         END IF   
   #add by lixh 20150527   
   END CASE
   RETURN TRUE
END FUNCTION

PRIVATE FUNCTION axmt610_xmem001_xmxm002_exists()
DEFINE l_n   LIKE type_t.num5
   LET l_n = 0
   SELECT COUNT(*) INTO l_n FROM xmel_t,xmem_t
    WHERE xmelent = xmement AND xmeldocno = xmemdocno
      AND xmeldocno <> g_xmel_m.xmeldocno AND xmelent = g_enterprise
      AND xmem001 = g_xmem_d[l_ac].xmem001 AND xmem002 = g_xmem_d[l_ac].xmem002
   IF l_n > 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'axm-00361'
      LET g_errparam.extend = ''
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF
   RETURN TRUE
END FUNCTION

PRIVATE FUNCTION axmt610_xmem001_xmem002_ref()
DEFINE l_sql   STRING   
   CASE g_xmel_m.xmel004 
      WHEN '1'
         LET l_sql = "SELECT xmdh006,xmdh008 FROM xmdh_t WHERE xmdhent = ",g_enterprise,
                     " AND xmdhdocno = '",g_xmem_d[l_ac].xmem001,"' AND xmdhseq = ",g_xmem_d[l_ac].xmem002
      WHEN '2'
         LET l_sql = "SELECT xmdl008,xmdl010 FROM xmdl_t WHERE xmdlent = ",g_enterprise,
                     " AND xmdldocno = '",g_xmem_d[l_ac].xmem001,"' AND xmdlseq = ",g_xmem_d[l_ac].xmem002
      WHEN '3'
         LET l_sql = "SELECT pmdt006,pmdt008 FROM pmdt_t WHERE pmdtent = ",g_enterprise,
                     " AND pmdtdocno = '",g_xmem_d[l_ac].xmem001,"' AND pmdtseq = ",g_xmem_d[l_ac].xmem002
      WHEN '4'
         LET l_sql = "SELECT indd002,'' FROM indd_t WHERE inddent = ",g_enterprise,
                     " AND indddocno = '",g_xmem_d[l_ac].xmem001,"' AND inddseq = ",g_xmem_d[l_ac].xmem002
      WHEN '5' 
         LET l_sql = "SELECT inbb001,inbb004 FROM inbb_t WHERE inbbent = ",g_enterprise,
                     " AND inbbdocno = '",g_xmem_d[l_ac].xmem001,"' AND inbbseq = ",g_xmem_d[l_ac].xmem002
      #add by lixh 20150527
      WHEN '7'
         LET l_sql = "SELECT rmdb003,'' FORM rmdb_t ",
                     " WHERE rmdbent = ",g_enterprise,
                     "   AND rmdbdocno = '",g_xmem_d[l_ac].xmem001,"' AND rmdbseq = '",g_xmem_d[l_ac].xmem002,"'"
      END CASE #170214-00043#1 add               
      #add by lixh 20150527      
      PREPARE sel_default_prep FROM l_sql
      EXECUTE sel_default_prep INTO g_xmem_d[l_ac].xmem003,g_xmem_d[l_ac].xmem005
      
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.SQLCODE
         LET g_errparam.extend = ''
         LET g_errparam.popup = TRUE
         CALL cl_err()
      
      END IF
      DISPLAY BY NAME g_xmem_d[l_ac].xmem003,g_xmem_d[l_ac].xmem005
      CALL axmt610_xmem003_desc()
   #END CASE    #170214-00043#1  mark
   
END FUNCTION

PRIVATE FUNCTION axmt610_xmem004_chk()
DEFINE l_n  LIKE type_t.num5
   LET l_n = 0 
   SELECT COUNT(*) INTO l_n FROM xmem_t
    WHERE xmement = g_enterprise AND xmemdocno = g_xmel_m.xmeldocno
    AND xmem004 = g_xmem_d[l_ac].xmem004 AND xmem001 = g_xmem_d[l_ac].xmem001
    AND xmem002 = g_xmem_d[l_ac].xmem002 AND xmemseq <> g_xmem_d[l_ac].xmemseq
   IF l_n > 0 THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = 'axm-00362'
      LET g_errparam.extend = g_xmem_d[l_ac].xmem004
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN FALSE
   END IF
   RETURN TRUE
END FUNCTION

PRIVATE FUNCTION axmt610_xmem003_ref()
DEFINE l_n  LIKE type_t.num5
DEFINE l_n1  LIKE type_t.num5
DEFINE l_imaa009  LIKE imaa_t.imaa009
DEFINE l_sql STRING
DEFINE l_address  LIKE xmdg_t.xmdg017

   SELECT imaa009 INTO l_imaa009 FROM imaa_t 
    WHERE imaaent = g_enterprise AND  imaa001 = g_xmem_d[l_ac].xmem003
   LET l_n = 0
   SELECT COUNT(*) INTO l_n FROM xman_t WHERE xmanent = g_enterprise  #判断该料号在xman_t是否有资料
     AND xmansite = g_site AND xman001 = g_xmem_d[l_ac].xmem003
     AND xman002 = l_imaa009
   IF l_n > 0 THEN
      LET l_n1 = 0
      SELECT COUNT(*) INTO l_n1 FROM xman_t WHERE xmanent = g_enterprise  #判断客户在xman_t中有多少笔资料  
         AND xmansite = g_site AND xman001 = g_xmem_d[l_ac].xmem003 
         AND xman002 = l_imaa009 AND xman003 = g_xmel_m.xmel003
      IF l_n1 = 1 THEN            #如果只有一笔就直接抓取包装方式
         LET l_sql = "SELECT xman005 FROM xman_t WHERE xmanent = ",g_enterprise,  
                     " AND xmansite = '",g_site,"' AND xman001 = '",g_xmem_d[l_ac].xmem003,"'",
                     " AND xman002 = '",l_imaa009,"' AND xman003 = '",g_xmel_m.xmel003,"'",
                     " ORDER BY xmanent,xmansite,xman001,xman002,xman003,xman004"
         PREPARE sel_xman_prep1 FROM l_sql
         DECLARE sel_xman_curs1 SCROLL CURSOR FOR sel_xman_prep1
         OPEN sel_xman_curs1
         FETCH FIRST sel_xman_curs1 INTO g_xmem_d[l_ac].xmem005
         CLOSE sel_xman_curs1
      END IF
      
      IF l_n1 > 1 THEN                                       #如果有多笔则抓取对应的联络地址
         CASE WHEN g_xmel_m.xmel004 = '1'
                 SELECT xmdg017 INTO l_address FROM xmdg_t 
                  WHERE xmdgent = g_enterprise AND xmdgdocno = g_xmel_m.xmel005
                  
                 SELECT xman005 INTO g_xmem_d[l_ac].xmem005 FROM xman_t 
                  WHERE xmanent = g_enterprise AND xmansite = g_site
                    AND xman001 = g_xmem_d[l_ac].xmem003 AND xman002 = l_imaa009
                    AND xman003 = g_xmel_m.xmel003 AND xman004 = l_address   
                 IF cl_null(g_xmem_d[l_ac].xmem005) THEN              #如果没抓到包装方式,则抓取第一笔除了联络地址以外的资料
                    LET l_sql = "SELECT xman005 FROM xman_t WHERE xmanent = ",g_enterprise,  
                          " AND xmansite = '",g_site,"' AND xman001 = '",g_xmem_d[l_ac].xmem003,"'",
                          " AND xman002 = '",l_imaa009,"' AND xman003 = '",g_xmel_m.xmel003,"'",
                          " ORDER BY xmanent,xmansite,xman001,xman002,xman003,xman004"
                    PREPARE sel_xman_prep2 FROM l_sql
                    DECLARE sel_xman_curs2 SCROLL CURSOR FOR sel_xman_prep2
                    OPEN sel_xman_curs2
                    FETCH FIRST sel_xman_curs2 INTO g_xmem_d[l_ac].xmem005
                    CLOSE sel_xman_curs2
                 END IF
             WHEN g_xmel_m.xmel004 = '2'   
                 SELECT xmdk021 INTO l_address FROM xmdk_t  
                  WHERE xmdkent = g_enterprise AND xmdkdocno = g_xmel_m.xmel005
                 
                 SELECT xman005 INTO g_xmem_d[l_ac].xmem005 FROM xman_t 
                  WHERE xmanent = g_enterprise AND xmansite = g_site
                    AND xman001 = g_xmem_d[l_ac].xmem003 AND xman002 = l_imaa009
                    AND xman003 = g_xmel_m.xmel003 AND xman004 = l_address 
                 IF cl_null(g_xmem_d[l_ac].xmem005) THEN              #如果没抓到包装方式,则抓取第一笔除了联络地址以外的资料
                    LET l_sql = "SELECT xman005 FROM xman_t WHERE xmanent = ",g_enterprise,  
                          " AND xmansite = '",g_site,"' AND xman001 = '",g_xmem_d[l_ac].xmem003,"'",
                          " AND xman002 = '",l_imaa009,"' AND xman003 = '",g_xmel_m.xmel003,"'",
                          " ORDER BY xmanent,xmansite,xman001,xman002,xman003,xman004"
                    PREPARE sel_xman_prep3 FROM l_sql
                    DECLARE sel_xman_curs3 SCROLL CURSOR FOR sel_xman_prep3
                    OPEN sel_xman_curs3
                    FETCH FIRST sel_xman_curs3 INTO g_xmem_d[l_ac].xmem005
                    CLOSE sel_xman_curs3
                 END IF   
         END CASE
      END IF
      IF l_n1 = 0 THEN  #如果没有这个客户,则抓取料件条件下的第一笔
         LET l_sql = "SELECT xman005 FROM xman_t WHERE xmanent = ",g_enterprise,  
                     " AND xmansite = '",g_site,"' AND xman001 = '",g_xmem_d[l_ac].xmem003,"'",
                     " AND xman002 = '",l_imaa009,"'",
                     " ORDER BY xmanent,xmansite,xman001,xman002,xman003,xman004"
         PREPARE sel_xman_prep4 FROM l_sql
         DECLARE sel_xman_curs4 SCROLL CURSOR FOR sel_xman_prep4
         OPEN sel_xman_curs4
         FETCH FIRST sel_xman_curs4 INTO g_xmem_d[l_ac].xmem005
         CLOSE sel_xman_curs4
      END IF
   ELSE
      LET l_sql = "SELECT xman005 FROM xman_t WHERE xmanent = ",g_enterprise,  
                     " AND xmansite = '",g_site,"'",
                     " ORDER BY xmanent,xmansite,xman001,xman002,xman003,xman004"
      PREPARE sel_xman_prep5 FROM l_sql
      DECLARE sel_xman_curs5 SCROLL CURSOR FOR sel_xman_prep5
      OPEN sel_xman_curs5
      FETCH FIRST sel_xman_curs5 INTO g_xmem_d[l_ac].xmem005
      CLOSE sel_xman_curs5
   END IF
   SELECT imaa016,imaa017 INTO g_xmem_d[l_ac].xmem016,g_xmem_d[l_ac].xmem014 FROM imaa_t
    WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
   IF NOT cl_null(g_xmem_d[l_ac].xmem006) THEN
      CALL axmt610_xmem005_ref()
   END IF 
    
END FUNCTION

PRIVATE FUNCTION axmt610_xmem005_ref()
#mod--161109-00085#7-s
#DEFINE l_xmam     RECORD LIKE xmam_t.*
DEFINE l_xmam RECORD  #包裝方式檔
       xmament LIKE xmam_t.xmament, #企業編號
       xmam001 LIKE xmam_t.xmam001, #包裝方式
       xmam003 LIKE xmam_t.xmam003, #包裝規格
       xmam004 LIKE xmam_t.xmam004, #包裝容器
       xmam005 LIKE xmam_t.xmam005, #長面個數
       xmam006 LIKE xmam_t.xmam006, #寬面個數
       xmam007 LIKE xmam_t.xmam007, #高面個數
       xmam008 LIKE xmam_t.xmam008, #總包裝數
       xmam009 LIKE xmam_t.xmam009, #包裝單位
       xmam010 LIKE xmam_t.xmam010, #包裝容器長度
       xmam011 LIKE xmam_t.xmam011, #包裝容器寬度
       xmam012 LIKE xmam_t.xmam012, #包裝容器高度
       xmam013 LIKE xmam_t.xmam013, #總體積
       xmam014 LIKE xmam_t.xmam014, #長度單位
       xmam015 LIKE xmam_t.xmam015, #包裝容器重量
       xmam016 LIKE xmam_t.xmam016, #重量單位
       xmam017 LIKE xmam_t.xmam017, #是否有內包裝
       xmam018 LIKE xmam_t.xmam018, #內包裝方式
       xmam019 LIKE xmam_t.xmam019, #體積單位
       xmamownid LIKE xmam_t.xmamownid, #資料所有者
       xmamowndp LIKE xmam_t.xmamowndp, #資料所屬部門
       xmamcrtid LIKE xmam_t.xmamcrtid, #資料建立者
       xmamcrtdp LIKE xmam_t.xmamcrtdp, #資料建立部門
       xmamcrtdt LIKE xmam_t.xmamcrtdt, #資料創建日
       xmammodid LIKE xmam_t.xmammodid, #資料修改者
       xmammoddt LIKE xmam_t.xmammoddt, #最近修改日
      #xmamstus LIKE xmam_t.xmamstus  #狀態碼 #161109-00085#65 mark
       #161109-00085#65 --s add
       xmamstus LIKE xmam_t.xmamstus, #狀態碼
       xmamud001 LIKE xmam_t.xmamud001, #自定義欄位(文字)001
       xmamud002 LIKE xmam_t.xmamud002, #自定義欄位(文字)002
       xmamud003 LIKE xmam_t.xmamud003, #自定義欄位(文字)003
       xmamud004 LIKE xmam_t.xmamud004, #自定義欄位(文字)004
       xmamud005 LIKE xmam_t.xmamud005, #自定義欄位(文字)005
       xmamud006 LIKE xmam_t.xmamud006, #自定義欄位(文字)006
       xmamud007 LIKE xmam_t.xmamud007, #自定義欄位(文字)007
       xmamud008 LIKE xmam_t.xmamud008, #自定義欄位(文字)008
       xmamud009 LIKE xmam_t.xmamud009, #自定義欄位(文字)009
       xmamud010 LIKE xmam_t.xmamud010, #自定義欄位(文字)010
       xmamud011 LIKE xmam_t.xmamud011, #自定義欄位(數字)011
       xmamud012 LIKE xmam_t.xmamud012, #自定義欄位(數字)012
       xmamud013 LIKE xmam_t.xmamud013, #自定義欄位(數字)013
       xmamud014 LIKE xmam_t.xmamud014, #自定義欄位(數字)014
       xmamud015 LIKE xmam_t.xmamud015, #自定義欄位(數字)015
       xmamud016 LIKE xmam_t.xmamud016, #自定義欄位(數字)016
       xmamud017 LIKE xmam_t.xmamud017, #自定義欄位(數字)017
       xmamud018 LIKE xmam_t.xmamud018, #自定義欄位(數字)018
       xmamud019 LIKE xmam_t.xmamud019, #自定義欄位(數字)019
       xmamud020 LIKE xmam_t.xmamud020, #自定義欄位(數字)020
       xmamud021 LIKE xmam_t.xmamud021, #自定義欄位(日期時間)021
       xmamud022 LIKE xmam_t.xmamud022, #自定義欄位(日期時間)022
       xmamud023 LIKE xmam_t.xmamud023, #自定義欄位(日期時間)023
       xmamud024 LIKE xmam_t.xmamud024, #自定義欄位(日期時間)024
       xmamud025 LIKE xmam_t.xmamud025, #自定義欄位(日期時間)025
       xmamud026 LIKE xmam_t.xmamud026, #自定義欄位(日期時間)026
       xmamud027 LIKE xmam_t.xmamud027, #自定義欄位(日期時間)027
       xmamud028 LIKE xmam_t.xmamud028, #自定義欄位(日期時間)028
       xmamud029 LIKE xmam_t.xmamud029, #自定義欄位(日期時間)029
       xmamud030 LIKE xmam_t.xmamud030  #自定義欄位(日期時間)030
       #161109-00085#65 --e add
                 END RECORD
#mod--161109-00085#7-e


   #mod--161109-00085#7-s
   #DEFINE l_imaa     RECORD LIKE imaa_t.*
   DEFINE l_imaa RECORD  #料件主檔
       imaaent LIKE imaa_t.imaaent, #企業編號
       imaa001 LIKE imaa_t.imaa001, #料號
       imaa002 LIKE imaa_t.imaa002, #目前版本
       imaa003 LIKE imaa_t.imaa003, #主分群碼
       imaa004 LIKE imaa_t.imaa004, #料件類別
       imaa005 LIKE imaa_t.imaa005, #特徵組別
       imaa006 LIKE imaa_t.imaa006, #基礎單位
       imaa009 LIKE imaa_t.imaa009, #產品分類
       imaa010 LIKE imaa_t.imaa010, #生命週期狀態
       imaa011 LIKE imaa_t.imaa011, #產出類型
       imaa012 LIKE imaa_t.imaa012, #允許副產品
       imaa013 LIKE imaa_t.imaa013, #目錄編號
       imaa014 LIKE imaa_t.imaa014, #產品條碼編號
       imaa016 LIKE imaa_t.imaa016, #毛重
       imaa017 LIKE imaa_t.imaa017, #淨重
       imaa018 LIKE imaa_t.imaa018, #重量單位
       imaa019 LIKE imaa_t.imaa019, #長度
       imaa020 LIKE imaa_t.imaa020, #寬度
       imaa021 LIKE imaa_t.imaa021, #高度
       imaa022 LIKE imaa_t.imaa022, #長度單位
       imaa023 LIKE imaa_t.imaa023, #面積
       imaa024 LIKE imaa_t.imaa024, #面積單位
       imaa025 LIKE imaa_t.imaa025, #體積
       imaa026 LIKE imaa_t.imaa026, #體積單位
       imaa027 LIKE imaa_t.imaa027, #為包裝容器
       imaa028 LIKE imaa_t.imaa028, #容量
       imaa029 LIKE imaa_t.imaa029, #容量單位
       imaa030 LIKE imaa_t.imaa030, #超量容差(%)
       imaa031 LIKE imaa_t.imaa031, #載重量
       imaa032 LIKE imaa_t.imaa032, #載重單位
       imaa033 LIKE imaa_t.imaa033, #超重容差(%)
       imaa034 LIKE imaa_t.imaa034, #料號來源
       imaa035 LIKE imaa_t.imaa035, #來源參考料號
       imaa036 LIKE imaa_t.imaa036, #記錄位置(插件)
       imaa037 LIKE imaa_t.imaa037, #組裝位置須勾稽
       imaa038 LIKE imaa_t.imaa038, #工程料件
       imaa039 LIKE imaa_t.imaa039, #轉正式料號
       imaa040 LIKE imaa_t.imaa040, #轉正式料號時間
       imaa041 LIKE imaa_t.imaa041, #工程圖號
       imaa042 LIKE imaa_t.imaa042, #主要模具編號
       imaa043 LIKE imaa_t.imaa043, #據點研發可調整元件
       imaa044 LIKE imaa_t.imaa044, #AVL控管點
       imaa045 LIKE imaa_t.imaa045, #生產國家地區
       imaa100 LIKE imaa_t.imaa100, #條碼分類
       imaa101 LIKE imaa_t.imaa101, #主供應商
       imaa102 LIKE imaa_t.imaa102, #保質期(月)
       imaa103 LIKE imaa_t.imaa103, #保質期(天)
       imaa104 LIKE imaa_t.imaa104, #庫存單位
       imaa105 LIKE imaa_t.imaa105, #銷售單位
       imaa106 LIKE imaa_t.imaa106, #銷售計價單位
       imaa107 LIKE imaa_t.imaa107, #採購單位
       imaa108 LIKE imaa_t.imaa108, #商品種類
       imaa109 LIKE imaa_t.imaa109, #條碼類型
       imaa110 LIKE imaa_t.imaa110, #季節性商品
       imaa111 LIKE imaa_t.imaa111, #開始日期
       imaa112 LIKE imaa_t.imaa112, #結束日期
       imaa113 LIKE imaa_t.imaa113, #傳秤因子
       imaa114 LIKE imaa_t.imaa114, #計價幣別
       imaa115 LIKE imaa_t.imaa115, #預計進貨價格
       imaa116 LIKE imaa_t.imaa116, #預計銷貨價格
       imaa117 LIKE imaa_t.imaa117, #進銷差率
       imaa118 LIKE imaa_t.imaa118, #試銷期(天)
       imaa119 LIKE imaa_t.imaa119, #試銷金額
       imaa120 LIKE imaa_t.imaa120, #試銷數量
       imaa121 LIKE imaa_t.imaa121, #是否網路經營
       imaa122 LIKE imaa_t.imaa122, #產地分類
       imaa123 LIKE imaa_t.imaa123, #產地說明
       imaa124 LIKE imaa_t.imaa124, #進銷項稅別
       imaa125 LIKE imaa_t.imaa125, #一次性商品
       imaa126 LIKE imaa_t.imaa126, #品牌
       imaa127 LIKE imaa_t.imaa127, #系列
       imaa128 LIKE imaa_t.imaa128, #型別
       imaa129 LIKE imaa_t.imaa129, #功能
       imaa130 LIKE imaa_t.imaa130, #主材
       imaa131 LIKE imaa_t.imaa131, #價格帶
       imaa132 LIKE imaa_t.imaa132, #其他屬性一
       imaa133 LIKE imaa_t.imaa133, #其他屬性二
       imaa134 LIKE imaa_t.imaa134, #其他屬性三
       imaa135 LIKE imaa_t.imaa135, #其他屬性四
       imaa136 LIKE imaa_t.imaa136, #其他屬性五
       imaa137 LIKE imaa_t.imaa137, #其他屬性六
       imaa138 LIKE imaa_t.imaa138, #其他屬性七
       imaa139 LIKE imaa_t.imaa139, #其他屬性八
       imaa140 LIKE imaa_t.imaa140, #其他屬性九
       imaa141 LIKE imaa_t.imaa141, #其他屬性十
       imaa142 LIKE imaa_t.imaa142, #制定組織
       imaa143 LIKE imaa_t.imaa143, #產品組編號
       imaa144 LIKE imaa_t.imaa144, #庫存多單位
       imaa145 LIKE imaa_t.imaa145, #採購計價單位
       imaa146 LIKE imaa_t.imaa146, #成本單位
       imaastus LIKE imaa_t.imaastus, #狀態碼
       imaaownid LIKE imaa_t.imaaownid, #資料所有者
       imaaowndp LIKE imaa_t.imaaowndp, #資料所屬部門
       imaacrtid LIKE imaa_t.imaacrtid, #資料建立者
       imaacrtdp LIKE imaa_t.imaacrtdp, #資料建立部門
       imaacrtdt LIKE imaa_t.imaacrtdt, #資料創建日
       imaamodid LIKE imaa_t.imaamodid, #資料修改者
       imaamoddt LIKE imaa_t.imaamoddt, #最近修改日
       imaacnfid LIKE imaa_t.imaacnfid, #資料確認者
       imaacnfdt LIKE imaa_t.imaacnfdt, #資料確認日
       #161109-00085#65 --s add
       imaaud001 LIKE imaa_t.imaaud001, #自定義欄位(文字)001
       imaaud002 LIKE imaa_t.imaaud002, #自定義欄位(文字)002
       imaaud003 LIKE imaa_t.imaaud003, #自定義欄位(文字)003
       imaaud004 LIKE imaa_t.imaaud004, #自定義欄位(文字)004
       imaaud005 LIKE imaa_t.imaaud005, #自定義欄位(文字)005
       imaaud006 LIKE imaa_t.imaaud006, #自定義欄位(文字)006
       imaaud007 LIKE imaa_t.imaaud007, #自定義欄位(文字)007
       imaaud008 LIKE imaa_t.imaaud008, #自定義欄位(文字)008
       imaaud009 LIKE imaa_t.imaaud009, #自定義欄位(文字)009
       imaaud010 LIKE imaa_t.imaaud010, #自定義欄位(文字)010
       imaaud011 LIKE imaa_t.imaaud011, #自定義欄位(數字)011
       imaaud012 LIKE imaa_t.imaaud012, #自定義欄位(數字)012
       imaaud013 LIKE imaa_t.imaaud013, #自定義欄位(數字)013
       imaaud014 LIKE imaa_t.imaaud014, #自定義欄位(數字)014
       imaaud015 LIKE imaa_t.imaaud015, #自定義欄位(數字)015
       imaaud016 LIKE imaa_t.imaaud016, #自定義欄位(數字)016
       imaaud017 LIKE imaa_t.imaaud017, #自定義欄位(數字)017
       imaaud018 LIKE imaa_t.imaaud018, #自定義欄位(數字)018
       imaaud019 LIKE imaa_t.imaaud019, #自定義欄位(數字)019
       imaaud020 LIKE imaa_t.imaaud020, #自定義欄位(數字)020
       imaaud021 LIKE imaa_t.imaaud021, #自定義欄位(日期時間)021
       imaaud022 LIKE imaa_t.imaaud022, #自定義欄位(日期時間)022
       imaaud023 LIKE imaa_t.imaaud023, #自定義欄位(日期時間)023
       imaaud024 LIKE imaa_t.imaaud024, #自定義欄位(日期時間)024
       imaaud025 LIKE imaa_t.imaaud025, #自定義欄位(日期時間)025
       imaaud026 LIKE imaa_t.imaaud026, #自定義欄位(日期時間)026
       imaaud027 LIKE imaa_t.imaaud027, #自定義欄位(日期時間)027
       imaaud028 LIKE imaa_t.imaaud028, #自定義欄位(日期時間)028
       imaaud029 LIKE imaa_t.imaaud029, #自定義欄位(日期時間)029
       imaaud030 LIKE imaa_t.imaaud030, #自定義欄位(日期時間)030
       #161109-00085#65 --e add
       imaa147 LIKE imaa_t.imaa147, #預設商品臨期比例
       imaa148 LIKE imaa_t.imaa148, #商品臨期天數
       imaa149 LIKE imaa_t.imaa149, #臨期控管方式
       imaa150 LIKE imaa_t.imaa150, #輔材
       imaa151 LIKE imaa_t.imaa151, #等級
       imaa152 LIKE imaa_t.imaa152, #顏色
       imaa153 LIKE imaa_t.imaa153, #型號
       imaa154 LIKE imaa_t.imaa154, #年份
       imaa155 LIKE imaa_t.imaa155, #訂貨季
       imaa156 LIKE imaa_t.imaa156, #性別
       imaa157 LIKE imaa_t.imaa157, #標牌價
       imaa158 LIKE imaa_t.imaa158, #上市日
       imaa159 LIKE imaa_t.imaa159, #每m²克重
       imaa160 LIKE imaa_t.imaa160, #面料幅寬
       imaa161 LIKE imaa_t.imaa161  #觸屏分類編號
               END RECORD
   #DEFINE l_imaa_1 RECORD imaa_t.*           
   DEFINE l_imaa_1 RECORD  #料件主檔
       imaaent LIKE imaa_t.imaaent, #企業編號
       imaa001 LIKE imaa_t.imaa001, #料號
       imaa002 LIKE imaa_t.imaa002, #目前版本
       imaa003 LIKE imaa_t.imaa003, #主分群碼
       imaa004 LIKE imaa_t.imaa004, #料件類別
       imaa005 LIKE imaa_t.imaa005, #特徵組別
       imaa006 LIKE imaa_t.imaa006, #基礎單位
       imaa009 LIKE imaa_t.imaa009, #產品分類
       imaa010 LIKE imaa_t.imaa010, #生命週期狀態
       imaa011 LIKE imaa_t.imaa011, #產出類型
       imaa012 LIKE imaa_t.imaa012, #允許副產品
       imaa013 LIKE imaa_t.imaa013, #目錄編號
       imaa014 LIKE imaa_t.imaa014, #產品條碼編號
       imaa016 LIKE imaa_t.imaa016, #毛重
       imaa017 LIKE imaa_t.imaa017, #淨重
       imaa018 LIKE imaa_t.imaa018, #重量單位
       imaa019 LIKE imaa_t.imaa019, #長度
       imaa020 LIKE imaa_t.imaa020, #寬度
       imaa021 LIKE imaa_t.imaa021, #高度
       imaa022 LIKE imaa_t.imaa022, #長度單位
       imaa023 LIKE imaa_t.imaa023, #面積
       imaa024 LIKE imaa_t.imaa024, #面積單位
       imaa025 LIKE imaa_t.imaa025, #體積
       imaa026 LIKE imaa_t.imaa026, #體積單位
       imaa027 LIKE imaa_t.imaa027, #為包裝容器
       imaa028 LIKE imaa_t.imaa028, #容量
       imaa029 LIKE imaa_t.imaa029, #容量單位
       imaa030 LIKE imaa_t.imaa030, #超量容差(%)
       imaa031 LIKE imaa_t.imaa031, #載重量
       imaa032 LIKE imaa_t.imaa032, #載重單位
       imaa033 LIKE imaa_t.imaa033, #超重容差(%)
       imaa034 LIKE imaa_t.imaa034, #料號來源
       imaa035 LIKE imaa_t.imaa035, #來源參考料號
       imaa036 LIKE imaa_t.imaa036, #記錄位置(插件)
       imaa037 LIKE imaa_t.imaa037, #組裝位置須勾稽
       imaa038 LIKE imaa_t.imaa038, #工程料件
       imaa039 LIKE imaa_t.imaa039, #轉正式料號
       imaa040 LIKE imaa_t.imaa040, #轉正式料號時間
       imaa041 LIKE imaa_t.imaa041, #工程圖號
       imaa042 LIKE imaa_t.imaa042, #主要模具編號
       imaa043 LIKE imaa_t.imaa043, #據點研發可調整元件
       imaa044 LIKE imaa_t.imaa044, #AVL控管點
       imaa045 LIKE imaa_t.imaa045, #生產國家地區
       imaa100 LIKE imaa_t.imaa100, #條碼分類
       imaa101 LIKE imaa_t.imaa101, #主供應商
       imaa102 LIKE imaa_t.imaa102, #保質期(月)
       imaa103 LIKE imaa_t.imaa103, #保質期(天)
       imaa104 LIKE imaa_t.imaa104, #庫存單位
       imaa105 LIKE imaa_t.imaa105, #銷售單位
       imaa106 LIKE imaa_t.imaa106, #銷售計價單位
       imaa107 LIKE imaa_t.imaa107, #採購單位
       imaa108 LIKE imaa_t.imaa108, #商品種類
       imaa109 LIKE imaa_t.imaa109, #條碼類型
       imaa110 LIKE imaa_t.imaa110, #季節性商品
       imaa111 LIKE imaa_t.imaa111, #開始日期
       imaa112 LIKE imaa_t.imaa112, #結束日期
       imaa113 LIKE imaa_t.imaa113, #傳秤因子
       imaa114 LIKE imaa_t.imaa114, #計價幣別
       imaa115 LIKE imaa_t.imaa115, #預計進貨價格
       imaa116 LIKE imaa_t.imaa116, #預計銷貨價格
       imaa117 LIKE imaa_t.imaa117, #進銷差率
       imaa118 LIKE imaa_t.imaa118, #試銷期(天)
       imaa119 LIKE imaa_t.imaa119, #試銷金額
       imaa120 LIKE imaa_t.imaa120, #試銷數量
       imaa121 LIKE imaa_t.imaa121, #是否網路經營
       imaa122 LIKE imaa_t.imaa122, #產地分類
       imaa123 LIKE imaa_t.imaa123, #產地說明
       imaa124 LIKE imaa_t.imaa124, #進銷項稅別
       imaa125 LIKE imaa_t.imaa125, #一次性商品
       imaa126 LIKE imaa_t.imaa126, #品牌
       imaa127 LIKE imaa_t.imaa127, #系列
       imaa128 LIKE imaa_t.imaa128, #型別
       imaa129 LIKE imaa_t.imaa129, #功能
       imaa130 LIKE imaa_t.imaa130, #主材
       imaa131 LIKE imaa_t.imaa131, #價格帶
       imaa132 LIKE imaa_t.imaa132, #其他屬性一
       imaa133 LIKE imaa_t.imaa133, #其他屬性二
       imaa134 LIKE imaa_t.imaa134, #其他屬性三
       imaa135 LIKE imaa_t.imaa135, #其他屬性四
       imaa136 LIKE imaa_t.imaa136, #其他屬性五
       imaa137 LIKE imaa_t.imaa137, #其他屬性六
       imaa138 LIKE imaa_t.imaa138, #其他屬性七
       imaa139 LIKE imaa_t.imaa139, #其他屬性八
       imaa140 LIKE imaa_t.imaa140, #其他屬性九
       imaa141 LIKE imaa_t.imaa141, #其他屬性十
       imaa142 LIKE imaa_t.imaa142, #制定組織
       imaa143 LIKE imaa_t.imaa143, #產品組編號
       imaa144 LIKE imaa_t.imaa144, #庫存多單位
       imaa145 LIKE imaa_t.imaa145, #採購計價單位
       imaa146 LIKE imaa_t.imaa146, #成本單位
       imaastus LIKE imaa_t.imaastus, #狀態碼
       imaaownid LIKE imaa_t.imaaownid, #資料所有者
       imaaowndp LIKE imaa_t.imaaowndp, #資料所屬部門
       imaacrtid LIKE imaa_t.imaacrtid, #資料建立者
       imaacrtdp LIKE imaa_t.imaacrtdp, #資料建立部門
       imaacrtdt LIKE imaa_t.imaacrtdt, #資料創建日
       imaamodid LIKE imaa_t.imaamodid, #資料修改者
       imaamoddt LIKE imaa_t.imaamoddt, #最近修改日
       imaacnfid LIKE imaa_t.imaacnfid, #資料確認者
       imaacnfdt LIKE imaa_t.imaacnfdt, #資料確認日
       #161109-00085#65 --s add
       imaaud001 LIKE imaa_t.imaaud001, #自定義欄位(文字)001
       imaaud002 LIKE imaa_t.imaaud002, #自定義欄位(文字)002
       imaaud003 LIKE imaa_t.imaaud003, #自定義欄位(文字)003
       imaaud004 LIKE imaa_t.imaaud004, #自定義欄位(文字)004
       imaaud005 LIKE imaa_t.imaaud005, #自定義欄位(文字)005
       imaaud006 LIKE imaa_t.imaaud006, #自定義欄位(文字)006
       imaaud007 LIKE imaa_t.imaaud007, #自定義欄位(文字)007
       imaaud008 LIKE imaa_t.imaaud008, #自定義欄位(文字)008
       imaaud009 LIKE imaa_t.imaaud009, #自定義欄位(文字)009
       imaaud010 LIKE imaa_t.imaaud010, #自定義欄位(文字)010
       imaaud011 LIKE imaa_t.imaaud011, #自定義欄位(數字)011
       imaaud012 LIKE imaa_t.imaaud012, #自定義欄位(數字)012
       imaaud013 LIKE imaa_t.imaaud013, #自定義欄位(數字)013
       imaaud014 LIKE imaa_t.imaaud014, #自定義欄位(數字)014
       imaaud015 LIKE imaa_t.imaaud015, #自定義欄位(數字)015
       imaaud016 LIKE imaa_t.imaaud016, #自定義欄位(數字)016
       imaaud017 LIKE imaa_t.imaaud017, #自定義欄位(數字)017
       imaaud018 LIKE imaa_t.imaaud018, #自定義欄位(數字)018
       imaaud019 LIKE imaa_t.imaaud019, #自定義欄位(數字)019
       imaaud020 LIKE imaa_t.imaaud020, #自定義欄位(數字)020
       imaaud021 LIKE imaa_t.imaaud021, #自定義欄位(日期時間)021
       imaaud022 LIKE imaa_t.imaaud022, #自定義欄位(日期時間)022
       imaaud023 LIKE imaa_t.imaaud023, #自定義欄位(日期時間)023
       imaaud024 LIKE imaa_t.imaaud024, #自定義欄位(日期時間)024
       imaaud025 LIKE imaa_t.imaaud025, #自定義欄位(日期時間)025
       imaaud026 LIKE imaa_t.imaaud026, #自定義欄位(日期時間)026
       imaaud027 LIKE imaa_t.imaaud027, #自定義欄位(日期時間)027
       imaaud028 LIKE imaa_t.imaaud028, #自定義欄位(日期時間)028
       imaaud029 LIKE imaa_t.imaaud029, #自定義欄位(日期時間)029
       imaaud030 LIKE imaa_t.imaaud030, #自定義欄位(日期時間)030
       #161109-00085#65 --e add
       imaa147 LIKE imaa_t.imaa147, #預設商品臨期比例
       imaa148 LIKE imaa_t.imaa148, #商品臨期天數
       imaa149 LIKE imaa_t.imaa149, #臨期控管方式
       imaa150 LIKE imaa_t.imaa150, #輔材
       imaa151 LIKE imaa_t.imaa151, #等級
       imaa152 LIKE imaa_t.imaa152, #顏色
       imaa153 LIKE imaa_t.imaa153, #型號
       imaa154 LIKE imaa_t.imaa154, #年份
       imaa155 LIKE imaa_t.imaa155, #訂貨季
       imaa156 LIKE imaa_t.imaa156, #性別
       imaa157 LIKE imaa_t.imaa157, #標牌價
       imaa158 LIKE imaa_t.imaa158, #上市日
       imaa159 LIKE imaa_t.imaa159, #每m²克重
       imaa160 LIKE imaa_t.imaa160, #面料幅寬
       imaa161 LIKE imaa_t.imaa161  #觸屏分類編號
               END RECORD
   #mod--161109-00085#7-e
DEFINE l_xmam004 LIKE xmam_t.xmam004
   INITIALIZE l_imaa.* TO NULL
#   INITIALIZE l_imaa_1.* TO NULL

   #mod--161109-00085#7-s
   #SELECT * INTO l_imaa.* FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
   SELECT imaaent,imaa001,imaa002,imaa003,imaa004,
          imaa005,imaa006,imaa009,imaa010,imaa011,
          imaa012,imaa013,imaa014,imaa016,imaa017,
          imaa018,imaa019,imaa020,imaa021,imaa022,
          imaa023,imaa024,imaa025,imaa026,imaa027,
          imaa028,imaa029,imaa030,imaa031,imaa032,
          imaa033,imaa034,imaa035,imaa036,imaa037,
          imaa038,imaa039,imaa040,imaa041,imaa042,
          imaa043,imaa044,imaa045,imaa100,imaa101,
          imaa102,imaa103,imaa104,imaa105,imaa106,
          imaa107,imaa108,imaa109,imaa110,imaa111,
          imaa112,imaa113,imaa114,imaa115,imaa116,
          imaa117,imaa118,imaa119,imaa120,imaa121,
          imaa122,imaa123,imaa124,imaa125,imaa126,
          imaa127,imaa128,imaa129,imaa130,imaa131,
          imaa132,imaa133,imaa134,imaa135,imaa136,
          imaa137,imaa138,imaa139,imaa140,imaa141,
          imaa142,imaa143,imaa144,imaa145,imaa146,
          imaastus,imaaownid,imaaowndp,imaacrtid,imaacrtdp,
          imaacrtdt,imaamodid,imaamoddt,imaacnfid,imaacnfdt,
          #161109-00085#65 --s add
          imaaud001,imaaud002,imaaud003,imaaud004,imaaud005,
          imaaud006,imaaud007,imaaud008,imaaud009,imaaud010,
          imaaud011,imaaud012,imaaud013,imaaud014,imaaud015,
          imaaud016,imaaud017,imaaud018,imaaud019,imaaud020,
          imaaud021,imaaud022,imaaud023,imaaud024,imaaud025,
          imaaud026,imaaud027,imaaud028,imaaud029,imaaud030,
          #161109-00085#65 --e add
          imaa147,imaa148,imaa149,imaa150,imaa151,
          imaa152,imaa153,imaa154,imaa155,imaa156,
          imaa157,imaa158,imaa159,imaa160,imaa161
   INTO l_imaa.imaaent,l_imaa.imaa001,l_imaa.imaa002,l_imaa.imaa003,l_imaa.imaa004,
        l_imaa.imaa005,l_imaa.imaa006,l_imaa.imaa009,l_imaa.imaa010,l_imaa.imaa011,
        l_imaa.imaa012,l_imaa.imaa013,l_imaa.imaa014,l_imaa.imaa016,l_imaa.imaa017,
        l_imaa.imaa018,l_imaa.imaa019,l_imaa.imaa020,l_imaa.imaa021,l_imaa.imaa022,
        l_imaa.imaa023,l_imaa.imaa024,l_imaa.imaa025,l_imaa.imaa026,l_imaa.imaa027,
        l_imaa.imaa028,l_imaa.imaa029,l_imaa.imaa030,l_imaa.imaa031,l_imaa.imaa032,
        l_imaa.imaa033,l_imaa.imaa034,l_imaa.imaa035,l_imaa.imaa036,l_imaa.imaa037,
        l_imaa.imaa038,l_imaa.imaa039,l_imaa.imaa040,l_imaa.imaa041,l_imaa.imaa042,
        l_imaa.imaa043,l_imaa.imaa044,l_imaa.imaa045,l_imaa.imaa100,l_imaa.imaa101,
        l_imaa.imaa102,l_imaa.imaa103,l_imaa.imaa104,l_imaa.imaa105,l_imaa.imaa106,
        l_imaa.imaa107,l_imaa.imaa108,l_imaa.imaa109,l_imaa.imaa110,l_imaa.imaa111,
        l_imaa.imaa112,l_imaa.imaa113,l_imaa.imaa114,l_imaa.imaa115,l_imaa.imaa116,
        l_imaa.imaa117,l_imaa.imaa118,l_imaa.imaa119,l_imaa.imaa120,l_imaa.imaa121,
        l_imaa.imaa122,l_imaa.imaa123,l_imaa.imaa124,l_imaa.imaa125,l_imaa.imaa126,
        l_imaa.imaa127,l_imaa.imaa128,l_imaa.imaa129,l_imaa.imaa130,l_imaa.imaa131,
        l_imaa.imaa132,l_imaa.imaa133,l_imaa.imaa134,l_imaa.imaa135,l_imaa.imaa136,
        l_imaa.imaa137,l_imaa.imaa138,l_imaa.imaa139,l_imaa.imaa140,l_imaa.imaa141,
        l_imaa.imaa142,l_imaa.imaa143,l_imaa.imaa144,l_imaa.imaa145,l_imaa.imaa146,
        l_imaa.imaastus,l_imaa.imaaownid,l_imaa.imaaowndp,l_imaa.imaacrtid,l_imaa.imaacrtdp,
        l_imaa.imaacrtdt,l_imaa.imaamodid,l_imaa.imaamoddt,l_imaa.imaacnfid,l_imaa.imaacnfdt,
        #161109-00085#65 --s add
        l_imaa_1.imaaud001,l_imaa_1.imaaud002,l_imaa_1.imaaud003,l_imaa_1.imaaud004,l_imaa_1.imaaud005,
        l_imaa_1.imaaud006,l_imaa_1.imaaud007,l_imaa_1.imaaud008,l_imaa_1.imaaud009,l_imaa_1.imaaud010,
        l_imaa_1.imaaud011,l_imaa_1.imaaud012,l_imaa_1.imaaud013,l_imaa_1.imaaud014,l_imaa_1.imaaud015,
        l_imaa_1.imaaud016,l_imaa_1.imaaud017,l_imaa_1.imaaud018,l_imaa_1.imaaud019,l_imaa_1.imaaud020,
        l_imaa_1.imaaud021,l_imaa_1.imaaud022,l_imaa_1.imaaud023,l_imaa_1.imaaud024,l_imaa_1.imaaud025,
        l_imaa_1.imaaud026,l_imaa_1.imaaud027,l_imaa_1.imaaud028,l_imaa_1.imaaud029,l_imaa_1.imaaud030,
        #161109-00085#65 --e add
        l_imaa.imaa147,l_imaa.imaa148,l_imaa.imaa149,l_imaa.imaa150,l_imaa.imaa151,
        l_imaa.imaa152,l_imaa.imaa153,l_imaa.imaa154,l_imaa.imaa155,l_imaa.imaa156,
        l_imaa.imaa157,l_imaa.imaa158,l_imaa.imaa159,l_imaa.imaa160,l_imaa.imaa161
   FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
   #mod--161109-00085#7-e
#   SELECT xmam004 INTO l_xmam004 FROM xmam_t WHERE xmament = g_enterprise AND xmam001 = g_xmem_d[l_ac].xmem005
#   SELECT * INTO l_imaa_1.* FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = l_xmam004
#   SELECT xmam008 INTO g_xmem_d[l_ac].xmem006 FROM xmam_t 
#        WHERE xmament = g_enterprise AND xmam001 = g_xmem_d[l_ac].xmem005
##   LET g_xmem_d[l_ac].xmem012 = g_xmem2_d[l_i].xmdh016
#   LET g_xmem_d[l_ac].xmem013 = l_imaa.imaa018
#   LET g_xmem_d[l_ac].xmem014 = g_xmem_d[l_ac].xmem006 * l_imaa.imaa017
#   LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem014
#   
#   LET g_xmem_d[l_ac].xmem016 = g_xmem_d[l_ac].xmem006 * (l_imaa_1.imaa016 + l_imaa.imaa016)
#   LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem007 * g_xmem_d[l_ac].xmem016
#   
#   LET g_xmem_d[l_ac].xmem018 = l_imaa_1.imaa019 * l_imaa_1.imaa020 * l_imaa_1.imaa021 * 0.0000353
#   IF g_xmel_m.xmel012 = '1' THEN
#      LET g_xmem_d[l_ac].xmem018 = g_xmem_d[l_ac].xmem018 / 35.315 
#   END IF
#   LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007
   #mod--161109-00085#7-s
   #SELECT * INTO l_xmam.* FROM xmam_t
   #161109-00085#65 --s mark
   #SELECT xmament,xmam001,xmam003,xmam004,xmam005,
   #       xmam006,xmam007,xmam008,xmam009,xmam010,
   #       xmam011,xmam012,xmam013,xmam014,xmam015,
   #       xmam016,xmam017,xmam018,xmam019,xmamownid,
   #       xmamowndp,xmamcrtid,xmamcrtdp,xmamcrtdt,xmammodid,
   #       xmammoddt,xmamstus 
   #INTO l_xmam.xmament,l_xmam.xmam001,l_xmam.xmam003,l_xmam.xmam004,l_xmam.xmam005,
   #     l_xmam.xmam006,l_xmam.xmam007,l_xmam.xmam008,l_xmam.xmam009,l_xmam.xmam010,
   #     l_xmam.xmam011,l_xmam.xmam012,l_xmam.xmam013,l_xmam.xmam014,l_xmam.xmam015,
   #     l_xmam.xmam016,l_xmam.xmam017,l_xmam.xmam018,l_xmam.xmam019,l_xmam.xmamownid,
   #     l_xmam.xmamowndp,l_xmam.xmamcrtid,l_xmam.xmamcrtdp,l_xmam.xmamcrtdt,l_xmam.xmammodid,
   #     l_xmam.xmammoddt,l_xmam.xmamstus
   #FROM xmam_t
   #161109-00085#65 --e mark
   #mod--161109-00085#7-e   
   #161109-00085#65 --s add
   SELECT xmament,xmam001,xmam003,xmam004,xmam005,
          xmam006,xmam007,xmam008,xmam009,xmam010,
          xmam011,xmam012,xmam013,xmam014,xmam015,
          xmam016,xmam017,xmam018,xmam019,xmamownid,
          xmamowndp,xmamcrtid,xmamcrtdp,xmamcrtdt,xmammodid,
          xmammoddt,xmamstus,xmamud001,xmamud002,xmamud003,
          xmamud004,xmamud005,xmamud006,xmamud007,xmamud008,
          xmamud009,xmamud010,xmamud011,xmamud012,xmamud013,
          xmamud014,xmamud015,xmamud016,xmamud017,xmamud018,
          xmamud019,xmamud020,xmamud021,xmamud022,xmamud023,
          xmamud024,xmamud025,xmamud026,xmamud027,xmamud028,
          xmamud029,xmamud030
     INTO l_xmam.xmament,l_xmam.xmam001,l_xmam.xmam003,l_xmam.xmam004,l_xmam.xmam005,
          l_xmam.xmam006,l_xmam.xmam007,l_xmam.xmam008,l_xmam.xmam009,l_xmam.xmam010,
          l_xmam.xmam011,l_xmam.xmam012,l_xmam.xmam013,l_xmam.xmam014,l_xmam.xmam015,
          l_xmam.xmam016,l_xmam.xmam017,l_xmam.xmam018,l_xmam.xmam019,l_xmam.xmamownid,
          l_xmam.xmamowndp,l_xmam.xmamcrtid,l_xmam.xmamcrtdp,l_xmam.xmamcrtdt,l_xmam.xmammodid,
          l_xmam.xmammoddt,l_xmam.xmamstus,l_xmam.xmamud001,l_xmam.xmamud002,l_xmam.xmamud003,
          l_xmam.xmamud004,l_xmam.xmamud005,l_xmam.xmamud006,l_xmam.xmamud007,l_xmam.xmamud008,
          l_xmam.xmamud009,l_xmam.xmamud010,l_xmam.xmamud011,l_xmam.xmamud012,l_xmam.xmamud013,
          l_xmam.xmamud014,l_xmam.xmamud015,l_xmam.xmamud016,l_xmam.xmamud017,l_xmam.xmamud018,
          l_xmam.xmamud019,l_xmam.xmamud020,l_xmam.xmamud021,l_xmam.xmamud022,l_xmam.xmamud023,
          l_xmam.xmamud024,l_xmam.xmamud025,l_xmam.xmamud026,l_xmam.xmamud027,l_xmam.xmamud028,
          l_xmam.xmamud029,l_xmam.xmamud030
     FROM xmam_t
   #161109-00085#65 --e add  
      WHERE xmament = g_enterprise AND xmam001 = g_xmem_d[l_ac].xmem005
      
     IF cl_null(l_xmam.xmam013) THEN
        SELECT imaa025 INTO l_xmam.xmam013 FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = g_xmem_d[l_ac].xmem003
     END IF
     CALL s_aooi250_convert_qty1(g_xmem_d[l_ac].xmem003,l_imaa.imaa018,g_xmem_d[l_ac].xmem013,l_imaa.imaa016) 
        RETURNING g_success,l_imaa.imaa016
     IF g_success THEN
        LET g_xmem_d[l_ac].xmem014 = g_xmem_d[l_ac].xmem006 * l_imaa.imaa016 #l_imaa.imaa017  150610
        CALL s_aooi250_convert_qty1(g_xmem_d[l_ac].xmem003,l_xmam.xmam016,g_xmem_d[l_ac].xmem013,l_xmam.xmam015) 
        RETURNING g_success,l_xmam.xmam015
        IF g_success THEN
           LET g_xmem_d[l_ac].xmem016 = g_xmem_d[l_ac].xmem014 + l_xmam.xmam015
        END IF
     END IF
     
     IF cl_null(l_xmam.xmam013) THEN
        LET l_xmam.xmam013 = 0
     END IF
   IF g_xmel_m.xmel012 = '2' THEN
      LET g_xmem_d[l_ac].xmem018 = l_xmam.xmam013 * 0.0000353
   ELSE
      LET g_xmem_d[l_ac].xmem018 = l_xmam.xmam013 * 0.0000353 / 35.315
   END IF
   IF NOT cl_null(g_xmem_d[l_ac].xmem007) THEN
      IF NOT cl_null(g_xmem_d[l_ac].xmem014) THEN
         LET g_xmem_d[l_ac].xmem015 = g_xmem_d[l_ac].xmem014 * g_xmem_d[l_ac].xmem007
      END IF
      IF NOT cl_null(g_xmem_d[l_ac].xmem016) THEN
         LET g_xmem_d[l_ac].xmem017 = g_xmem_d[l_ac].xmem016 * g_xmem_d[l_ac].xmem007
      END IF 
      IF NOT cl_null(g_xmem_d[l_ac].xmem018) THEN
         LET g_xmem_d[l_ac].xmem019 = g_xmem_d[l_ac].xmem018 * g_xmem_d[l_ac].xmem007
      END IF 
      
      IF NOT cl_null(g_xmem_d[l_ac].xmem006) THEN
         LET g_xmem_d[l_ac].xmem012 = g_xmem_d[l_ac].xmem006 * g_xmem_d[l_ac].xmem007
      END IF
   END IF      
END FUNCTION

PRIVATE FUNCTION axmt610_xmel009_desc()
DEFINE l_oocq019   LIKE oocq_t.oocq019   
   SELECT oocq019 INTO l_oocq019 FROM oocq_t
       WHERE oocqent = g_enterprise AND oocq001 = 263 AND oocq002 = g_xmel_m.xmel007 
   
   INITIALIZE g_ref_fields TO NULL
   INITIALIZE g_rtn_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel009
   CASE WHEN l_oocq019 MATCHES '[14]' 
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='315' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
        WHEN l_oocq019 = '2'
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='262' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
        WHEN l_oocq019 = '3'
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='276' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
    END CASE
   LET g_xmel_m.xmel009_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel009_desc
END FUNCTION

PRIVATE FUNCTION axmt610_xmel010_desc()
DEFINE l_oocq019   LIKE oocq_t.oocq019   
   SELECT oocq019 INTO l_oocq019 FROM oocq_t
       WHERE oocqent = g_enterprise AND oocq001 = 263 AND oocq002 = g_xmel_m.xmel007 
   
   INITIALIZE g_ref_fields TO NULL
   INITIALIZE g_rtn_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel010
   CASE WHEN l_oocq019 MATCHES '[14]' 
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='315' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
        WHEN l_oocq019 = '2'
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='262' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
        WHEN l_oocq019 = '3'
           CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='276' AND oocql002 = ? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
    END CASE
   LET g_xmel_m.xmel010_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel010_desc
END FUNCTION
################################################################################
# Descriptions...: 串查單號
# Memo...........:
# Usage..........: CALL axmt610_qrystr(p_docno)
# Input parameter: p_docno   查詢單號
# Date & Author..: 2015/05/04 By Shiun
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_qrystr(p_docno)
   DEFINE p_docno    LIKE xmdk_t.xmdkdocno
   DEFINE l_slip     LIKE oobal_t.oobal002
   DEFINE l_prog     LIKE oobx_t.oobx004
   DEFINE l_success  LIKE type_t.num5
   DEFINE ls_js      STRING
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   #抓取單據別
   LET l_slip = ''
   LET l_prog = ''
   IF NOT cl_null(p_docno) THEN
      CALL s_aooi200_get_slip(p_docno) RETURNING l_success,l_slip
      IF NOT cl_null(l_slip) THEN
         #抓取程式名稱
         SELECT oobx004 INTO l_prog
           FROM oobx_t
          WHERE oobxent = g_enterprise
            AND oobx001 = l_slip
      END IF
      IF NOT cl_null(l_prog) THEN
         INITIALIZE la_param.* TO NULL
         LET la_param.prog     = l_prog
         LET la_param.param[1] = p_docno
         LET ls_js = util.JSON.stringify(la_param)
         CALL cl_cmdrun_wait(ls_js)
      END IF
   END IF
END FUNCTION

PRIVATE FUNCTION axmt610_xmel015_ref()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmel_m.xmel015
   CALL ap_ref_array2(g_ref_fields,"SELECT icaal003 FROM icaal_t WHERE icaalent='"||g_enterprise||"' AND icaal001=? AND icaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmel_m.xmel015_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmel_m.xmel015_desc
END FUNCTION
################################################################################
# Descriptions...: 檢查流程代碼據點
# Memo...........:
# Usage..........: CALL axmt610_chk_icaa001(p_xmel004,p_xmel005)
#                  RETURNING r_success
# Input parameter: p_xmel004   Invoice來源
#                : p_xmel005   來源單號
# Return code....: r_success   成功否
# Date & Author..: 2015/07/13 By shiun
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_icaa001_chk(p_xmel004,p_xmel005)
DEFINE p_xmel004   LIKE xmel_t.xmel004
DEFINE p_xmel005   LIKE xmel_t.xmel005
DEFINE r_success   LIKE type_t.num5 
DEFINE l_icaa001   LIKE icaa_t.icaa001
DEFINE l_icaa004   LIKE icaa_t.icaa004
DEFINE l_icab003   LIKE icab_t.icab003
DEFINE l_max       LIKE icab_t.icab002
DEFINE l_min       LIKE icab_t.icab002

   LET r_success = TRUE   
   IF cl_null(p_xmel004) OR cl_null(p_xmel005) THEN RETURN END IF
   
   LET l_icaa001 =''
   LET l_icab003 =''
   
   CASE p_xmel004
      WHEN "1"   #出貨通知單 
         SELECT xmdg056 INTO l_icaa001 FROM xmdg_t
          WHERE xmdgent = g_enterprise 
            AND xmdgdocno = p_xmel005 
            AND (xmdgstus='Y' OR xmdgstus = 'S') 
         
      WHEN "2"   #出貨單
         SELECT xmdk044 INTO l_icaa001 FROM xmdk_t 
          WHERE xmdkent = g_enterprise 
            AND xmdkdocno = p_xmel005 
            AND (xmdkstus='Y' OR xmdkstus = 'S')
   END CASE
   IF NOT cl_null(l_icaa001) THEN
      INITIALIZE g_chkparam.* TO NULL
      #160318-00025#15 by 07900 --add-str 
      LET g_errshow = TRUE #是否開窗
      #160318-00025#15 by 07900 --add-end         
      #設定g_chkparam.*的參數
      LET g_chkparam.arg1 = l_icaa001
      LET g_chkparam.arg2 = g_site
      #160318-00025#15 by 07900 --add-str 
      LET g_chkparam.err_str[1] ="aic-00012:sub-01302|aici100|",cl_get_progname("aici100",g_lang,"2"),"|:EXEPROGaici100"
      #160318-00025#15 by 07900 --add-end
      IF NOT cl_chk_exist("v_icaa001_8") THEN
         LET r_success = FALSE
      END IF     
   END IF

   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 包裝方式說明欄位
# Memo...........:
# Usage..........: CALL axmt610_xmem005_desc()
# Input parameter: 無
# Return code....: 無
# Date & Author..: 2015/09/16 By sakura
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_xmem005_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_xmem_d[l_ac].xmem005
   CALL ap_ref_array2(g_ref_fields,"SELECT xmaml003 FROM xmaml_t WHERE xmamlent='"||g_enterprise||"' AND xmaml001=? AND xmaml002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_xmem_d[l_ac].xmem005_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_xmem_d[l_ac].xmem005_desc
END FUNCTION

################################################################################
# Descriptions...: 來源單號檢查
# Memo...........:
# Usage..........: CALL axmt610_from_chk(p_fromdocno,p_type)
#                  RETURNING r_success
# Input parameter: p_fromdocno   來源單號
#                : p_type        1.單頭 2.單身
# Return code....: r_success     執行結果
#                : 
# Date & Author..: 151231 By earl
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_from_chk(p_fromdocno,p_type)
   DEFINE p_fromdocno     LIKE xmel_t.xmel005
   DEFINE p_type          LIKE type_t.chr1
   DEFINE r_success       LIKE type_t.num5
   DEFINE l_sql           STRING
   DEFINE l_sql_where     STRING
   DEFINE l_success       LIKE type_t.num5
   DEFINE l_slip          LIKE ooba_t.ooba001
   DEFINE l_n             LIKE type_t.num10
   
   LET r_success = TRUE
   
   IF NOT cl_null(p_fromdocno) THEN
      #150909 earl add s
      IF NOT s_aooi210_check_doc(g_site,'',p_fromdocno,g_xmel_m.xmeldocno,'4','') THEN
         LET r_success = FALSE
         RETURN r_success
      END IF
      #150909 earl add e
      
      INITIALIZE g_chkparam.* TO NULL
      
      LET l_sql_where = " 1=2 "
      LET l_slip = ''
      CALL s_aooi200_get_slip(p_fromdocno) RETURNING l_success,l_slip
      
      CASE g_xmel_m.xmel004 
         WHEN '1'  #出貨通知單
            LET l_sql_where = " icac004 = '",l_slip,"'"
            LET g_chkparam.arg1 = p_fromdocno
            IF NOT cl_null(g_xmel_m.xmel003)THEN            
               LET g_chkparam.arg2 = g_xmel_m.xmel003             
                #160318-00025#15 by 07900 --add-str 
                LET g_errshow = TRUE #是否開窗 
                LET g_chkparam.err_str[1] ="axm-00044:sub-01302"
               #160318-00025#15 by 07900 --add-end 
               IF NOT cl_chk_exist("v_xmdgdocno_2") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            ELSE
               #160318-00025#15 by 07900 --add-str 
                LET g_errshow = TRUE #是否開窗 
                LET g_chkparam.err_str[1] ="axm-00044:sub-01302"
               #160318-00025#15 by 07900 --add-end 
               IF NOT cl_chk_exist("v_xmdgdocno") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            END IF
            
         WHEN '2'  #出貨單
            LET l_sql_where = " (icac007 = '",l_slip,"' OR icac015 = '",l_slip,"')"
            LET g_chkparam.arg1 = p_fromdocno
            IF NOT cl_null(g_xmel_m.xmel003) THEN
               LET g_chkparam.arg2 = g_xmel_m.xmel003
               IF NOT cl_chk_exist("v_xmdkdocno_7") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            ELSE
               IF NOT cl_chk_exist("v_xmdkdocno_3") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            END IF
            
         WHEN '3'  #倉退單
            LET l_sql_where = " icac013 = '",l_slip,"'"
            LET g_chkparam.arg1 = p_fromdocno
            IF NOT cl_null(g_xmel_m.xmel003) THEN
               LET g_chkparam.arg2 = g_xmel_m.xmel003
               IF NOT cl_chk_exist("v_pmdsdocno_13") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            ELSE
               IF NOT cl_chk_exist("v_pmdsdocno") THEN
                  LET r_success = FALSE
                  RETURN r_success
               END IF
            END IF
            
         WHEN '4'  #調撥單
            LET g_chkparam.arg1 = p_fromdocno
            IF NOT cl_chk_exist("v_indcdocno") THEN
               LET r_success = FALSE
               RETURN r_success
            END IF
            
         WHEN '5'  #雜發單
            #160318-00025#15 by 07900 --add-str 
            LET g_errshow = TRUE #是否開窗
            #160318-00025#15 by 07900 --add-end 
            LET g_chkparam.arg1 = p_fromdocno
            #160318-00025#15 by 07900 --add-str 
            LET g_chkparam.err_str[1] ="aqc-00074:sub-01318|aint301|",cl_get_progname("aint301",g_lang,"2"),"|:EXEPROGaint301"
            #160318-00025#15 by 07900 --add-end
            IF NOT cl_chk_exist("v_inbadocno_5") THEN
               LET r_success = FALSE
               RETURN r_success
            END IF
            
        #add by lixh 20150527
         WHEN '7'  #RMA覆出單
            LET g_chkparam.arg1 = p_fromdocno 
            IF NOT cl_chk_exist("v_rmdadocno") THEN
               LET r_success = FALSE
               RETURN r_success
            END IF
            IF NOT axmt610_xmel005_chk(p_fromdocno) THEN
               LET r_success = FALSE
               RETURN r_success               
            END IF
        #add by lixh 20150527
      END CASE
      
      #add--2015/07/13 By shiun--(S)
      IF NOT axmt610_icaa001_chk(g_xmel_m.xmel004,p_fromdocno) THEN
         LET r_success = FALSE
         RETURN r_success
      END IF
      #add--2015/07/13 By shiun--(E)
      
      #170216-00017#1-s-add
      #檢查多角流程編號，是否一致
      IF NOT axmt620_chk_xmel015(p_type,p_fromdocno,g_xmel_m.xmel015) THEN
         LET r_success = FALSE
         RETURN r_success
      END IF
      #170216-00017#1-e-add
      IF g_aic_doc THEN
         LET l_slip = ''
         CALL s_aooi200_get_slip(g_xmel_m.xmeldocno) RETURNING l_success,l_slip
         
         LET l_sql = "SELECT COUNT(*)",
                     "  FROM icab_t,icac_t",
                     " WHERE icabent = icacent AND icacent = ",g_enterprise,
                     "   AND icab001 = icac001",
                     "   AND icab002 = icac002",
                     "   AND icab003 = '",g_site,"'",
                     "   AND icac005 = '",l_slip,"'"
         PREPARE axmt540_from_chk_pre1 FROM l_sql
         
         LET l_sql = l_sql," AND ",l_sql_where
         PREPARE axmt540_from_chk_pre2 FROM l_sql
         
         LET l_n = 0
         EXECUTE axmt540_from_chk_pre1 INTO l_n
         
         IF l_n > 0 THEN
            LET l_n = 0
            EXECUTE axmt540_from_chk_pre2 INTO l_n
            IF l_n = 0 THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = "aic-00211"   #多角貿易設定為"多角單據流水號保持一致"時前後單別需存在對應關係！
               LET g_errparam.extend = ""
               LET g_errparam.popup = FALSE
               CALL cl_err()
                
               LET r_success = FALSE
               RETURN r_success
            END IF
         END IF
            
      END IF
   END IF
   
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 检核客户和来源单据的客户是否匹配
# Memo...........:
# Usage..........: CALL axmt610_xmel005_chk(p_fromdocno)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By lixh
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_xmel005_chk(p_fromdocno)
DEFINE   p_fromdocno     LIKE xmel_t.xmel005
DEFINE   l_n             LIKE type_t.num5
DEFINE   r_success       LIKE type_t.num5

   LET r_success = TRUE
   IF NOT cl_null(g_xmel_m.xmel003) THEN 
      LET l_n = 0
      SELECT COUNT(*) INTO l_n FROM rmda_t
       WHERE rmdaent = g_enterprise
         AND rmdadocno = p_fromdocno
         AND rmda005 = g_xmel_m.xmel003
      IF cl_null(l_n) THEN LET l_n = 0 END IF   
      IF l_n < 1 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = "apm-00985"   
         LET g_errparam.extend = ""
         LET g_errparam.popup = FALSE
         CALL cl_err()          
         LET r_success = FALSE                       
      END IF
   END IF
   
   RETURN r_success 
END FUNCTION

################################################################################
#161031-00025#30 add
#維護備註單身
################################################################################
PRIVATE FUNCTION axmt610_remaks()

   IF g_xmel_m.xmeldocno IS NULL THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = "std-00003"
      LET g_errparam.extend = ""
      LET g_errparam.popup = FALSE
      CALL cl_err()
      RETURN
   END IF
       
   CALL s_transaction_begin()
   
   OPEN axmt610_cl USING g_enterprise,g_xmel_m.xmeldocno

   IF STATUS THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code =  STATUS
      LET g_errparam.extend = "OPEN axmt610_cl:"
      LET g_errparam.popup = TRUE
      CALL cl_err()
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #鎖住將被更改的資料
   FETCH axmt610_cl INTO g_xmel_m.xmeldocno,g_xmel_m.xmeldocno_desc,g_xmel_m.xmeldocdt,g_xmel_m.xmel003,g_xmel_m.xmel003_desc, 
      g_xmel_m.xmel001,g_xmel_m.xmel001_desc,g_xmel_m.xmel002,g_xmel_m.xmel002_desc,g_xmel_m.xmelstus, 
      g_xmel_m.xmel004,g_xmel_m.xmel005,g_xmel_m.xmel006,g_xmel_m.xmel007,g_xmel_m.xmel007_desc,g_xmel_m.xmel008, 
      g_xmel_m.xmel009,g_xmel_m.xmel009_desc,g_xmel_m.xmel011,g_xmel_m.xmel012,g_xmel_m.xmel013,g_xmel_m.xmel013_desc, 
      g_xmel_m.xmel014,g_xmel_m.l_a,g_xmel_m.xmel010,g_xmel_m.xmel010_desc,g_xmel_m.xmel018,g_xmel_m.xmel019, 
      g_xmel_m.xmel020,g_xmel_m.xmel021,g_xmel_m.xmelsite,g_xmel_m.xmel015,g_xmel_m.xmel015_desc,g_xmel_m.xmel016, 
      g_xmel_m.xmel017,g_xmel_m.xmelownid,g_xmel_m.xmelownid_desc,g_xmel_m.xmelowndp,g_xmel_m.xmelowndp_desc, 
      g_xmel_m.xmelcrtid,g_xmel_m.xmelcrtid_desc,g_xmel_m.xmelcrtdp,g_xmel_m.xmelcrtdp_desc,g_xmel_m.xmelcrtdt, 
      g_xmel_m.xmelmodid,g_xmel_m.xmelmodid_desc,g_xmel_m.xmelmoddt,g_xmel_m.xmelcnfid,g_xmel_m.xmelcnfid_desc, 
      g_xmel_m.xmelcnfdt
       
   #資料被他人LOCK, 或是sql執行時出現錯誤
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = g_xmel_m.xmeldocno
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      RETURN 
   END IF
 
   #檢查是否允許此動作
   IF NOT axmt610_action_chk() THEN
      CLOSE axmt610_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   LET g_detail_insert = cl_auth_detail_input("insert")
   LET g_detail_delete = cl_auth_detail_input("delete")
   
   LET g_ooff001_d = '6'   #6.單據單頭備註
   LET g_ooff002_d = g_prog   
   LET g_ooff003_d = g_xmel_m.xmeldocno   #单号  
   LET g_ooff004_d = '0'    #项次
   LET g_ooff005_d = ' '
   LET g_ooff006_d = ' '
   LET g_ooff007_d = ' '
   LET g_ooff008_d = ' '
   LET g_ooff009_d = ' '
   LET g_ooff010_d = ' '
   LET g_ooff011_d = ' '
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
   
      SUBDIALOG aoo_aooi360_01.aooi360_01_input   #备注单身
      
      ON ACTION accept  
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄) 
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   CLOSE axmt610_cl
   
   CALL s_transaction_end('Y','0')
   
   CALL aooi360_01_b_fill(g_ooff001_d,g_ooff002_d,g_ooff003_d,g_ooff004_d,g_ooff005_d,g_ooff006_d,g_ooff007_d,g_ooff008_d,g_ooff009_d,g_ooff010_d,g_ooff011_d)   #备注单身
   
END FUNCTION

################################################################################
# Descriptions...: 更新單頭多角流程編號
# Memo...........:
# Usage..........: CALL axmt610_xmel015_upd(p_xmem001)
#                  RETURNING r_success
# Input parameter: p_xmem001      來源單號
# Return code....: r_success      TRUE/FALSE
# Date & Author..: 2017/02/17 By dorislai(#170216-00017#1)
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt610_xmel015_upd(p_xmem001)
     DEFINE  p_xmem001    LIKE   xmem_t.xmem001 
     DEFINE  r_success    LIKE   type_t.num5
     DEFINE  l_xmdh051    LIKE   xmdh_t.xmdh051  #多角流程編號
     
     LET l_xmdh051 = ''
     LET r_success = TRUE
     
     IF g_xmel_m.xmel004 NOT MATCHES "[12]" THEN
        RETURN r_success
     END IF
   
     #更新單頭 多角流程編號
     IF cl_null(g_xmel_m.xmel015) THEN
        #依來源單據，抓取 多角流程編號
        CASE g_xmel_m.xmel004
           WHEN '1' #出通單
              SELECT xmdg056 INTO l_xmdh051
                FROM xmdg_t
               WHERE xmdgent = g_enterprise AND xmdgdocno = p_xmem001
           WHEN '2' #出貨單
              SELECT xmdk044 INTO l_xmdh051
                FROM xmdk_t
               WHERE xmdkent = g_enterprise AND xmdkdocno = p_xmem001
        END CASE 
        IF NOT cl_null(l_xmdh051) THEN
           #更新至單頭的 多角流程編號
           UPDATE xmel_t SET xmel015 = l_xmdh051
            WHERE xmelent = g_enterprise AND xmeldocno = g_xmel_m.xmeldocno
           IF SQLCA.SQLCODE THEN 
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = "upd xmel_t"
              LET g_errparam.code = SQLCA.SQLCODE 
              LET g_errparam.popup = TRUE 
              LET r_success = FALSE
              CALL cl_err()
              RETURN r_success
           END IF   
           #顯示畫面
           LET g_xmel_m.xmel015 = l_xmdh051
           CALL s_desc_get_icaa001_desc(g_xmel_m.xmel015) RETURNING g_xmel_m.xmel015_desc
           DISPLAY BY NAME g_xmel_m.xmel015,g_xmel_m.xmel015_desc
        END IF
     END IF
     
     #單身沒資料、單頭也沒來源單號時，單頭多角流程編號要清空
     IF g_rec_b = 0 THEN
        IF cl_null(g_xmel_m.xmel005) AND NOT cl_null(g_xmel_m.xmel015) THEN
           #清空多角流程編號
           UPDATE xmel_t SET xmel015 = ''
              WHERE xmelent = g_enterprise AND xmeldocno = g_xmel_m.xmeldocno
           IF SQLCA.SQLCODE THEN
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = "upd xmel_t"
              LET g_errparam.code = SQLCA.SQLCODE 
              LET g_errparam.popup = TRUE 
              LET r_success = FALSE
              CALL cl_err()
              RETURN r_success
           END IF       
           #清空畫面欄位顯示 
           LET g_xmel_m.xmel015 = ''
           LET g_xmel_m_t.xmel015 = ''
           LET g_xmel_m_o.xmel015 = ''
           LET g_xmel_m.xmel015_desc = ''
           LET g_xmel_m_t.xmel015_desc = ''
           LET g_xmel_m_o.xmel015_desc = ''
           DISPLAY BY NAME g_xmel_m.xmel015,g_xmel_m.xmel015_desc
        END IF
     END IF
   
   RETURN r_success
END FUNCTION

################################################################################
# Descriptions...: 確認多角流程編號是否一致
# Memo...........:
# Usage..........: CALL axmt620_chk_xmel015(p_type,p_docno,p_xmel015)
#                  RETURNING r_success
# Input parameter: p_type         類型(1.單頭2.單身)
#                : p_docno        來源單據
#                : p_xmel015      多角流程編號
# Return code....: r_success      TRUE/FALSE
# Date & Author..: 2017/02/18 By dorislai(#170216-00017#1)
# Modify.........:
################################################################################
PRIVATE FUNCTION axmt620_chk_xmel015(p_type,p_docno,p_xmel015)
   DEFINE  p_type    LIKE   type_t.chr1
   DEFINE  p_docno   LIKE   xmel_t.xmeldocno
   DEFINE  p_xmel015 LIKE   xmel_t.xmel015
   DEFINE  r_success LIKE   type_t.num5
   DEFINE  l_icaa001 LIKE   icaa_t.icaa001
   
   LET r_success = TRUE
   
   #出通單、出貨單才要
   IF g_xmel_m.xmel004 NOT MATCHES "[12]" THEN
      RETURN r_success
   END IF
   
   #取得多角流程編號
   LET l_icaa001 = ''
   CASE g_xmel_m.xmel004
      WHEN "1"   #出貨通知單 
         SELECT xmdg056 INTO l_icaa001 FROM xmdg_t
          WHERE xmdgent = g_enterprise 
            AND xmdgdocno = p_docno 
            AND (xmdgstus='Y' OR xmdgstus = 'S') 
         
      WHEN "2"   #出貨單
         SELECT xmdk044 INTO l_icaa001 FROM xmdk_t 
          WHERE xmdkent = g_enterprise 
            AND xmdkdocno = p_docno 
            AND (xmdkstus='Y' OR xmdkstus = 'S')
   END CASE

   #來源單據的多角流程編號<>單頭的多角流程編號
   #(兩種比對：1.兩個多角流程編號不一樣  2.一個為空，一個不為空)
   IF (l_icaa001 <> p_xmel015) OR (cl_null(l_icaa001) <> cl_null(p_xmel015)) THEN
      #單頭&單身有資料 或 現在輸入的是在單身
      IF (p_type = '1' AND g_xmem_d.getLength() > 0) OR (p_type = '2' AND g_xmem_d.getLength() > 1) THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "" 
         LET g_errparam.code = "axm-00808"  #多角流程代碼為%1，需與單頭多角流程代碼一致！
         LET g_errparam.replace[1] = l_icaa001
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         LET r_success = FALSE
      END IF
   END IF

   RETURN r_success
END FUNCTION

 
{</section>}
 
