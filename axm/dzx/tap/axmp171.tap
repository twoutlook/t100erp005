<add_points prog="axmp171" std_prog="axmp171" erpver="1.0" module="AXM" ver="1" env="s" zone="t10dev" booking="Y">
  <point name="function.axmp171_xmic_exist" cite_std="N" status="u" ver="1" src="s" new="Y" order="1" mark_hard="N">
<![CDATA[
################################################################################
# Descriptions...: 檢查預測編號+預測起始日期存在
# Memo...........:
# Usage..........: CALL axmp171_xmic_exist()
# Input parameter: 
#                : 
# Return code....: 
#                : 
# Date & Author..: 2014/03/25 By xianghui
# Modify.........:
################################################################################
PRIVATE FUNCTION axmp171_xmic_exist()
DEFINE r_success   LIKE type_t.num5

   LET r_success = TRUE
   IF NOT cl_null(g_xmic_m.xmic001) AND NOT cl_null(g_xmic_m.xmic002) THEN 
      IF NOT ap_chk_isExist(g_xmic_m.xmic001,"SELECT COUNT(*) FROM xmic_t WHERE "||"xmicent = '" ||g_enterprise|| "' AND "||"xmic001 = ? AND xmic002 = '"||g_xmic_m.xmic002||"' ",'axm-00195',1) THEN
         LET r_success = FALSE
         RETURN r_success
      END IF
      IF NOT ap_chk_isExist(g_xmic_m.xmic001,"SELECT COUNT(*) FROM xmic_t WHERE "||"xmicent = '" ||g_enterprise|| "' AND "||"xmic001 = ? AND xmic002 = '"||g_xmic_m.xmic002||"' AND xmicstus = 'Y'",'axm-00318',1) THEN
         LET r_success = FALSE
         RETURN r_success
      END IF       
   END IF
   RETURN r_success
END FUNCTION]]>
</point>
  <point name="function.axmp171_chk_xmic005" cite_std="N" status="" ver="1" src="s" new="Y" order="2" mark_hard="N">
<![CDATA[
################################################################################
# Descriptions...: 檢查銷售組織是否爲匯總點或預測點
# Memo...........:
# Usage..........: CALL axmp171_chk_xmic005(p_xmij001)
#                  RETURNING r_flag
# Input parameter: p_xmij001   銷售組織
#                : 
# Return code....: 1   銷售組織是匯總點
#                : 2   銷售組織爲預測點
#                : 3   銷售組織不是匯總點也不是預測點
# Date & Author..: 2014/03/26 By xianghui 
# Modify.........:
################################################################################
PRIVATE FUNCTION axmp171_chk_xmic005(p_xmij001)
DEFINE p_xmij001  LIKE xmij_t.xmij001
DEFINE l_xmij002  LIKE xmij_t.xmij002
DEFINE l_xmij003  LIKE xmij_t.xmij003
DEFINE r_flag     LIKE type_t.chr1

   LET r_flag = '0'
   SELECT xmij002,xmij003 INTO l_xmij002,l_xmij003
     FROM xmij_t
    WHERE xmijent = g_enterprise
      AND xmij001 = p_xmij001
   IF l_xmij002 = 'Y' THEN       
      LET r_flag = '2'
   END IF
   IF l_xmij003 = 'Y' THEN       
      LET r_flag = '1'
   END IF   
   RETURN r_flag
END FUNCTION]]>
</point>
  <point name="function.axmp171_get_xmii004" cite_std="N" status="" ver="1" src="s" new="Y" order="3" mark_hard="N">
<![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: p_ooed004   組織編號
# Return code....: r_ooed005   上級組織編號
# Date & Author..: 2014/03/26 By xianghui
# Modify.........:
################################################################################
PRIVATE FUNCTION axmp171_get_xmii004(p_ooed004)
DEFINE p_ooed004  LIKE ooed_t.ooed004
DEFINE r_ooed005  LIKE ooed_t.ooed005
DEFINE l_ooed002  LIKE ooed_t.ooed002
DEFINE l_flag     LIKE type_t.chr1

   SELECT DISTINCT ooed005,ooed002 
     INTO r_ooed005,l_ooed002
     FROM ooed_t
    WHERE ooedent = g_enterprise
      AND ooed001 = '7'
      AND ooed004 = p_ooed004
      AND ooed006 <= g_xmic_m.xmic002
      AND (ooed007 IS NULL OR ooed007 >= g_xmic_m.xmic002)

   IF NOT cl_null(l_ooed002) THEN 
      IF l_ooed002 = p_ooed004 THEN 
         LET r_ooed005 = ' '
         RETURN r_ooed005
      ELSE    
         CALL axmp171_chk_xmic005(r_ooed005) RETURNING l_flag
         IF l_flag = '1' THEN 
            RETURN r_ooed005    
         ELSE
            CALL axmp171_get_xmii004(r_ooed005) RETURNING r_ooed005
            RETURN r_ooed005      
         END IF
      END IF
   END IF
   RETURN r_ooed005
END FUNCTION]]>
</point>
  <point name="function.axmp171_xmic001_chk" cite_std="N" status="" ver="1" src="s" new="Y" order="4" mark_hard="N">
<![CDATA[
PRIVATE FUNCTION axmp171_xmic001_chk()
DEFINE l_cnt        LIKE type_t.num5
DEFINE r_success    LIKE type_t.num5

   LET r_success = TRUE
   IF NOT cl_null(g_xmic_m.xmic001) THEN 
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt 
        FROM xmic_t
       WHERE xmicent = g_enterprise
         AND xmic001 = g_xmic_m.xmic001 
      IF l_cnt = 0 THEN 
         CALL cl_err(g_xmic_m.xmic001,'axm-00277',1)
         LET r_success = FALSE
      END IF
   END IF
   RETURN r_success
END FUNCTION]]>
</point>
  <point name="global.variable" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[TYPE type_g_xmic_m RECORD
        xmic001  LIKE xmic_t.xmic001,
        xmic002  LIKE xmic_t.xmic002
                     END RECORD 
DEFINE g_xmic_m     type_g_xmic_m 
DEFINE g_xmic_m_t   type_g_xmic_m
DEFINE g_stagecomplete LIKE type_t.num5]]>
</point>
  <point name="main.background" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[   LET g_bgjob = "N"]]>
</point>
  <point name="process.background_finish" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[]]>
</point>
  <point name="process.define" cite_std="N" status="u" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[   DEFINE l_xmic     RECORD
          xmic001    LIKE xmic_t.xmic001,
          xmic002    LIKE xmic_t.xmic002,
          xmic003    LIKE xmic_t.xmic003,
          xmic005    LIKE xmic_t.xmic005
          END RECORD
   DEFINE l_xmii  RECORD LIKE xmii_t.*
   DEFINE l_xmii003 LIKE xmii_t.xmii003   
   DEFINE l_xmii004 LIKE xmii_t.xmii004   
   DEFINE l_xmii005 LIKE xmii_t.xmii005
   DEFINE l_xmii005_new LIKE xmii_t.xmii005    
   DEFINE l_xmih        RECORD
          xmih001 LIKE xmih_t.xmih001,
          xmih002 LIKE xmih_t.xmih002,
          xmih003 LIKE xmih_t.xmih003,
          xmih004 LIKE xmih_t.xmih004,
          xmih005 LIKE xmih_t.xmih005,
          xmihownid LIKE xmih_t.xmihownid,
          xmihowndp LIKE xmih_t.xmihowndp,
          xmihcrtid LIKE xmih_t.xmihcrtid,
          xmihcrtdp LIKE xmih_t.xmihcrtdp,
          xmihcrtdt DATETIME YEAR TO SECOND,
          xmihmodid LIKE xmih_t.xmihmodid,
          xmihmoddt DATETIME YEAR TO SECOND,
          xmihcnfid LIKE xmih_t.xmihcnfid,
          xmihcnfdt DATETIME YEAR TO SECOND,
          xmihstus LIKE xmih_t.xmihstus
          END RECORD       
DEFINE l_flag    LIKE type_t.chr1
DEFINE l_xmij004 LIKE xmij_t.xmij004,
       l_xmij005 LIKE xmij_t.xmij005,
       l_xmij006 LIKE xmij_t.xmij006,
       l_xmij007 LIKE xmij_t.xmij007,
       l_xmij008 LIKE xmij_t.xmij008,
       l_xmij009 LIKE xmij_t.xmij009,
       l_xmij010 LIKE xmij_t.xmij010,
       l_xmij011 LIKE xmij_t.xmij011,
       l_group   STRING,
       l_date    DATETIME YEAR TO SECOND
   DEFINE l_success  LIKE type_t.num5 

   DEFINE l_over     LIKE type_t.num5
   DEFINE l_cnt      LIKE type_t.num5
   DEFINE l_cnt2     LIKE type_t.num5 
   DEFINE l_type     LIKE type_t.chr1   ]]>
</point>
  <point name="process.process" cite_std="N" status="u" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[   LET g_stagecomplete = 0
   DISPLAY g_stagecomplete TO stagecomplete
   CALL s_transaction_begin()
   LET l_success = TRUE
   DROP TABLE axmp171_xmii
   #CREATE TEMP TABLE
   LET ls_sql = "CREATE GLOBAL TEMPORARY TABLE axmp171_xmii AS ",
                "SELECT * FROM xmii_t "
   PREPARE xmii_tbl FROM ls_sql
   EXECUTE xmii_tbl
   FREE xmii_tbl     

   #预设点资料INSERT
   #xmiient,xmii001,xmii002,xmii003,xmii004,xmii005,xmii006,xmii007,xmii008
   #        xmii009,xmii010,xmii011,xmii012,xmii013,xmii014,xmii015,
   #        xmii016,xmii017,xmii018,xmii019,xmii020
   #        xmii021,xmii022,xmii023,xmii024
   INSERT INTO axmp171_xmii SELECT DISTINCT xmident,xmid001,xmid002,xmid003,xmid005,' ',xmid004,xmid005,xmid006,
                                   xmid007,xmid008,     '',xmid009,xmid010,xmid011,xmid012, 
                                   xmid013,xmid014,xmid015,xmid016,xmid017,
                                   xmid018,xmid019,xmid020,xmid021
                              FROM xmid_t,(SELECT xmic001,xmic002,MAX(xmic003) a,xmic004,xmic005,xmic006 
                                             FROM xmic_t 
                                            WHERE xmicent = g_enterprise
                                              AND xmic001 = g_xmic_m.xmic001
                                              AND xmic002 = g_xmic_m.xmic002
                                            GROUP BY xmic001,xmic002,xmic004,xmic005,xmic006 
                                            ORDER BY xmic001,xmic002,xmic005,a) A 
                             WHERE xmid001 = xmic001 
                               AND xmid002 = xmic002 
                               AND xmid003 = a 
                               AND xmid005 = xmic005
                               AND xmid006 = xmic006                               

   UPDATE axmp171_xmii
      SET xmii011 = (SELECT imaa009 FROM imaa_t WHERE imaaent = g_enterprise AND imaa001 = xmii009)
   
   LET ls_sql = "SELECT DISTINCT xmii004 FROM axmp171_xmii "
   PREPARE axmp171_process_pr FROM ls_sql
   DECLARE axmp171_process_cs CURSOR FOR axmp171_process_pr
   FOREACH axmp171_process_cs INTO l_xmii004      
      IF SQLCA.sqlcode THEN
         CALL cl_err('foreach:',SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF       
      
      CALL axmp171_get_xmii004(l_xmii004) RETURNING l_xmii005
      UPDATE axmp171_xmii 
         SET xmii005 = l_xmii005
       WHERE xmii004 = l_xmii004         
   END FOREACH
   
   DELETE FROM axmp171_xmii WHERE xmii005 IS NULL
   
   LET g_stagecomplete = 10
   DISPLAY g_stagecomplete TO stagecomplete
   
   LET l_cnt = 0
   SELECT COUNT(*) INTO l_cnt FROM axmp171_xmii
   IF l_cnt = 0 THEN 
      CALL cl_err('','sub-00491',1)
      RETURN
   END IF
   
   LET l_cnt = 0
   SELECT COUNT(*) INTO l_cnt 
     FROM xmic_t,axmp171_xmii
    WHERE xmicent = xmiient 
      AND xmic001 = xmii001
      AND xmic002 = xmii002
      AND xmic003 = xmii003
      AND xmic004 = xmii006
      AND xmic005 = xmii007
      AND xmic006 = xmii008                               
      AND xmicstus = 'N'  
   IF l_cnt > 0  THEN 
      #資料內有任一筆是未確認的
      IF NOT cl_ask_confirm('axm-00297') THEN
         RETURN
      ELSE
         LET ls_sql =" DELETE FROM axmp171_xmii ",
                     "  WHERE (xmiient,xmii001,xmii002,xmii003,xmii006,xmii007,xmii008) IN ( ",
                     "         SELECT xmicent,xmic001,xmic002,xmic003,xmic004,xmic005,xmic006 FROM xmic_t",
                     "          WHERE xmicent = xmiient ",
                     "            AND xmic001 = xmii001",
                     "            AND xmic002 = xmii002",
                     "            AND xmic003 = xmii003",
                     "            AND xmic004 = xmii006",
                     "            AND xmic005 = xmii007",
                     "            AND xmic006 = xmii008 ",                              
                     "            AND xmicstus = 'N' )  "
         PREPARE axmp171_pre6 FROM ls_sql
         EXECUTE axmp171_pre6                    
      END IF
   END IF
   
   
   SELECT DISTINCT MAX(a.xmii003) INTO l_xmii003 FROM xmii_t a,axmp171_xmii b
    WHERE a.xmiient = b.xmiient
      AND a.xmii002 = b.xmii002
      AND a.xmii004 = b.xmii004
      AND a.xmii006 = b.xmii006
      AND a.xmii007 = b.xmii007
      AND a.xmii008 = b.xmii008
   IF l_xmii003 IS NULL THEN 
      LET l_xmii003 = 1  
   END IF
   
   #####判斷有已經產生資料且是否全部未確認
   LET l_type = '0'
   LET ls_sql = "SELECT DISTINCT xmii005 FROM axmp171_xmii "
   PREPARE axmp171_process_pr1 FROM ls_sql
   DECLARE axmp171_process_cs1 CURSOR FOR axmp171_process_pr1
   FOREACH axmp171_process_cs1 INTO l_xmii005      
      IF SQLCA.sqlcode THEN
         CALL cl_err('foreach:',SQLCA.sqlcode,1)
         EXIT FOREACH
      END IF
      LET l_cnt = 0 
      LET ls_sql =  "  SELECT COUNT(*)  FROM xmih_t ",
                    "   WHERE xmihent = '",g_enterprise,"'", 
                    "     AND xmih001 = '",g_xmic_m.xmic001,"'", 
                    "     AND xmih002 = '",g_xmic_m.xmic002,"'",
                    "     AND xmih003 = ",l_xmii003,
                    "     AND xmihstus = 'N' ",      
                    "  START WITH xmih004 = '",l_xmii005,"'",
                    "  CONNECT BY PRIOR xmih005 = xmih004 "
      PREPARE axmp171_pre5 FROM ls_sql
      EXECUTE axmp171_pre5 INTO l_cnt 
      
      LET l_cnt2 = 0 
      LET ls_sql =  "  SELECT COUNT(*)  FROM xmih_t ",
                    "   WHERE xmihent = '",g_enterprise,"'", 
                    "     AND xmih001 = '",g_xmic_m.xmic001,"'", 
                    "     AND xmih002 = '",g_xmic_m.xmic002,"'",
                    "     AND xmih003 = ",l_xmii003,
                    "     AND xmihstus = 'Y' ",      
                    "  START WITH xmih004 = '",l_xmii005,"'",
                    "  CONNECT BY PRIOR xmih005 = xmih004 "
      PREPARE axmp171_pre2 FROM ls_sql
      EXECUTE axmp171_pre2 INTO l_cnt2   
      
      ##不存在汇总资料
      IF l_cnt = 0 AND l_cnt2 = 0 THEN 
         LET l_type = '0'
      END IF
      ##已存在汇总资料但未确认      
      IF l_cnt > 0 AND l_cnt2 = 0 THEN 
         LET l_type = '1'
      END IF
      ##已存在汇总资料且存在确认资料      
      IF l_cnt2 > 0 THEN 
         LET l_type = '2'
         EXIT FOREACH
      END IF 
    
   END FOREACH
   IF l_type = '1' THEN 
      IF NOT cl_ask_confirm('axm-00298') THEN
         RETURN
      ELSE
         LET ls_sql = "SELECT DISTINCT xmii005 FROM axmp171_xmii "
         PREPARE axmp171_process_pr2 FROM ls_sql
         DECLARE axmp171_process_cs2 CURSOR FOR axmp171_process_pr2
         FOREACH axmp171_process_cs2 INTO l_xmii005      
            IF SQLCA.sqlcode THEN
               CALL cl_err('foreach:',SQLCA.sqlcode,1)
               EXIT FOREACH
            END IF

            LET ls_sql = " DELETE FROM xmii_t ",
                         "  WHERE (xmiient,xmii001,xmii002,xmii003,xmii004) IN (",
                         "         SELECT xmihent,xmih001,xmih002,xmih003,xmih004 ",
                         "           FROM xmih_t ",
                         "          WHERE xmihent = '",g_enterprise,"'", 
                         "            AND xmih001 = '",g_xmic_m.xmic001,"'", 
                         "            AND xmih002 = '",g_xmic_m.xmic002,"'",
                         "            AND xmih003 = ",l_xmii003,
                         "            AND xmihstus = 'N' ",      
                         "         START WITH xmih004 = '",l_xmii005,"'",
                         "         CONNECT BY PRIOR xmih005 = xmih004  ) "
            PREPARE axmp171_pre4 FROM ls_sql
            EXECUTE axmp171_pre4  
            
            DELETE FROM xmii_t 
             WHERE xmiient = g_enterprise 
               AND xmii001 = g_xmic_m.xmic001 
               AND xmii002 = g_xmic_m.xmic002
               AND xmii003 = l_xmii003
               AND xmii005 = l_xmii005 
      
            LET ls_sql = " DELETE FROM xmih_t ",
                         "  WHERE (xmihent,xmih001,xmih002,xmih003,xmih004) IN (",
                         "         SELECT xmihent,xmih001,xmih002,xmih003,xmih004 ",
                         "           FROM xmih_t ",
                         "          WHERE xmihent = '",g_enterprise,"'", 
                         "            AND xmih001 = '",g_xmic_m.xmic001,"'", 
                         "            AND xmih002 = '",g_xmic_m.xmic002,"'",
                         "            AND xmih003 = ",l_xmii003,
                         "            AND xmihstus = 'N' ",      
                         "         START WITH xmih004 = '",l_xmii005,"'",
                         "         CONNECT BY PRIOR xmih005 = xmih004  ) "
            PREPARE axmp171_pre3 FROM ls_sql
            EXECUTE axmp171_pre3  

         END FOREACH      
      END IF     
   END IF
   IF l_type = '2' THEN 
      LET l_xmii003 = l_xmii003 + 1  
   END IF
   UPDATE axmp171_xmii
     SET xmii003 = l_xmii003
 
   
   LET g_stagecomplete = 20
   DISPLAY g_stagecomplete TO stagecomplete

   INSERT INTO xmii_t SELECT * FROM axmp171_xmii
   IF SQLCA.sqlcode THEN 
      LET l_success = FALSE
   END IF

   #汇总点资料INSERT
   LET l_over = FALSE
   
   #判斷是否存在上層組織不爲空的資料
   LET l_cnt = 0
   SELECT COUNT(*) INTO l_cnt FROM axmp171_xmii
    WHERE xmii005 <> ' '
   IF l_cnt = 0 THEN LET l_over = TRUE END IF 
   
   WHILE l_over = FALSE
   
      LET ls_sql = "SELECT DISTINCT xmii005 FROM axmp171_xmii WHERE xmii005 <> ' ' "
      PREPARE axmp171_process_pr3 FROM ls_sql
      DECLARE axmp171_process_cs3 CURSOR FOR axmp171_process_pr3
      FOREACH axmp171_process_cs3 INTO l_xmii005      
         IF SQLCA.sqlcode THEN
            CALL cl_err('foreach:',SQLCA.sqlcode,1)
            EXIT FOREACH
         END IF 
          
          

         CALL axmp171_get_xmii004(l_xmii005) RETURNING l_xmii005_new
         UPDATE axmp171_xmii 
            SET xmii004 = l_xmii005,
                xmii005 = l_xmii005_new
          WHERE xmii005 = l_xmii005         
         
         SELECT xmij004,xmij005,xmij006,xmij007,xmij008,xmij009,xmij010,xmij011
           INTO l_xmij004,l_xmij005,l_xmij006,l_xmij007,l_xmij008,l_xmij009,l_xmij010,l_xmij011
           FROM xmij_t
          WHERE xmijent = g_enterprise
            AND xmij001 = l_xmii005
            
         LET ls_sql = " SELECT xmiient,xmii001,xmii002,xmii003,xmii004,xmii005"
         LET l_group = " GROUP BY xmiient,xmii001,xmii002,xmii003,xmii004,xmii005"
         IF l_xmij004 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii006"
            LET l_group = l_group,",xmii006"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         
         LET ls_sql = ls_sql,",xmii007"
         LET l_group = l_group,",xmii007"
   
         IF l_xmij008 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii008"
            LET l_group = l_group,",xmii008"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         IF l_xmij010 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii009"
            LET l_group = l_group,",xmii009"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         IF l_xmij011 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii010"
            LET l_group = l_group,",xmii010"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         IF l_xmij009 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii011"
            LET l_group = l_group,",xmii011"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         IF l_xmij006 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii012"
            LET l_group = l_group,",xmii012"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF
         IF l_xmij007 = 'Y' THEN 
            LET ls_sql = ls_sql,",xmii013"
            LET l_group = l_group,",xmii013"
         ELSE
            LET ls_sql = ls_sql,",' '"      
         END IF    
         LET ls_sql = ls_sql," ,xmii014,xmii015,xmii016,xmii017,SUM(xmii018),SUM(xmii019),SUM(xmii020),",
                             "  DECODE(SUM(xmii018),0,0,SUM(xmii022)/SUM(xmii018)),SUM(xmii022),SUM(xmii023),SUM(xmii024)",
                             " FROM axmp171_xmii",
                             " WHERE xmii004 = '",l_xmii005,"'",l_group,",xmii014,xmii015,xmii016,xmii017"
         LET ls_sql = "INSERT INTO xmii_t ",ls_sql                    
         PREPARE ins_xmii2 FROM ls_sql
         EXECUTE ins_xmii2
         IF SQLCA.sqlcode THEN 
            LET l_success = FALSE
            EXIT FOREACH
         END IF
     END FOREACH
     LET l_date = cl_get_current()
     LET ls_sql = " SELECT DISTINCT '",g_enterprise,"',xmii001,xmii002,xmii003,xmii004,xmii005,",
                  " '",g_user,"','",g_dept,"','",g_user,"','",g_dept,"','','','','','','N' ",
                  "   FROM axmp171_xmii WHERE xmii004 <> xmii007 "
     LET ls_sql = "INSERT INTO xmih_t ",ls_sql                
     PREPARE ins_xmih FROM ls_sql              
     EXECUTE ins_xmih
     IF SQLCA.sqlcode THEN 
        LET l_success = FALSE
     END IF 
     UPDATE xmih_t 
        SET xmihcrtdt = l_date
      WHERE EXISTS(SELECT * FROM axmp171_xmii
                    WHERE xmiient = g_enterprise
                      AND xmihent = xmiient
                      AND xmih001 = xmii001
                      AND xmih002 = xmii002
                      AND xmih003 = xmii003
                      AND xmih004 = xmii004)       
     IF SQLCA.sqlcode THEN 
        LET l_success = FALSE
     END IF
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt FROM axmp171_xmii
       WHERE xmii005 <> ' '
      IF l_cnt = 0 THEN LET l_over = TRUE END IF  
   END WHILE


   LET g_stagecomplete = 100
   DISPLAY g_stagecomplete TO stagecomplete
      
   DROP TABLE axmp171_xmii
   IF l_success THEN 
      CALL s_transaction_end('Y','0')
   ELSE
      CALL s_transaction_end('N','0')
   END IF]]>
</point>
  <point name="ui_dialog.before_dialog" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[   LET g_xmic_m.xmic001 = ''
   LET g_xmic_m.xmic002 = '']]>
</point>
  <point name="ui_dialog.define" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[]]>
</point>
  <point name="ui_dialog.more_input" cite_std="N" status="" ver="1" src="s" new="N" order="" mark_hard="N">
<![CDATA[         INPUT BY NAME g_xmic_m.* ATTRIBUTE(WITHOUT DEFAULTS)
            BEFORE INPUT
                              
            AFTER FIELD xmic001
               IF NOT axmp171_xmic001_chk() THEN 
                  LET g_xmic_m.xmic001 = ''
                  NEXT FIELD CURRENT
               END IF
               IF NOT axmp171_xmic_exist() THEN 
                  LET g_xmic_m.xmic001 = ''
                  NEXT FIELD CURRENT
               END IF
            AFTER FIELD xmic002
               IF NOT axmp171_xmic_exist() THEN 
                  LET g_xmic_m.xmic002 = ''
                  NEXT FIELD CURRENT               
               END IF            
            ON ACTION controlp INFIELD xmic001
               INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'i'
               LET g_qryparam.reqry = FALSE
               LET g_qryparam.default1 = g_xmic_m.xmic001       #給予default值
               CALL q_xmic001()                                 #呼叫開窗
               LET g_xmic_m.xmic001 = g_qryparam.return1        #將開窗取得的值回傳到變數
               DISPLAY g_xmic_m.xmic001 TO xmic001              #顯示到畫面上
               NEXT FIELD xmic001                               #返回原欄位 
               
         END INPUT]]>
</point>
  <point name="global.memo" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.import" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.parameter" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.argv" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.servicecall" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.before_close" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.exit" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="init.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="init.init" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.more_construct" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.more_displayarray" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.qbe_select" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.more_action" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.exit_dialog" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="transfer.argv.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.pre_process" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.count_progress" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.foreground_finish" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <section id="axmp171.description" ver="92" status="" src="s">
<![CDATA[#+ Version..: T100-ERP-1.00.00(SD版次:1,PD版次:1) Build-000137
#+ 
#+ Filename...: axmp171
#+ Description: 集團預測匯總作業
#+ Creator....: 02295(2014/03/21)
#+ Modifier...: 02295(2014/05/07)
#+ Buildtype..: 應用 p01 樣板自動產生
#+ 以上段落由子樣板a00產生
]]>
</section>
  <section id="axmp171.global" ver="2" status="" src="s">
<![CDATA[{<point name="global.memo" />}
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   {<point name="global.parameter"/>}
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point
]]>
</section>
  <section id="axmp171.init" ver="3" status="" src="s">
<![CDATA[#+ 初始化作業
PRIVATE FUNCTION axmp171_init()
   #add-point:init段define
   {<point name="init.define"/>}
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
END FUNCTION
]]>
</section>
  <section id="axmp171.main" ver="2" status="" src="s">
<![CDATA[MAIN
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define
   {<point name="main.define"/>}
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axm","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   {<point name="main.background"/>}
   #end add-point
 
   IF g_bgjob = "Y" THEN
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
      CALL axmp171_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axmp171 WITH FORM cl_ap_formpath("axm",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL axmp171_init()
 
      #進入選單 Menu (="N")
      CALL axmp171_ui_dialog()
 
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axmp171
   END IF
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
]]>
</section>
  <section id="axmp171.other_function" ver="1" status="" src="s">
<![CDATA[#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
]]>
</section>
  <section id="axmp171.process" ver="1" status="" src="s">
<![CDATA[#+ 資料處理
PRIVATE FUNCTION axmp171_process(ls_js)
   DEFINE ls_js       STRING
   DEFINE lc_param    type_parameter
   DEFINE li_stus     LIKE type_t.num5
   DEFINE li_count    LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql      STRING             #主SQL
   #add-point:process段define
   {<point name="process.define"/>}
   #end add-point
 
   CALL util.JSON.parse(ls_js,lc_param)
 
   #add-point:process段前處理
   {<point name="process.pre_process"/>}
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      {<point name="process.count_progress"/>}
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE axmp171_process_cs CURSOR FROM ls_sql
#  FOREACH axmp171_process_cs INTO
   #add-point:process段process
   {<point name="process.process"/>}
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      {<point name="process.foreground_finish"/>}
      #end add-point
      CALL cl_ask_confirm("std-00012") RETURNING li_stus
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      {<point name="process.background_finish"/>}
      #end add-point
   END IF
END FUNCTION
]]>
</section>
  <section id="axmp171.transfer_argv" ver="1" status="" src="s">
<![CDATA[#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION axmp171_transfer_argv(ls_js)
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog     STRING,
             param    DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
 
   CALL util.JSON.parse(ls_js,la_param)
 
   LET la_cmdrun.prog = g_prog
   #add-point:transfer.argv段define
   {<point name="transfer.argv.define"/>}
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
]]>
</section>
  <section id="axmp171.ui_dialog" ver="7" status="" src="s">
<![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION axmp171_ui_dialog()
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num5
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define"/>}
   #end add-point
 
   #add-point:ui_dialog段before dialog
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
 
   WHILE TRUE
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #add-point:ui_dialog段construct
         {<point name="ui_dialog.more_construct"/>}
         #end add-point
         #add-point:ui_dialog段input
         {<point name="ui_dialog.more_input"/>}
         #end add-point
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               LET lc_param.wc = ls_wc
               #取得條件後需要執行項目,應新增於下方adp
               #add-point:ui_dialog段qbe_select後
               {<point name="ui_dialog.qbe_select"/>}
               #end add-point
            END IF
 
         ON ACTION qbe_save
            CALL cl_qbe_save()
 
         ON ACTION batch_execute
            ACCEPT DIALOG
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE lc_param.*  TO NULL
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION CLOSE 
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      #add-point:ui_dialog段exit dialog
      {<point name="process.exit_dialog"/>}
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         LET g_jobid = g_prog,TODAY USING "yyyymmdd",CURRENT HOUR TO SECOND 
         LET g_jobid = cl_schedule_trim_colon(g_jobid)
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL axmp171_process(ls_js)
            WHEN g_schedule.gzpa003 = "1"
                 CALL cl_schedule_update_data(g_jobid)
                 LET ls_js = axmp171_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid)
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid)
         END CASE    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
         INITIALIZE lc_param.*  TO NULL 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
]]>
</section>
</add_points>