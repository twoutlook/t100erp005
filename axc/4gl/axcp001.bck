#該程式未解開Section, 採用最新樣板產出!
{<section id="axcp001.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0009(2016-02-01 09:56:49), PR版次:0009(2016-10-21 15:15:32)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000034
#+ Filename...: axcp001
#+ Description: 成本統計檔生成批次(需售)
#+ Creator....: 02114(2016-02-01 09:36:53)
#+ Modifier...: 02114 -SD/PR- 02294
 
{</section>}
 
{<section id="axcp001.global" >}
#應用 p01 樣板自動產生(Version:18)
#add-point:填寫註解說明
#160509-00020#1  2016/05/10 By xianghui 客制段被搬到产品中了，需mark
#160512-00008#1  2016/05/13 By xianghui 根据当前的据点带出法人和帐别
#160512-00009#1  2016/05/13 By xianghui xckd新增资料重复
#160524-00006#1  2016/06/08 By xianghui 错误信息改成标准的命名
#160328-00022#2  2016/06/20 By 02097    增加進度條顯示
#160905-00007#3  2016/09/05 By zhujing 调整系统中无ENT的SQL条件增加ent
#161019-00017#4  2016/10/21 By lixiang  调整组织栏位的开窗
#end add-point
#add-point:填寫註解說明(客製用)

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目

#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
   DEFINE g_chk_jobid          LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
        dat              LIKE type_t.dat,
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
DEFINE g_wc              STRING
 
PRIVATE TYPE type_master RECORD
       xccksite LIKE xcck_t.xccksite, 
   xcckcomp LIKE xcck_t.xcckcomp, 
   xcckld LIKE xcck_t.xcckld, 
   xcck004 LIKE xcck_t.xcck004, 
   xcck005 LIKE xcck_t.xcck005, 
   xcck013 LIKE xcck_t.xcck013, 
   xcck012 LIKE xcck_t.xcck012, 
   xcck028 LIKE xcck_t.xcck028, 
   stagenow LIKE type_t.chr80,
       wc               STRING
       END RECORD
 
#模組變數(Module Variables)
DEFINE g_master type_master
 
#add-point:自定義模組變數(Module Variable)
DEFINE g_close    LIKE type_t.chr1
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)

#end add-point
 
#add-point:傳入參數說明

#end add-point
 
{</section>}
 
{<section id="axcp001.main" >}
MAIN
   #add-point:main段define (客製用)
   
   #end add-point 
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define 
   
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #add-point:初始化前定義
   
   #end add-point
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axc","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   
   #end add-point
 
   #背景(Y) 或半背景(T) 時不做主畫面開窗
   IF g_bgjob = "Y" OR g_bgjob = "T" THEN
      #排程參數由01開始，若不是1開始，表示有保留參數
      LET ls_js = g_argv[01]
     #CALL util.JSON.parse(ls_js,g_master)   #p類主要使用l_param,此處不解析
      #add-point:Service Call
      
      #end add-point
      CALL axcp001_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axcp001 WITH FORM cl_ap_formpath("axc",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL axcp001_init()
 
      #進入選單 Menu (="N")
      CALL axcp001_ui_dialog()
 
      #add-point:畫面關閉前
      
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axcp001
   END IF
 
   #add-point:作業離開前
   
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
{</section>}
 
{<section id="axcp001.init" >}
#+ 初始化作業
PRIVATE FUNCTION axcp001_init()
 
   #add-point:init段define (客製用)
   
   #end add-point
   #add-point:ui_dialog段define 
   
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="axcp001.ui_dialog" >}
#+ 選單功能實際執行處
PRIVATE FUNCTION axcp001_ui_dialog()
 
   #add-point:ui_dialog段define (客製用)
   
   #end add-point
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num10
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE l_dialog ui.DIALOG
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define 
   #160512-00008#1---add---begin
   DEFINE l_xckkcomp LIKE xcck_t.xcckcomp
   DEFINE l_xckkld LIKE xcck_t.xcckld
   DEFINE l_xckk003 LIKE xcck_t.xcck003
   DEFINE l_xckk004 LIKE xcck_t.xcck004
   DEFINE l_xckk002 LIKE xcck_t.xcck002
   #160512-00008#1---add---end
   #end add-point
   
   #add-point:ui_dialog段before dialog
   
   #end add-point
 
   WHILE TRUE
      #add-point:ui_dialog段before dialog2
      
      #end add-point
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         
         
         #應用 a58 樣板自動產生(Version:3)
         CONSTRUCT BY NAME g_master.wc ON xccksite,xcckcomp,xcckld,xcck004,xcck005,xcck013,xcck012,xcck028 
 
            BEFORE CONSTRUCT
               #add-point:cs段before_construct name="cs.head.before_construct"
               #160512-00008#1---add---begin
               CALL s_axc_set_site_default() RETURNING l_xckkcomp,l_xckkld,l_xckk003,l_xckk004,l_xckk002 
               DISPLAY l_xckkcomp TO xcckcomp
               DISPLAY l_xckkld TO xcckld 
               #160512-00008#1---add---end
               DISPLAY g_site TO xccksite
               DISPLAY g_today TO xcck013
               DISPLAY YEAR(g_today) TO xcck004
               DISPLAY MONTH(g_today) TO xcck005
               #end add-point 
         
            #公用欄位開窗相關處理
            
               
            #一般欄位開窗相關處理    
                     #Ctrlp:construct.c.xccksite
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xccksite
            #add-point:ON ACTION controlp INFIELD xccksite name="construct.c.xccksite"
            #應用 a08 樣板自動產生(Version:2)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            #CALL q_ooef001()                           #呼叫開窗   #161019-00017#4
            CALL q_ooef001_1()   #161019-00017#4
            DISPLAY g_qryparam.return1 TO xccksite  #顯示到畫面上
            NEXT FIELD xccksite                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xccksite
            #add-point:BEFORE FIELD xccksite name="construct.b.xccksite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xccksite
            
            #add-point:AFTER FIELD xccksite name="construct.a.xccksite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcckcomp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcckcomp
            #add-point:ON ACTION controlp INFIELD xcckcomp name="construct.c.xcckcomp"
            #應用 a08 樣板自動產生(Version:2)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            #CALL q_ooef001()                           #呼叫開窗   #161019-00017#4
            CALL q_ooef001_2()   #161019-00017#4
            DISPLAY g_qryparam.return1 TO xcckcomp  #顯示到畫面上 
            NEXT FIELD xcckcomp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcckcomp
            #add-point:BEFORE FIELD xcckcomp name="construct.b.xcckcomp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcckcomp
            
            #add-point:AFTER FIELD xcckcomp name="construct.a.xcckcomp"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcckld
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcckld
            #add-point:ON ACTION controlp INFIELD xcckld name="construct.c.xcckld"
            #應用 a08 樣板自動產生(Version:2)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_authorised_ld()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xcckld  #顯示到畫面上
            NEXT FIELD xcckld                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcckld
            #add-point:BEFORE FIELD xcckld name="construct.b.xcckld"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcckld
            
            #add-point:AFTER FIELD xcckld name="construct.a.xcckld"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcck004
            #add-point:BEFORE FIELD xcck004 name="construct.b.xcck004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcck004
            
            #add-point:AFTER FIELD xcck004 name="construct.a.xcck004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcck004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcck004
            #add-point:ON ACTION controlp INFIELD xcck004 name="construct.c.xcck004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcck005
            #add-point:BEFORE FIELD xcck005 name="construct.b.xcck005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcck005
            
            #add-point:AFTER FIELD xcck005 name="construct.a.xcck005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcck005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcck005
            #add-point:ON ACTION controlp INFIELD xcck005 name="construct.c.xcck005"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcck013
            #add-point:BEFORE FIELD xcck013 name="construct.b.xcck013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcck013
            
            #add-point:AFTER FIELD xcck013 name="construct.a.xcck013"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcck013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcck013
            #add-point:ON ACTION controlp INFIELD xcck013 name="construct.c.xcck013"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcck012
            #add-point:BEFORE FIELD xcck012 name="construct.b.xcck012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcck012
            
            #add-point:AFTER FIELD xcck012 name="construct.a.xcck012"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.xcck012
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcck012
            #add-point:ON ACTION controlp INFIELD xcck012 name="construct.c.xcck012"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_xcck012_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xcck012  #顯示到畫面上
            NEXT FIELD xcck012
            #END add-point
 
 
         #Ctrlp:construct.c.xcck028
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD xcck028
            #add-point:ON ACTION controlp INFIELD xcck028 name="construct.c.xcck028"
            #應用 a08 樣板自動產生(Version:2)
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c' 
            LET g_qryparam.reqry = FALSE
            CALL q_rtax001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO xcck028  #顯示到畫面上
            NEXT FIELD xcck028                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD xcck028
            #add-point:BEFORE FIELD xcck028 name="construct.b.xcck028"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD xcck028
            
            #add-point:AFTER FIELD xcck028 name="construct.a.xcck028"
            
            #END add-point
            
 
 
 
            
            #add-point:其他管控 name="cs.other"
            
            #end add-point
            
         END CONSTRUCT
 
 
 
      
         #add-point:ui_dialog段construct
         
         #end add-point
         #add-point:ui_dialog段input
         
         #end add-point
         #add-point:ui_dialog段自定義display array
         
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         BEFORE DIALOG
            LET l_dialog = ui.DIALOG.getCurrent()
            CALL axcp001_get_buffer(l_dialog)
            #add-point:ui_dialog段before dialog
            
            #end add-point
 
         ON ACTION batch_execute
            LET g_action_choice = "batch_execute"
            ACCEPT DIALOG
 
         #add-point:ui_dialog段before_qbeclear
         
         #end add-point
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE g_master.* TO NULL   #畫面變數清空
            INITIALIZE lc_param.* TO NULL   #傳遞參數變數清空
            #add-point:ui_dialog段qbeclear
            
            #end add-point
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION close
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         
         #end add-point
 
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM   
         INITIALIZE g_master.* TO NULL
         LET g_wc  = ' 1=2'
         LET g_action_choice = ""
         CALL axcp001_init()
         CONTINUE WHILE
      END IF
 
      #檢查批次設定是否有錯(或未設定完成)
      IF NOT cl_schedule_exec_check() THEN
         CONTINUE WHILE
      END IF
      
      LET lc_param.wc = g_master.wc    #把畫面上的wc傳遞到參數變數
      #請在下方的add-point內進行把畫面的輸入資料(g_master)轉換到傳遞參數變數(lc_param)的動作
      #add-point:ui_dialog段exit dialog
      
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)  #r類使用g_master/p類使用lc_param
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         IF g_chk_jobid THEN 
            LET g_jobid = g_schedule.gzpa001
         ELSE 
            LET g_jobid = cl_schedule_get_jobid(g_prog)
         END IF 
 
         #依照指定模式執行報表列印
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL axcp001_process(ls_js)
 
            WHEN g_schedule.gzpa003 = "1"
                 LET ls_js = axcp001_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
 
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
 
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
         END CASE  
 
         IF g_schedule.gzpa003 = "2" OR g_schedule.gzpa003 = "3" THEN 
            CALL cl_ask_confirm3("std-00014","") #設定完成
         END IF    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
 
         #add-point:ui_dialog段after schedule
         
         #end add-point
 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
 
{</section>}
 
{<section id="axcp001.transfer_argv" >}
#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION axcp001_transfer_argv(ls_js)
 
   #add-point:transfer_agrv段define (客製用)
   
   #end add-point
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog       STRING,
             actionid   STRING,
             background LIKE type_t.chr1,
             param      DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
   #add-point:transfer_agrv段define 
   
   #end add-point
 
   LET la_cmdrun.prog = g_prog
   LET la_cmdrun.background = "Y"
   LET la_cmdrun.param[1] = ls_js
 
   #add-point:transfer.argv段程式內容
   
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
 
{</section>}
 
{<section id="axcp001.process" >}
#+ 資料處理   (r類使用g_master為主處理/p類使用l_param為主)
PRIVATE FUNCTION axcp001_process(ls_js)
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE ls_js         STRING
   DEFINE lc_param      type_parameter
   DEFINE li_stus       LIKE type_t.num5
   DEFINE li_count      LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql        STRING             #主SQL
   DEFINE li_p01_status LIKE type_t.num5
   #add-point:process段define 
   DEFINE l_sql,l_sql2      STRING
   DEFINE l_wc,l_wc2 STRING
   DEFINE l_cnt,l_cnt2      LIKE type_t.num10
   DEFINE l_string      LIKE type_t.chr500#160328-00022#2
   DEFINE l_i           LIKE type_t.num5  #160328-00022#2
   DEFINE l_bar_cnt1    LIKE type_t.num5  #160328-00022#2
   DEFINE l_bar_cnt2    LIKE type_t.num5  #160328-00022#2
   #end add-point
 
  #INITIALIZE lc_param TO NULL           #p類不可以清空
   CALL util.JSON.parse(ls_js,lc_param)  #r類作業被t類呼叫時使用, p類主要解開參數處
   LET li_p01_status = 1
 
  #IF lc_param.wc IS NOT NULL THEN
  #   LET g_bgjob = "T"       #特殊情況,此為t類作業鬆耦合串入報表主程式使用
  #END IF
 
   #add-point:process段前處理
   IF cl_null(lc_param.wc) THEN
      LET lc_param.wc = " 1=1"
   END IF
   
   #如果是背景作业，则跑前一天的数据
   IF g_bgjob='Y' THEN
      LET lc_param.wc = lc_param.wc," AND xcck013 = '",lc_param.dat,"' "
   END IF
   
   LET l_wc = cl_replace_str(lc_param.wc,'xccksite','xckdsite')    #营运组织
   LET l_wc = cl_replace_str(l_wc,'xcckcomp','xckdcomp')           #法人
   LET l_wc = cl_replace_str(l_wc,'xcckld','xckdld')               #帐套
   LET l_wc = cl_replace_str(l_wc,'xcck004','xckd004')             #年度
   LET l_wc = cl_replace_str(l_wc,'xcck005','xckd005')             #期别
   LET l_wc = cl_replace_str(l_wc,'xcck012','xckd007')             #单据类型
   LET l_wc = cl_replace_str(l_wc,'xcck028','xckd014')             #品类
   LET l_wc = cl_replace_str(l_wc,'xcck013','xckd008')             #单据日期
   
   
   #160509-00020#1---mark---begin
   #LET l_wc2 = cl_replace_str(lc_param.wc,'xccksite','xcclucsite')    #营运组织
   #LET l_wc2 = cl_replace_str(l_wc2,'xcckcomp','xccluccomp')           #法人
   #LET l_wc2 = cl_replace_str(l_wc2,'xcckld','xcclucld')               #帐套
   #LET l_wc2 = cl_replace_str(l_wc2,'xcck004','xccluc004')             #年度
   #LET l_wc2 = cl_replace_str(l_wc2,'xcck005','xccluc005')             #期别
   #LET l_wc2 = cl_replace_str(l_wc2,'xcck012','xccluc008')             #单据类型
   #LET l_wc2 = cl_replace_str(l_wc2,'xcck028','xccluc010')             #品类
   #LET l_wc2 = cl_replace_str(l_wc2,'xcck013','xccluc009')             #单据日期
   #160509-00020#1---mark---end
   LET l_cnt = 0 
   LET l_sql = "SELECT COUNT(*) FROM xckd_t WHERE xckd019='Y' AND ",l_wc    #立账否
   LET l_sql = l_sql CLIPPED," AND xckdent = ",g_enterprise #160905-00007#3 add
   LET l_sql2 = "SELECT COUNT(*) FROM xckd_t WHERE xckd022 = 'Y' AND ",l_wc
   LET l_sql2 = l_sql2 CLIPPED," AND xckdent = ",g_enterprise #160905-00007#3 add
  
   PREPARE cxcp001_chk_xckd_pre FROM l_sql
   EXECUTE cxcp001_chk_xckd_pre INTO l_cnt
   PREPARE cxcp001_chk_xckd_pre2 FROM l_sql2    
   EXECUTE cxcp001_chk_xckd_pre2 INTO l_cnt2     
   IF l_cnt>0 OR l_cnt2 >0 THEN  #立账否、立账否2 任一已立账都不可重产   
      INITIALIZE g_errparam TO NULL
      #LET g_errparam.code = "cxc-00001"    #160524-00006#1 mark
      LET g_errparam.code = "axc-00763"     #160524-00006#1 add
      LET g_errparam.extend = ""
      LET g_errparam.popup = TRUE
      CALL cl_err()
      RETURN
   END IF
   
   LET g_success = 'Y'
   #錯誤訊息匯總初始化
   CALL cl_err_collect_init()
   CALL s_transaction_begin()  #开始事务
   LET l_bar_cnt1 = 4                              #160328-00022#2
   LET l_bar_cnt2 = l_bar_cnt1                     #160328-00022#2
   CALL cl_progress_bar_no_window(l_bar_cnt1)      #160328-00022#2
   #删除xckd
   IF g_success='Y' THEN
      LET l_sql = "DELETE FROM xckd_t WHERE xckdent = ",g_enterprise," AND ",l_wc
      TRY
         EXECUTE IMMEDIATE l_sql
      CATCH
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "delete xckd:"
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET g_success = 'N'
         END IF
      END TRY
      #160328-00022#1--(S)
      LET l_bar_cnt2 = l_bar_cnt2 - 1              
      SELECT gzze003 INTO l_string FROM gzze_t
       WHERE gzze001 = 'axc-00768' AND gzze002 = g_dlang
      CALL cl_progress_no_window_ing(l_string)
      #160328-00022#1--(E)
   END IF

   #产生xckd
   IF g_success='Y' THEN
      LET l_sql = " MERGE INTO (SELECT xckdent,xckdsite,xckdcomp,xckdld,xckd001, ",
                  "                    xckd002,xckd003,xckd004,xckd005,xckd006, ",
                  "                    xckd007,xckd008,xckd009,xckd010,xckd011, ",
                  "                    xckd012,xckd013,xckd014,xckd015,xckd016,",
                  "                    xckd017,xckd018,xckd019,xckd020,xckd021,xckd022 ",
                  "               FROM xckd_t WHERE xckdent=",g_enterprise," AND ",l_wc,") a ",
                  " USING (SELECT xcckent,xccksite,xcckcomp,xcckld,xcck001,xcck002,xcck003,xcck004,xcck005, ",
                  #160512-00009#1---mod---begin
                  #"               xcck009,xcck012,xcck013,xcck015,xcck016,xcck020,xcck021,xcck026,xcck028, ",    
                  #"               xcck055,SUM(xcck201) AS xcck201,SUM(xcck202) AS xcck202,SUM(xcck202a) AS xcck202a,xcck025,inba004 ",
                  "               (CASE WHEN SUM(xcck009*xcck201)>=0 THEN '1' ElSE '-1' END) xcck009,xcck012,xcck013,xcck015,xcck016,xcck020,xcck021,xcck026,xcck028, ",
                  "               xcck055,ABS(SUM(xcck009*xcck201)) AS xcck201,(SUM(xcck009*xcck202)*-1) AS xcck202,(SUM(xcck009*xcck202a)*-1) AS xcck202a,xcck025,'' ",     #160509-00004#113 change inba004 to ''
                  "          FROM xcck_t LEFT JOIN inba_t ON inbaent = xcckent AND inbadocno = xcck006 ",
                  "         WHERE xcckent = ",g_enterprise," AND ",lc_param.wc,
                  "            AND (xcck201 <> 0 OR xcck202<>0) ",
                  "         GROUP BY xcckent,xccksite,xcckcomp,xcckld,xcck001,xcck002,xcck003,xcck004,xcck005, ",
                  #"                  xcck009,xcck012,xcck013,xcck015,xcck016,xcck020,xcck021,xcck026,xcck028, ",
                  "                  xcck012,xcck013,xcck015,xcck016,xcck020,xcck021,xcck026,xcck028, ",
                  "                  xcck055,xcck025,'') b ",    #160509-00004#113 change inba004 to ''
                  #160512-00009#1---mod---end
                  "    ON (1=2) ",
                  "  WHEN NOT MATCHED THEN ",
                  "       INSERT VALUES(b.xcckent,b.xccksite,b.xcckcomp,b.xcckld,b.xcck001, ",
                  "                     b.xcck002,b.xcck003,b.xcck004,b.xcck005,b.xcck009, ",
                  "                     b.xcck012,b.xcck013,b.xcck015,b.xcck016,b.xcck020, ",
                  "                     b.xcck021,b.xcck026,b.xcck028, b.xcck055,b.xcck201, ",
                  "                     b.xcck202,b.xcck202a,'N',b.xcck025,'','N') "      #160509-00004#113 change b.inba004 to ''

      TRY
         EXECUTE IMMEDIATE l_sql
      CATCH
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "ins xckd:"
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET g_success = 'N'
         END IF
      END TRY
      LET l_bar_cnt2 = l_bar_cnt2 - 1              #160328-00022#2
      SELECT gzze003 INTO l_string FROM gzze_t
       WHERE gzze001 = 'axc-00769' AND gzze002 = g_dlang
      CALL cl_progress_no_window_ing(l_string)     #160328-00022#2
   END IF
   
   #删除xckd017，xckd018为0的数据  
   IF g_success='Y' THEN
      LET l_sql = "DELETE FROM xckd_t WHERE xckdent = ",g_enterprise," AND xckd017=0 AND xckd018=0 "
      TRY
         EXECUTE IMMEDIATE l_sql
      CATCH
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "delete xckd:"
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET g_success = 'N'
         END IF
      END TRY
      #160328-00022#2--(S)
      LET l_bar_cnt2 = l_bar_cnt2 - 1
      SELECT gzze003 INTO l_string FROM gzze_t
       WHERE gzze001 = 'axc-00770' AND gzze002 = g_dlang
      CALL cl_progress_no_window_ing(l_string)
      #160328-00022#2--(E)
   END IF
   #160328-00022#1--(S)
   IF l_bar_cnt2 > 0 THEN
      FOR l_i = l_bar_cnt2 TO l_bar_cnt1 
         CALL cl_progress_no_window_ing(' ')
      END FOR
   ELSE
      LET l_bar_cnt2 = l_bar_cnt2 - 1
      SELECT gzze003 INTO l_string FROM gzze_t
       WHERE gzze001 = 'azz-00322' AND gzze002 = g_dlang
      CALL cl_progress_no_window_ing(l_string)
   END IF
   #160328-00022#1--(E)
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE axcp001_process_cs CURSOR FROM ls_sql
#  FOREACH axcp001_process_cs INTO
   #add-point:process段process
   
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      IF g_success='Y' THEN
         CALL s_transaction_end('Y',0)  #事务结束
         IF NOT cl_ask_end2('1') THEN #產生成功，是否繼續
            LET g_close = 'Y'  #关闭作业
            RETURN
         END IF
      ELSE
         CALL s_transaction_end('N',0)  #事务结束
         CALL cl_err_collect_show()
         IF NOT cl_ask_end2('2') THEN #產生成功，是否繼續
            LET g_close = 'Y'  #关闭作业
            RETURN
         END IF
      END IF
      #end add-point
      CALL cl_ask_confirm3("std-00012","")
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      
      #end add-point
      CALL cl_schedule_exec_call(li_p01_status)
   END IF
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL axcp001_msgcentre_notify()
 
END FUNCTION
 
{</section>}
 
{<section id="axcp001.get_buffer" >}
PRIVATE FUNCTION axcp001_get_buffer(p_dialog)
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE p_dialog   ui.DIALOG
   #add-point:process段define
   
   #end add-point
 
   
 
   CALL cl_schedule_get_buffer(p_dialog)
 
   #add-point:get_buffer段其他欄位處理
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="axcp001.msgcentre_notify" >}
PRIVATE FUNCTION axcp001_msgcentre_notify()
 
   #add-point:process段define (客製用)
   
   #end add-point
   DEFINE lc_state LIKE type_t.chr5
   #add-point:process段define
   
   #end add-point
 
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = "process"
 
   #add-point:msgcentre其他通知
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
{</section>}
 
{<section id="axcp001.other_function" readonly="Y" >}
#add-point:自定義元件(Function)

#end add-point
 
{</section>}
 
