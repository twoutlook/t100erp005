<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="axcp201" std_prog="axcp201" erpver="1.0" module="AXC" ver="3" env="s" zone="t10prd" booking="Y" type="M" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="P" status=""/>
    <free_style value="N" status=""/>
    <start_arg value="" status=""/>
  </other>
  <point name="function.axcp201_gen" order="1" ver="3" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 删除，再产生下一步使用的成本资料
# Memo...........:
# Usage..........: CALL axcp201_gen()
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: r_success      回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 2014/07/31 By wujie
# Modify.........: 因为集中情况的处理逻辑除了table有差异，别的完全一样，所以只写一个公用的函数
################################################################################
PRIVATE FUNCTION axcp201_gen()
   DEFINE r_success         LIKE type_t.num5
   DEFINE g_time1           DATETIME YEAR TO SECOND
   DEFINE l_flag1           LIKE type_t.chr1
   DEFINE l_errno           LIKE type_t.chr100
   DEFINE l_glav002         LIKE glav_t.glav002
   DEFINE l_glav005         LIKE glav_t.glav005
   DEFINE l_bdate           LIKE glav_t.glav004 #起始年度+期別對應的起始截止日期
   DEFINE l_edate           LIKE glav_t.glav004
   DEFINE l_sdate_s         LIKE glav_t.glav004
   DEFINE l_sdate_e         LIKE glav_t.glav004
   DEFINE l_glav006         LIKE glav_t.glav006
   DEFINE l_glav007         LIKE glav_t.glav007
   DEFINE l_wdate_s         LIKE glav_t.glav004
   DEFINE l_wdate_e         LIKE glav_t.glav004
   DEFINE l_glaa003         LIKE glaa_t.glaa003



   WHENEVER ERROR CONTINUE
   LET r_success = TRUE
   LET g_time1 = cl_get_current()
   #检查是否在事务中
   IF NOT s_transaction_chk('Y',1) THEN
      LET r_success = FALSE
      RETURN r_success
   END IF

#1:删除旧资料
#      删除条件：帐套+成本计算类型+年度+期别
   LET g_sql = "DELETE FROM xcbj_t",
               " WHERE xcbjent = '",g_enterprise,"'",
               "   AND xcbjld  = '",g_master.xcbjld,"'",
               "   AND xcbj001 = '",g_master.xcbj001,"'",
               "   AND xcbj002 = '",g_master.xcbj002,"'",
               "   AND xcbj003 = '",g_master.xcbj003,"'"

   PREPARE axcp201_del_pb FROM g_sql 

   EXECUTE axcp201_del_pb
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'DELETE xcbj FILE'
      LET g_errparam.popup  = FALSE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF
   
   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素
      CALL axcp201_replace_sql()
      PREPARE axcp201_del_pb1 FROM g_sql 
      
      EXECUTE axcp201_del_pb1
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'DELETE xcdr FILE'
         LET g_errparam.popup  = FALSE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
   END IF
   CALL cl_progress_no_window_ing("delete original file")               
#2:抓取费用金额
#      抓取条件：集团+帐套+年度+期别
#      分组条件：集团+帐套+年度+期别+成本中心+成本主（次）要素(费用分类)+分摊方式
#      抓取来源：“人工制费收集作业axct201”，档案为xcbl_t
#      抓取对象：抓取分摊成本SUM(xcbl100\xcbl110\xcbl120)
#      存入对象：存入费用总额(三个费用总额以xcbj为例：xcbj101\xcbj111\xcbj121)
   LET g_sql1= " SELECT xcblent,xcblld,xcbl001,xcbl002,xcbl003,xcbl004,xcbl005,SUM(xcbl100) xcbl100,SUM(xcbl110) xcbl110,SUM(xcbl120) xcbl120 ",
               "   FROM xcbl_t ",
               "  WHERE xcblent = '",g_enterprise,"'",
               "    AND xcblld  = '",g_master.xcbjld,"'",
               "    AND xcbl002 = '",g_master.xcbj002,"'",
               "    AND xcbl003 = '",g_master.xcbj003,"'",
               "  GROUP BY xcblent,xcblld,xcbl001,xcbl002,xcbl003,xcbl004,xcbl005 "               
#更新的sql分两段写，为了debug方便，可以直接拿上端的sql来检查是否能查到资料，分两段写对最后sql执行效率没影响               
   LET g_sql1= " MERGE INTO  axcp201_xcbj_tmp T1 ",
               " USING (",g_sql1,") T2 ",
               "    ON (T1.xcbjent = T2.xcblent AND T1.xcbjld = T2.xcblld ",
               "        AND T1.xcbj005 = T2.xcbl001 AND T1.xcbj002 = T2.xcbl002 ",
               "        AND T1.xcbj003 = T2.xcbl003 AND T1.xcbj004  = T2.xcbl004 ",
               "        AND T1.xcbj006 = T2.xcbl005 ) ",
               " WHEN MATCHED THEN UPDATE SET T1.xcbj101 = T2.xcbl100,",  #正常不该走进这里，因为前面删除了xcbj了！
               "                              T1.xcbj111 = T2.xcbl110,",
               "                              T1.xcbj121 = T2.xcbl120 ",
               " WHEN NOT MATCHED THEN INSERT VALUES(T2.xcblent,'",g_master.xcbjcomp,"',T2.xcblld,'",g_master.xcbj001,"',",
               "                                     T2.xcbl002,T2.xcbl003,T2.xcbl004,T2.xcbl001,T2.xcbl005,2,' ',",                 #截止为会计科目栏位，写这个是为了便于分辨插入栏位的对应位置，不然从头数起太累了
               "                                     0,0,T2.xcbl100,0,0,0,0,T2.xcbl110,0,0,0,0,T2.xcbl120,0,0,0,0 "     #从分摊基础指标总和到单位成本栏位，共17个
               
   LET g_sql = g_sql1,",'",g_user,"','",g_dept,"','",g_user,"','",g_dept,"','",g_today,"','','','N',",
               "'','','','','',",   #追加自定义栏位
               "'','','','','',",
               "'','','','','',",
               "'','','','','',",
               "'','','','','',",
               "'','','','',''",
               ")"

   PREPARE axcp201_merge_pb FROM g_sql 

   EXECUTE axcp201_merge_pb
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD COST xcbj'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF
   UPDATE axcp201_xcbj_tmp SET xcbj005 = ' ' WHERE xcbj005 IS NULL   #预防万一传入null的成本要素   
   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      LET g_sql = g_sql1,               
               ",'','','','','',",   #追加自定义栏位
               "'','','','','',",
               "'','','','','',",
               "'','','','','',",
               "'','','','','',",
               "'','','','',''",
               ")"
      CALL axcp201_replace_sql()
      PREPARE axcp201_merge_pb1 FROM g_sql 
      
      EXECUTE axcp201_merge_pb1
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD COST xcdr'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      UPDATE axcp201_xcdr_tmp SET xcdr005 = ' ' WHERE xcdr005 IS NULL   #预防万一传入null的成本要素
   END IF
   CALL cl_progress_no_window_ing("get tmp file")
#3:抓取分摊指标数
#      抓取条件：集团+法人+年度+期别(与日期xcbh001对应)+成本中心（与xcbj关联时需要）
#      分组条件：集团+法人+成本中心
#      抓取来源：axct200工时收集档(xcbh_t/xcbi_t)/axct203工时收集档(xcbq_t/xcbr_t)
#      抓取对象：实际工时sum(xcbi201)/机时sum(xcbi202)和标准工时sum(xcbi203)/机时(xcbi204)
#      存入对象：  如果"分摊方式xcbj006"="实际工时"，则分摊基础指标总数xcbj020=实际工时SUM（xcbi201）
#                 如果"分摊方式xcbj006"="实际机时"，则分摊基础指标总数xcbj020=实际机时SUM（xcbi202）
#                 如果"分摊方式xcbj006"="标准工时"，则分摊基础指标总数xcbj020=标准工时SUM（xcbi203）
#                 如果"分摊方式xcbj006"="标准机时"，则分摊基础指标总数xcbj020=标准机时SUM（xcbi204）
#                 如果"分摊方式xcbj006"="实际工时"，则标准产能xcbj021=标准工时SUM（xcbi203）
#                 如果"分摊方式xcbj006"="标准工时"，则标准产能xcbj021=标准工时SUM（xcbi203)
#                 如果"分摊方式xcbj006"="实际机时"，则标准产能xcbj021=标准工时SUM（xcbi204)
#                 如果"分摊方式xcbj006"="标准机时"，则标准产能xcbj021=标准工时SUM（xcbi204)

#抓出会计周期参考表号  glaa003
   SELECT glaa003 INTO l_glaa003
     FROM glaa_t
    WHERE glaaent  = g_enterprise
      AND glaacomp = g_master.xcbjcomp
      AND glaa014  = 'Y'  
#取得画面上年期的开始截止日期
   CALL s_get_accdate(l_glaa003,'',g_master.xcbj002,g_master.xcbj003)
     RETURNING l_flag1,l_errno,l_glav002,l_glav005,l_sdate_s,l_sdate_e,
               l_glav006,l_bdate,l_edate,l_glav007,l_wdate_s,l_wdate_e
   IF l_flag1='N' THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = l_errno
      LET g_errparam.extend = 'get bdate/edate'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
      RETURN r_success
   END IF 

   
   LET g_sql1 = " SELECT xcbient,xcbicomp,xcbi001,SUM(xcbi201) xcbi201,SUM(xcbi202) xcbi202,SUM(xcbi203) xcbi203,SUM(xcbi204) xcbi204 ",
               "   FROM xcbh_t,xcbi_t ",
               "  WHERE xcbhent   = xcbient ",
               "    AND xcbhdocno = xcbidocno ",
               "    AND xcbhstus  = 'Y' ",
               "    AND xcbient   = '",g_enterprise,"'",
               "    AND xcbicomp  = '",g_master.xcbjcomp,"'",
               "    AND xcbh001 BETWEEN '",l_bdate,"' AND '",l_edate,"'",
               "  GROUP BY xcbient,xcbicomp,xcbi001 "

#实际工时 xcbj006 = 1
   LET g_sql = " MERGE INTO  axcp201_xcbj_tmp T1 ",
               " USING (",g_sql1,") T2 ",
               "    ON (T1.xcbjent = T2.xcbient ",#AND T1.xcbjld = T2.xcblld ",
               "        AND T1.xcbjcomp = T2.xcbicomp AND T1.xcbj004 = T2.xcbi001 ",
               "        AND T1.xcbj002 = '",g_master.xcbj002,"' AND T1.xcbj003  = '",g_master.xcbj003,"' )",
               " WHEN MATCHED THEN UPDATE SET T1.xcbj020 = T2.xcbi201,T1.xcbj021 = T2.xcbi203",  
               "                    WHERE T1.xcbj006 = '1' "  

   
   PREPARE axcp201_merge_pb2 FROM g_sql 

   EXECUTE axcp201_merge_pb2
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj020/xcbj021'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF 

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时        
      CALL axcp201_replace_sql()
      
      PREPARE axcp201_merge_pb3 FROM g_sql 
      
      EXECUTE axcp201_merge_pb3
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD xcdr020/xcdr021'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF    
   END IF
#标准工时 xcbj006 = 2  
   LET g_sql = " MERGE INTO  axcp201_xcbj_tmp T1 ",
               " USING (",g_sql1,") T2 ",
               "    ON (T1.xcbjent = T2.xcbient ",#AND T1.xcbjld = T2.xcblld ",
               "        AND T1.xcbjcomp = T2.xcbicomp AND T1.xcbj004 = T2.xcbi001 ",
               "        AND T1.xcbj002 = '",g_master.xcbj002,"' AND T1.xcbj003  = '",g_master.xcbj003,"' )",
               " WHEN MATCHED THEN UPDATE SET T1.xcbj020 = T2.xcbi203,T1.xcbj021 = T2.xcbi203",  
               "                    WHERE T1.xcbj006 = '2' "  

   PREPARE axcp201_merge_pb4 FROM g_sql 

   EXECUTE axcp201_merge_pb4
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj020/xcbj021'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF 

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      CALL axcp201_replace_sql()
      PREPARE axcp201_merge_pb5 FROM g_sql 
      
      EXECUTE axcp201_merge_pb5
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD xcdr020/xcdr021'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF   
   END IF
#标准机时 xcbj006 = 3 
   LET g_sql = " MERGE INTO  axcp201_xcbj_tmp T1 ",
               " USING (",g_sql1,") T2 ",
               "    ON (T1.xcbjent = T2.xcbient ",#AND T1.xcbjld = T2.xcblld ",
               "        AND T1.xcbjcomp = T2.xcbicomp AND T1.xcbj004 = T2.xcbi001 ",
               "        AND T1.xcbj002 = '",g_master.xcbj002,"' AND T1.xcbj003  = '",g_master.xcbj003,"' )",
               " WHEN MATCHED THEN UPDATE SET T1.xcbj020 = T2.xcbi204,T1.xcbj021 = T2.xcbi204",  
               "                    WHERE T1.xcbj006 = '3' "  
  
   PREPARE axcp201_merge_pb6 FROM g_sql 

   EXECUTE axcp201_merge_pb6
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj020/xcbj021'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF 

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      CALL axcp201_replace_sql()
      PREPARE axcp201_merge_pb7 FROM g_sql 
      
      EXECUTE axcp201_merge_pb7
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD xcdr020/xcdr021'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF 
   END IF
#实际机时 xcbj006 = 5 
   LET g_sql = " MERGE INTO  axcp201_xcbj_tmp T1 ",
               " USING (",g_sql1,") T2 ",
               "    ON (T1.xcbjent = T2.xcbient ",#AND T1.xcbjld = T2.xcblld ",
               "        AND T1.xcbjcomp = T2.xcbicomp AND T1.xcbj004 = T2.xcbi001 ",
               "        AND T1.xcbj002 = '",g_master.xcbj002,"' AND T1.xcbj003  = '",g_master.xcbj003,"' )",
               " WHEN MATCHED THEN UPDATE SET T1.xcbj020 = T2.xcbi202,T1.xcbj021 = T2.xcbi204",  
               "                    WHERE T1.xcbj006 = '5' "  
   
   PREPARE axcp201_merge_pb8 FROM g_sql 

   EXECUTE axcp201_merge_pb8
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj020/xcbj021'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF 
   
   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      CALL axcp201_replace_sql()
      PREPARE axcp201_merge_pb9 FROM g_sql 
      
      EXECUTE axcp201_merge_pb9
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD xcdr020/xcdr021'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF   
   END IF
   CALL cl_progress_no_window_ing("upd tmp file")

#4:计算分摊费用和单位成本
#固定费用（已在步骤2更新）
#闲置费用=0 同上

#分摊金额(xcbj103/xcbj113/xcbj123)=费用总额(xcbj101/xcbj111/xcbj121)-闲置费用(xcbj104/xcbj114/xcbj124)
   LET g_sql = " UPDATE axcp201_xcbj_tmp SET xcbj103 = xcbj101-xcbj104,xcbj113 = xcbj111-xcbj114,xcbj123 = xcbj121-xcbj124 "

   PREPARE axcp201_upd_pb4 FROM g_sql 

   EXECUTE axcp201_upd_pb4
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj103/xcbj113/xcbj123'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF 
   
   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
     CALL axcp201_replace_sql()
     PREPARE axcp201_upd_pb5 FROM g_sql 

     EXECUTE axcp201_upd_pb5
   
    IF SQLCA.sqlcode THEN
       INITIALIZE g_errparam TO NULL
       LET g_errparam.code = SQLCA.sqlcode
       LET g_errparam.extend = 'UPD xcdr103/xcdr113/xcdr123'
       LET g_errparam.popup  = TRUE
       CALL cl_err()
       LET r_success = FALSE
       RETURN r_success
    END IF   
   END IF
#单位成本(xcbj105/xcbj115/xcbj125)=分摊金额(xcbj104/xcbj114/xcbj124)/分摊基础指标总数(xcbj020)
   LET g_sql = " UPDATE axcp201_xcbj_tmp SET xcbj105 = xcbj103/xcbj020,xcbj115 = xcbj113/xcbj020,xcbj125 = xcbj123/xcbj020 ",
               "  WHERE xcbj020 <> 0 "   #因为0不能做分母，xcbj020 = 0 的那些资料，默认已经处理成本单位= 0 了，所以这里排除也不影响

   PREPARE axcp201_upd_pb6 FROM g_sql 

   EXECUTE axcp201_upd_pb6
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'UPD xcbj105/xcbj115/xcbj125'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      CALL axcp201_replace_sql()
      PREPARE axcp201_upd_pb7 FROM g_sql 
      
      EXECUTE axcp201_upd_pb7
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'UPD xcdr105/xcdr115/xcdr125'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF   
   END IF
   CALL cl_progress_no_window_ing("upd tmp file")
#5:其他字段给值逻辑  制费类别(xcbj010)/会计科目(xcbj011)
#已在步骤2处理
   
#将临时表插入正式表
   LET g_sql = " INSERT INTO xcbj_t SELECT * FROM axcp201_xcbj_tmp "

   PREPARE axcp201_ins_pb FROM g_sql 

   EXECUTE axcp201_ins_pb
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'INS xcbj'
      LET g_errparam.popup  = TRUE
      CALL cl_err()
      LET r_success = FALSE
      RETURN r_success
   END IF

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN   #启用成本次要素时
      CALL axcp201_replace_sql()
      PREPARE axcp201_ins_pb1 FROM g_sql 
      
      EXECUTE axcp201_ins_pb1
      
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'INS xcdr'
         LET g_errparam.popup  = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF   
   END IF
   CALL cl_progress_no_window_ing("insert from tmp file")
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="function.axcp201_create_tmp_table" order="2" ver="3" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp201_create_tmp_table()
   DEFINE r_success       LIKE type_t.num5

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE

   #检查事务中
   IF NOT s_transaction_chk('N',1) THEN
      LET r_success = FALSE
      RETURN r_success
   END IF
   
   DROP TABLE axcp201_xcbj_tmp;
   CREATE TEMP TABLE axcp201_xcbj_tmp(
         xcbjent            LIKE xcbj_t.xcbjent,                    #企業編號
         xcbjcomp           LIKE xcbj_t.xcbjcomp,                   #組織編號
         xcbjld             LIKE xcbj_t.xcbjld,                     #帳別    
         xcbj001            LIKE xcbj_t.xcbj001,                    #一般編號
         xcbj002            LIKE xcbj_t.xcbj002,                    #年度    
         xcbj003            LIKE xcbj_t.xcbj003,                    #期別    
         xcbj004            LIKE xcbj_t.xcbj004,                    #一般編號
         xcbj005            LIKE xcbj_t.xcbj005,                    #一般flag
         xcbj006            LIKE xcbj_t.xcbj006,                    #一般flag
         xcbj010            LIKE xcbj_t.xcbj010,                    #一般flag
         xcbj011            LIKE xcbj_t.xcbj011,                    #科目編號
         xcbj020            LIKE xcbj_t.xcbj020,                    #數量    
         xcbj021            LIKE xcbj_t.xcbj021,                    #數量    
         xcbj101            LIKE xcbj_t.xcbj101,                    #金額    
         xcbj102            LIKE xcbj_t.xcbj102,                    #金額    
         xcbj103            LIKE xcbj_t.xcbj103,                    #金額    
         xcbj104            LIKE xcbj_t.xcbj104,                    #金額    
         xcbj105            LIKE xcbj_t.xcbj105,                    #金額    
         xcbj111            LIKE xcbj_t.xcbj111,                    #金額    
         xcbj112            LIKE xcbj_t.xcbj112,                    #金額    
         xcbj113            LIKE xcbj_t.xcbj113,                    #金額    
         xcbj114            LIKE xcbj_t.xcbj114,                    #金額    
         xcbj115            LIKE xcbj_t.xcbj115,                    #金額    
         xcbj121            LIKE xcbj_t.xcbj121,                    #金額    
         xcbj122            LIKE xcbj_t.xcbj122,                    #金額            
         xcbj123            LIKE xcbj_t.xcbj123,                    #金額          
         xcbj124            LIKE xcbj_t.xcbj124,                    #金額     
         xcbj125            LIKE xcbj_t.xcbj125,                    #金額     
         xcbjownid          LIKE xcbj_t.xcbjownid,                  #人員代碼 
         xcbjowndp          LIKE xcbj_t.xcbjowndp,                  #組織編號 
         xcbjcrtid          LIKE xcbj_t.xcbjcrtid,                  #人員代碼 
         xcbjcrtdp          LIKE xcbj_t.xcbjcrtdp,                  #組織編號 
         xcbjcrtdt          LIKE xcbj_t.xcbjcrtdt,                  #日期時間 
         xcbjmodid          LIKE xcbj_t.xcbjmodid,                  #人員代碼 
         xcbjmoddt          LIKE xcbj_t.xcbjmoddt,                  #日期時間 
         xcbjstus           LIKE xcbj_t.xcbjstus,                   #狀態碼
         xcbjud001          LIKE xcbj_t.xcbjud001,
         xcbjud002          LIKE xcbj_t.xcbjud002,
         xcbjud003          LIKE xcbj_t.xcbjud003,
         xcbjud004          LIKE xcbj_t.xcbjud004,
         xcbjud005          LIKE xcbj_t.xcbjud005,
         xcbjud006          LIKE xcbj_t.xcbjud006,
         xcbjud007          LIKE xcbj_t.xcbjud007,
         xcbjud008          LIKE xcbj_t.xcbjud008,
         xcbjud009          LIKE xcbj_t.xcbjud009,
         xcbjud010          LIKE xcbj_t.xcbjud010,
         xcbjud011          LIKE xcbj_t.xcbjud011,
         xcbjud012          LIKE xcbj_t.xcbjud012,
         xcbjud013          LIKE xcbj_t.xcbjud013,
         xcbjud014          LIKE xcbj_t.xcbjud014,
         xcbjud015          LIKE xcbj_t.xcbjud015,
         xcbjud016          LIKE xcbj_t.xcbjud016,
         xcbjud017          LIKE xcbj_t.xcbjud017,
         xcbjud018          LIKE xcbj_t.xcbjud018,
         xcbjud019          LIKE xcbj_t.xcbjud019,
         xcbjud020          LIKE xcbj_t.xcbjud020,
         xcbjud021          LIKE xcbj_t.xcbjud021,
         xcbjud022          LIKE xcbj_t.xcbjud022,
         xcbjud023          LIKE xcbj_t.xcbjud023,
         xcbjud024          LIKE xcbj_t.xcbjud024,
         xcbjud025          LIKE xcbj_t.xcbjud025,
         xcbjud026          LIKE xcbj_t.xcbjud026,
         xcbjud027          LIKE xcbj_t.xcbjud027,
         xcbjud028          LIKE xcbj_t.xcbjud028,
         xcbjud029          LIKE xcbj_t.xcbjud029,
         xcbjud030          LIKE xcbj_t.xcbjud030         
   );
   
   IF SQLCA.sqlcode THEN
      LET r_success = FALSE
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'create tmp01'
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN r_success
   END IF
   
   
   DROP TABLE axcp201_xcdr_tmp;
   CREATE TEMP TABLE axcp201_xcdr_tmp(
         xcdrent            LIKE xcdr_t.xcdrent,                    #企業編號
         xcdrcomp           LIKE xcdr_t.xcdrcomp,                   #組織編號
         xcdrld             LIKE xcdr_t.xcdrld,                     #帳別    
         xcdr001            LIKE xcdr_t.xcdr001,                    #一般編號
         xcdr002            LIKE xcdr_t.xcdr002,                    #年度    
         xcdr003            LIKE xcdr_t.xcdr003,                    #期別    
         xcdr004            LIKE xcdr_t.xcdr004,                    #一般編號
         xcdr005            LIKE xcdr_t.xcdr005,                    #一般flag
         xcdr006            LIKE xcdr_t.xcdr006,                    #一般flag
         xcdr010            LIKE xcdr_t.xcdr010,                    #一般flag
         xcdr011            LIKE xcdr_t.xcdr011,                    #科目編號
         xcdr020            LIKE xcdr_t.xcdr020,                    #數量    
         xcdr021            LIKE xcdr_t.xcdr021,                    #數量    
         xcdr101            LIKE xcdr_t.xcdr101,                    #金額    
         xcdr102            LIKE xcdr_t.xcdr102,                    #金額    
         xcdr103            LIKE xcdr_t.xcdr103,                    #金額    
         xcdr104            LIKE xcdr_t.xcdr104,                    #金額    
         xcdr105            LIKE xcdr_t.xcdr105,                    #金額    
         xcdr111            LIKE xcdr_t.xcdr111,                    #金額    
         xcdr112            LIKE xcdr_t.xcdr112,                    #金額    
         xcdr113            LIKE xcdr_t.xcdr113,                    #金額    
         xcdr114            LIKE xcdr_t.xcdr114,                    #金額    
         xcdr115            LIKE xcdr_t.xcdr115,                    #金額    
         xcdr121            LIKE xcdr_t.xcdr121,                    #金額    
         xcdr122            LIKE xcdr_t.xcdr122,                    #金額            
         xcdr123            LIKE xcdr_t.xcdr123,                    #金額          
         xcdr124            LIKE xcdr_t.xcdr124,                    #金額     
         xcdr125            LIKE xcdr_t.xcdr125,                    #金額 
         xcdrud001          LIKE xcdr_t.xcdrud001,
         xcdrud002          LIKE xcdr_t.xcdrud002,
         xcdrud003          LIKE xcdr_t.xcdrud003,
         xcdrud004          LIKE xcdr_t.xcdrud004,
         xcdrud005          LIKE xcdr_t.xcdrud005,
         xcdrud006          LIKE xcdr_t.xcdrud006,
         xcdrud007          LIKE xcdr_t.xcdrud007,
         xcdrud008          LIKE xcdr_t.xcdrud008,
         xcdrud009          LIKE xcdr_t.xcdrud009,
         xcdrud010          LIKE xcdr_t.xcdrud010,
         xcdrud011          LIKE xcdr_t.xcdrud011,
         xcdrud012          LIKE xcdr_t.xcdrud012,
         xcdrud013          LIKE xcdr_t.xcdrud013,
         xcdrud014          LIKE xcdr_t.xcdrud014,
         xcdrud015          LIKE xcdr_t.xcdrud015,
         xcdrud016          LIKE xcdr_t.xcdrud016,
         xcdrud017          LIKE xcdr_t.xcdrud017,
         xcdrud018          LIKE xcdr_t.xcdrud018,
         xcdrud019          LIKE xcdr_t.xcdrud019,
         xcdrud020          LIKE xcdr_t.xcdrud020,
         xcdrud021          LIKE xcdr_t.xcdrud021,
         xcdrud022          LIKE xcdr_t.xcdrud022,
         xcdrud023          LIKE xcdr_t.xcdrud023,
         xcdrud024          LIKE xcdr_t.xcdrud024,
         xcdrud025          LIKE xcdr_t.xcdrud025,
         xcdrud026          LIKE xcdr_t.xcdrud026,
         xcdrud027          LIKE xcdr_t.xcdrud027,
         xcdrud028          LIKE xcdr_t.xcdrud028,
         xcdrud029          LIKE xcdr_t.xcdrud029,
         xcdrud030          LIKE xcdr_t.xcdrud030          
   );
   
   IF SQLCA.sqlcode THEN
      LET r_success = FALSE
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'create tmp02'
      LET g_errparam.popup = TRUE
      CALL cl_err()

      RETURN r_success
   END IF 
  
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="function.axcp201_drop_tmp_table" order="3" ver="3" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp201_drop_tmp_table()
   WHENEVER ERROR CONTINUE

   #检查事务中
   IF NOT s_transaction_chk('N',1) THEN
      RETURN 
   END IF
   
   #刪除TEMP TABLE
   DROP TABLE axcp201_xcbj_tmp
   DROP TABLE axcp201_xcdr_tmp
END FUNCTION]]>
  </point>
  <point name="function.axcp201_replace_sql" order="4" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 根据成本参数替换sql里的字段
# Memo...........:
# Usage..........: CALL axcp201_replace_sql()
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp201_replace_sql()

   IF cl_get_para(g_enterprise,g_site,'S-FIN-6003') = 'Y' THEN         #启用工艺成本
      CALL s_chr_replace(g_sql,'xcbh','xcbq',0) RETURNING g_sql
      CALL s_chr_replace(g_sql,'xcbi','xcbr',0) RETURNING g_sql
   END IF
   IF cl_get_para(g_enterprise,g_site,'S-FIN-6015') = 'Y' THEN         #启用成本次要素
      CALL s_chr_replace(g_sql,'xcbj','xcdr',0) RETURNING g_sql
      CALL s_chr_replace(g_sql,'xcbl001','xcbl023',0) RETURNING g_sql
   END IF
END FUNCTION]]>
  </point>
  <point name="global.variable" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_sql1                STRING        #組 sql 用]]>
  </point>
  <point name="input.a.xcbj001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.xcbj001) THEN 
#此段落由子樣板a19產生
               #校驗代值
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_master.xcbj001
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_xcat001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
            

            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_master.xcbj001
            CALL ap_ref_array2(g_ref_fields,"SELECT xcatl003 FROM xcatl_t WHERE xcatlent='"||g_enterprise||"' AND xcatl001=? AND xcatl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_master.xcbj001_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_master.xcbj001_desc

]]>
  </point>
  <point name="input.a.xcbjcomp" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.xcbjcomp) THEN 
#此段落由子樣板a19產生
               #校驗代值
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_master.xcbjcomp
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooef001_1") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
            
            END IF 
            
            SELECT glaald INTO g_master.xcbjld
              FROM glaa_t
             WHERE glaaent  = g_enterprise
               AND glaacomp = g_master.xcbjcomp
               AND glaa014 = 'Y'
 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_master.xcbjld
            CALL ap_ref_array2(g_ref_fields,"SELECT glaal002 FROM glaal_t WHERE glaalent='"||g_enterprise||"' AND glaalld=? AND glaal001='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_master.xcbjld_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_master.xcbjld_desc

            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_master.xcbjcomp
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_master.xcbjcomp_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_master.xcbjcomp_desc
           ]]>
  </point>
  <point name="input.a.xcbjld" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.xcbjld) THEN 
#此段落由子樣板a19產生
               #校驗代值
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_master.xcbjld
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_glaald") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
                  CALL s_ld_chk_authorization(g_user,g_master.xcbjld) RETURNING l_success
                  IF l_success = FALSE THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = 'axr-00022'
                     LET g_errparam.extend = g_master.xcbjld
                     LET g_errparam.popup = TRUE
                     CALL cl_err()

                     LET g_master.xcbjld = ''
                     NEXT FIELD CURRENT
                  END IF 
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
            

            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_master.xcbjld
            CALL ap_ref_array2(g_ref_fields,"SELECT glaal002 FROM glaal_t WHERE glaalent='"||g_enterprise||"' AND glaalld=? AND glaal001='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_master.xcbjld_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_master.xcbjld_desc

]]>
  </point>
  <point name="input.c.xcbj001" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_master.xcbj001             #給予default值

            #給予arg
            
            CALL q_xcat001()                                #呼叫開窗

            LET g_master.xcbj001 = g_qryparam.return1              

            DISPLAY g_master.xcbj001 TO xcbj001              #

            NEXT FIELD xcbj001                          #返回原欄位

]]>
  </point>
  <point name="input.c.xcbjcomp" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_master.xcbjcomp             #給予default值

            #給予arg
            
            CALL q_ooef001_2()                                #呼叫開窗

            LET g_master.xcbjcomp = g_qryparam.return1              

            DISPLAY g_master.xcbjcomp TO xcbjcomp              #

            NEXT FIELD xcbjcomp                          #返回原欄位

]]>
  </point>
  <point name="input.c.xcbjld" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_master.xcbjld             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_user
            LET g_qryparam.arg2 = g_dept 
            IF g_master.xcbjcomp IS NOT NULL THEN
               LET g_qryparam.where = " glaacomp = '",g_master.xcbjcomp,"'"
            END IF            
            CALL q_authorised_ld()                                #呼叫開窗

            LET g_master.xcbjld = g_qryparam.return1              

            DISPLAY g_master.xcbjld TO xcbjld              #

            NEXT FIELD xcbjld                          #返回原欄位

]]>
  </point>
  <point name="input.m.before_input" order="" ver="2" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               CALL s_axc_set_site_default() RETURNING g_master.xcbjcomp,g_master.xcbjld,g_master.xcbj002,g_master.xcbj003,g_master.xcbj001
               
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_master.xcbjcomp
               CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_master.xcbjcomp_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_master.xcbjcomp_desc
               
               
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_master.xcbjld
               CALL ap_ref_array2(g_ref_fields,"SELECT glaal002 FROM glaal_t WHERE glaalent='"||g_enterprise||"' AND glaalld=? AND glaal001='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_master.xcbjld_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_master.xcbjld_desc
               
               INITIALIZE g_ref_fields TO NULL
               LET g_ref_fields[1] = g_master.xcbj001
               CALL ap_ref_array2(g_ref_fields,"SELECT xcatl003 FROM xcatl_t WHERE xcatlent='"||g_enterprise||"' AND xcatl001=? AND xcatl002='"||g_dlang||"'","") RETURNING g_rtn_fields
               LET g_master.xcbj001_desc = '', g_rtn_fields[1] , ''
               DISPLAY BY NAME g_master.xcbj001_desc             ]]>
  </point>
  <point name="process.background_finish" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      IF NOT axcp201_create_tmp_table() THEN
         RETURN
      END IF
      CALL s_transaction_begin()
      IF NOT axcp201_gen() THEN
         CALL s_transaction_end('N',0)
         CALL axcp201_drop_tmp_table()
         RETURN
      END IF
      CALL s_transaction_end('Y',0)
      CALL axcp201_drop_tmp_table()]]>
  </point>
  <point name="process.count_progress" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL cl_progress_bar_no_window(5)]]>
  </point>
  <point name="process.foreground_finish" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      IF NOT axcp201_create_tmp_table() THEN
         RETURN
      END IF
      CALL s_transaction_begin()
      IF NOT axcp201_gen() THEN
         CALL s_transaction_end('N',1)
         CALL axcp201_drop_tmp_table()
         RETURN
      END IF
      CALL s_transaction_end('Y',1)
      CALL axcp201_drop_tmp_table()]]>
  </point>
  <point name="ui_dialog.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success LIKE type_t.num5]]>
  </point>
  <point name="ui_dialog.qbeclear" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_master.* TO NULL]]>
  </point>
  <section id="axcp201.description" ver="1" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:3,PR版次:3) Build-000038
#+ 
#+ Filename...: axcp201
#+ Description: 期末人工製費金額統計作業
#+ Creator....: 00537(2014-07-28 09:16:12)
#+ Modifier...: 00537(2014-09-12 13:35:28) -SD/PR-
]]>
  </section>
  <section id="axcp201.get_buffer" ver="2" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION axcp201_get_buffer(p_dialog)
   DEFINE p_dialog   ui.DIALOG
   
   LET g_master.xcbjcomp = p_dialog.getFieldBuffer('xcbjcomp')
   LET g_master.xcbjld = p_dialog.getFieldBuffer('xcbjld')
   LET g_master.xcbj001 = p_dialog.getFieldBuffer('xcbj001')
   LET g_master.xcbj002 = p_dialog.getFieldBuffer('xcbj002')
   LET g_master.xcbj003 = p_dialog.getFieldBuffer('xcbj003')
 
   CALL cl_schedule_get_buffer(p_dialog)
 
   #add-point:get_buffer段其他欄位處理
   {<point name="get_buffer.others"/>}
   #end add-point
END FUNCTION
]]>
  </section>
  <section id="axcp201.global" ver="4" status="" src="s" readonly="">
    <![CDATA[#應用 p01 樣板自動產生(Version:10)
{<point name="global.memo" />}
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
   DEFINE g_chk_jobid          LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   {<point name="global.parameter"/>}
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
DEFINE g_wc              STRING
 
PRIVATE TYPE type_master RECORD
       xcbjcomp LIKE type_t.chr10, 
   xcbjcomp_desc LIKE type_t.chr80, 
   xcbjld LIKE type_t.chr5, 
   xcbjld_desc LIKE type_t.chr80, 
   xcbj001 LIKE type_t.chr10, 
   xcbj001_desc LIKE type_t.chr80, 
   xcbj002 LIKE type_t.num5, 
   xcbj003 LIKE type_t.num5, 
   stagenow LIKE type_t.chr80,
       wc               STRING
       END RECORD
 
#模組變數(Module Variables)
DEFINE g_master type_master
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable" edit="s"/>}
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="axcp201.init" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 初始化作業
PRIVATE FUNCTION axcp201_init()
   #add-point:init段define 
   {<point name="init.define" edit="s"/>}
   #end add-point
   #add-point:init段define (客製用)
   {<point name="init.define_customerization" edit="c"/>}
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="axcp201.main" ver="3" status="" src="s" readonly="">
    <![CDATA[MAIN
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define 
   {<point name="main.define" edit="s"/>}
   #end add-point 
   #add-point:main段define (客製用)
   {<point name="main.define_customerization" edit="c"/>}
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axc","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   {<point name="main.background"/>}
   #end add-point
 
   #背景(Y) 或半背景(T) 時不做主畫面開窗
   IF g_bgjob = "Y" OR g_bgjob = "T" THEN
      #排程參數由01開始，若不是1開始，表示有保留參數
      LET ls_js = g_argv[01]
     #CALL util.JSON.parse(ls_js,g_master)   #p類主要使用l_param,此處不解析
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
      CALL axcp201_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axcp201 WITH FORM cl_ap_formpath("axc",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL axcp201_init()
 
      #進入選單 Menu (="N")
      CALL axcp201_ui_dialog()
 
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axcp201
   END IF
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
]]>
  </section>
  <section id="axcp201.msgcentre_notify" ver="1" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION axcp201_msgcentre_notify()
 
   DEFINE lc_state LIKE type_t.chr5
 
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = "process"
 
   #add-point:msgcentre其他通知
   {<point name="msg_centre.process"/>}
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
]]>
  </section>
  <section id="axcp201.other_function" ver="1" status="" src="s" readonly="">
    <![CDATA[#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
]]>
  </section>
  <section id="axcp201.process" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 資料處理   (r類使用g_master為主處理/p類使用l_param為主)
PRIVATE FUNCTION axcp201_process(ls_js)
   DEFINE ls_js         STRING
   DEFINE lc_param      type_parameter
   DEFINE li_stus       LIKE type_t.num5
   DEFINE li_count      LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql        STRING             #主SQL
   DEFINE li_p01_status LIKE type_t.num5
   #add-point:process段define 
   {<point name="process.define" edit="s"/>}
   #end add-point
   #add-point:process段define (客製用)
   {<point name="process.define_customerization" edit="c"/>}
   #end add-point
 
  #INITIALIZE lc_param TO NULL           #p類不可以清空
   CALL util.JSON.parse(ls_js,lc_param)  #r類作業被t類呼叫時使用, p類主要解開參數處
 
  #IF lc_param.wc IS NOT NULL THEN
  #   LET g_bgjob = "T"       #特殊情況,此為t類作業鬆耦合串入報表主程式使用
  #END IF
 
   #add-point:process段前處理
   {<point name="process.pre_process"/>}
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      {<point name="process.count_progress"/>}
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE axcp201_process_cs CURSOR FROM ls_sql
#  FOREACH axcp201_process_cs INTO
   #add-point:process段process
   {<point name="process.process"/>}
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      {<point name="process.foreground_finish"/>}
      #end add-point
      CALL cl_ask_confirm3("std-00012","")
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      {<point name="process.background_finish"/>}
      #end add-point
      CALL cl_schedule_exec_call(li_p01_status)
   END IF
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL axcp201_msgcentre_notify()
 
END FUNCTION
]]>
  </section>
  <section id="axcp201.transfer_argv" ver="2" status="" src="s" readonly="">
    <![CDATA[#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION axcp201_transfer_argv(ls_js)
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog       STRING,
             actionid   STRING,
             background LIKE type_t.chr1,
             param      DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
   #add-point:transfer_agrv段define 
   {<point name="transfer_agrv.define" edit="s"/>}
   #end add-point
   #add-point:transfer_agrv段define (客製用)
   {<point name="transfer_agrv.define_customerization" edit="c"/>}
   #end add-point
 
   LET la_cmdrun.prog = g_prog
   LET la_cmdrun.background = "Y"
   LET la_cmdrun.param[1] = ls_js
 
   #add-point:transfer.argv段程式內容
   {<point name="transfer.argv.define"/>}
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
]]>
  </section>
  <section id="axcp201.ui_dialog" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION axcp201_ui_dialog()
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num10
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE l_dialog ui.DIALOG
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define 
   {<point name="ui_dialog.define" edit="s"/>}
   #end add-point
   #add-point:ui_dialog段define (客製用)
   {<point name="ui_dialog.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:ui_dialog段before dialog
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
 
   WHILE TRUE
      #add-point:ui_dialog段before dialog2
      {<point name="ui_dialog.before_dialog2"/>}
      #end add-point
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #應用 a57 樣板自動產生(Version:2)
         INPUT BY NAME g_master.xcbjcomp,g_master.xcbjld,g_master.xcbj001,g_master.xcbj002,g_master.xcbj003  

            ATTRIBUTE(WITHOUT DEFAULTS)
            
            #自訂ACTION(master_input)
            
         
            BEFORE INPUT
               #add-point:資料輸入前
               {<point name="input.m.before_input"/>}
               #end add-point
         
                     #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD xcbjcomp
            
            #add-point:AFTER FIELD xcbjcomp
            {<point name="input.a.xcbjcomp" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD xcbjcomp
            #add-point:BEFORE FIELD xcbjcomp
            {<point name="input.b.xcbjcomp" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE xcbjcomp
            #add-point:ON CHANGE xcbjcomp
            {<point name="input.g.xcbjcomp" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD xcbjld
            
            #add-point:AFTER FIELD xcbjld
            {<point name="input.a.xcbjld" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD xcbjld
            #add-point:BEFORE FIELD xcbjld
            {<point name="input.b.xcbjld" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE xcbjld
            #add-point:ON CHANGE xcbjld
            {<point name="input.g.xcbjld" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD xcbj001
            
            #add-point:AFTER FIELD xcbj001
            {<point name="input.a.xcbj001" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD xcbj001
            #add-point:BEFORE FIELD xcbj001
            {<point name="input.b.xcbj001" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE xcbj001
            #add-point:ON CHANGE xcbj001
            {<point name="input.g.xcbj001" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD xcbj002
            #add-point:BEFORE FIELD xcbj002
            {<point name="input.b.xcbj002" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD xcbj002
            
            #add-point:AFTER FIELD xcbj002
            {<point name="input.a.xcbj002" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE xcbj002
            #add-point:ON CHANGE xcbj002
            {<point name="input.g.xcbj002" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD xcbj003
            #add-point:BEFORE FIELD xcbj003
            {<point name="input.b.xcbj003" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD xcbj003
            
            #add-point:AFTER FIELD xcbj003
            {<point name="input.a.xcbj003" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE xcbj003
            #add-point:ON CHANGE xcbj003
            {<point name="input.g.xcbj003" />}
            #END add-point 
 
 
                     #Ctrlp:input.c.xcbjcomp
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD xcbjcomp
            #add-point:ON ACTION controlp INFIELD xcbjcomp
            {<point name="input.c.xcbjcomp" />}
            #END add-point
 
         #Ctrlp:input.c.xcbjld
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD xcbjld
            #add-point:ON ACTION controlp INFIELD xcbjld
            {<point name="input.c.xcbjld" />}
            #END add-point
 
         #Ctrlp:input.c.xcbj001
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD xcbj001
            #add-point:ON ACTION controlp INFIELD xcbj001
            {<point name="input.c.xcbj001" />}
            #END add-point
 
         #Ctrlp:input.c.xcbj002
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD xcbj002
            #add-point:ON ACTION controlp INFIELD xcbj002
            {<point name="input.c.xcbj002" />}
            #END add-point
 
         #Ctrlp:input.c.xcbj003
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD xcbj003
            #add-point:ON ACTION controlp INFIELD xcbj003
            {<point name="input.c.xcbj003" />}
            #END add-point
 
 
               
            AFTER INPUT
               #add-point:資料輸入後
               {<point name="input.m.after_input"/>}
               #end add-point
               
            #add-point:其他管控(on row change, etc...)
            {<point name="input.other"/>}
            #end add-point
         END INPUT
 
 
         
         
      
         #add-point:ui_dialog段construct
         {<point name="ui_dialog.more_construct"/>}
         #end add-point
         #add-point:ui_dialog段input
         {<point name="ui_dialog.more_input"/>}
         #end add-point
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         BEFORE DIALOG
            LET l_dialog = ui.DIALOG.getCurrent()
            CALL axcp201_get_buffer(l_dialog)
            #add-point:ui_dialog段before dialog
            {<point name="ui_dialog.before_dialog3"/>}
            #end add-point
 
         ON ACTION batch_execute
            LET g_action_choice = "batch_execute"
            ACCEPT DIALOG
 
         #add-point:ui_dialog段before_qbeclear
         {<point name="ui_dialog.before_qbeclear" mark="Y"/>}
         #end add-point
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE g_master.* TO NULL   #畫面變數清空
            INITIALIZE lc_param.* TO NULL   #傳遞參數變數清空
            #add-point:ui_dialog段qbeclear
            {<point name="ui_dialog.qbeclear"/>}
            #end add-point
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION close
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM   
         INITIALIZE g_master.* TO NULL
         LET g_wc  = ' 1=2'
         LET g_action_choice = ""
         CALL axcp201_init()
         CONTINUE WHILE
      END IF
 
      #檢查批次設定是否有錯(或未設定完成)
      IF NOT cl_schedule_exec_check() THEN
         CONTINUE WHILE
      END IF
      
      LET lc_param.wc = g_master.wc    #把畫面上的wc傳遞到參數變數
      #請在下方的add-point內進行把畫面的輸入資料(g_master)轉換到傳遞參數變數(lc_param)的動作
      #add-point:ui_dialog段exit dialog
      {<point name="process.exit_dialog"/>}
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)  #r類使用g_master/p類使用lc_param
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         IF g_chk_jobid THEN 
            LET g_jobid = g_schedule.gzpa001
         ELSE 
            LET g_jobid = cl_schedule_get_jobid(g_prog)
         END IF 
 
         #依照指定模式執行報表列印
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL axcp201_process(ls_js)
 
            WHEN g_schedule.gzpa003 = "1"
                 LET ls_js = axcp201_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
 
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
 
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
         END CASE  
 
         IF g_schedule.gzpa003 = "2" OR g_schedule.gzpa003 = "3" THEN 
            CALL cl_ask_confirm3("std-00014","") #設定完成
         END IF    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
 
         #add-point:ui_dialog段after schedule
         {<point name="process.after_schedule"/>}
         #end add-point
 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
]]>
  </section>
</add_points>
