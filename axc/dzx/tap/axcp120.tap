<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="axcp120" std_prog="axcp120" erpver="1.0" module="AXC" ver="9" env="s" zone="t10prd" booking="Y" type="M" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="P" status="u"/>
    <free_style value="N" status="u"/>
    <start_arg value="" status="u"/>
  </other>
  <point name="function.axcp120_get_xcbb_tmp" order="1" ver="9" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 插入臨時表資料
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_get_xcbb_tmp()
   DEFINE p_wc              STRING
   DEFINE l_sql             STRING
   DEFINE p_apcbdocno       LIKE apcb_t.apcbdocno
   DEFINE l_apcb002         LIKE apcb_t.apcb002
   DEFINE l_apcb003         LIKE apcb_t.apcb003
   DEFINE l_flag1           LIKE type_t.chr1
   DEFINE l_errno           LIKE type_t.chr100
   DEFINE l_glav002         LIKE glav_t.glav002
   DEFINE l_glav005         LIKE glav_t.glav005
   DEFINE l_sdate_s         LIKE glav_t.glav004
   DEFINE l_sdate_e         LIKE glav_t.glav004
   DEFINE l_glav006         LIKE glav_t.glav006
   DEFINE l_glav007         LIKE glav_t.glav007
   DEFINE l_wdate_s         LIKE glav_t.glav004
   DEFINE l_wdate_e         LIKE glav_t.glav004
   DEFINE l_year            LIKE type_t.num5
   DEFINE l_month           LIKE type_t.num5
   DEFINE l_sfdd001         LIKE sfdd_t.sfdd001
   DEFINE l_bmba002         LIKE bmba_t.bmba002
   DEFINE l_imag001         LIKE imag_t.imag001
   DEFINE l_xcbbcnfdt       DATETIME YEAR TO SECOND
   DEFINE l_xcbb006         LIKE xcbb_t.xcbb006
   DEFINE l_success         LIKE type_t.num5
   DEFINE l_today           LIKE xcbb_t.xcbbcrtdt
   
   CALL s_transaction_begin()
   
   LET l_today = cl_get_current()
   CALL s_get_accdate(g_glaa003,'',g_master.year,g_master.month)
     RETURNING l_flag1,l_errno,l_glav002,l_glav005,l_sdate_s,l_sdate_e,
               l_glav006,l_bdate,l_edate,l_glav007,l_wdate_s,l_wdate_e
   IF l_flag1='N' THEN
       LET g_success='N'
       CALL cl_errmsg('','','',l_errno,1) 
      RETURN
   END IF 

   CALL cl_showmsg_init()

   DECLARE p120_ins_xcbb_tmp CURSOR FOR
    INSERT INTO  axcp120_ins_xcbb_t(imag001,xcbb006) VALUES(?,?)
    
   LET l_sql = " UPDATE axcp120_xcbb_tmp SET xcbb006 = ?",
               "  WHERE imag001 = ?"
   PREPARE p120_upd_p2 FROM l_sql


    CALL s_fin_date_get_last_period(g_glaa003,'',g_master.year,g_master.month)
         RETURNING l_success,l_year,l_month
 
   IF l_success='N' THEN
       LET g_success='N'
       CALL cl_errmsg('','','get last period failed','',1) 
      RETURN
   END IF

    DELETE FROM  xcbb_t WHERE xcbbent = g_enterprise AND xcbbcomp = g_master.imagsite 
      AND xcbb001 =  g_master.year AND xcbb002 = g_master.month
 
    CALL cl_progress_no_window_ing("delete xcbb_t")
    
    DELETE FROM axcp120_xcbb_tmp
    
    IF g_master.order = '0' THEN       #依BOM低階碼
       INSERT INTO axcp120_xcbb_tmp 
          SELECT imagent,imagsite,0,0,imag001,' ',imaa006,imag013,imac003,0,imac003,'N',imag011,imaa003,imaa004
           FROM imac_t,imaa_t,imag_t
          WHERE imagent = imaaent AND imaaent = imacent
            AND imag001 = imaa001 AND imaa001 = imac001 
            AND imagsite = g_master.imagsite AND imagent = g_enterprise

       IF SQLCA.sqlcode THEN
         LET g_success='N'
         CALL cl_errmsg('','','INS axcp120_xcbb_tmp',SQLCA.sqlcode,1) 
         RETURN
       END IF
       
       UPDATE axcp120_xcbb_tmp SET xcbb001 = g_master.year,xcbb002 = g_master.month
       
       IF SQLCA.sqlcode THEN
         LET g_success='N'
         CALL cl_errmsg('','','UPD axcp120_xcbb_tmp',SQLCA.sqlcode,1) 
         RETURN
       END IF
       
    END IF 
 
    IF g_master.order ='1' THEN       #依發料低階碼        
#把成本阶更新到每个料号
        DELETE FROM axcp120_ins_xcbb_t
        IF NOT axcp120_gen_imac() THEN   #依发料计算低阶码，放入类似imac的临时表中
           LET g_success='N'
           CALL cl_errmsg('','','INS axcp120_ins_xcbb_t',SQLCA.sqlcode,1) 
           RETURN
        END IF        
#        LET l_sql =" INSERT INTO  axcp120_ins_xcbb_t", 
#                   " SELECT DISTINCT sfaa010,imac003 FROM axcp120_sfaa_tmp,imac_t",
#                   "  WHERE imacent = '",g_enterprise,"'",
#                   "    AND imac001 = sfaa010",
#                   " UNION",
#                   " SELECT DISTINCT sfdd001,imac003 FROM axcp120_sfaa_tmp,imac_t",
#                   "  WHERE imacent = '",g_enterprise,"'",
#                   "    AND imac001 = sfdd001"       
#
#       PREPARE p120_ins_xcbb_tmp1 FROM l_sql
#       EXECUTE p120_ins_xcbb_tmp1
#       
#       IF SQLCA.sqlcode THEN
#          LET g_success='N'
#          CALL cl_errmsg('','','INS axcp120_ins_xcbb_t',SQLCA.sqlcode,1)
#          RETURN
#       END IF
       
       
        LET l_sql = " INSERT INTO axcp120_xcbb_tmp",
           "  SELECT b.imagent,b.imagsite,",g_master.year,",",g_master.month,",a.imag001,' ',imaa006,b.imag013,a.xcbb006,a.xcbb006,0,'N',b.imag011,imaa003,imaa004",
           "   FROM axcp120_ins_xcbb_t a,imaa_t,imag_t b",
           "  WHERE imagent = imaaent ",
           "    AND a.imag001 = b.imag001 ",
           #AND a.imagsite = b.imagsite",
           "    AND a.imag001 = imaa001 AND imaa001 = b.imag001",
           "    AND b.imagsite = '",g_master.imagsite,"' AND b.imagent = '",g_enterprise,"'"
        

        PREPARE p120_ins_xcbb_tmp2 FROM l_sql
        EXECUTE p120_ins_xcbb_tmp2
 
        IF SQLCA.sqlcode THEN
           LET g_success='N'
           CALL cl_errmsg('','','INS axcp120_xcbb_tmp',SQLCA.sqlcode,1)
           RETURN
        END IF 

        CALL cl_progress_no_window_ing("insert axcp120_xcbb_tmp")
    END IF
#成本阶临时表插入完后，依据各种条件更新临时表里的成本阶
    CALL axcp120_upd_tmp()
    CALL cl_progress_no_window_ing("update axcp120_xcbb_tmp")  
#最后根据参数，需要特性的，关联inaj去找料件的特性
    IF cl_get_para(g_enterprise,g_master.imagsite,'S-FIN-6013') = 'Y'  THEN
       DELETE FROM axcp120_xcbb_tmp1
       
       LET l_sql = " INSERT INTO axcp120_xcbb_tmp1 ",
                   " SELECT DISTINCT T1.xcbbent,T1.imagsite,T1.xcbb001,T1.xcbb002,T1.imag001,T2.inaj006,T1.imaa006,T1.imag013,T1.xcbb006,T1.xcbb007,T1.xcbb008,T1.xcbb009,T1.imag011,T1.imaa003,T1.imaa004  ",
                   "   FROM axcp120_xcbb_tmp T1,inaj_t T2 ",
                   "  WHERE T1.xcbbent = T2.inajent AND T1.imagsite = T2.inaj209 AND T1.imag001 = T2.inaj005"

       PREPARE p120_ins_xcbb_tmp3 FROM l_sql
       EXECUTE p120_ins_xcbb_tmp3
 
       IF SQLCA.sqlcode THEN
          LET g_success='N'
          CALL cl_errmsg('','','INS axcp120_xcbb_tmp1',SQLCA.sqlcode,1)
          RETURN
       END IF 
    END IF
        
#用merge，不存在xcbb的，insert，存在于xcbb的，update
    LET l_sql = " MERGE INTO xcbb_t T1 "
    IF cl_get_para(g_enterprise,g_master.imagsite,'S-FIN-6013') = 'Y'  THEN
       LET l_sql = l_sql," USING axcp120_xcbb_tmp1 T2 "
    ELSE
       LET l_sql = l_sql," USING axcp120_xcbb_tmp T2 "
    END IF
    LET l_sql = l_sql,    
                "    ON (T1.xcbbent = T2.xcbbent AND T1.xcbbcomp = T2.imagsite AND T1.xcbb001 = T2.xcbb001 AND T1.xcbb002 = T2.xcbb002
                         AND T1.xcbb003 = T2.imag001)",
                " WHEN MATCHED THEN UPDATE SET T1.xcbb005 = T2.imaa006,", 
                "                              T1.xcbb006 = T2.xcbb006,",     
                "                              T1.xcbb007 = T2.xcbb007,", 
                "                              T1.xcbb008 = T2.xcbb008,", 
                "                              T1.xcbb009 = T2.xcbb009,", 
                "                              T1.xcbb010 = T2.imag011,", 
                "                              T1.xcbb012 = T2.imaa003",
                " WHEN NOT MATCHED THEN INSERT VALUES (T2.xcbbent,'",g_user,"','",g_dept,"','",g_user,"','",g_dept,"',",
                "                                      SYSTIMESTAMP,'','','Y',T2.imagsite,",
                "                                      T2.xcbb001,T2.xcbb002,T2.imag001,T2.xcbb004,T2.imaa006,",
                "                                      T2.xcbb006,T2.xcbb007,T2.xcbb008,T2.xcbb009,T2.imag011,",
                "                                      '',T2.imaa003,'',",   #30个自定义栏位
                "                                      '','','','','',",    
                "                                      '','','','','',",
                "                                      '','','','','',",
                "                                      '','','','','',",
                "                                      '','','','','',",
                "                                      '','','','','')"

    PREPARE p120_merge_xcbb FROM l_sql
    EXECUTE p120_merge_xcbb

    IF SQLCA.sqlcode THEN
       LET g_success='N'
       CALL cl_errmsg('','','MERGE xcbb_t',SQLCA.sqlcode,1)
       RETURN
    END IF
    
    CALL cl_progress_no_window_ing("merge xcbb_t")
    
         
END FUNCTION]]>
  </point>
  <point name="function.axcp120_create_tmp" order="2" ver="9" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 建立臨時表
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_create_tmp()
   DEFINE l_sql     STRING

   DROP TABLE axcp120_xcbb_tmp

   CREATE TEMP TABLE axcp120_xcbb_tmp(
   xcbbent     LIKE xcbb_t.xcbbent,
   imagsite    LIKE imag_t.imagsite,    #法人組織
   xcbb001     LIKE xcbb_t.xcbb001,
   xcbb002     LIKE xcbb_t.xcbb002,
   imag001     LIKE imag_t.imag001,    #料件編號
   xcbb004     LIKE xcbb_t.xcbb004,    #特性
   imaa006     LIKE imaa_t.imaa006,    #單位
   imag013     LIKE imag_t.imag013,    #成本料號
   xcbb006     LIKE xcbb_t.xcbb006,    #成本階
   xcbb007     LIKE xcbb_t.xcbb007,    #按發料計算的低階碼
   xcbb008     LIKE xcbb_t.xcbb008,    #按BOM計算的低階碼
   xcbb009     LIKE xcbb_t.xcbb009,    #當月入聯產品否
   imag011     LIKE imag_t.imag011,    #成本分群碼
   imaa003     LIKE imaa_t.imaa003,    #主分群碼
   imaa004     LIKE imaa_t.imaa004     #料件类别
    );

   DROP TABLE axcp120_xcbb_tmp1

   CREATE TEMP TABLE axcp120_xcbb_tmp1(
   xcbbent     LIKE xcbb_t.xcbbent,
   imagsite    LIKE imag_t.imagsite,    #法人組織
   xcbb001     LIKE xcbb_t.xcbb001,
   xcbb002     LIKE xcbb_t.xcbb002,
   imag001     LIKE imag_t.imag001,    #料件編號
   xcbb004     LIKE xcbb_t.xcbb004,    #特性
   imaa006     LIKE imaa_t.imaa006,    #單位
   imag013     LIKE imag_t.imag013,    #成本料號
   xcbb006     LIKE xcbb_t.xcbb006,    #成本階
   xcbb007     LIKE xcbb_t.xcbb007,    #按發料計算的低階碼
   xcbb008     LIKE xcbb_t.xcbb008,    #按BOM計算的低階碼
   xcbb009     LIKE xcbb_t.xcbb009,    #當月入聯產品否
   imag011     LIKE imag_t.imag011,    #成本分群碼
   imaa003     LIKE imaa_t.imaa003,    #主分群碼
   imaa004     LIKE imaa_t.imaa004     #料件类别
    );

#依发料计算低阶码时用来存放最后料件计算出来的低阶码
#结果表
   DROP TABLE axcp120_ins_xcbb_t   
   CREATE TEMP TABLE axcp120_ins_xcbb_t
   (
   imag001      LIKE imag_t.imag001,
   xcbb006      LIKE xcbb_t.xcbb006
   );

#依发料计算低阶码时用来存放工单主件和下阶发料关系的资料
#关系表
   DROP TABLE axcp120_sfaa_tmp     
   CREATE TEMP TABLE axcp120_sfaa_tmp     
   (
   sfaa010     LIKE sfaa_t.sfaa010,
   sfdd001     LIKE sfdd_t.sfdd001
   );

#依发料计算低阶码时用来存放工单主件和下阶发料的料号
#基准表
   DROP TABLE axcp120_imaa_tmp     
   CREATE TEMP TABLE axcp120_imaa_tmp     
   (
   imaa001     LIKE imaa_t.imaa001
   );

#依发料计算低阶码时用来存放本轮循环的料号
#运算临时表
   DROP TABLE axcp120_imaa_tmp1     
   CREATE TEMP TABLE axcp120_imaa_tmp1     
   (
   imaa0011    LIKE imaa_t.imaa001
   );
   
   DROP TABLE sfaa_tmp
   LET l_sql = "CREATE GLOBAL TEMPORARY TABLE sfaa_tmp AS ",
                "SELECT * FROM sfaa_t "
   PREPARE sfaa_tbl FROM l_sql
   EXECUTE sfaa_tbl
   FREE sfaa_tbl
   
   DROP TABLE sfec_tmp
   LET l_sql = "CREATE GLOBAL TEMPORARY TABLE sfec_tmp AS ",
                "SELECT * FROM sfec_t "
   PREPARE sfec_tbl FROM l_sql
   EXECUTE sfec_tbl
   FREE sfec_tbl
   
END FUNCTION]]>
  </point>
  <point name="function.axcp120_upd_tmp" order="3" ver="9" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_upd_tmp()
DEFINE l_sql            STRING
DEFINE l_flag1          LIKE type_t.chr1
DEFINE l_errno          LIKE type_t.chr100
DEFINE l_glav002        LIKE glav_t.glav002
DEFINE l_glav005        LIKE glav_t.glav005
DEFINE l_sdate_s        LIKE glav_t.glav004
DEFINE l_sdate_e        LIKE glav_t.glav004
DEFINE l_glav006        LIKE glav_t.glav006
DEFINE l_glav007        LIKE glav_t.glav007
DEFINE l_wdate_s        LIKE glav_t.glav004
DEFINE l_wdate_e        LIKE glav_t.glav004   
DEFINE l_xcbc004        LIKE xcbc_t.xcbc004
DEFINE l_xcbc003        LIKE xcbc_t.xcbc003
DEFINE l_n              LIKE type_t.num5
DEFINE l_xcbb009        LIKE xcbb_t.xcbb009
DEFINE l_imag001        LIKE imag_t.imag001
DEFINE l_imag013        LIKE imag_t.imag013
DEFINE l_imaa004        LIKE imaa_t.imaa004
DEFINE l_xcbb006         LIKE xcbb_t.xcbb006
   
   LET g_success = 'Y'
   CALL s_get_accdate(g_glaa003,'',g_master.year,g_master.month)
     RETURNING l_flag1,l_errno,l_glav002,l_glav005,l_sdate_s,l_sdate_e,
               l_glav006,l_bdate,l_edate,l_glav007,l_wdate_s,l_wdate_e
   IF l_flag1='N' THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = l_errno
      LET g_errparam.extend = ''
      LET g_errparam.popup = FALSE
      CALL cl_err()

   END IF    

#对要用的工单和完工入库单数量先过滤精简，提高效率
   DELETE FROM sfaa_tmp
   INSERT INTO sfaa_tmp 
        SELECT sfaa_t.*
          FROM sfaa_t,axcp120_xcbb_tmp
         WHERE sfaaent = g_enterprise AND sfaa010 = imag001
           AND (sfaadocdt BETWEEN l_bdate AND l_edate
            OR sfaa048 BETWEEN l_bdate AND l_edate)

   DELETE FROM sfec_tmp
   INSERT INTO sfec_tmp 
        SELECT sfec_t.*
          FROM sfaa_tmp,sfea_t,sfec_t
         WHERE sfaaent = sfeaent AND sfeaent = sfecent
           AND sfaadocno = sfec001 AND sfecdocno = sfeadocno
           AND sfec004 IN ('2','3')   #联产品类型 联产品，多产出视同一个逻辑计算成本阶  #wujie 150407 ，5:副产品排除
           AND sfea001 BETWEEN l_bdate AND l_edate
           AND sfeastus = 'S' 

   IF g_master.order = '0' THEN
#料件的来源码是采购性质，则成本阶(xcbb006)=99
      LET l_sql = " UPDATE axcp120_xcbb_tmp SET xcbb006 = 99 ",
                  "  WHERE imaa004 ='M' "
      PREPARE p120_upd_xcbb006_99 FROM l_sql  
      
      EXECUTE p120_upd_xcbb006_99
      IF SQLCA.sqlcode THEN
         CALL cl_errmsg('imaag001',l_imag001,'p120_upd_xcbb006_99',STATUS,1)                                  
         LET g_success='N'
         RETURN
      END IF

#料件是采购性质，但有开工单的话成本阶(xcbb006)=98
      LET l_sql = " UPDATE axcp120_xcbb_tmp SET xcbb006 = 98 ",
                  "  WHERE imaa004 ='M' ",
                  "    AND imag001 IN (SELECT DISTINCT sfaa010 FROM sfaa_tmp)"
      PREPARE p120_upd_xcbb006_98 FROM l_sql  
      
      EXECUTE p120_upd_xcbb006_98
      IF SQLCA.sqlcode THEN
         CALL cl_errmsg('imaag001',l_imag001,'p120_upd_xcbb006_98',STATUS,1)                                  
         LET g_success='N'
         RETURN
      END IF
   ELSE 
      UPDATE axcp120_xcbb_tmp SET xcbb006 = xcbb007 
   END IF

#判斷當工單的生產料件是imag001,但入庫类型有=2,3,5的  #联产品，副产品，多产出视同一个逻辑计算成本阶
#表示有入聯產品
   UPDATE axcp120_xcbb_tmp SET xcbb009 = 'N'
   
   LET l_sql = " UPDATE axcp120_xcbb_tmp SET xcbb009 = 'Y' ",
               "  WHERE imag001 IN (SELECT DISTINCT sfaa010 FROM sfaa_tmp,sfec_tmp ",
               "                     WHERE sfaaent = sfecent ", 
               "                       AND sfaadocno = sfec001)"
   PREPARE p120_upd_xcbb009 FROM l_sql  

   EXECUTE p120_upd_xcbb009
   IF SQLCA.sqlcode THEN
      CALL cl_errmsg('imaag001',l_imag001,'p120_upd_xcbb009',STATUS,1)                                  
      LET g_success='N'
      RETURN
   END IF

   IF g_master.check = 'Y' THEN
      LET l_sql = " UPDATE axcp120_xcbb_tmp SET xcbb006 = ? ",
                  "  WHERE imag001 = ? "
      PREPARE p120_upd_prep FROM l_sql   
      
      LET l_sql = " SELECT * FROM axcp120_xcbb_tmp "
      PREPARE p120_prep FROM l_sql
      DECLARE p120_curs CURSOR FOR p120_prep
         
      FOREACH p120_curs INTO g_tmp.*      
         LET l_xcbb006 = g_tmp.xcbb006
         LET l_xcbc003 = NULL
         LET l_xcbc004 = NULL
         SELECT xcbc003,xcbc004 INTO l_xcbc003,l_xcbc004 FROM xcbc_t
          WHERE xcbcent = g_enterprise AND xcbc001 = g_master.imagsite
            AND xcbc002 = g_tmp.imag011
         IF SQLCA.SQLCODE <> 100 THEN
            IF NOT cl_null(l_xcbc004) THEN
               IF l_xcbb006 > l_xcbc004 THEN
                  LET l_xcbb006 = l_xcbc004
                  EXECUTE p120_upd_prep USING l_xcbb006,g_tmp.imag001
                  IF SQLCA.sqlcode OR SQLCA.sqlerrd[3]=0  THEN
                     CALL cl_errmsg('imaag001',l_imag001,'p120_upd_prep',STATUS,1)                                  
                     LET g_success='N'
                     EXIT FOREACH
                  END IF                  
               END IF
            END IF
            IF NOT cl_null(l_xcbc003) THEN
               IF l_xcbb006 < l_xcbc003 THEN
                  LET l_xcbb006 = l_xcbc003
                  EXECUTE p120_upd_prep USING l_xcbb006,g_tmp.imag001
                  IF SQLCA.sqlcode OR SQLCA.sqlerrd[3]=0  THEN
                     CALL cl_errmsg('imaag001',l_imag001,'p120_upd_prep',STATUS,1)                                  
                     LET g_success='N'
                     EXIT FOREACH
                  END IF 
               END IF
            END IF
         END IF
         
         
      END FOREACH
   END IF

   IF g_master.order = '0' THEN
      CALL axcp120_nobom()
   END IF 
   CALL axcp120_setjp()  #处理联产品的成本阶
END FUNCTION]]>
  </point>
  <point name="function.axcp120_nobom" order="4" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_nobom()
DEFINE l_sql       STRING
DEFINE l_imag001   LIKE imag_t.imag001
DEFINE l_imag013   LIKE imag_t.imag013
DEFINE l_xcbb006_b LIKE xcbb_t.xcbb005
DEFINE l_xcbb006_n LIKE xcbb_t.xcbb005
DEFINE l_xcbb006   LIKE xcbb_t.xcbb005
DEFINE l_n         LIKE type_t.num5
DEFINE l_n1        LIKE type_t.num5
DEFINE l_sfbadocno LIKE sfba_t.sfbadocno

   LET l_sql = " SELECT xcbb006,sfbadocno FROM sfaa_t,sfba_t,axcp120_xcbb_tmp", 
               "  WHERE sfaadocno=sfbadocno AND imag001=sfaa010 AND sfba006=? ",
               "  AND sfaadocdt <= '",l_edate,"'",
               "  AND (sfaa048 IS NULL OR sfaa048 >='",l_bdate,"')",
               "  AND sfaastus='Y'",
               "  ORDER BY imag013"
   PREPARE p120_sfaa_prep FROM l_sql
   DECLARE p120_sfaa_curs SCROLL CURSOR FOR p120_sfaa_prep           
  
   LET l_sql = " SELECT min(xcbb005) FROM sfaa_t,sfba_t,axcp120_xcbb_tmp", 
               "  WHERE sfaadocno=sfbadocno AND imag001=sfba006 AND sfaa010=? ",
               "  AND sfaadocdt <= '",l_edate,"'",
               "  AND (sfaa048 IS NULL OR sfaa048 >='",l_bdate,"')",
               "  AND sfaastus='Y'",
               "  ORDER BY imag013"
   PREPARE p120_sfaa_prep1 FROM l_sql
   DECLARE p120_sfaa_curs1 SCROLL CURSOR FOR p120_sfaa_prep1
   
   DECLARE p120_nobom_curs CURSOR FOR
    SELECT imag001,imag013 FROM axcp120_xcbb_tmp WHERE xcbb006 = 0
    
    SELECT COUNT(*) INTO l_n1 FROM axcp120_xcbb_tmp WHERE xcbb006 = 0
    
   FOREACH p120_nobom_curs INTO l_imag001,l_imag013
      IF STATUS THEN
         LET g_success='N'
         CALL cl_errmsg('','','nobom for:',STATUS,1)  
         EXIT FOREACH
      END IF
      
      LET l_n = 0
      SELECT COUNT(*) INTO l_n FROM bmaa_t,bmba_t 
      WHERE bmaaent = bmbaent AND bmaa001 = bmba001
        AND bmaaent = g_enterprise AND bmaa001 = l_imag001
        AND bmaastus = 'Y' AND bmba005 <=l_edate
      IF l_n >0 THEN CONTINUE FOREACH END IF
      
      OPEN p120_sfaa_curs USING l_imag001
      FETCH FIRST p120_sfaa_curs INTO l_xcbb006,l_sfbadocno
      IF STATUS AND STATUS<>100 THEN  
         LET g_success='N'
         CALL cl_errmsg('','','p120_sfaa_curs',STATUS,1)  
         LET l_xcbb006 =''       
         LET l_imag001 =''      
         EXIT FOREACH
      END IF
      CLOSE p120_sfaa_curs
      
      IF NOT cl_null(l_sfbadocno) THEN
         OPEN p120_sfaa_curs1 USING l_imag001
         FETCH FIRST p120_sfaa_curs1 INTO l_xcbb006_b
         IF SQLCA.sqlcode THEN LET l_xcbb006_b = '' END IF
         CLOSE p120_sfaa_curs1
         
         IF l_xcbb006_b = 0 THEN 
            LET l_xcbb006_n = 0 
         ELSE
            IF l_xcbb006_b > 0 AND NOT cl_null(l_xcbb006_b) THEN
               LET l_xcbb006_n = l_xcbb006_b - 1
            ELSE 
               LET l_xcbb006_n = 97
            END IF
         END IF
         EXECUTE p120_upd_p2 USING l_xcbb006_n,l_imag001
         IF SQLCA.sqlcode OR SQLCA.sqlerrd[3]=0  THEN
            CALL cl_errmsg('imaag001',l_imag001,'upd imaag',STATUS,1)                                  
            LET g_success='N'
            EXIT FOREACH
         END IF
      END IF
   END FOREACH     
  
END FUNCTION]]>
  </point>
  <point name="function.axcp120_setjp" order="5" ver="6" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_setjp()
DEFINE l_imag001            LIKE imag_t.imag001
DEFINE l_imag013            LIKE imag_t.imag013
DEFINE l_xcbb006            LIKE xcbb_t.xcbb006  #联产品/多产出/副产品成本阶
DEFINE l_xcbb006_t          LIKE xcbb_t.xcbb006  #主件成本阶
DEFINE l_sfec005            LIKE sfec_t.sfec005

   DECLARE p120_setjp_curs CURSOR FOR 
    SELECT imag001,sfec005,imag013,xcbb006 FROM sfaa_t,sfea_t,sfec_t,axcp120_xcbb_tmp
       WHERE sfaaent = sfeaent AND sfeaent = sfecent
         AND sfaadocno = sfec001 AND sfecdocno = sfeadocno
         AND sfaa010 = imag001 
         AND sfea001 BETWEEN l_bdate AND l_edate
         AND sfeastus = 'S' AND sfaa010 <> sfec005
         AND xcbb009 ='Y'
         AND sfec004 IN ('2','3')   #wujie 150407 ，5:副产品排除
                  
   FOREACH p120_setjp_curs INTO l_imag001,l_sfec005,l_imag013,l_xcbb006_t
#wujie 150407 --begin   #以主件成本阶为准
##抓聯產品的成本階,若主產品的成本階比聯產品成本階小的話,就以主產品的成本階為主
#      SELECT xcbb006 INTO l_xcbb006 FROM axcp120_xcbb_tmp
#       WHERE imag001 = l_sfec005
#         AND xcbb009 = 'N'
#      IF l_xcbb006_t < l_xcbb006 THEN
#         LET l_xcbb006 = l_xcbb006_t
#      END IF
      SELECT xcbb006 INTO l_xcbb006 FROM axcp120_xcbb_tmp
       WHERE imag001 = l_sfec005
         AND xcbb009 = 'N'
#wujie 150407 --end 
      
      EXECUTE p120_upd_p2 USING l_xcbb006,l_sfec005
      IF SQLCA.sqlcode OR SQLCA.sqlerrd[3]=0  THEN
         CALL cl_errmsg('imaag001',l_sfec005,'upd imaag',STATUS,1)                                  
         LET g_success='N'
         EXIT FOREACH
      END IF
   END FOREACH

   #前段资料无，委外待补
         
END FUNCTION]]>
  </point>
  <point name="function.axcp120_chk_year_month" order="6" ver="3" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_chk_year_month()
DEFINE r_success       LIKE type_t.num5
DEFINE l_glaa003       LIKE glaa_t.glaa003
DEFINE l_cnt           LIKE type_t.num5

   LET r_success = TRUE
   IF g_master.year IS NULL THEN
      LET r_success = TRUE
      RETURN r_success
   END IF

   IF g_master.imagsite IS NULL THEN
      LET r_success = TRUE
      RETURN r_success
   END IF
   
#抓出会计周期参考表号  glaa003
   SELECT glaa003 INTO l_glaa003
     FROM glaa_t
    WHERE glaaent  = g_enterprise
      AND glaacomp = g_master.imagsite
      AND glaa014  = 'Y'     
   
   IF g_master.month IS NULL THEN   
#只检查年 从glav中找到输入的年是否存在
      LET l_cnt = 0 
      SELECT COUNT(*) INTO l_cnt 
        FROM glav_t
       WHERE glavent  = g_enterprise
         AND glav001  = l_glaa003
         AND glav002  = g_master.year
         AND glavstus = 'Y'
         
      IF l_cnt = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = "axc-00331"
         LET g_errparam.extend = g_master.year
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
   ELSE
      LET l_cnt = 0 
      SELECT COUNT(*) INTO l_cnt 
        FROM glav_t
       WHERE glavent  = g_enterprise
         AND glav001  = l_glaa003
         AND glav002  = g_master.year
         AND glav006  = g_master.month
         AND glavstus = 'Y'
         
      IF l_cnt = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = "axc-00332"
         LET g_errparam.extend = g_master.year,'|',g_master.month
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
   END IF
   
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="function.axcp120_upd_xcbb006" order="7" ver="9" cite_std="N" new="Y" status="d" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="function.axcp120_drop_tmp_table" order="7" ver="9" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_drop_tmp_table()
   DROP TABLE axcp120_xcbb_tmp
   
   DROP TABLE axcp120_xcbb_tmp1
   
   DROP TABLE axcp120_ins_xcbb_t   
   
   DROP TABLE axcp120_sfaa_tmp
   
   DROP TABLE axcp120_imaa_tmp
   
   DROP TABLE axcp120_imaa_tmp1

   DROP TABLE sfaa_tmp  
   
   DROP TABLE sfec_tmp 
END FUNCTION]]>
  </point>
  <point name="function.axcp120_gen_imac" order="8" ver="9" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 依发料计算低阶码-参考gp5.25的abmp6401
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: r_success      回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 2015/07/04 By wujie
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp120_gen_imac()
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_sql         STRING
   DEFINE l_level       LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_cnt_remain  LIKE type_t.num5

   
   LET r_success = TRUE
#此逻辑是参考gp5.25中的abmp6041来实现的
#step1：填充axcp120_sfaa_tmp（所有料号按主件VS发料的关系存档）      
#       填充axcp120_imaa_tmp（存放参与低阶码运算的所有料号）
#       清空axcp120_ins_xcbb_t
#       剔除死循环
#step2：主循环
#       循环内容，剥离顶层料件（即只存在于单头而不存在于单身的料件）
#       被剥离出来的料件被暂存与sub_ima中，并会被从axcp120_imaa_tmp,axcp120_sfaa_tmp中删除
#       当某次剥离出来发现结果集为空时，说明已经没有顶层料件，此时如果axcp120_imaa_tmp中为空，则表示低阶码运算结束
#       否则说明有循环存在,axcp120_imaa_tmp中剩余的为涉及循环的料件，全部更新为99

#step1
#填充axcp120_sfaa_tmp
   DELETE FROM axcp120_sfaa_tmp
   
   INSERT INTO axcp120_sfaa_tmp 
   SELECT DISTINCT sfaa010,sfdd001 FROM sfda_t,sfdd_t,sfdc_t,sfaa_t
       WHERE sfdaent   = sfdcent 
         AND sfdaent   = sfaaent
         AND sfdaent   = sfddent
         AND sfdasite  = sfdcsite 
         AND sfdasite  = sfddsite
         AND sfdasite  = sfaasite 
         AND sfdadocno = sfdcdocno
         AND sfdadocno = sfdddocno                  
         AND sfaadocno = sfdc001
         AND sfdcseq   = sfddseq
         AND sfdcsite  = g_master.imagsite
         AND sfdaent   = g_enterprise
         AND sfdastus  = 'S'
         AND sfda002 IN ('11','12','13','14','15') 
         AND sfda001 BETWEEN l_bdate AND l_edate
#         AND (sfaa048 IS  NULL OR sfaa048 < l_bdate)    #已做成本结案的工单排除掉
                
   IF SQLCA.sqlcode THEN
      LET r_success = FALSE
      CALL cl_errmsg('','','INS axcp120_sfaa_tmp',SQLCA.sqlcode,1)
      RETURN r_success
   END IF
    
#填充axcp120_imaa_tmp
   DELETE FROM axcp120_imaa_tmp

   LET l_sql = "
   INSERT INTO axcp120_imaa_tmp
   SELECT DISTINCT imaa001 FROM
   (
   SELECT DISTINCT sfaa010 imaa001 FROM axcp120_sfaa_tmp
   UNION
   SELECT DISTINCT sfdd001 FROM axcp120_sfaa_tmp
   )"
   
   PREPARE axcp120_ins_imaa FROM l_sql
   EXECUTE axcp120_ins_imaa   
    
   IF SQLCA.sqlcode THEN
      LET r_success = FALSE
      CALL cl_errmsg('','','INS axcp120_imaa_tmp',SQLCA.sqlcode,1)
      RETURN r_success
   END IF
    
#清空axcp120_ins_xcbb_t
   DELETE FROM axcp120_ins_xcbb_t
    
#剔除死循环
   LET l_sql="SELECT DISTINCT X1||Y1 FROM  ",                                
   					"( ",                                                               
   					"  SELECT * FROM " ,                                                
   					"  (SELECT sfaa010 x1,sfdd001 y1 FROM axcp120_sfaa_tmp ), ",      
   					"  (SELECT sfaa010 x2,sfdd001 y2 FROM axcp120_sfaa_tmp ) ",       
   					"  WHERE x1=y2 AND y1=x2  ", 
   					") ",                       
   					"UNION ",                                                           
  					"SELECT DISTINCT X2||Y2 FROM  ",                                
   					"( ",                                                               
   					"  SELECT * FROM ",                                                 
   					"  (SELECT sfaa010 x1,sfdd001 y1 FROM axcp120_sfaa_tmp ), ",      
   					"  (SELECT sfaa010 x2,sfdd001 y2 FROM axcp120_sfaa_tmp ) ",       
   					"  WHERE x1=y2 AND y1=x2  ", 
 					") "                                                                                                              
   LET l_sql="DELETE FROM axcp120_sfaa_tmp WHERE sfaa010||sfdd001 IN ( ",l_sql," ) "  
    
   PREPARE axcp120_del_sfaa FROM l_sql
   EXECUTE axcp120_del_sfaa
    
   IF SQLCA.sqlcode THEN
      LET r_success = FALSE
      CALL cl_errmsg('','','DEL FROM axcp120_sfaa_tmp',SQLCA.sqlcode,1)
      RETURN r_success
   END IF

#开始主循环
   DELETE FROM axcp120_imaa_tmp1
   DELETE FROM axcp120_ins_xcbb_t
   LET l_level = 0
   WHILE TRUE
        IF l_level >= g_master.level THEN
           LET r_success = FALSE
           CALL cl_errmsg('','','','axc-00720',1)  #超过预设最大展开层数
           RETURN r_success        
        END IF
        #找出有单头无单身的料件
        LET l_cnt_remain = 0
        SELECT COUNT(*) INTO l_cnt_remain FROM axcp120_imaa_tmp
        INSERT INTO axcp120_imaa_tmp1 SELECT imaa001 FROM axcp120_imaa_tmp
          WHERE NOT EXISTS ( SELECT 1 FROM axcp120_sfaa_tmp WHERE sfdd001 = imaa001 )
            AND EXISTS ( SELECT 1 FROM axcp120_sfaa_tmp WHERE sfaa010 = imaa001 )          
        IF SQLCA.sqlcode THEN
           LET r_success = FALSE
           CALL cl_errmsg('','','INS axcp120_imaa_tmp1',SQLCA.sqlcode,1)
           RETURN r_success
        END IF
 
        LET l_cnt = 0
        SELECT COUNT(*) INTO l_cnt FROM axcp120_imaa_tmp1
        #如果当前没有了则要判断是出现循环还是全部执行完毕       
        IF l_cnt =0 THEN
        	  #如果最后axcp120_imaa_tmp(基准表)中没有剩余料件，则表示所有料件低阶码已经全部计算完毕
           IF l_cnt_remain = 0 THEN
              LET r_success = TRUE
              RETURN r_success
           ELSE
             #这里没有采用老TT的做法，直接把剩余料件设为99阶
             INSERT INTO axcp120_ins_xcbb_t
             SELECT DISTINCT imaa001,'99' FROM axcp120_imaa_tmp
           END IF
           EXIT WHILE
        END IF
         
        #更新这些料号的低阶码
        LET l_sql = " MERGE INTO axcp120_ins_xcbb_t T1 ",
                    " USING axcp120_imaa_tmp1 T2 ",   
                    "    ON (T1.imag001 = T2.imaa0011 )",
                    " WHEN MATCHED THEN UPDATE SET T1.xcbb006 = '",l_level,"'", 
                    "                    WHERE T1.xcbb006 < '",l_level,"'",
                    " WHEN NOT MATCHED THEN INSERT VALUES (T2.imaa0011,'",l_level,"')"        
       
        PREPARE axcp120_merge_xcbb FROM l_sql
        EXECUTE axcp120_merge_xcbb       
        IF SQLCA.sqlcode THEN
           LET r_success = FALSE
           CALL cl_errmsg('','','MERGE axcp120_ins_xcbb_t',SQLCA.sqlcode,1)
           RETURN r_success
        END IF

        #把这些料号从基准表中剔除掉，同时从关系表中剔除掉以其为父料件的关系记录
        DELETE FROM axcp120_imaa_tmp WHERE EXISTS (SELECT 1 FROM axcp120_imaa_tmp1 WHERE imaa0011 = imaa001)
        DELETE FROM axcp120_sfaa_tmp WHERE EXISTS ( SELECT 1 FROM axcp120_imaa_tmp1 WHERE imaa0011 = sfaa010 )

        #清空axcp120_imaa_tmp1
        DELETE FROM axcp120_imaa_tmp1

        IF l_level >= g_master.level THEN
           LET r_success = FALSE
           CALL cl_errmsg('','','','axc-00720',1)  #超过预设最大展开层数
           RETURN r_success        
        END IF
        #低阶码循环累加
        LET l_level=l_level+1 

   END WHILE   
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="construct.c.imagsite" order="" ver="1" cite_std="" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooef001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO imagsite  #顯示到畫面上
            NEXT FIELD imagsite                     #返回原欄位
    

]]>
  </point>
  <point name="global.variable" order="" ver="4" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#單頭 type 宣告
DEFINE g_glaa003    LIKE glaa_t.glaa003
DEFINE g_tmp        RECORD     
   xcbbent      LIKE xcbb_t.xcbbent,
   imagsite     LIKE imag_t.imagsite,   #法人組織
   xcbb001      LIKE xcbb_t.xcbb001,
   xcbb002      LIKE xcbb_t.xcbb002,
   imag001      LIKE imag_t.imag001,   #料件編號
   xcbb004      LIKE xcbb_t.xcbb004,   #特性
   imaa006      LIKE imaa_t.imaa006,   #單位
   imag013      LIKE imag_t.imag013,   #成本料號
   xcbb006      LIKE xcbb_t.xcbb006,   #成本階
   xcbb007      LIKE xcbb_t.xcbb007,   #按發料計算的低階碼
   xcbb008      LIKE xcbb_t.xcbb008,   #按BOM計算的低階碼
   xcbb009      LIKE xcbb_t.xcbb009,   #當月入聯產品否
   imag011      LIKE imag_t.imag011,   #成本分群碼
   imaa003      LIKE imaa_t.imaa003,   #主分群碼
   imaa004     LIKE imaa_t.imaa004     #料件类别
   END RECORD
DEFINE l_bdate          LIKE glav_t.glav004 #起始年度+期別對應的起始截止日期
DEFINE l_edate          LIKE glav_t.glav004
DEFINE g_success        LIKE type_t.chr1
DEFINE g_ref_fields     DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars       DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields     DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列]]>
  </point>
  <point name="init.init" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL cl_set_combo_scc("order","8913")
    ]]>
  </point>
  <point name="input.a.imagsite" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.imagsite) THEN 
#此段落由子樣板a19產生
               #校驗代值
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_master.imagsite
                  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooef001_1") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
                  IF g_master.year IS NULL OR g_master.month IS NULL THEN
                     SELECT glaa010,glaa011 INTO g_master.year,g_master.month
                       FROM glaa_t
                      WHERE glaaent  = g_enterprise
                        AND glaacomp = g_master.imagsite
                        AND glaa014  = 'Y'
                  END IF
               ELSE
                  #檢查失敗時後續處理
                  NEXT FIELD CURRENT
               END IF
#抓出会计周期参考表号  glaa003
               SELECT glaa003 INTO g_glaa003
                 FROM glaa_t
                WHERE glaaent  = g_enterprise
                  AND glaacomp = g_master.imagsite
                  AND glaa014  = 'Y'             

            END IF 
            INITIALIZE g_ref_fields TO NULL
            LET g_ref_fields[1] = g_master.imagsite
            CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
            LET g_master.imagsite_desc = '', g_rtn_fields[1] , ''
            DISPLAY BY NAME g_master.imagsite_desc]]>
  </point>
  <point name="input.a.level" order="" ver="9" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.level) THEN 
            END IF 

]]>
  </point>
  <point name="input.a.month" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.month) THEN
               IF NOT axcp120_chk_year_month() THEN
                  LET g_master.month = NULL
                  NEXT FIELD CURRENT
               END IF
            END IF]]>
  </point>
  <point name="input.a.year" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            IF NOT cl_null(g_master.year) THEN
               IF NOT axcp120_chk_year_month() THEN
                  LET g_master.year = NULL
                  NEXT FIELD CURRENT
               END IF
            END IF ]]>
  </point>
  <point name="input.c.imagsite" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_master.imagsite             #給予default值
            LET g_qryparam.where = " ooef003 = 'Y'"

            #給予arg
            CALL q_ooef001()

            LET g_master.imagsite = g_qryparam.return1              #將開窗取得的值回傳到變數


            DISPLAY g_master.imagsite TO imagsite              #顯示到畫面上

            NEXT FIELD imagsite                          #返回原欄位]]>
  </point>
  <point name="input.m.before_input" order="" ver="9" cite_std="N" new="N" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[               LET g_master.check = 'N'
               LET g_master.order = '0'
               LET g_master.level = 20]]>
  </point>
  <point name="process.background_finish" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL axcp120_get_xcbb_tmp()
      IF g_success = 'Y' THEN
         CALL s_transaction_end('Y','0')
      ELSE
         CALL s_transaction_end('N','0')
      END IF
      CALL axcp120_drop_tmp_table()]]>
  </point>
  <point name="process.count_progress" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL cl_progress_bar_no_window(3)]]>
  </point>
  <point name="process.foreground_finish" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL axcp120_get_xcbb_tmp()
      IF g_success = 'Y' THEN
         CALL s_transaction_end('Y','1')
      ELSE
         CALL cl_err_showmsg()
         CALL s_transaction_end('N','1')
      END IF
      CALL axcp120_drop_tmp_table()]]>
  </point>
  <point name="process.pre_process" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL axcp120_create_tmp()
   CALL cl_err_showmsg_init()]]>
  </point>
  <point name="ui_dialog.define" order="" ver="3" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="ui_dialog.more_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <section id="axcp120.description" ver="137" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:9,PR版次:9) Build-000218
#+ 
#+ Filename...: axcp120
#+ Description: 成本階計算作業
#+ Creator....: 02291(2014-03-20 13:43:47)
#+ Modifier...: 00537(2015-07-05 16:36:18) -SD/PR-
]]>
  </section>
  <section id="axcp120.get_buffer" ver="5" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION axcp120_get_buffer(p_dialog)
   DEFINE p_dialog   ui.DIALOG
   
   LET g_master.imagsite = p_dialog.getFieldBuffer('imagsite')
   LET g_master.year = p_dialog.getFieldBuffer('year')
   LET g_master.month = p_dialog.getFieldBuffer('month')
   LET g_master.order = p_dialog.getFieldBuffer('order')
   LET g_master.level = p_dialog.getFieldBuffer('level')
   LET g_master.check = p_dialog.getFieldBuffer('check')
 
   CALL cl_schedule_get_buffer(p_dialog)
 
   #add-point:get_buffer段其他欄位處理
   {<point name="get_buffer.others"/>}
   #end add-point
END FUNCTION
]]>
  </section>
  <section id="axcp120.global" ver="14" status="" src="s" readonly="">
    <![CDATA[#應用 p01 樣板自動產生(Version:10)
{<point name="global.memo" />}
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
   DEFINE g_chk_jobid          LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   {<point name="global.parameter"/>}
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
DEFINE g_wc              STRING
 
PRIVATE TYPE type_master RECORD
       imagsite LIKE type_t.chr10, 
   imagsite_desc LIKE type_t.chr80, 
   year LIKE type_t.chr500, 
   month LIKE type_t.chr500, 
   order LIKE type_t.chr500, 
   level LIKE type_t.num5, 
   check LIKE type_t.chr500, 
   stagenow LIKE type_t.chr80,
       wc               STRING
       END RECORD
 
#模組變數(Module Variables)
DEFINE g_master type_master
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable" edit="s"/>}
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="axcp120.init" ver="6" status="" src="s" readonly="">
    <![CDATA[#+ 初始化作業
PRIVATE FUNCTION axcp120_init()
   #add-point:init段define 
   {<point name="init.define" edit="s"/>}
   #end add-point
   #add-point:init段define (客製用)
   {<point name="init.define_customerization" edit="c"/>}
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="axcp120.main" ver="5" status="" src="s" readonly="">
    <![CDATA[MAIN
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define 
   {<point name="main.define" edit="s"/>}
   #end add-point 
   #add-point:main段define (客製用)
   {<point name="main.define_customerization" edit="c"/>}
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axc","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   {<point name="main.background"/>}
   #end add-point
 
   #背景(Y) 或半背景(T) 時不做主畫面開窗
   IF g_bgjob = "Y" OR g_bgjob = "T" THEN
      #排程參數由01開始，若不是1開始，表示有保留參數
      LET ls_js = g_argv[01]
     #CALL util.JSON.parse(ls_js,g_master)   #p類主要使用l_param,此處不解析
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
      CALL axcp120_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axcp120 WITH FORM cl_ap_formpath("axc",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL axcp120_init()
 
      #進入選單 Menu (="N")
      CALL axcp120_ui_dialog()
 
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axcp120
   END IF
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
]]>
  </section>
  <section id="axcp120.msgcentre_notify" ver="1" status="" src="s" readonly="">
    <![CDATA[PRIVATE FUNCTION axcp120_msgcentre_notify()
 
   DEFINE lc_state LIKE type_t.chr5
 
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = "process"
 
   #add-point:msgcentre其他通知
   {<point name="msg_centre.process"/>}
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
]]>
  </section>
  <section id="axcp120.other_function" ver="1" status="" src="s" readonly="">
    <![CDATA[#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
]]>
  </section>
  <section id="axcp120.process" ver="5" status="" src="s" readonly="">
    <![CDATA[#+ 資料處理   (r類使用g_master為主處理/p類使用l_param為主)
PRIVATE FUNCTION axcp120_process(ls_js)
   DEFINE ls_js         STRING
   DEFINE lc_param      type_parameter
   DEFINE li_stus       LIKE type_t.num5
   DEFINE li_count      LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql        STRING             #主SQL
   DEFINE li_p01_status LIKE type_t.num5
   #add-point:process段define 
   {<point name="process.define" edit="s"/>}
   #end add-point
   #add-point:process段define (客製用)
   {<point name="process.define_customerization" edit="c"/>}
   #end add-point
 
  #INITIALIZE lc_param TO NULL           #p類不可以清空
   CALL util.JSON.parse(ls_js,lc_param)  #r類作業被t類呼叫時使用, p類主要解開參數處
 
  #IF lc_param.wc IS NOT NULL THEN
  #   LET g_bgjob = "T"       #特殊情況,此為t類作業鬆耦合串入報表主程式使用
  #END IF
 
   #add-point:process段前處理
   {<point name="process.pre_process"/>}
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      {<point name="process.count_progress"/>}
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE axcp120_process_cs CURSOR FROM ls_sql
#  FOREACH axcp120_process_cs INTO
   #add-point:process段process
   {<point name="process.process"/>}
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      {<point name="process.foreground_finish"/>}
      #end add-point
      CALL cl_ask_confirm3("std-00012","")
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      {<point name="process.background_finish"/>}
      #end add-point
      CALL cl_schedule_exec_call(li_p01_status)
   END IF
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL axcp120_msgcentre_notify()
 
END FUNCTION
]]>
  </section>
  <section id="axcp120.transfer_argv" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION axcp120_transfer_argv(ls_js)
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog       STRING,
             actionid   STRING,
             background LIKE type_t.chr1,
             param      DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
   #add-point:transfer_agrv段define 
   {<point name="transfer_agrv.define" edit="s"/>}
   #end add-point
   #add-point:transfer_agrv段define (客製用)
   {<point name="transfer_agrv.define_customerization" edit="c"/>}
   #end add-point
 
   LET la_cmdrun.prog = g_prog
   LET la_cmdrun.background = "Y"
   LET la_cmdrun.param[1] = ls_js
 
   #add-point:transfer.argv段程式內容
   {<point name="transfer.argv.define"/>}
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
]]>
  </section>
  <section id="axcp120.ui_dialog" ver="20" status="" src="s" readonly="">
    <![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION axcp120_ui_dialog()
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num10
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE l_dialog ui.DIALOG
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define 
   {<point name="ui_dialog.define" edit="s"/>}
   #end add-point
   #add-point:ui_dialog段define (客製用)
   {<point name="ui_dialog.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:ui_dialog段before dialog
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
 
   WHILE TRUE
      #add-point:ui_dialog段before dialog2
      {<point name="ui_dialog.before_dialog2"/>}
      #end add-point
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #應用 a57 樣板自動產生(Version:2)
         INPUT BY NAME g_master.imagsite,g_master.year,g_master.month,g_master.order,g_master.level, 
             g_master.check 
            ATTRIBUTE(WITHOUT DEFAULTS)
            
            #自訂ACTION(master_input)
            
         
            BEFORE INPUT
               #add-point:資料輸入前
               {<point name="input.m.before_input"/>}
               #end add-point
         
                     #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD imagsite
            
            #add-point:AFTER FIELD imagsite
            {<point name="input.a.imagsite" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD imagsite
            #add-point:BEFORE FIELD imagsite
            {<point name="input.b.imagsite" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE imagsite
            #add-point:ON CHANGE imagsite
            {<point name="input.g.imagsite" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD year
            #add-point:BEFORE FIELD year
            {<point name="input.b.year" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD year
            
            #add-point:AFTER FIELD year
            {<point name="input.a.year" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE year
            #add-point:ON CHANGE year
            {<point name="input.g.year" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD month
            #add-point:BEFORE FIELD month
            {<point name="input.b.month" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD month
            
            #add-point:AFTER FIELD month
            {<point name="input.a.month" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE month
            #add-point:ON CHANGE month
            {<point name="input.g.month" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD order
            #add-point:BEFORE FIELD order
            {<point name="input.b.order" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD order
            
            #add-point:AFTER FIELD order
            {<point name="input.a.order" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE order
            #add-point:ON CHANGE order
            {<point name="input.g.order" />}
            #END add-point 
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD level
            #應用 a15 樣板自動產生(Version:2)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_master.level,"0","1","99","1","azz-00087",1) THEN
               NEXT FIELD level
            END IF 
 
 
            #add-point:AFTER FIELD level
            {<point name="input.a.level" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD level
            #add-point:BEFORE FIELD level
            {<point name="input.b.level" />}
            #END add-point
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE level
            #add-point:ON CHANGE level
            {<point name="input.g.level" />}
            #END add-point 
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD check
            #add-point:BEFORE FIELD check
            {<point name="input.b.check" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD check
            
            #add-point:AFTER FIELD check
            {<point name="input.a.check" />}
            #END add-point
            
 
         #應用 a04 樣板自動產生(Version:2)
         ON CHANGE check
            #add-point:ON CHANGE check
            {<point name="input.g.check" />}
            #END add-point 
 
 
                     #Ctrlp:input.c.imagsite
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD imagsite
            #add-point:ON ACTION controlp INFIELD imagsite
            {<point name="input.c.imagsite" />}
            #END add-point
 
         #Ctrlp:input.c.year
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD year
            #add-point:ON ACTION controlp INFIELD year
            {<point name="input.c.year" />}
            #END add-point
 
         #Ctrlp:input.c.month
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD month
            #add-point:ON ACTION controlp INFIELD month
            {<point name="input.c.month" />}
            #END add-point
 
         #Ctrlp:input.c.order
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD order
            #add-point:ON ACTION controlp INFIELD order
            {<point name="input.c.order" />}
            #END add-point
 
         #Ctrlp:input.c.level
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD level
            #add-point:ON ACTION controlp INFIELD level
            {<point name="input.c.level" />}
            #END add-point
 
         #Ctrlp:input.c.check
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD check
            #add-point:ON ACTION controlp INFIELD check
            {<point name="input.c.check" />}
            #END add-point
 
 
               
            AFTER INPUT
               #add-point:資料輸入後
               {<point name="input.m.after_input"/>}
               #end add-point
               
            #add-point:其他管控(on row change, etc...)
            {<point name="input.other"/>}
            #end add-point
         END INPUT
 
 
         
         #應用 a58 樣板自動產生(Version:2)
         CONSTRUCT BY NAME g_master.wc ON imagsite,year,month,order,check
            BEFORE CONSTRUCT
               #add-point:cs段before_construct
               {<point name="cs.head.before_construct"/>}
               #end add-point 
         
            #公用欄位開窗相關處理
            
               
            #一般欄位開窗相關處理    
                     #Ctrlp:construct.c.imagsite
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD imagsite
            #add-point:ON ACTION controlp INFIELD imagsite
            {<point name="construct.c.imagsite" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD imagsite
            #add-point:BEFORE FIELD imagsite
            {<point name="construct.b.imagsite" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD imagsite
            
            #add-point:AFTER FIELD imagsite
            {<point name="construct.a.imagsite" />}
            #END add-point
            
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD year
            #add-point:BEFORE FIELD year
            {<point name="construct.b.year" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD year
            
            #add-point:AFTER FIELD year
            {<point name="construct.a.year" />}
            #END add-point
            
 
         #Ctrlp:construct.c.year
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD year
            #add-point:ON ACTION controlp INFIELD year
            {<point name="construct.c.year" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD month
            #add-point:BEFORE FIELD month
            {<point name="construct.b.month" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD month
            
            #add-point:AFTER FIELD month
            {<point name="construct.a.month" />}
            #END add-point
            
 
         #Ctrlp:construct.c.month
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD month
            #add-point:ON ACTION controlp INFIELD month
            {<point name="construct.c.month" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD order
            #add-point:BEFORE FIELD order
            {<point name="construct.b.order" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD order
            
            #add-point:AFTER FIELD order
            {<point name="construct.a.order" />}
            #END add-point
            
 
         #Ctrlp:construct.c.order
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD order
            #add-point:ON ACTION controlp INFIELD order
            {<point name="construct.c.order" />}
            #END add-point
 
         #應用 a01 樣板自動產生(Version:1)
         BEFORE FIELD check
            #add-point:BEFORE FIELD check
            {<point name="construct.b.check" />}
            #END add-point
 
         #應用 a02 樣板自動產生(Version:1)
         AFTER FIELD check
            
            #add-point:AFTER FIELD check
            {<point name="construct.a.check" />}
            #END add-point
            
 
         #Ctrlp:construct.c.check
         #應用 a03 樣板自動產生(Version:2)
         ON ACTION controlp INFIELD check
            #add-point:ON ACTION controlp INFIELD check
            {<point name="construct.c.check" />}
            #END add-point
 
 
            
            #add-point:其他管控
            {<point name="cs.other"/>}
            #end add-point
            
         END CONSTRUCT
 
 
      
         #add-point:ui_dialog段construct
         {<point name="ui_dialog.more_construct"/>}
         #end add-point
         #add-point:ui_dialog段input
         {<point name="ui_dialog.more_input"/>}
         #end add-point
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         BEFORE DIALOG
            LET l_dialog = ui.DIALOG.getCurrent()
            CALL axcp120_get_buffer(l_dialog)
            #add-point:ui_dialog段before dialog
            {<point name="ui_dialog.before_dialog3"/>}
            #end add-point
 
         ON ACTION batch_execute
            LET g_action_choice = "batch_execute"
            ACCEPT DIALOG
 
         #add-point:ui_dialog段before_qbeclear
         {<point name="ui_dialog.before_qbeclear" mark="Y"/>}
         #end add-point
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE g_master.* TO NULL   #畫面變數清空
            INITIALIZE lc_param.* TO NULL   #傳遞參數變數清空
            #add-point:ui_dialog段qbeclear
            {<point name="ui_dialog.qbeclear"/>}
            #end add-point
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION close
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM   
         INITIALIZE g_master.* TO NULL
         LET g_wc  = ' 1=2'
         LET g_action_choice = ""
         CALL axcp120_init()
         CONTINUE WHILE
      END IF
 
      #檢查批次設定是否有錯(或未設定完成)
      IF NOT cl_schedule_exec_check() THEN
         CONTINUE WHILE
      END IF
      
      LET lc_param.wc = g_master.wc    #把畫面上的wc傳遞到參數變數
      #請在下方的add-point內進行把畫面的輸入資料(g_master)轉換到傳遞參數變數(lc_param)的動作
      #add-point:ui_dialog段exit dialog
      {<point name="process.exit_dialog"/>}
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)  #r類使用g_master/p類使用lc_param
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         IF g_chk_jobid THEN 
            LET g_jobid = g_schedule.gzpa001
         ELSE 
            LET g_jobid = cl_schedule_get_jobid(g_prog)
         END IF 
 
         #依照指定模式執行報表列印
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL axcp120_process(ls_js)
 
            WHEN g_schedule.gzpa003 = "1"
                 LET ls_js = axcp120_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
 
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
 
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid,ls_js)
         END CASE  
 
         IF g_schedule.gzpa003 = "2" OR g_schedule.gzpa003 = "3" THEN 
            CALL cl_ask_confirm3("std-00014","") #設定完成
         END IF    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
 
         #add-point:ui_dialog段after schedule
         {<point name="process.after_schedule"/>}
         #end add-point
 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
]]>
  </section>
</add_points>
