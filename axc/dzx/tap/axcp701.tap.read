<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<add_points prog="axcp701" std_prog="axcp701" erpver="1.0" module="AXC" ver="4" env="s" zone="t10prd" booking="N" type="M" identity="s" section_flag="N" designer_ver="1.0">
  <other>
    <code_template value="W" status=""/>
    <free_style value="N" status=""/>
    <start_arg value="" status=""/>
  </other>
  <point name="function.axcp701_ref_show" order="1" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[# 参考栏位带值
PRIVATE FUNCTION axcp701_ref_show()

   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_input.xceald
   CALL ap_ref_array2(g_ref_fields,"SELECT glaal002 FROM glaal_t WHERE glaalent='"||g_enterprise||"' AND glaalld=? AND glaal001='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_input.xceald_desc = g_rtn_fields[1]
   DISPLAY BY NAME g_input.xceald_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_input.xceald
   CALL ap_ref_array2(g_ref_fields,"SELECT glaacomp,glaa121,glaa100 FROM glaa_t WHERE glaaent='"||g_enterprise||"' AND glaald=? ","") RETURNING g_rtn_fields
   LET g_input.glaacomp = g_rtn_fields[1]
   LET g_glaa121 = g_rtn_fields[2]
   LET g_glaa100 = g_rtn_fields[3]  #add 150304
   DISPLAY BY NAME g_input.glaacomp
   #add 150304
   IF g_glaa100 = 'Y' THEN
      CALL cl_set_comp_visible('cont_no',FALSE)
   ELSE
      CALL cl_set_comp_visible('cont_no',TRUE)
   END IF
   #add 150304 end
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_input.glaacomp
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_input.glaacomp_desc = g_rtn_fields[1]
   DISPLAY BY NAME g_input.glaacomp_desc
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_input.glaacomp
   CALL ap_ref_array2(g_ref_fields,"SELECT ooef004 FROM ooef_t WHERE ooefent='"||g_enterprise||"' AND ooef001=? ","") RETURNING g_rtn_fields
   LET g_ooef004 = g_rtn_fields[1]
END FUNCTION]]>
  </point>
  <point name="function.axcp701_change_to_sql" order="2" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#
PRIVATE FUNCTION axcp701_change_to_sql(p_wc)
   DEFINE p_wc       STRING
   DEFINE r_wc       STRING
   DEFINE tok        base.StringTokenizer
   DEFINE l_str      STRING

   LET tok = base.StringTokenizer.create(p_wc,",")
   WHILE tok.hasMoreTokens()
      IF cl_null(l_str) THEN
         LET l_str = tok.nextToken()
      ELSE
         LET l_str = l_str,"','",tok.nextToken()
      END IF
   END WHILE
   LET r_wc = "'",l_str,"'"

   RETURN r_wc
END FUNCTION]]>
  </point>
  <point name="function.axcp701_create_tmp" order="3" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[# 创建临时表
PRIVATE FUNCTION axcp701_create_tmp()
   DEFINE r_success       LIKE type_t.num5
   
   WHENEVER ERROR CONTINUE
   LET r_success = FALSE
   
   DROP TABLE axcp701_tmp;
   CREATE TEMP TABLE axcp701_tmp(
     sel            LIKE type_t.chr1,
     xceald         LIKE xcea_t.xceald,
     xceadocno      LIKE xcea_t.xceadocno,
     xcea002        LIKE xcea_t.xcea002,
     xcea001        LIKE xcea_t.xcea001
   );
   
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "create" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      
      RETURN r_success
   END IF
   
   LET r_success = TRUE
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="function.axcp701_p" order="4" ver="4" cite_std="N" new="Y" status="u" src="s" readonly="" mark_hard="N">
    <![CDATA[# 产生凭证
PRIVATE FUNCTION axcp701_p()
   DEFINE r_success       LIKE type_t.num5
   DEFINE r_start_no      LIKE glap_t.glapdocno
   DEFINE r_end_no        LIKE glap_t.glapdocno
   DEFINE l_wc            STRING
   DEFINE l_xceald        LIKE xcea_t.xceald
   DEFINE l_xceadocno     LIKE xcea_t.xceadocno
   DEFINE l_xcea002       LIKE xcea_t.xcea002
   DEFINE l_cnt           LIKE type_t.num5
   DEFINE l_sql           STRING
   DEFINE l_success       LIKE type_t.num5
   
   IF g_glaa121 IS NULL THEN
      CALL s_ld_sel_glaa(g_input.xceald,'glaa121') RETURNING l_success,g_glaa121
      IF NOT l_success THEN
         RETURN
      END IF
   END IF
   CALL cl_err_collect_init() #汇总错误讯息初始化      
   IF g_glaa121 = 'Y' THEN    #先mark，要使用的话，要先定义元件用的s_pre_voucher_tmp和group_tmp
      IF NOT s_pre_voucher_cre_tmp_table() THEN
         RETURN
      END IF
      #开启事务
      CALL s_transaction_begin()
      CALL cl_err_collect_init()

      LET l_wc =" glgbdocno IN (SELECT xceadocno FROM axcp701_tmp WHERE sel = 'Y')"
      CALL s_pre_voucher_ins_glap('XC','C10',g_input.xceald,g_input.glapdocdt,g_input.glapdocno,g_input.type,l_wc) RETURNING r_success,r_start_no,r_end_no
   ELSE
      LET l_sql = "SELECT xceald,xceadocno,xcea002 FROM axcp701_tmp ",
                  " WHERE sel = 'Y' "
                  
      PREPARE axcp701_sel_tmp_p FROM l_sql
      DECLARE axcp701_sel_tmp_c CURSOR FOR axcp701_sel_tmp_p
   
      LET l_xceald    = ''
      LET l_xceadocno = ''
      LET l_xcea002   = ''
      
      
      IF NOT axct701_02_create_tmp_table() THEN
         LET r_success  = FALSE
         LET r_start_no = ''
         LET r_end_no   = ''
         RETURN r_success,r_start_no,r_end_no
      END IF 
      DELETE FROM s_voucher_xc_group   #以防万一，清一次  
      FOREACH axcp701_sel_tmp_c INTO l_xceald,l_xceadocno,l_xcea002
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
      
            LET r_success  = FALSE
            LET r_start_no = ''
            LET r_end_no   = ''
            RETURN r_success,r_start_no,r_end_no
         END IF         
         CALL axct701_02(l_xceald,l_xceadocno,l_xcea002,'Y')  #内有create，所以放在事务之前
         LET l_xceald    = ''
         LET l_xceadocno = ''
         LET l_xcea002   = ''    
      END FOREACH
      FREE axcp701_sel_tmp_c
      
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt FROM s_voucher_xc_group
      
      IF l_cnt = 0 THEN
         LET r_success  = FALSE
         LET r_start_no = ''
         LET r_end_no   = ''
         RETURN r_success,r_start_no,r_end_no   
      END IF
   
      CALL axcp701_ins_glap() RETURNING r_success,r_start_no,r_end_no  #内有事务开始，结束在这层function做
   END IF
   
   LET g_input.start_no = r_start_no
   LET g_input.end_no = r_end_no
   DISPLAY BY NAME g_input.start_no,g_input.end_no
   
   IF r_success THEN
      CALL s_transaction_end('Y','1')
   ELSE
      CALL s_transaction_end('N','1')    
   END IF
   CALL cl_err_collect_show()
   DROP TABLE s_voucher_xc_group   #多drop一次
END FUNCTION]]>
  </point>
  <point name="function.axcp701_chk" order="5" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[#执行抛转检查
PRIVATE FUNCTION axcp701_chk()
   DEFINE l_sql         STRING
   DEFINE l_xceald      LIKE xcea_t.xceald
   DEFINE l_xceadocno   LIKE xcea_t.xceadocno
   DEFINE r_success     LIKE type_t.num5
   
   LET r_success = TRUE
#   LET l_sql = "SELECT xceald,xceadocno FROM axcp701_tmp ",
#               " WHERE sel = 'Y' "
#               
#   PREPARE axcp701_chk_p FROM l_sql
#   DECLARE axcp701_chk_c CURSOR FOR axcp701_chk_p
#   
#   FOREACH axcp701_chk_c INTO l_xceald,l_xceadocno
#      SELECT xrca038 INTO l_xcea038
#        FROM xcea_t
#       WHERE xceaent = g_enterprise
#         AND xceald = l_xceald
#         AND xceadocno = l_xceadocno
#         
#      IF NOT cl_null(l_xcea038) THEN 
#         INITIALIZE g_errparam TO NULL 
#         LET g_errparam.extend = l_xceadocno
#         LET g_errparam.code   = 'axr-00267'
#         LET g_errparam.popup  = TRUE 
#         CALL cl_err()
#         
#         LET r_success = FALSE
#      END IF 
#   END FOREACH 
   
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="function.axcp701_default" order="6" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[# 赋默认值
PRIVATE FUNCTION axcp701_default()
   DEFINE l_site      LIKE xrca_t.xrcasite

   INITIALIZE g_input_t.*  TO NULL     #add 150304
   IF NOT cl_null(g_argv[1]) AND NOT cl_null(g_argv[2]) THEN
      LET g_input.xceald      = g_argv[1]
      LET g_input.glaacomp    = g_argv[2]
      LET g_input.type        = g_argv[3]
      LET g_input.glapdocno   = g_argv[4]
      LET g_input.glapdocdt   = g_argv[5]
      LET g_wc                = g_argv[6]
      IF cl_null(g_wc) THEN LET g_wc = "xceadocno = '"||g_xceadocno||"'" END IF
      IF cl_null(g_wc) THEN LET g_wc = ' 1=1' END IF
      
      CALL axcp701_ref_show()
      
      CALL cl_set_comp_visible('lbl_group1,lbl_group2,lbl_group4,vb_detail',FALSE)
      CALL cl_set_comp_visible('qbehidden,detail_qrystr,lbl_hbegin,h_index',FALSE)    
      CALL cl_set_comp_visible('lbl_hsep,h_count,lbl_hend,hb_prograssbar',FALSE)      
      
   ELSE
      #取得預設的帳務中心,因新增階段的時候,並不會知道site,所以以登入人員做為依據
      CALL s_fin_get_account_center('',g_user,'3',g_today) RETURNING g_sub_success,l_site,g_errno
      
      SELECT ooef017 INTO g_input.glaacomp
        FROM ooef_t
       WHERE ooefent = g_enterprise
         AND ooef001 = l_site
         
      SELECT glaald INTO g_input.xceald
           FROM glaa_t
          WHERE glaacomp = g_input.glaacomp
            AND glaa014 = 'Y'
            
      LET g_input.type = '1' 
      LET g_input.glapdocdt = g_today
      
      CALL axcp701_ref_show()
   END IF
   LET g_xceald_t = g_input.xceald
   
   LET g_input_t.* = g_input.*
END FUNCTION]]>
  </point>
  <point name="function.axcp701_ins_glap" order="7" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp701_ins_glap()
   DEFINE r_success       LIKE type_t.num5
   DEFINE r_start_no      LIKE glap_t.glapdocno
   DEFINE r_end_no        LIKE glap_t.glapdocno
   DEFINE l_success       LIKE type_t.num5
   DEFINE l_glaqent       LIKE glaq_t.glaqent
   DEFINE l_glaqld        LIKE glaq_t.glaqld
   DEFINE l_glaqcomp      LIKE glaq_t.glaqcomp
   DEFINE l_docno         LIKE xcea_t.xceadocno
   DEFINE l_docdt         LIKE xcea_t.xcea001
   DEFINE l_type          LIKE xcea_t.xcea002
   DEFINE l_glap          RECORD LIKE glap_t.*
   DEFINE l_glaa001       LIKE glaa_t.glaa001
   DEFINE l_glaa024       LIKE glaa_t.glaa024  #add 150304
   DEFINE l_cnt           LIKE type_t.num5     #add 150304
   DEFINE l_sql           STRING
   DEFINE l_sql1          STRING

#首先将按QBE条件插入axcp701_tmp的资料，每一笔都按汇总方式1插入s_voucher_xc_group
#然后按照正确的汇总方式把s_voucher_xc_group资料插入glap/glaq
   LET r_success  = TRUE
   LET r_start_no = NULL
   LET r_end_no   = NULL

   LET l_sql = " SELECT DISTINCT glaqent,glaqld,glaqcomp,docno,docdt,type ",
               "   FROM s_voucher_xc_group "
   CASE g_input.type
      WHEN '1'  #依来源单据个别产生
         LET l_sql = s_chr_replace(l_sql,"docdt","''",0) 
      WHEN '2'  #依单据日期合并产生
         LET l_sql = s_chr_replace(l_sql,"docno","''",0) 
   END CASE
   
   PREPARE axcp701_ins_glap_p FROM l_sql
   DECLARE axcp701_ins_glap_c CURSOR FOR axcp701_ins_glap_p
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'axcp701_ins_glap_c'
      LET g_errparam.popup = TRUE
      CALL cl_err()
      LET r_success  = FALSE
      LET r_start_no = NULL
      LET r_end_no   = NULL
      RETURN r_success,r_start_no,r_end_no
   END IF   
   LET l_sql = " SELECT glaqent,glaqld,glaqcomp,docno,docdt,type,glaq001,glaq002,glaq005,glaq006,glaq010,glaq017,glaq018,glaq019,glaq020,glaq021,glaq022,glaq023,glaq024,glaq025,glaq027,glaq028,",
               "        glaq051,glaq052,glaq053,glaq029,glaq030,glaq031,glaq032,glaq033,glaq034,glaq035,glaq036,glaq037,glaq038, ",
               "        SUM(d),SUM(c),SUM(glaq040),SUM(glaq041),SUM(glaq043),SUM(glaq044) ",
               "   FROM s_voucher_xc_group "
               
   LET l_sql1= "  GROUP BY glaqent,glaqld,glaqcomp,docno,docdt,type,glaq001,glaq002,glaq005,glaq006,glaq010,glaq017,glaq018,glaq019,glaq020,glaq021,glaq022,glaq023,glaq024,glaq025,glaq027,glaq028,",
               "           glaq051,glaq052,glaq053,glaq029,glaq030,glaq031,glaq032,glaq033,glaq034,glaq035,glaq036,glaq037,glaq038 "
   CASE g_input.type
      WHEN '1'  #依来源单据个别产生
         LET l_sql = s_chr_replace(l_sql,"docdt","''",0)
         LET l_sql1= s_chr_replace(l_sql1,"docdt","''",0) 
         LET l_sql = l_sql," WHERE glaqent = ? AND glaqld = ? AND glaqcomp = ? AND docno = ? AND type = ? ",l_sql1         
      WHEN '2'  #依单据日期合并产生
         LET l_sql = s_chr_replace(l_sql,"docno","''",0) 
         LET l_sql1= s_chr_replace(l_sql1,"docno","''",0)
         LET l_sql = l_sql," WHERE glaqent = ? AND glaqld = ? AND glaqcomp = ? AND docdt = ? AND type = ? ",l_sql1 
   END CASE
   
   PREPARE axcp701_ins_glaq_p FROM l_sql
   DECLARE axcp701_ins_glaq_c CURSOR FOR axcp701_ins_glaq_p
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'axcp701_ins_glaq_c'
      LET g_errparam.popup = TRUE
      CALL cl_err()
      LET r_success  = FALSE
      LET r_start_no = NULL
      LET r_end_no   = NULL
      RETURN r_success,r_start_no,r_end_no
   END IF
#定义更新来源单据抛转凭证号的cursor
   LET l_sql = "UPDATE xcea_t SET xcea101 = ? ",
               " WHERE xceaent   = ? ",
               "   AND xceald    = ? ",
               "   AND xceadocno = ? "
               
   PREPARE axcp701_upd_xcea101 FROM l_sql
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL
      LET g_errparam.code = SQLCA.sqlcode
      LET g_errparam.extend = 'axcp701_upd_xcea101'
      LET g_errparam.popup = TRUE
      CALL cl_err()
      LET r_success  = FALSE
      LET r_start_no = NULL
      LET r_end_no   = NULL
      RETURN r_success,r_start_no,r_end_no
   END IF
   

   #开启事务   不想在这里开始，最好是在function外，但是这个function内有
   CALL s_transaction_begin()
   
   #add 150304
   SELECT glaa024 INTO l_glaa024
     FROM glaa_t
    WHERE glaaent = g_enterprise
      AND glaald = g_input.xceald
      
   IF g_glaa100 = 'Y' THEN
      DELETE FROM s_fin_tmp_conti_no
      IF NOT cl_null(g_input.glapdocdt) THEN   #彙總類型是3的 p_date必傳
         #将漏的单号记录入临时表s_fin_tmp_conti_no中
         CALL s_fin_continue_no_ins(g_input.xceald,l_glaa024,g_input.glapdocno,g_input.glapdocdt,'3')
            RETURNING l_success,g_errno
         IF NOT l_success THEN
            LET r_success  = FALSE
            LET r_start_no = NULL
            LET r_end_no   = NULL
            RETURN r_success,r_start_no,r_end_no
         END IF
      END IF
   END IF
   
   LET l_sql = " SELECT docno FROM s_fin_tmp_conti_no WHERE isuse = 'N' ORDER BY docno"
   PREPARE continue_no_pb1 FROM l_sql
   DECLARE continue_no_cs1 CURSOR WITH HOLD FOR continue_no_pb1
   #add 150304 end

   CALL cl_err_collect_init()  
   
   FOREACH axcp701_ins_glap_c INTO l_glaqent,l_glaqld,l_glaqcomp,l_docno,l_docdt,l_type
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         LET r_success  = FALSE
         LET r_start_no = NULL
         LET r_end_no   = NULL
         RETURN r_success,r_start_no,r_end_no
      END IF 
      
      INITIALIZE l_glap.* TO NULL
      
      #帳套主幣別
      CALL s_ld_sel_glaa(l_glaqld,'glaa001') RETURNING l_success,l_glaa001
      IF NOT l_success THEN
         LET r_success  = FALSE
         LET r_start_no = NULL
         LET r_end_no   = NULL
         RETURN r_success,r_start_no,r_end_no  
      END IF
         
      #自动编号
      #150304 add
      SELECT count(*) INTO l_cnt
        FROM s_fin_tmp_conti_no
       WHERE isuse = 'N'
      IF cl_null(l_cnt) THEN LET l_cnt = 0 END IF
      IF l_cnt > 0 THEN
         FOREACH continue_no_cs1 INTO l_glap.glapdocno
            UPDATE s_fin_tmp_conti_no 
               SET isuse = 'Y' 
             WHERE docno = l_glap.glapdocno
            #檢查是否號碼已被使用
            LET l_cnt = 0
            SELECT count(*) INTO l_cnt
              FROM glap_t
             WHERE glapent = g_enterprise AND glapld = p_ld
              AND glapdocno=l_glap.glapdocno
            IF l_cnt = 0 THEN
               EXIT FOREACH
            END IF
         END FOREACH
         #假設整個單號都已被取用還是透過s_aooi200_fin_gen_docno取單號
         IF l_cnt > 0 THEN
            CALL s_aooi200_fin_gen_docno(l_glaqld,'','',g_input.glapdocno,g_input.glapdocdt,'aglt310')
               RETURNING l_success,l_glap.glapdocno
         END IF
      ELSE
      #150304 add end
         CALL s_aooi200_fin_gen_docno(l_glaqld,'','',g_input.glapdocno,g_input.glapdocdt,'aglt310')
            RETURNING l_success,l_glap.glapdocno
      END IF #add 150304
      IF NOT l_success THEN
         LET r_success  = FALSE
         LET r_start_no = NULL
         LET r_end_no   = NULL
         RETURN r_success,r_start_no,r_end_no
      END IF
      
      #处理起始单号,截止单号
      IF cl_null(r_start_no) THEN LET r_start_no = l_glap.glapdocno END IF
      LET r_end_no   = l_glap.glapdocno 
      
      LET l_glap.glapent   =  g_enterprise  # 企業代碼
      LET l_glap.glapld    =  l_glaqld      # 帳別
      LET l_glap.glapcomp  =  l_glaqcomp    # 法人
      LET l_glap.glapdocdt =  l_docdt       # 單據日期
      LET l_glap.glap001   = '1'            # 傳票性質
      
      # 會計年度/會計季別/會計期別/會計周別
      CALL s_fin_date_get_yspw('',l_glaqld,g_input.glapdocdt) RETURNING l_success,l_glap.glap002,l_glap.glap003,l_glap.glap004,l_glap.glap005
      IF NOT l_success THEN
         LET r_success  = FALSE
         LET r_start_no = NULL
         LET r_end_no   = NULL
         RETURN r_success,r_start_no,r_end_no
      END IF
      
      LET l_glap.glap006   =  ''         # 收支科目
      LET l_glap.glap007   =  'XC'       # 來源碼      
      LET l_glap.glap008   =  'C10'      # axc不区分，全用C10
      LET l_glap.glap009   =  0          # 總號
      LET l_glap.glap010   =  0          # 借方總金額
      LET l_glap.glap011   =  0          # 貸方總金額
      LET l_glap.glap012   =  0          # 列印次數
      LET l_glap.glap013   =  0          # 附件張數
      LET l_glap.glap014   =  'N'        # 外幣憑證否
      LET l_glap.glap015   =  ''         # 原傳票編號
      LET l_glap.glap016   =  ''         # 來源帳別編號
      LET l_glap.glap017   =  ''         # 來源傳票編號
      LET l_glap.glapownid =  g_user     # 資料所有者
      LET l_glap.glapowndp =  g_dept     # 資料所屬部門
      LET l_glap.glapcrtid =  g_user     # 資料建立者
      LET l_glap.glapcrtdp =  g_dept     # 資料建立部門
      LET l_glap.glapcrtdt =  cl_get_current()  # 資料創建日
      LET l_glap.glapmodid =  ''         # 資料修改者
      LET l_glap.glapmoddt =  ''         # 最近修改日
      LET l_glap.glapcnfid =  ''         # 資料確認者
      LET l_glap.glapcnfdt =  ''         # 資料確認日
      LET l_glap.glappstid =  ''         # 資料過帳者
      LET l_glap.glappstdt =  ''         # 資料過帳日
      LET l_glap.glapstus  =  'N'        # 狀態碼

      INSERT INTO glap_t VALUES(l_glap.*)
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'ins glap'
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success  = FALSE
         LET r_start_no = NULL
         LET r_end_no   = NULL
         RETURN r_success,r_start_no,r_end_no         
      END IF
            
      IF NOT axcp701_ins_glaq(l_glaqent,l_glaqld,l_glaqcomp,l_docno,l_docdt,l_glap.glapdocno,l_type) THEN
         LET r_success  = FALSE
         LET r_start_no = ''
         LET r_end_no   = ''
         RETURN r_success,r_start_no,r_end_no
      END IF
   END FOREACH
   FREE axcp701_ins_glap_c 

   RETURN r_success,r_start_no,r_end_no
END FUNCTION]]>
  </point>
  <point name="function.axcp701_ins_glaq" order="8" ver="1" cite_std="N" new="Y" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[
################################################################################
# Descriptions...: 描述说明
# Memo...........:
# Usage..........: CALL s_aooi150_ins (传入参数)
#                  RETURNING 回传参数
# Input parameter: 传入参数变量1   传入参数变量说明1
#                : 传入参数变量2   传入参数变量说明2
# Return code....: 回传参数变量1   回传参数变量说明1
#                : 回传参数变量2   回传参数变量说明2
# Date & Author..: 日期 By 作者
# Modify.........:
################################################################################
PRIVATE FUNCTION axcp701_ins_glaq(p_glaqent,p_glaqld,p_glaqcomp,p_docno,p_docdt,p_glaqdocno,p_type)
   DEFINE p_glaqent    LIKE glaq_t.glaqent
   DEFINE p_glaqld     LIKE glaq_t.glaqld
   DEFINE p_glaqcomp   LIKE glaq_t.glaqcomp
   DEFINE p_glaqdocno  LIKE glaq_t.glaqdocno
   DEFINE p_docno      LIKE xcea_t.xceadocno   
   DEFINE p_docdt      LIKE xcea_t.xcea001
   DEFINE p_type       LIKE xcea_t.xcea002
   DEFINE r_success    LIKE type_t.num5  
   DEFINE l_tmp     RECORD  
                         glaqent  LIKE glaq_t.glaqent,
                         glaqld   LIKE glaq_t.glaqld ,
                         glaqcomp LIKE glaq_t.glaqcomp,
                         docno    LIKE xcea_t.xceadocno,
                         docdt    LIKE xcea_t.xcea001,
                         type     LIKE xcea_t.xcea002,
                         glaq001  LIKE glaq_t.glaq001,
                         glaq002  LIKE glaq_t.glaq002,
                         glaq005  LIKE glaq_t.glaq005,
                         glaq006  LIKE glaq_t.glaq006,
                         glaq010  LIKE glaq_t.glaq010,
                         glaq017  LIKE glaq_t.glaq017,
                         glaq018  LIKE glaq_t.glaq018,
                         glaq019  LIKE glaq_t.glaq019,
                         glaq020  LIKE glaq_t.glaq020,
                         glaq021  LIKE glaq_t.glaq021,
                         glaq022  LIKE glaq_t.glaq022,
                         glaq023  LIKE glaq_t.glaq023,
                         glaq024  LIKE glaq_t.glaq024,
                         glaq025  LIKE glaq_t.glaq025,
                         glaq027  LIKE glaq_t.glaq027,
                         glaq028  LIKE glaq_t.glaq028,
                         glaq051  LIKE glaq_t.glaq051,
                         glaq052  LIKE glaq_t.glaq052,
                         glaq053  LIKE glaq_t.glaq053,
                         glaq029  LIKE glaq_t.glaq029,
                         glaq030  LIKE glaq_t.glaq030,
                         glaq031  LIKE glaq_t.glaq031,
                         glaq032  LIKE glaq_t.glaq032,
                         glaq033  LIKE glaq_t.glaq033,
                         glaq034  LIKE glaq_t.glaq034,
                         glaq035  LIKE glaq_t.glaq035,
                         glaq036  LIKE glaq_t.glaq036,
                         glaq037  LIKE glaq_t.glaq037,
                         glaq038  LIKE glaq_t.glaq038,
                         d        LIKE glaq_t.glaq003,
                         c        LIKE glaq_t.glaq004,
                         glaq040  LIKE glaq_t.glaq040,
                         glaq041  LIKE glaq_t.glaq041,
                         glaq043  LIKE glaq_t.glaq043,
                         glaq044  LIKE glaq_t.glaq044
                 END RECORD
   DEFINE l_glaq          RECORD LIKE glaq_t.*
   DEFINE l_glap010       LIKE glap_t.glap010
   DEFINE l_glap011       LIKE glap_t.glap011

   LET r_success = TRUE
   INITIALIZE l_tmp.* TO NULL
   
   CASE g_input.type
      WHEN '1'  #依来源单据个别产生
         OPEN axcp701_ins_glaq_c USING p_glaqent,p_glaqld,p_glaqcomp,p_docno,p_type        
      WHEN '2'  #依单据日期合并产生
         OPEN axcp701_ins_glaq_c USING p_glaqent,p_glaqld,p_glaqcomp,p_docdt,p_type
   END CASE 

   
   FOREACH axcp701_ins_glaq_c INTO l_tmp.*
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         LET r_success  = FALSE
         RETURN r_success
      END IF 
      INITIALIZE l_glaq.* TO NULL

      LET l_glaq.glaqent   = p_glaqent         #企業代碼
      LET l_glaq.glaqcomp  = l_tmp.glaqcomp    #法人
      LET l_glaq.glaqld    = p_glaqld          #帳別
      LET l_glaq.glaqdocno = p_glaqdocno       #單號
      #项次
      SELECT MAX(glaqseq) + 1 INTO l_glaq.glaqseq
        FROM glaq_t
       WHERE glaqent   = l_glaq.glaqent
         AND glaqld    = l_glaq.glaqld
         AND glaqdocno = l_glaq.glaqdocno
      IF cl_null(l_glaq.glaqseq) THEN
         LET l_glaq.glaqseq = 1
      END IF
      LET l_glaq.glaq001   = l_tmp.glaq001    #摘要
      LET l_glaq.glaq002   = l_tmp.glaq002    #科目編號
      LET l_glaq.glaq003   = l_tmp.d          #借方金額
      LET l_glaq.glaq004   = l_tmp.c          #貸方金額
      LET l_glaq.glaq005   = l_tmp.glaq005    #交易幣別
      LET l_glaq.glaq006   = l_tmp.glaq006    #匯率
      LET l_glaq.glaq007   = ''               #計價單位
      LET l_glaq.glaq008   = 0                #數量
      LET l_glaq.glaq009   = 0                #單價
      LET l_glaq.glaq010   = l_tmp.glaq010    #原幣金額
      LET l_glaq.glaq011   = ''               #票據編碼
      LET l_glaq.glaq012   = ''               #票據日期
      LET l_glaq.glaq013   = g_user           #申請人
      LET l_glaq.glaq014   = ''               #銀行帳號
      LET l_glaq.glaq015   = ''               #結算方式
      LET l_glaq.glaq016   = ''               #收支項目
      LET l_glaq.glaq017   = l_tmp.glaq017    #營運據點
      LET l_glaq.glaq018   = l_tmp.glaq018    #部門
      LET l_glaq.glaq019   = l_tmp.glaq019    #利潤/成本中心
      LET l_glaq.glaq020   = l_tmp.glaq020    #區域
      LET l_glaq.glaq021   = l_tmp.glaq021    #交易客商  
      LET l_glaq.glaq022   = l_tmp.glaq022    #账款客商    
      LET l_glaq.glaq023   = l_tmp.glaq023    #客群
      LET l_glaq.glaq024   = l_tmp.glaq024    #產品類別
      LET l_glaq.glaq025   = l_tmp.glaq025    #人員
      LET l_glaq.glaq027   = l_tmp.glaq027    #專案編號
      LET l_glaq.glaq028   = l_tmp.glaq028    #WBS
      LET l_glaq.glaq051   = l_tmp.glaq051    #經營方式
      LET l_glaq.glaq052   = l_tmp.glaq052    #渠道
      LET l_glaq.glaq053   = l_tmp.glaq053    #品牌
      LET l_glaq.glaq029   = l_tmp.glaq029    #自由核算項一
      LET l_glaq.glaq030   = l_tmp.glaq030    #自由核算項二
      LET l_glaq.glaq031   = l_tmp.glaq031    #自由核算項三
      LET l_glaq.glaq032   = l_tmp.glaq032    #自由核算項四
      LET l_glaq.glaq033   = l_tmp.glaq033    #自由核算項五
      LET l_glaq.glaq034   = l_tmp.glaq034    #自由核算項六
      LET l_glaq.glaq035   = l_tmp.glaq035    #自由核算項七
      LET l_glaq.glaq036   = l_tmp.glaq036    #自由核算項八
      LET l_glaq.glaq037   = l_tmp.glaq037    #自由核算項九
      LET l_glaq.glaq038   = l_tmp.glaq038    #自由核算項十      
      LET l_glaq.glaq039   = ''
      LET l_glaq.glaq040   = l_tmp.glaq040
      LET l_glaq.glaq041   = l_tmp.glaq041
      LET l_glaq.glaq042   = ''
      LET l_glaq.glaq043   = l_tmp.glaq043
      LET l_glaq.glaq044   = l_tmp.glaq044
      
      INSERT INTO glaq_t VALUES(l_glaq.*)
      IF SQLCA.sqlcode THEN      
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'ins glaq'
         LET g_errparam.popup = TRUE
         CALL cl_err()

         RETURN r_success
      END IF
#按日期合并的写法感觉效率太低，先写按来源单号分开的
      EXECUTE axcp701_upd_xcea101 USING l_glaq.glaqdocno,l_glaq.glaqent,l_glaq.glaqld,p_docno
      IF SQLCA.sqlcode OR SQLCA.sqlerrd[3] = 0 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "upd xcea_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         LET r_success  = FALSE
         RETURN r_success
      END IF 

#一笔凭证处理完毕后,对凭证单头进行更行
#总借/贷
      SELECT SUM(glaq003),SUM(glaq004) INTO l_glap010,l_glap011
        FROM glaq_t
       WHERE glaqent   = l_glaq.glaqent
         AND glaqld    = l_glaq.glaqld
         AND glaqdocno = l_glaq.glaqdocno
         
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'sel glap010/glap011'
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success  = FALSE
         RETURN r_success
      END IF
      IF cl_null(l_glap010) THEN LET l_glap010 = 0 END IF
      IF cl_null(l_glap011) THEN LET l_glap011 = 0 END IF
   
#附件张数
      UPDATE glap_t SET glap010 = l_glap010,glap011 = l_glap011
       WHERE glapent   = l_glaq.glaqent
         AND glapld    = l_glaq.glaqld
         AND glapdocno = l_glaq.glaqdocno
         
      IF SQLCA.sqlcode OR SQLCA.sqlerrd[3] = 0 THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = 'upd glap_t'
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success  = FALSE
         RETURN r_success
      END IF
   END FOREACH
   FREE axcp701_ins_glaq_c
   
   RETURN r_success
END FUNCTION]]>
  </point>
  <point name="b_fill.after_b_fill" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="b_fill.clear" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   ]]>
  </point>
  <point name="b_fill.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success        LIKE type_t.num5
   DEFINE l_slip           LIKE xcea_t.xceadocno
   DEFINE l_glaa024        LIKE glaa_t.glaa024
   DEFINE l_ooac004        LIKE ooac_t.ooac004]]>
  </point>
  <point name="b_fill.foreach_into" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   g_detail_d[l_ac].*]]>
  </point>
  <point name="b_fill.foreach_iside" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL s_aooi200_fin_get_slip(g_detail_d[l_ac].b_xceadocno)
      RETURNING l_success,l_slip
      
      SELECT glaa024 INTO l_glaa024
        FROM glaa_t
       WHERE glaaent = g_enterprise
         AND glaald = g_input.xceald
      
      #是否抛傳票    
      SELECT ooac004 INTO l_ooac004
        FROM ooac_t
       WHERE ooacent = g_enterprise
         AND ooac001 = l_glaa024
         AND ooac002 = l_slip
         AND ooac003 = 'D-FIN-0030'
         
      IF l_ooac004 = 'N' THEN 
         #INITIALIZE g_errparam TO NULL 
         #LET g_errparam.extend = g_detail_d[l_ac].b_xceadocno,"/",l_slip
         #LET g_errparam.code   = 'axr-00225'
         #LET g_errparam.popup  = TRUE 
         #CALL cl_err()
         
         CONTINUE FOREACH
      END IF
      
      INSERT INTO axcp701_tmp VALUES(g_detail_d[l_ac].*)]]>
  </point>
  <point name="b_fill.other_table" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL g_detail_d.deleteElement(g_detail_d.getLength())  ]]>
  </point>
  <point name="b_fill.sql_before" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   LET g_wc = g_wc.trim() #當查詢按下Q時 按下放棄 g_wc = "  " 所以要清掉空白
   IF cl_null(g_wc) THEN  #p_wc 查詢條件
      LET g_wc = " 1=1 "
   END IF
   
   CALL axcp701_create_tmp() RETURNING l_success
   DELETE FROM axcp701_tmp
   
   LET g_sql= " SELECT 'Y',xceald,xceadocno,xcea002,xcea001 FROM xcea_t ",
              "  WHERE xceaent  = ? ",
              "    AND xceald   = '",g_input.xceald,"' ",
              "    AND xceastus = 'Y' AND ",g_wc,
              "  ORDER BY xceald,xceadocno,xcea002,xcea001 "]]>
  </point>
  <point name="global.argv" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="global.memo" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[# 150304 By 00768 增加傳票補號 参考aapp330]]>
  </point>
  <point name="global.parameter" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[        xceald              LIKE xcea_t.xceald,
        xceald_desc         LIKE type_t.chr80,
        glaacomp            LIKE glaa_t.glaacomp,
        glaacomp_desc       LIKE type_t.chr80,
        type                LIKE type_t.chr10, 
        glapdocno           LIKE glap_t.glapdocno,
        glapdocdt           LIKE glap_t.glapdocdt,
        start_no            LIKE glap_t.glapdocno,
        end_no              LIKE glap_t.glapdocno,]]>
  </point>
  <point name="global.variable" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[           sel              LIKE type_t.chr1,
           b_xceald         LIKE xcea_t.xceald,
           b_xceadocno      LIKE xcea_t.xceadocno,
           b_xcea002        LIKE xcea_t.xcea002,
           b_xcea001        LIKE xcea_t.xcea001
           END RECORD
           
DEFINE g_input        type_parameter
DEFINE g_input_t      type_parameter  #add 150304
DEFINE g_rec_b        LIKE type_t.num5 
DEFINE g_ooef004      LIKE ooef_t.ooef004
DEFINE g_xceadocno    LIKE xcea_t.xceadocno
DEFINE g_glaa121      LIKE glaa_t.glaa121
DEFINE g_glaa100      LIKE glaa_t.glaa100  #add 150304
DEFINE g_xceald_t     LIKE xcea_t.xceald ]]>
  </point>
  <point name="init.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success        LIKE type_t.num5]]>
  </point>
  <point name="init.init" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL cl_set_combo_scc('xcea002','8920')
   
   CALL s_fin_continue_no_tmp()               #150304 建立临时表]]>
  </point>
  <point name="main.background" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   IF NOT cl_null(g_argv[1])  THEN
      LET g_input.xceald      = g_argv[1]
      LET g_input.glaacomp    = g_argv[2]
      LET g_input.type        = g_argv[3]
      LET g_input.glapdocno   = g_argv[4]
      LET g_input.glapdocdt   = g_argv[5]
      LET g_wc                = g_argv[6]
      IF cl_null(g_wc) THEN LET g_wc = ' 1=1' END IF
   END IF]]>
  </point>
  <point name="main.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success       LIKE type_t.num5]]>
  </point>
  <point name="main.exit" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DROP TABLE s_voucher_xc_group;
   DROP TABLE axcp701_tmp;]]>
  </point>
  <point name="main.servicecall" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[      CALL axcp701_create_tmp() RETURNING l_success
      IF NOT l_success THEN
         RETURN
      END IF
      LET g_input.xceald      = g_argv[1]
      LET g_input.glaacomp    = g_argv[2]
      LET g_input.type        = g_argv[3]
      LET g_input.glapdocno   = g_argv[4]
      LET g_input.glapdocdt   = g_argv[5]
      LET g_wc                = g_argv[6]
      IF cl_null(g_wc) THEN LET g_wc = ' 1=1' END IF
      CALL axcp701_query()
      CALL axcp701_p()]]>
  </point>
  <point name="query.after_construct" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL cl_err_collect_init()]]>
  </point>
  <point name="query.cs段after_query" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL cl_err_collect_show() ]]>
  </point>
  <point name="ui_dialog.before_accept" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[]]>
  </point>
  <point name="ui_dialog.before_dialog" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   CALL axcp701_default()]]>
  </point>
  <point name="ui_dialog.before_dialog2" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            CALL gfrm_curr.setFieldHidden("formonly.sel", FALSE)

            CALL DIALOG.setActionActive("accept", FALSE)
            CALL DIALOG.setActionActive("selall", FALSE)
            CALL DIALOG.setActionActive("selone", FALSE)
            CALL DIALOG.setActionActive("sel", FALSE)
            CALL DIALOG.setActionActive("unsel", FALSE)
            CALL DIALOG.setActionActive("unselall", FALSE)]]>
  </point>
  <point name="ui_dialog.define" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[   DEFINE l_success        LIKE type_t.num5
   DEFINE l_origin_str     STRING   #組織範圍
   DEFINE l_n              LIKE type_t.num5
   DEFINE l_glaa024        LIKE glaa_t.glaa024]]>
  </point>
  <point name="ui_dialog.for.onaction_selall" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               UPDATE axcp701_tmp 
                  SET sel = g_detail_d[li_idx].sel
                WHERE xceadocno = g_detail_d[li_idx].b_xceadocno ]]>
  </point>
  <point name="ui_dialog.for.onaction_selnone" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[               UPDATE axcp701_tmp 
                  SET sel = g_detail_d[li_idx].sel
                WHERE xceadocno = g_detail_d[li_idx].b_xceadocno ]]>
  </point>
  <point name="ui_dialog.more_action" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         ON ACTION batch_execute
            IF cl_null(g_input.glapdocno) THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "" 
               LET g_errparam.code   = 'axr-00254' 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               
               EXIT DIALOG
            END IF
         
#            SELECT COUNT(*) INTO l_n
#              FROM axcp701_tmp
#             WHERE sel = 'Y'
#            IF l_n = 0 THEN 
#               INITIALIZE g_errparam TO NULL 
#               LET g_errparam.extend = "" 
#               LET g_errparam.code   = 'axr-00159' 
#               LET g_errparam.popup  = TRUE 
#               CALL cl_err()
#               
#               EXIT DIALOG
#            END IF
            CALL axcp701_query()   #没有绿勾勾来执行填充单身的动作，所以执行时填一次，用户看不见的            
#            CALL cl_err_collect_init()
#            CALL axcp701_chk() RETURNING l_success
#            
#            IF l_success = FALSE THEN
#               CALL cl_err_collect_show()  
#               EXIT DIALOG
#            END IF
            
            CALL axcp701_p()]]>
  </point>
  <point name="ui_dialog.more_input" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[         INPUT BY NAME g_input.xceald,g_input.xceald_desc,
                       g_input.glaacomp,g_input.glaacomp_desc,
                       g_input.type,g_input.glapdocno,
                       g_input.glapdocdt,g_input.start_no,
                       g_input.end_no
               ATTRIBUTE(WITHOUT DEFAULTS)
               
            BEFORE INPUT
            IF NOT cl_null(g_argv[1]) AND NOT cl_null(g_argv[2]) THEN
               SELECT COUNT(*) INTO l_n FROM xcea_t 
               WHERE xceaent  = g_enterprise
                 AND xceald   = g_input.xceald
                 AND xceastus = 'Y' 
                 AND xceadocno = g_xceadocno
               ORDER BY xceald,xcea001 
               
               IF l_n > 0 THEN 
                  CALL axcp701_query()
               END IF
            END IF
               
               
            AFTER FIELD xceald
               IF NOT cl_null(g_input.xceald) THEN
                  CALL s_fin_account_center_with_ld_chk(g_site,g_input.xceald,g_user,'3','N','',g_today) RETURNING l_success,g_errno
                  IF NOT cl_null(g_errno) THEN
                     INITIALIZE g_errparam TO NULL
                     LET g_errparam.code = g_errno
                     LET g_errparam.extend = g_input.xceald
                     LET g_errparam.popup = TRUE
                     CALL cl_err()
                     LET g_input.xceald = ''
                     CALL axcp701_ref_show()
                     NEXT FIELD CURRENT
                  END IF
                  #150304 add
                  IF g_input.xceald <> g_input_t.xceald OR cl_null(g_input_t.xceald) THEN
                     DELETE FROM s_fin_tmp_conti_no
                  END IF
                  LET g_input_t.xceald = g_input.xceald
                  #150304 add end
               END IF
               CALL axcp701_ref_show() 
               LET g_xceald_t = g_input.xceald
               
            AFTER FIELD glapdocno
               IF NOT cl_null(g_input.glapdocno) THEN 
                  CALL s_aooi200_fin_chk_slip(g_input.xceald,'',g_input.glapdocno,'aglt310') RETURNING l_success
                  IF l_success = FALSE THEN 
                     LET g_input.glapdocno = ''
                     #add 150304
                     DELETE FROM s_fin_tmp_conti_no
                     LET g_input_t.glapdocno = g_input.glapdocno
                     #add 150304 end
                     NEXT FIELD glapdocno
                  END IF
                  #add 150304
                  IF (g_input_t.glapdocno <> g_input.glapdocno) OR cl_null(g_input_t.glapdocno) THEN
                     DELETE FROM s_fin_tmp_conti_no
                  END IF
                  LET g_input_t.glapdocno = g_input.glapdocno
                  #add 150304 end
               END IF
 
            #150304 add
            AFTER FIELD glapdocdt
               IF g_input_t.glapdocdt <> g_input.glapdocdt THEN
                  DELETE FROM s_fin_tmp_conti_no
               END IF               
               LET g_input_t.glapdocdt = g_input.glapdocdt
               
            ON ACTION cont_no
               IF cl_null(g_input.xceald)  THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'aap-00332'
                  LET g_errparam.extend = s_fin_get_colname('','xceald')
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG
               END IF
               IF cl_null(g_input.glapdocno) THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'aap-00332'
                  LET g_errparam.extend = s_fin_get_colname('','glapdocno')
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG
               END IF
               IF cl_null(g_input.glapdocdt) THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'aap-00331'
                  LET g_errparam.popup = TRUE
                  CALL cl_err()
                  CONTINUE DIALOG
               END IF
               
               CALL s_transaction_begin()
               CALL s_fin_continue_no_input(g_input.xceald,'',g_input.glapdocno,g_input.glapdocdt,'3')
               CALL s_transaction_end('Y','Y')
            #150304 add end   

            ON ACTION controlp INFIELD xceald
			      INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'i'
			      LET g_qryparam.reqry = FALSE
               
               LET g_qryparam.default1 = g_input.xceald             #給予default值
                
               #取得帳務組織下所屬成員
               CALL s_fin_account_center_sons_query('3',g_site,g_today,'1')
               #取得帳務組織下所屬成員之帳別   
               CALL s_fin_account_center_comp_str() RETURNING l_origin_str
               #將取回的字串轉換為SQL條件
               CALL axcp701_change_to_sql(l_origin_str) RETURNING l_origin_str  
               
               LET g_qryparam.where = " (glaa008 = 'Y' OR glaa014 = 'Y') AND glaacomp IN (",l_origin_str," )"
               
               #給予arg
               LET g_qryparam.arg1 = g_user
               LET g_qryparam.arg2 = g_dept
               
               CALL q_authorised_ld()                                #呼叫開窗
               
               LET g_input.xceald = g_qryparam.return1              #將開窗取得的值回傳到變數
               
               DISPLAY g_input.xceald TO xceald              #顯示到畫面上
               CALL axcp701_ref_show() 
               NEXT FIELD xceald                          #返回原欄位
               
            ON ACTION controlp INFIELD glapdocno
               INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'i'
               LET g_qryparam.reqry = FALSE
               LET g_qryparam.default1 = g_input.glapdocno  #給予default值
               LET l_glaa024 = ''
               SELECT glaa024 INTO l_glaa024 FROM glaa_t WHERE glaaent = g_enterprise AND glaald = g_input.xceald
               LET g_qryparam.arg1 = l_glaa024
               LET g_qryparam.arg2 = 'aglt310'
               CALL q_ooba002_3()                            #呼叫開窗
               LET g_input.glapdocno = g_qryparam.return1   #將開窗取得的值回傳到變數
               DISPLAY g_input.glapdocno TO glapdocno       #顯示到畫面上
               NEXT FIELD glapdocno                          #返回原欄位
               
               
         END INPUT
         
         #查詢QBE
         CONSTRUCT BY NAME g_wc ON xcea002,xcea001,xceadocno,xcea006

            BEFORE CONSTRUCT
               CALL cl_qbe_init()
            
            AFTER CONSTRUCT
               #呼叫P次作業
               
            ON ACTION controlp INFIELD xceadocno
   	         INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'c'
   	         LET g_qryparam.reqry = FALSE
   	         LET g_qryparam.where = "xceastus ='Y'"
               CALL q_xceadocno()                       #呼叫開窗
               DISPLAY g_qryparam.return1 TO xceadocno  #顯示到畫面上  
               NEXT FIELD xceadocno                     #返回原欄位  
               
            ON ACTION controlp INFIELD xcea006
   	         INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'c'
   	         LET g_qryparam.reqry = FALSE
               CALL q_ooag001()
               DISPLAY g_qryparam.return1 TO xcea006  #顯示到畫面上  
               NEXT FIELD xcea006                     #返回原欄位  
               
         END CONSTRUCT
         
         INPUT ARRAY g_detail_d FROM s_detail1.* 
              ATTRIBUTE(COUNT = g_rec_b,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                        INSERT ROW = FALSE,
                        DELETE ROW = FALSE,
                        APPEND ROW = FALSE)
            BEFORE INPUT
               IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
                 CALL FGL_SET_ARR_CURR(g_detail_d.getLength()+1) 
                 LET g_insert = 'N' 
               END IF 
             
            BEFORE ROW
               LET l_ac = ARR_CURR()
               LET g_master_idx = l_ac
               DISPLAY l_ac TO FORMONLY.h_index
               CALL axcp701_fetch()              
               
            ON CHANGE sel
               UPDATE axcp701_tmp 
                  SET sel = g_detail_d[l_ac].sel 
                WHERE xceadocno = g_detail_d[l_ac].b_xceadocno 
         
         END INPUT]]>
  </point>
  <point name="ui_dialog.onaction_sel" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            FOR li_idx = 1 TO g_detail_d.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail_d[li_idx].sel = "Y"
                  UPDATE axcp701_tmp 
                    SET sel = g_detail_d[li_idx].sel
                  WHERE xceadocno = g_detail_d[li_idx].b_xceadocno 
               END IF
            END FOR]]>
  </point>
  <point name="ui_dialog.onaction_unsel" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            FOR li_idx = 1 TO g_detail_d.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail_d[li_idx].sel = "N"
                  UPDATE axcp701_tmp 
                    SET sel = g_detail_d[li_idx].sel
                  WHERE xceadocno = g_detail_d[li_idx].b_xceadocno 
               END IF
            END FOR]]>
  </point>
  <point name="ui_dialog.qbeclear" order="" ver="1" cite_std="N" new="N" status="" src="s" readonly="" mark_hard="N">
    <![CDATA[            CLEAR FORM
            INITIALIZE g_input.* TO NULL
            CALL axcp701_default()]]>
  </point>
  <section id="axcp701.b_fill" ver="2" status="" src="s" readonly="">
    <![CDATA[#+ 單身陣列填充
PRIVATE FUNCTION axcp701_b_fill()
 
   DEFINE ls_wc           STRING
   #add-point:b_fill段define
   {<point name="b_fill.define" edit="s"/>}
   #end add-point
   #add-point:b_fill段define
   {<point name="b_fill.define_customerization" edit="c"/>}
   #end add-point
 
   #add-point:b_fill段sql_before
   {<point name="b_fill.sql_before"/>}
   #end add-point
 
   PREPARE axcp701_sel FROM g_sql
   DECLARE b_fill_curs CURSOR FOR axcp701_sel
   
   CALL g_detail_d.clear()
   #add-point:b_fill段其他頁簽清空
   {<point name="b_fill.clear"/>}
   #end add-point
 
   LET g_cnt = l_ac
   LET l_ac = 1   
   ERROR "Searching!" 
 
   FOREACH b_fill_curs USING g_enterprise INTO 
   #add-point:b_fill段foreach_into
   {<point name="b_fill.foreach_into"/>}
   #end add-point
   
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         EXIT FOREACH
      END IF
      
      #add-point:b_fill段資料填充
      {<point name="b_fill.foreach_iside"/>}
      #end add-point
      
      CALL axcp701_detail_show()      
 
      LET l_ac = l_ac + 1
      IF l_ac > g_max_rec THEN
         IF g_error_show = 1 THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend =  "" 
            LET g_errparam.code   =  9035 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
 
         END IF
         EXIT FOREACH
      END IF
      
   END FOREACH
   LET g_error_show = 0
   
   #add-point:b_fill段資料填充(其他單身)
   {<point name="b_fill.other_table"/>}
   #end add-point
    
   LET g_detail_cnt = l_ac - 1 
   DISPLAY g_detail_cnt TO FORMONLY.h_count
   LET l_ac = g_cnt
   LET g_cnt = 0
   
   CLOSE b_fill_curs
   FREE axcp701_sel
   
   LET l_ac = 1
   CALL axcp701_fetch()
   #add-point:b_fill段資料填充(其他單身)
   {<point name="b_fill.after_b_fill"/>}
   #end add-point
 
END FUNCTION
]]>
  </section>
  <section id="axcp701.description" ver="1" status="" src="s" readonly="">
    <![CDATA[#應用 a00 樣板自動產生(Version:1)
#+ Version..: T100-ERP-1.00.00(SD版次:4,PR版次:4) Build-000142
#+ 
#+ Filename...: axcp701
#+ Description: 成本憑證產生傳票作業
#+ Creator....: 00537(2015-01-15 16:21:01)
#+ Modifier...: 00537(2015-01-22 14:32:11) -SD/PR-
]]>
  </section>
  <section id="axcp701.detail_show" ver="2" status="" src="s" readonly="">
    <![CDATA[#+ 顯示相關資料
PRIVATE FUNCTION axcp701_detail_show()
   #add-point:show段define
   {<point name="detail_show.define" edit="s"/>}
   #end add-point
   #add-point:show段define
   {<point name="detail_show.define_customerization" edit="c"/>}
   #end add-point
   
   #add-point:detail_show段
   {<point name="detail_show.detail_show"/>}
   #end add-point
 
END FUNCTION
]]>
  </section>
  <section id="axcp701.fetch" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 單身陣列填充2
PRIVATE FUNCTION axcp701_fetch()
 
   DEFINE li_ac           LIKE type_t.num10
   #add-point:fetch段define
   {<point name="fetch.define" edit="s"/>}
   #end add-point
   #add-point:fetch段define
   {<point name="fetch.define_customerization" edit="c"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
   #add-point:單身填充後
   {<point name="fetch.after_fill" />}
   #end add-point 
   
   LET l_ac = li_ac
   
END FUNCTION
]]>
  </section>
  <section id="axcp701.filter" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ filter過濾功能
PRIVATE FUNCTION axcp701_filter()
   #add-point:filter段define
   {<point name="filter.define" edit="s"/>}
   #end add-point    
   #add-point:filter段define
   {<point name="filter.define_customerization" edit="c"/>}
   #end add-point    
   
   DISPLAY ARRAY g_detail_d TO s_detail1.* ATTRIBUTE(COUNT=g_detail_cnt)
      ON UPDATE
 
   END DISPLAY
 
   LET l_ac = 1
   LET g_detail_cnt = 1
   #add-point:filter段define
   {<point name="filter.detail_cnt"/>}
   #end add-point    
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter
   LET g_wc_t = g_wc
   
   LET g_wc = cl_replace_str(g_wc, g_wc_filter, '')
   
   CALL axcp701_b_fill()
   
END FUNCTION
]]>
  </section>
  <section id="axcp701.filter_parser" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ filter欄位解析
PRIVATE FUNCTION axcp701_filter_parser(ps_field)
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num10
   DEFINE li_tmp2    LIKE type_t.num10
   DEFINE ls_var     STRING
   #add-point:filter段define
   {<point name="filter_parser.define" edit="s"/>}
   #end add-point    
   #add-point:filter段define
   {<point name="filter_parser.define_customerization" edit="c"/>}
   #end add-point    
   
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION
]]>
  </section>
  <section id="axcp701.filter_show" ver="1" status="" src="s" readonly="">
    <![CDATA[#+ Browser標題欄位顯示搜尋條件
PRIVATE FUNCTION axcp701_filter_show(ps_field,ps_object)
   DEFINE ps_field         STRING
   DEFINE ps_object        STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
 
   LET ls_name = "formonly.", ps_object
 
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
 
   #顯示資料組合
   LET ls_condition = axcp701_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
 
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
 
END FUNCTION
]]>
  </section>
  <section id="axcp701.global" ver="12" status="" src="s" readonly="">
    <![CDATA[#應用 p02 樣板自動產生(Version:13)
{<point name="global.memo" />}
 
IMPORT os
IMPORT util
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc" 
#add-point:增加匯入變數檔
#{<point name="global.inc" />}
##end add-point
 
#模組變數(Module Variables)
DEFINE g_wc                 STRING
DEFINE g_wc_t               STRING                        #儲存 user 的查詢條件
DEFINE g_wc2                STRING
DEFINE g_wc_filter          STRING
DEFINE g_wc_filter_t        STRING
DEFINE g_sql                STRING
DEFINE g_forupd_sql         STRING                        #SELECT ... FOR UPDATE SQL
DEFINE g_before_input_done  LIKE type_t.num5
DEFINE g_cnt                LIKE type_t.num10    
DEFINE l_ac                 LIKE type_t.num10              
DEFINE l_ac_d               LIKE type_t.num10             #單身idx 
DEFINE g_curr_diag          ui.Dialog                     #Current Dialog
DEFINE gwin_curr            ui.Window                     #Current Window
DEFINE gfrm_curr            ui.Form                       #Current Form
DEFINE g_current_page       LIKE type_t.num10             #目前所在頁數
DEFINE g_ref_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars           DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys              DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak          DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_insert             LIKE type_t.chr5              #是否導到其他page
DEFINE g_error_show         LIKE type_t.num5
DEFINE g_master_idx         LIKE type_t.num10
 
TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   {<point name="global.parameter"/>}
   #end add-point
        wc               STRING
                     END RECORD
 
TYPE type_g_detail_d RECORD
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable" edit="s"/>}
#end add-point
 
#add-point:自定義客戶專用模組變數(Module Variable)
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
DEFINE g_detail_cnt         LIKE type_t.num10              #單身 總筆數(所有資料)
DEFINE g_detail_d  DYNAMIC ARRAY OF type_g_detail_d
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point
]]>
  </section>
  <section id="axcp701.init" ver="2" status="" src="s" readonly="">
    <![CDATA[#+ 畫面資料初始化
PRIVATE FUNCTION axcp701_init()
   #add-point:init段define
   {<point name="init.define" edit="s"/>}
   #end add-point   
   #add-point:init段define
   {<point name="init.define_customerization" edit="c"/>}
   #end add-point   
   
   LET g_error_show  = 1
   LET g_wc_filter   = " 1=1"
   LET g_wc_filter_t = " 1=1"
 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="axcp701.main" ver="3" status="" src="s" readonly="">
    <![CDATA[#+ 作業開始 
MAIN
   DEFINE ls_js  STRING
   #add-point:main段define
   {<point name="main.define" edit="s"/>}
   #end add-point   
   #add-point:main段define
   {<point name="main.define_customerization" edit="c"/>}
   #end add-point   
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("axc","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   {<point name="main.background"/>}
   #end add-point
 
   IF g_bgjob = "Y" THEN
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_axcp701 WITH FORM cl_ap_formpath("axc",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL axcp701_init()   
 
      #進入選單 Menu (="N")
      CALL axcp701_ui_dialog() 
 
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_axcp701
   END IF 
   
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
]]>
  </section>
  <section id="axcp701.other_function" ver="1" status="" src="s" readonly="">
    <![CDATA[#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
]]>
  </section>
  <section id="axcp701.query" ver="4" status="" src="s" readonly="">
    <![CDATA[#+ QBE資料查詢
PRIVATE FUNCTION axcp701_query()
   DEFINE ls_wc      STRING
   DEFINE ls_return  STRING
   DEFINE ls_result  STRING 
   #add-point:query段define
   {<point name="query.define" edit="s" />}
   #end add-point 
   #add-point:query段define
   {<point name="query.define_customerization" edit="c" />}
   #end add-point 
    
   #add-point:cs段after_construct
   {<point name="query.after_construct" />}
   #end add-point
        
   LET g_error_show = 1
   CALL axcp701_b_fill()
   LET l_ac = g_master_idx
   IF g_detail_cnt = 0 AND NOT INT_FLAG THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = -100 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
 
   END IF
   
   #add-point:cs段after_query
   {<point name="query.cs段after_query" />}
   #end add-point
   
END FUNCTION
]]>
  </section>
  <section id="axcp701.ui_dialog" ver="10" status="" src="s" readonly="">
    <![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION axcp701_ui_dialog()
   DEFINE li_idx   LIKE type_t.num10
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define" edit="s"/>}
   #end add-point 
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define_customerization" edit="c"/>}
   #end add-point 
   
   LET gwin_curr = ui.Window.getCurrent()
   LET gfrm_curr = gwin_curr.getForm()   
   
   LET g_action_choice = " "  
   CALL cl_set_act_visible("accept,cancel", FALSE)
         
   LET g_detail_cnt = g_detail_d.getLength()
   #add-point:ui_dialog段before dialog 
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE
 
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_detail_d.clear()
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL axcp701_init()
      END IF
 
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #add-point:ui_dialog段construct
         {<point name="ui_dialog.more_construct"/>}
         #end add-point
         #add-point:ui_dialog段input
         {<point name="ui_dialog.more_input"/>}
         #end add-point
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         BEFORE DIALOG
            IF g_detail_d.getLength() > 0 THEN
               CALL gfrm_curr.setFieldHidden("formonly.sel", TRUE)
               CALL gfrm_curr.setFieldHidden("formonly.statepic", TRUE)
            ELSE
               CALL gfrm_curr.setFieldHidden("formonly.sel", FALSE)
               CALL gfrm_curr.setFieldHidden("formonly.statepic", FALSE)
            END IF
            #add-point:ui_dialog段before_dialog2
            {<point name="ui_dialog.before_dialog2"/>}
            #end add-point
 
         #選擇全部
         ON ACTION selall
            CALL DIALOG.setSelectionRange("s_detail1", 1, -1, 1)
            #add-point:ui_dialog段on action selall
            {<point name="ui_dialog.selall.befroe"/>}
            #end add-point            
            FOR li_idx = 1 TO g_detail_d.getLength()
               LET g_detail_d[li_idx].sel = "Y"
               #add-point:ui_dialog段on action selall
               {<point name="ui_dialog.for.onaction_selall"/>}
               #end add-point
            END FOR
            #add-point:ui_dialog段on action selall
            {<point name="ui_dialog.onaction_selall"/>}
            #end add-point
 
         #取消全部
         ON ACTION selnone
            CALL DIALOG.setSelectionRange("s_detail1", 1, -1, 0)
            FOR li_idx = 1 TO g_detail_d.getLength()
               LET g_detail_d[li_idx].sel = "N"
               #add-point:ui_dialog段on action selnone
               {<point name="ui_dialog.for.onaction_selnone"/>}
               #end add-point
            END FOR
            #add-point:ui_dialog段on action selnone
            {<point name="ui_dialog.onaction_selnone"/>}
            #end add-point
 
         #勾選所選資料
         ON ACTION sel
            FOR li_idx = 1 TO g_detail_d.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail_d[li_idx].sel = "Y"
               END IF
            END FOR
            #add-point:ui_dialog段on action sel
            {<point name="ui_dialog.onaction_sel"/>}
            #end add-point
 
         #取消所選資料
         ON ACTION unsel
            FOR li_idx = 1 TO g_detail_d.getLength()
               IF DIALOG.isRowSelected("s_detail1", li_idx) THEN
                  LET g_detail_d[li_idx].sel = "N"
               END IF
            END FOR
            #add-point:ui_dialog段on action unsel
            {<point name="ui_dialog.onaction_unsel"/>}
            #end add-point
      
         ON ACTION filter
            LET g_action_choice="filter"
            CALL axcp701_filter()
            #add-point:ON ACTION filter
            {<point name="menu.filter" />}
            #END add-point
            EXIT DIALOG
      
         ON ACTION close
            LET INT_FLAG=FALSE         
            LET g_action_choice = "exit"
            EXIT DIALOG
      
         ON ACTION exit
            LET g_action_choice="exit"
            EXIT DIALOG
 
         ON ACTION accept
            #add-point:ui_dialog段accept之前
            {<point name="ui_dialog.before_accept"/>}
            #end add-point
            CALL axcp701_query()
             
         # 條件清除
         ON ACTION qbeclear
            #add-point:ui_dialog段
            {<point name="ui_dialog.qbeclear"/>}
            #end add-point
 
         # 重新整理
         ON ACTION datarefresh
            LET g_error_show = 1
            #add-point:ui_dialog段datarefresh
            {<point name="ui_dialog.datarefresh"/>}
            #end add-point
            CALL axcp701_b_fill()
 
         #add-point:ui_dialog段action
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
      
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         EXIT WHILE
      END IF
      
   END WHILE
 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
END FUNCTION
]]>
  </section>
</add_points>
