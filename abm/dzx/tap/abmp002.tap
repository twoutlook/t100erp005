<add_points prog="abmp002" std_prog="abmp002" erpver="1.0" module="ABM" ver="1" env="s" zone="t10dev" booking="Y">
  <point name="function.abmp002_upd_seq" cite_std="N" status="u" ver="1" src="s" new="Y" order="1" mark_hard="N">
<![CDATA[
PRIVATE FUNCTION abmp002_upd_seq()
DEFINE l_sql   STRING
DEFINE l_bmba  RECORD 
           bmbaent  LIKE bmba_t.bmbaent,
           bmbasite LIKE bmba_t.bmbasite,
           bmba001  LIKE bmba_t.bmba001,
           bmba002  LIKE bmba_t.bmba002,
           bmba003  LIKE bmba_t.bmba003,
           bmba004  LIKE bmba_t.bmba004,
           bmba005  DATETIME YEAR TO SECOND,
           bmba007  LIKE bmba_t.bmba007,
           bmba008  LIKE bmba_t.bmba008
           END RECORD
DEFINE l_bmaa  RECORD LIKE bmaa_t.*
DEFINE l_order_num LIKE type_t.num5
DEFINE l_num   LIKE type_t.num5 
DEFINE l_cnt   LIKE type_t.num5
   LET l_sql = "SELECT * FROM bmaa_t WHERE bmaaent = ",g_enterprise," AND ",g_wc 
   IF g_argv1 = '1' AND g_input.site_bom = 'N' THEN
      LET l_sql = l_sql," AND bmaasite = 'ALL'"
   END IF
   IF g_argv1 = '2' THEN
      LET l_sql = l_sql," AND bmaasite = '",g_site,"'"
   END IF
   PREPARE sel_bmaa_prep1 FROM l_sql
   DECLARE sel_bmaa_curs1 CURSOR FOR sel_bmaa_prep1
   
   LET l_cnt = 0
   FOREACH sel_bmaa_curs1 INTO l_bmaa.*
      IF SQLCA.SQLCODE THEN
         CALL cl_err('',SQLCA.SQLCODE,1)
         RETURN FALSE
      END IF
      LET l_sql = "SELECT bmbaent,bmbasite,bmba001,bmba002,bmba003,bmba004,bmba005,bmba007,bmba008 FROM bmba_t WHERE bmbaent = ",l_bmaa.bmaaent,
                  " AND bmbasite = '",l_bmaa.bmaasite,"' AND bmba001 = '",l_bmaa.bmaa001,
                  "' AND bmba002 = '",l_bmaa.bmaa002,"'"
      IF NOT cl_null(g_input.reseq) THEN
         LET l_sql = l_sql," AND bmba009 >= ",g_input.reseq
      END IF
      LET l_sql = l_sql," ORDER BY " 
      CASE g_input.order1 
         WHEN '1'
            LET l_sql = l_sql,"bmba009,"
         WHEN '2'
            LET l_sql = l_sql,"bmba004,"
         WHEN '3'
            LET l_sql = l_sql,"bmba007,"
         WHEN '4'
            LET l_sql = l_sql,"bmba003,"
      END CASE
      CASE g_input.order2 
         WHEN '1'
            LET l_sql = l_sql,"bmba009,"
         WHEN '2'
            LET l_sql = l_sql,"bmba004,"
         WHEN '3'
            LET l_sql = l_sql,"bmba007,"
         WHEN '4'
            LET l_sql = l_sql,"bmba003,"
      END CASE
      CASE g_input.order3 
         WHEN '1'
            LET l_sql = l_sql,"bmba009,"
         WHEN '2'
            LET l_sql = l_sql,"bmba004,"
         WHEN '3'
            LET l_sql = l_sql,"bmba007,"
         WHEN '4'
            LET l_sql = l_sql,"bmba003,"
      END CASE
      CASE g_input.order4 
         WHEN '1'
            LET l_sql = l_sql,"bmba009"
         WHEN '2'
            LET l_sql = l_sql,"bmba004"
         WHEN '3'
            LET l_sql = l_sql,"bmba007"
         WHEN '4'
            LET l_sql = l_sql,"bmba003"
      END CASE
      
      PREPARE sel_bmba_prep2 FROM l_sql
      DECLARE sel_bmba_curs2 CURSOR FOR sel_bmba_prep2
      IF NOT cl_null(g_input.reseq) THEN
         LET l_order_num = g_input.reseq
      ELSE
         LET l_order_num = g_input.renum
      END IF
      FOREACH sel_bmba_curs2 INTO l_bmba.*
         IF SQLCA.SQLCODE THEN
            CALL cl_err('',SQLCA.SQLCODE,1)
            RETURN FALSE
         END IF
         UPDATE bmba_t SET bmba009 = l_order_num
          WHERE bmbaent = l_bmba.bmbaent AND bmbasite = l_bmba.bmbasite
            AND bmba001 = l_bmba.bmba001 AND bmba002 = l_bmba.bmba002
            AND bmba003 = l_bmba.bmba003 AND bmba004 = l_bmba.bmba004
            AND bmba005 = l_bmba.bmba005 AND bmba007 = l_bmba.bmba007 AND bmba008 = l_bmba.bmba008
         IF SQLCA.SQLCODE OR SQLCA.SQLERRD[3] = 0 THEN
            CALL cl_err('',SQLCA.SQLCODE,1)
            RETURN FALSE
         END IF
         LET l_order_num = l_order_num + g_input.renum
      END FOREACH
      LET l_cnt = l_cnt + 1
   END FOREACH
   IF l_cnt > 0 THEN
      RETURN TRUE 
   ELSE
      CALL cl_err('','afa-00067',1)
      RETURN FALSE
   END IF
END FUNCTION]]>
</point>
  <point name="global.variable" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[DEFINE g_wc   STRING 
DEFINE g_input  RECORD
             order1 LIKE type_t.chr1,
             order2 LIKE type_t.chr1,
             order3 LIKE type_t.chr1,
             order4 LIKE type_t.chr1,
             reseq  LIKE type_t.num5,
             renum  LIKE type_t.num5,
             site_bom LIKE type_t.chr1
               END RECORD
DEFINE g_argv1 LIKE type_t.chr10]]>
</point>
  <point name="init.init" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[    CALL cl_set_combo_scc('order1','5439')
    CALL cl_set_combo_scc('order2','5439')
    CALL cl_set_combo_scc('order3','5439')
    CALL cl_set_combo_scc('order4','5439')
    IF g_argv1 = '2' THEN
       CALL cl_set_comp_visible("site_bom",FALSE)
    END IF]]>
</point>
  <point name="main.background" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[   LET g_argv1 = g_argv[1]]]>
</point>
  <point name="process.define" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[  ]]>
</point>
  <point name="process.foreground_finish" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[      
      ]]>
</point>
  <point name="process.pre_process" cite_std="N" status="u" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[   CALL s_transaction_begin()
   IF NOT abmp002_upd_seq() THEN
      CALL s_transaction_end('N','0')
      RETURN
   ELSE
      DISPLAY 100 TO stagecomplete
      CALL s_transaction_end('Y','0')
   END IF]]>
</point>
  <point name="ui_dialog.before_dialog" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[   INITIALIZE g_input.* TO NULL
   CLEAR FORM
   LET g_input.order1 = '1'
   LET g_input.order2 = '2'
   LET g_input.order3 = '3'
   LET g_input.order4 = '4'
   LET l_para = cl_get_para(g_enterprise,g_site,'E-BAS-0008')
   LET g_input.renum = l_para
   IF g_argv1 = '1' THEN
      LET g_input.site_bom = 'Y'
      DISPLAY BY NAME g_input.site_bom
   END IF]]>
</point>
  <point name="ui_dialog.define" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[   DEFINE l_para   LIKE type_t.num5]]>
</point>
  <point name="ui_dialog.more_action" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[         ]]>
</point>
  <point name="ui_dialog.more_construct" cite_std="N" status="u" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[         CONSTRUCT BY NAME g_wc ON bmaa001,bmaa002
            
            ON ACTION controlp INFIELD bmaa001
               INITIALIZE g_qryparam.* TO NULL
               LET g_qryparam.state = 'c'
               LET g_qryparam.reqry = FALSE
               IF g_argv1 = '1' THEN
                  LET g_qryparam.where = " bmaasite = 'ALL'"
               ELSE
                  LET g_qryparam.where = " bmaasite = '",g_site,"'"
               END IF
               CALL q_bmaa001_3()                           #呼叫開窗
               DISPLAY g_qryparam.return1 TO bmaa001  #顯示到畫面上
               NEXT FIELD bmaa001
               
         END CONSTRUCT]]>
</point>
  <point name="ui_dialog.more_input" cite_std="N" status="" ver="1" src="s" new="N" mark_hard="N">
<![CDATA[         INPUT BY NAME g_input.order1,g_input.order2,g_input.order3,g_input.order4,g_input.reseq,g_input.renum,g_input.site_bom
             ATTRIBUTE(WITHOUT DEFAULTS)
            BEFORE INPUT
            
            AFTER FIELD reseq
               IF NOT cl_ap_chk_Range(g_input.reseq,"0.000","0","","","azz-00079",1) THEN
                  NEXT FIELD inbj009
               END IF 
            AFTER FIELD renum
               IF NOT cl_ap_chk_Range(g_input.renum,"0.000","0","","","azz-00079",1) THEN
                  NEXT FIELD inbj009
               END IF             
         END INPUT]]>
</point>
  <point name="global.memo" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.import" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.parameter" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="global.argv" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.servicecall" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.before_close" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="main.exit" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="init.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.more_displayarray" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.qbe_select" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="ui_dialog.qbeclear" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.exit_dialog" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="transfer.argv.define" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.count_progress" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.process" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <point name="process.background_finish" cite_std="N" status="" ver="" src="s" new="Y">
<![CDATA[]]>
</point>
  <section id="abmp002.description" ver="1" status="" src="s">
<![CDATA[#+ Version..: T100-ERP-1.00.00(SD版次:1,PD版次:1) Build-000015
#+ 
#+ Filename...: abmp002
#+ Description: 研發中心BOM項次重排作業
#+ Creator....: 01996(2014/06/04)
#+ Modifier...: 01996(2014/06/04)
#+ Buildtype..: 應用 p01 樣板自動產生
#+ 以上段落由子樣板a00產生
]]>
</section>
  <section id="abmp002.global" ver="1" status="" src="s">
<![CDATA[{<point name="global.memo" />}
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_schedule
#add-point:增加匯入項目
{<point name="global.import" />}
#end add-point
 
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
GLOBALS "../../cfg/top_schedule.inc"
GLOBALS
   DEFINE gwin_curr2  ui.Window
   DEFINE gfrm_curr2  ui.Form
   DEFINE gi_hiden_asign       LIKE type_t.num5
   DEFINE gi_hiden_exec        LIKE type_t.num5
   DEFINE gi_hiden_spec        LIKE type_t.num5
   DEFINE gi_hiden_exec_end    LIKE type_t.num5
END GLOBALS
 
PRIVATE TYPE type_parameter RECORD
   #add-point:自定背景執行須傳遞的參數(Module Variable)
   {<point name="global.parameter"/>}
   #end add-point
        wc               STRING
                     END RECORD
 
DEFINE g_sql             STRING        #組 sql 用
DEFINE g_forupd_sql      STRING        #SELECT ... FOR UPDATE  SQL
DEFINE g_error_show      LIKE type_t.num5
DEFINE g_jobid           STRING
 
#add-point:自定義模組變數(Module Variable)
{<point name="global.variable"/>}
#end add-point
 
#add-point:傳入參數說明
{<point name="global.argv"/>}
#end add-point
]]>
</section>
  <section id="abmp002.init" ver="1" status="" src="s">
<![CDATA[#+ 初始化作業
PRIVATE FUNCTION abmp002_init()
   #add-point:init段define
   {<point name="init.define"/>}
   #end add-point
 
   LET g_error_show = 1
   LET gwin_curr2 = ui.Window.getCurrent()
   LET gfrm_curr2 = gwin_curr2.getForm()
   CALL cl_schedule_import_4fd()
   CALL cl_set_combo_scc("gzpa003","75")
   IF cl_get_para(g_enterprise,"","E-SYS-0005") = "N" THEN
       CALL cl_set_comp_visible("scheduling_page,history_page",FALSE)
   END IF 
   #add-point:畫面資料初始化
   {<point name="init.init" />}
   #end add-point
   
END FUNCTION
]]>
</section>
  <section id="abmp002.main" ver="1" status="" src="s">
<![CDATA[MAIN
   DEFINE ls_js    STRING
   DEFINE lc_param type_parameter  
   #add-point:main段define
   {<point name="main.define"/>}
   #end add-point 
  
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
 
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("abm","")
 
   #add-point:定義背景狀態與整理進入需用參數ls_js
   {<point name="main.background"/>}
   #end add-point
 
   IF g_bgjob = "Y" THEN
      #add-point:Service Call
      {<point name="main.servicecall" />}
      #end add-point
      CALL abmp002_process(ls_js)
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_abmp002 WITH FORM cl_ap_formpath("abm",g_code)
 
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
 
      #程式初始化
      CALL abmp002_init()
 
      #進入選單 Menu (="N")
      CALL abmp002_ui_dialog()
 
      #add-point:畫面關閉前
      {<point name="main.before_close" />}
      #end add-point
      #畫面關閉
      CLOSE WINDOW w_abmp002
   END IF
 
   #add-point:作業離開前
   {<point name="main.exit" />}
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
]]>
</section>
  <section id="abmp002.other_function" ver="1" status="" src="s">
<![CDATA[#add-point:自定義元件(Function)
{<point name="other.function"/>}
#end add-point
]]>
</section>
  <section id="abmp002.process" ver="2" status="" src="s">
<![CDATA[#+ 資料處理
PRIVATE FUNCTION abmp002_process(ls_js)
   DEFINE ls_js       STRING
   DEFINE lc_param    type_parameter
   DEFINE li_stus     LIKE type_t.num5
   DEFINE li_count    LIKE type_t.num10  #progressbar計量
   DEFINE ls_sql      STRING             #主SQL
   #add-point:process段define
   {<point name="process.define"/>}
   #end add-point
 
   CALL util.JSON.parse(ls_js,lc_param)
 
   #add-point:process段前處理
   {<point name="process.pre_process"/>}
   #end add-point
 
   #預先計算progressbar迴圈次數
   IF g_bgjob <> "Y" THEN
      #add-point:process段count_progress
      {<point name="process.count_progress"/>}
      #end add-point
   END IF
 
   #主SQL及相關FOREACH前置處理
#  DECLARE abmp002_process_cs CURSOR FROM ls_sql
#  FOREACH abmp002_process_cs INTO
   #add-point:process段process
   {<point name="process.process"/>}
   #end add-point
#  END FOREACH
 
   IF g_bgjob = "N" THEN
      #前景作業完成處理
      #add-point:process段foreground完成處理
      {<point name="process.foreground_finish"/>}
      #end add-point
      CALL cl_ask_confirm3("std-00012","")
   ELSE
      #背景作業完成處理
      #add-point:process段background完成處理
      {<point name="process.background_finish"/>}
      #end add-point
   END IF
END FUNCTION
]]>
</section>
  <section id="abmp002.transfer_argv" ver="1" status="" src="s">
<![CDATA[#+ 轉換本地參數至cmdrun參數內,準備進入背景執行
PRIVATE FUNCTION abmp002_transfer_argv(ls_js)
   DEFINE ls_js       STRING
   DEFINE la_cmdrun   RECORD
             prog     STRING,
             param    DYNAMIC ARRAY OF STRING
                  END RECORD
   DEFINE la_param    type_parameter
 
   CALL util.JSON.parse(ls_js,la_param)
 
   LET la_cmdrun.prog = g_prog
   #add-point:transfer.argv段define
   {<point name="transfer.argv.define"/>}
   #end add-point
 
   RETURN util.JSON.stringify( la_cmdrun )
END FUNCTION
]]>
</section>
  <section id="abmp002.ui_dialog" ver="2" status="" src="s">
<![CDATA[#+ 選單功能實際執行處
PRIVATE FUNCTION abmp002_ui_dialog()
   DEFINE li_exit  LIKE type_t.num5    #判別是否為離開作業
   DEFINE li_idx   LIKE type_t.num5
   DEFINE ls_js    STRING
   DEFINE ls_wc    STRING
   DEFINE lc_param type_parameter
   #add-point:ui_dialog段define
   {<point name="ui_dialog.define"/>}
   #end add-point
 
   #add-point:ui_dialog段before dialog
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
 
   WHILE TRUE
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         #add-point:ui_dialog段construct
         {<point name="ui_dialog.more_construct"/>}
         #end add-point
         #add-point:ui_dialog段input
         {<point name="ui_dialog.more_input"/>}
         #end add-point
         #add-point:ui_dialog段自定義display array
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
 
         SUBDIALOG lib_cl_schedule.cl_schedule_setting
         SUBDIALOG lib_cl_schedule.cl_schedule_setting_exec_call
         SUBDIALOG lib_cl_schedule.cl_schedule_select_show_history
         SUBDIALOG lib_cl_schedule.cl_schedule_show_history
 
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               LET lc_param.wc = ls_wc
               #取得條件後需要執行項目,應新增於下方adp
               #add-point:ui_dialog段qbe_select後
               {<point name="ui_dialog.qbe_select"/>}
               #end add-point
            END IF
 
         ON ACTION qbe_save
            CALL cl_qbe_save()
 
         ON ACTION batch_execute
            ACCEPT DIALOG
 
         ON ACTION qbeclear         
            CLEAR FORM
            INITIALIZE lc_param.* TO NULL
            #add-point:ui_dialog段qbeclear
            {<point name="ui_dialog.qbeclear"/>}
            #end add-point
 
         ON ACTION history_fill
            CALL cl_schedule_history_fill()
 
         ON ACTION close
            LET INT_FLAG = TRUE
            EXIT DIALOG
         
         ON ACTION exit
            LET INT_FLAG = TRUE
            EXIT DIALOG
 
         #add-point:ui_dialog段action
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         #主選單用ACTION
         &include "main_menu.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
 
      #add-point:ui_dialog段exit dialog
      {<point name="process.exit_dialog"/>}
      #end add-point
 
      LET ls_js = util.JSON.stringify(lc_param)
 
      IF INT_FLAG THEN
         LET INT_FLAG = FALSE
         EXIT WHILE
      ELSE
         LET g_jobid = cl_schedule_get_jobid(g_prog)
         CASE 
            WHEN g_schedule.gzpa003 = "0"
                 CALL abmp002_process(ls_js)
            WHEN g_schedule.gzpa003 = "1"
                 CALL cl_schedule_update_data(g_jobid)
                 LET ls_js = abmp002_transfer_argv(ls_js)
                 CALL cl_cmdrun(ls_js)
            WHEN g_schedule.gzpa003 = "2"
                 CALL cl_schedule_update_data(g_jobid)
            WHEN g_schedule.gzpa003 = "3"
                 CALL cl_schedule_update_data(g_jobid)
         END CASE    
         LET g_schedule.gzpa003 = "0" #預設一開始 立即於前景執行
         INITIALIZE lc_param.*  TO NULL 
         #欄位初始資訊 
         CALL cl_schedule_init_info("all",g_schedule.gzpa003) 
         LET gi_hiden_asign = FALSE 
         LET gi_hiden_exec = FALSE 
         LET gi_hiden_spec = FALSE 
         LET gi_hiden_exec_end = FALSE 
         CALL cl_schedule_hidden()
      END IF
   END WHILE
 
END FUNCTION
]]>
</section>
</add_points>