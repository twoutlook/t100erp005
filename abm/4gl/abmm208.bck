#該程式未解開Section, 採用最新樣板產出!
{<section id="abmm208.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0007(2014-10-28 16:04:48), PR版次:0007(2017-02-17 16:24:15)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000106
#+ Filename...: abmm208
#+ Description: FAS組合設定作業
#+ Creator....: 00768(2014-10-11 16:05:41)
#+ Modifier...: 00768 -SD/PR- 01996
 
{</section>}
 
{<section id="abmm208.global" >}
#應用 t01 樣板自動產生(Version:79)
#add-point:填寫註解說明 name="global.memo" 
#150129 pattern调整_delete_b，连带修改
#160712-00010#1 2016/07/22 By lixh  s_aimi092_chk_eigenvalue() 增加料号/类型传参
#160822-00040#1 2016/08/25 By 08729 新舊值調整
#161124-00048#1 2016/12/02 By 08734 星号整批调整
#161216-00029#9  2017/01/22 By xujing   若当前BOM为失效状态，修改、删除、整单操作、明细操作中各项action不可执行
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目 name="global.import"

#end add-point 
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"

#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_bmla_m        RECORD
       bmla001 LIKE bmla_t.bmla001, 
   bmla001_desc LIKE type_t.chr80, 
   bmla001_desc_desc LIKE type_t.chr80, 
   bmla002 LIKE bmla_t.bmla002, 
   bmla003 LIKE bmla_t.bmla003, 
   bmla004 LIKE bmla_t.bmla004, 
   bmla005 LIKE bmla_t.bmla005, 
   bmlaownid LIKE bmla_t.bmlaownid, 
   bmlaownid_desc LIKE type_t.chr80, 
   bmlaowndp LIKE bmla_t.bmlaowndp, 
   bmlaowndp_desc LIKE type_t.chr80, 
   bmlacrtid LIKE bmla_t.bmlacrtid, 
   bmlacrtid_desc LIKE type_t.chr80, 
   bmlacrtdp LIKE bmla_t.bmlacrtdp, 
   bmlacrtdp_desc LIKE type_t.chr80, 
   bmlacrtdt LIKE bmla_t.bmlacrtdt, 
   bmlamodid LIKE bmla_t.bmlamodid, 
   bmlamodid_desc LIKE type_t.chr80, 
   bmlamoddt LIKE bmla_t.bmlamoddt
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_bmlb_d        RECORD
       bmlb004 LIKE bmlb_t.bmlb004, 
   bmlb003 LIKE bmlb_t.bmlb003, 
   bmlb003_desc LIKE type_t.chr500, 
   bmlb005 LIKE bmlb_t.bmlb005, 
   bmlb006 LIKE bmlb_t.bmlb006, 
   bmlb007 LIKE bmlb_t.bmlb007, 
   bmlb008 LIKE bmlb_t.bmlb008, 
   bmlb008_desc LIKE type_t.chr500
       END RECORD
PRIVATE TYPE type_g_bmlb2_d RECORD
       bmlc004 LIKE type_t.chr500, 
   bmlc004_desc LIKE type_t.chr500, 
   bmlc004_desc_desc LIKE type_t.chr500, 
   bmlc005 LIKE type_t.chr500, 
   bmlc006 LIKE type_t.chr500, 
   bmlc007 LIKE type_t.chr500, 
   bmlc008 LIKE bmlc_t.bmlc008
       END RECORD
 
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
            b_bmla001 LIKE bmla_t.bmla001,
   b_bmla001_desc LIKE type_t.chr80,
   b_bmla001_desc_desc LIKE type_t.chr80,
      b_bmla002 LIKE bmla_t.bmla002
       END RECORD
       
#add-point:自定義模組變數(Module Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
#单身3用到的变数
 TYPE type_g_bmlb3_d RECORD
       bmld005           LIKE type_t.chr10, 
       bmld005_desc      LIKE type_t.chr500, 
       bmld006           LIKE type_t.chr500, 
       bmld006_desc      LIKE type_t.chr500, 
       bmld006_desc_desc LIKE type_t.chr500
       END RECORD
DEFINE g_bmlb3_d   DYNAMIC ARRAY OF type_g_bmlb3_d
DEFINE g_bmlb3_d_t type_g_bmlb3_d
DEFINE g_bmlb3_d_o type_g_bmlb3_d
DEFINE g_wc2_table3   STRING
DEFINE g_detail_idx3         LIKE type_t.num5              #單身3目前所在筆數
 
DEFINE g_today_dt          LIKE type_t.chr20
DEFINE g_where             STRING
#end add-point
       
#模組變數(Module Variables)
DEFINE g_bmla_m          type_g_bmla_m
DEFINE g_bmla_m_t        type_g_bmla_m
DEFINE g_bmla_m_o        type_g_bmla_m
DEFINE g_bmla_m_mask_o   type_g_bmla_m #轉換遮罩前資料
DEFINE g_bmla_m_mask_n   type_g_bmla_m #轉換遮罩後資料
 
   DEFINE g_bmla001_t LIKE bmla_t.bmla001
DEFINE g_bmla002_t LIKE bmla_t.bmla002
 
 
DEFINE g_bmlb_d          DYNAMIC ARRAY OF type_g_bmlb_d
DEFINE g_bmlb_d_t        type_g_bmlb_d
DEFINE g_bmlb_d_o        type_g_bmlb_d
DEFINE g_bmlb_d_mask_o   DYNAMIC ARRAY OF type_g_bmlb_d #轉換遮罩前資料
DEFINE g_bmlb_d_mask_n   DYNAMIC ARRAY OF type_g_bmlb_d #轉換遮罩後資料
DEFINE g_bmlb2_d          DYNAMIC ARRAY OF type_g_bmlb2_d
DEFINE g_bmlb2_d_t        type_g_bmlb2_d
DEFINE g_bmlb2_d_o        type_g_bmlb2_d
DEFINE g_bmlb2_d_mask_o   DYNAMIC ARRAY OF type_g_bmlb2_d #轉換遮罩前資料
DEFINE g_bmlb2_d_mask_n   DYNAMIC ARRAY OF type_g_bmlb2_d #轉換遮罩後資料
 
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
 
DEFINE g_wc2_table2   STRING
 
 
DEFINE g_wc2_extend          STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                         #Current Dialog
                                                               
DEFINE g_pagestart           LIKE type_t.num10                 
DEFINE gwin_curr             ui.Window                         #Current Window
DEFINE gfrm_curr             ui.Form                           #Current Form
DEFINE g_page_action         STRING                            #page action
DEFINE g_header_hidden       LIKE type_t.num5                  #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5                  #隱藏工作Panel
DEFINE g_page                STRING                            #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10                  #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx_tmp      LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10                  #單身2目前所在筆數
DEFINE g_detail_idx_list     DYNAMIC ARRAY OF LIKE type_t.num10 #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10                  #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10                  #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10                  #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                             #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10                  #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                            #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10                  #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5                   #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
DEFINE g_idx_group           om.SaxAttributes              #頁籤群組
DEFINE g_master_commit       LIKE type_t.chr1              #確認單頭是否修改過
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"

#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"

#end add-point
 
{</section>}
 
{<section id="abmm208.main" >}
#應用 a26 樣板自動產生(Version:7)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define(客製用) name="main.define_customerization"
   
   #end add-point   
   #add-point:main段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="main.define"
   DEFINE l_success   LIKE type_t.num5
   #end add-point   
   
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("abm","")
 
   #add-point:作業初始化 name="main.init"
   
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define name="main.define_sql"
   
   #end add-point
   LET g_forupd_sql = " SELECT bmla001,'','',bmla002,bmla003,bmla004,bmla005,bmlaownid,'',bmlaowndp, 
       '',bmlacrtid,'',bmlacrtdp,'',bmlacrtdt,bmlamodid,'',bmlamoddt", 
                      " FROM bmla_t",
                      " WHERE bmlaent= ? AND bmla001=? AND bmla002=? FOR UPDATE"
   #add-point:SQL_define name="main.after_define_sql"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmm208_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT DISTINCT t0.bmla001,t0.bmla002,t0.bmla003,t0.bmla004,t0.bmla005,t0.bmlaownid, 
       t0.bmlaowndp,t0.bmlacrtid,t0.bmlacrtdp,t0.bmlacrtdt,t0.bmlamodid,t0.bmlamoddt,t1.imaal003 ,t2.imaal004 , 
       t3.ooag011 ,t4.ooefl003 ,t5.ooag011 ,t6.ooefl003 ,t7.ooag011",
               " FROM bmla_t t0",
                              " LEFT JOIN imaal_t t1 ON t1.imaalent="||g_enterprise||" AND t1.imaal001=t0.bmla001 AND t1.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent="||g_enterprise||" AND t2.imaal001=t0.bmla001 AND t2.imaal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t3 ON t3.ooagent="||g_enterprise||" AND t3.ooag001=t0.bmlaownid  ",
               " LEFT JOIN ooefl_t t4 ON t4.ooeflent="||g_enterprise||" AND t4.ooefl001=t0.bmlaowndp AND t4.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t5 ON t5.ooagent="||g_enterprise||" AND t5.ooag001=t0.bmlacrtid  ",
               " LEFT JOIN ooefl_t t6 ON t6.ooeflent="||g_enterprise||" AND t6.ooefl001=t0.bmlacrtdp AND t6.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t7 ON t7.ooagent="||g_enterprise||" AND t7.ooag001=t0.bmlamodid  ",
 
               " WHERE t0.bmlaent = " ||g_enterprise|| " AND t0.bmla001 = ? AND t0.bmla002 = ?"
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define name="main.after_refresh_sql"
   
   #end add-point
   PREPARE abmm208_master_referesh FROM g_sql
 
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call name="main.servicecall"
      
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_abmm208 WITH FORM cl_ap_formpath("abm",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL abmm208_init()   
 
      #進入選單 Menu (="N")
      CALL abmm208_ui_dialog() 
      
      #add-point:畫面關閉前 name="main.before_close"
      
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_abmm208
      
   END IF 
   
   CLOSE abmm208_cl
   
   
 
   #add-point:作業離開前 name="main.exit"
   #CALL s_abmm208_drop_table() RETURNING l_success  #zll 测试用
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
 
 
{</section>}
 
{<section id="abmm208.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION abmm208_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   
   #end add-point    
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   DEFINE l_success   LIKE type_t.num5
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   
   #end add-point
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   
   #各個page指標
   LET g_detail_idx_list[1] = 1 
   LET g_detail_idx_list[2] = 1
 
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
   
   
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
   
   #page群組
   LET g_idx_group = om.SaxAttributes.create()
   CALL g_idx_group.addAttribute("'1',","1")
   CALL g_idx_group.addAttribute("'2',","1")
 
 
   #add-point:畫面資料初始化 name="init.init"
   LET g_detail_idx3 = 1
   
   CALL cl_set_comp_required("bmla002",FALSE)
   
   #CALL s_abmm208_create_table() RETURNING l_success  #zll测试用
   #end add-point
   
   #初始化搜尋條件
   CALL abmm208_default_search()
    
END FUNCTION
 
{</section>}
 
{<section id="abmm208.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION abmm208_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   
   #end add-point
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   DEFINE  l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE  l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE  l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   #因應查詢方案進行處理
   IF g_default THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #action default動作
   #應用 a42 樣板自動產生(Version:3)
   #進入程式時預設執行的動作
   CASE g_actdefault
      WHEN "insert"
         LET g_action_choice="insert"
         LET g_actdefault = ""
         IF cl_auth_chk_act("insert") THEN
            CALL abmm208_insert()
            #add-point:ON ACTION insert name="menu.default.insert"
            
            #END add-point
         END IF
 
      #add-point:action default自訂 name="ui_dialog.action_default"
      
      #end add-point
      OTHERWISE
   END CASE
 
 
 
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE g_bmla_m.* TO NULL
         CALL g_bmlb_d.clear()
         CALL g_bmlb2_d.clear()
 
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL abmm208_init()
      END IF
   
      CALL lib_cl_dlg.cl_dlg_before_display()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
         
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL abmm208_fetch('') # reload data
               LET l_ac = 1
               CALL abmm208_ui_detailshow() #Setting the current row 
         
               CALL abmm208_idx_chk()
               #NEXT FIELD bmlb003
         
               ON ACTION qbefield_user   #欄位隱藏設定 
                  LET g_action_choice="qbefield_user"
                  CALL cl_ui_qbefield_user()
         END DISPLAY
    
         DISPLAY ARRAY g_bmlb_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmm208_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[1] = l_ac
               CALL g_idx_group.addAttribute("'1',",l_ac)
               CALL abmm208_b_fill2('2')
 
               #add-point:page1, before row動作 name="ui_dialog.page1.before_row"
CALL abmm208_b_fill2('3')
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL abmm208_idx_chk()
               #add-point:page1自定義行為 name="ui_dialog.page1.before_display"
               
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
               
            #add-point:page1自定義行為 name="ui_dialog.page1.action"
            
            #end add-point
               
         END DISPLAY
        
 
         
         #第二階單身段落
         DISPLAY ARRAY g_bmlb2_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmm208_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[2] = l_ac
               CALL g_idx_group.addAttribute("'2',",l_ac)
               
               #add-point:page2, before row動作 name="ui_dialog.body2.before_row"
               CALL abmm208_b_fill2('3')

               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_current_page = 2
               #顯示單身筆數
               CALL abmm208_idx_chk()
               #add-point:page2自定義行為 name="ui_dialog.body2.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_2)
            
         
            #add-point:page2自定義行為 name="ui_dialog.body2.action"
            
            #end add-point
         
         END DISPLAY
 
         
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         #第三階單身段落
         DISPLAY ARRAY g_bmlb3_d TO s_detail3.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmm208_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_detail_idx3 = l_ac
               
            BEFORE DISPLAY
               #如果一直都在單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx3)
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_current_page = 3
               #顯示單身筆數
               CALL abmm208_idx_chk()
         
         END DISPLAY
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            #先填充browser資料
            CALL abmm208_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL abmm208_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL abmm208_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL abmm208_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2 name="ui_dialog.before_dialog2"
            
            #end add-point
 
         #add-point:ui_dialog段more_action name="ui_dialog.more_action"
         
         #end add-point
 
 
 
         
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "bmla_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmlb_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  #組合g_wc2
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
 
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
               END IF
               CALL abmm208_browser_fill("F")   #browser_fill()會將notice區塊清空
               CALL cl_notice()   #重新顯示,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "bmla_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmlb_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1)
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
                  #取得條件後需要重查、跳到結果第一筆資料的功能程式段
                  CALL abmm208_browser_fill("F")
                  IF g_browser_cnt = 0 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "-100" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     CLEAR FORM
                  ELSE
                     CALL abmm208_fetch("F")
                  END IF
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            CALL cl_notice()
          
         #應用 a49 樣板自動產生(Version:4)
            #過濾瀏覽頁資料
            ON ACTION filter
               LET g_action_choice = "fetch"
               #add-point:filter action name="ui_dialog.action.filter"
               
               #end add-point
               CALL abmm208_filter()
               EXIT DIALOG
 
 
 
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL abmm208_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmm208_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL abmm208_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmm208_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL abmm208_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmm208_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL abmm208_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmm208_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL abmm208_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmm208_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_bmlb_d)
                  LET g_export_id[1]   = "s_detail1"
                  LET g_export_node[2] = base.typeInfo.create(g_bmlb2_d)
                  LET g_export_id[2]   = "s_detail2"
 
                  #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
                  LET g_export_node[3] = base.typeInfo.create(g_bmlb3_d)
                  LET g_export_id[3]   = "s_detail3"
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
         #瀏覽頁折疊
         ON ACTION worksheethidden   
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            IF lb_first THEN
               LET lb_first = FALSE
               NEXT FIELD bmlb003
            END IF
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL abmm208_modify()
               #add-point:ON ACTION modify name="menu.modify"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL abmm208_modify()
               #add-point:ON ACTION modify_detail name="menu.modify_detail"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL abmm208_delete()
               #add-point:ON ACTION delete name="menu.delete"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               CALL abmm208_insert()
               #add-point:ON ACTION insert name="menu.insert"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output name="menu.output"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION quickprint
            LET g_action_choice="quickprint"
            IF cl_auth_chk_act("quickprint") THEN
               
               #add-point:ON ACTION quickprint name="menu.quickprint"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION reproduce
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN
               CALL abmm208_reproduce()
               #add-point:ON ACTION reproduce name="menu.reproduce"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL abmm208_query()
               #add-point:ON ACTION query name="menu.query"
               CALL g_curr_diag.setCurrentRow("s_detail3",1)
               #END add-point
               #應用 a59 樣板自動產生(Version:3)  
               CALL g_curr_diag.setCurrentRow("s_detail1",1)
               CALL g_curr_diag.setCurrentRow("s_detail2",1)
 
 
 
 
            END IF
 
 
 
 
         
         #應用 a46 樣板自動產生(Version:3)
         #新增相關文件
         ON ACTION related_document
            CALL abmm208_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document name="ui_dialog.dialog.related_document"
               
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL abmm208_set_pk_array()
            #add-point:ON ACTION agendum name="ui_dialog.dialog.agendum"
            
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL abmm208_set_pk_array()
            #add-point:ON ACTION followup name="ui_dialog.dialog.followup"
            
            #END add-point
            CALL cl_user_overview_follow('')
 
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG
 
      #(ver:79) ---add start---
      #add-point:ui_dialog段 after dialog name="ui_dialog.exit_dialog"
      
      #end add-point
      #(ver:79) --- add end ---
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前 name="ui_dialog.b_exit"
         
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
 
{</section>}
 
{<section id="abmm208.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION abmm208_browser_fill(ps_page_action)
   #add-point:browser_fill段define(客製用) name="browser_fill.define_customerization"
   
   #end add-point  
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="browser_fill.define"
   
   #end add-point    
   
   #add-point:Function前置處理 name="browser_fill.before_browser_fill"
   
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前 name="browser_fill.before_foreach"
   
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT DISTINCT bmla001,bmla002 ",
                      " FROM bmla_t ",
                      " ",
                      " LEFT JOIN bmlb_t ON bmlbent = bmlaent AND bmla001 = bmlb001 AND bmla002 = bmlb002 ", "  ",
                      #add-point:browser_fill段sql(bmlb_t1) name="browser_fill.cnt.join.}"
                      
                      #end add-point
 
                      " LEFT JOIN bmlc_t ON bmlcent = bmlaent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003", "  ",
                      #add-point:browser_fill段sql(bmlc_t1) name="browser_fill.cnt.join.bmlc_t1"
                      
                      #end add-point
 
 
                      " ", 
                      " ", 
 
                      " ",
 
 
                      " WHERE bmlaent = " ||g_enterprise|| " AND bmlbent = " ||g_enterprise|| " AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("bmla_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT DISTINCT bmla001,bmla002 ",
                      " FROM bmla_t ", 
                      "  ",
                      "  ",
                      " WHERE bmlaent = " ||g_enterprise|| " AND ",l_wc CLIPPED, cl_sql_add_filter("bmla_t")
   END IF
   
   #add-point:browser_fill,cnt wc name="browser_fill.cnt_sqlwc"
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT UNIQUE bmla001,bmla002 ",
                      " FROM bmla_t ",
                      " LEFT JOIN bmlb_t ON bmlbent = bmlaent AND bmla001 = bmlb001 AND bmla002 = bmlb002 ",
                      " LEFT JOIN bmlc_t ON bmlcent = bmlaent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003", 
                      " LEFT JOIN bmld_t ON bmldent = bmlaent AND bmlc001 = bmld001 AND bmlc002 = bmld002 AND bmlc003 = bmld003 AND bmlc004 = bmld004", 
                      " WHERE bmlaent = '" ||g_enterprise|| "' AND bmlbent = '" ||g_enterprise|| "' AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("bmla_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT UNIQUE bmla001,bmla002 ",
                      " FROM bmla_t ", 
                      " WHERE bmlaent = '" ||g_enterprise|| "' AND ",l_wc CLIPPED, cl_sql_add_filter("bmla_t")
   END IF
   #end add-point
   
   LET g_sql = " SELECT COUNT(1) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前 name="browser_fill.before_count"
   
   #end add-point
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE header_cnt_pre FROM g_sql
      EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
      FREE header_cnt_pre
   END IF
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code = 9035 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_bmla_m.* TO NULL
      CALL g_bmlb_d.clear()        
      CALL g_bmlb2_d.clear() 
 
      #add-point:browser_fill g_add_browse段額外處理 name="browser_fill.add_browse.other"
      CALL g_bmlb3_d.clear() 
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.bmla001,t0.bmla002 Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT '',t0.bmla001,t0.bmla002,t1.imaal003 ,t2.imaal004 ",
                  " FROM bmla_t t0",
                  "  ",
                  "  LEFT JOIN bmlb_t ON bmlbent = bmlaent AND bmla001 = bmlb001 AND bmla002 = bmlb002 ", "  ", 
                  #add-point:browser_fill段sql(bmlb_t1) name="browser_fill.join.bmlb_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN bmlc_t ON bmlcent = bmlaent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003", "  ", 
                  #add-point:browser_fill段sql(bmlc_t1) name="browser_fill.join.bmlc_t1"
                  
                  #end add-point
 
 
                  " ", 
 
                  " ",
 
 
                                 " LEFT JOIN imaal_t t1 ON t1.imaalent="||g_enterprise||" AND t1.imaal001=t0.bmla001 AND t1.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent="||g_enterprise||" AND t2.imaal001=t0.bmla001 AND t2.imaal002='"||g_dlang||"' ",
 
                  " WHERE t0.bmlaent = " ||g_enterprise|| " AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("bmla_t")
   ELSE
      #單身無輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT '',t0.bmla001,t0.bmla002,t1.imaal003 ,t2.imaal004 ",
                  " FROM bmla_t t0",
                  "  ",
                                 " LEFT JOIN imaal_t t1 ON t1.imaalent="||g_enterprise||" AND t1.imaal001=t0.bmla001 AND t1.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent="||g_enterprise||" AND t2.imaal001=t0.bmla001 AND t2.imaal002='"||g_dlang||"' ",
 
                  " WHERE t0.bmlaent = " ||g_enterprise|| " AND ",l_wc, cl_sql_add_filter("bmla_t")
   END IF
   #add-point:browser_fill,sql wc name="browser_fill.fill_sqlwc"
   LET g_sql = " SELECT DISTINCT '',t0.bmla001,t0.bmla002,t1.imaal003 ,t2.imaal004 ",
               " FROM bmla_t t0",
               "  LEFT JOIN bmlb_t ON bmlbent = bmlaent AND bmla001 = bmlb001 AND bmla002 = bmlb002 ",
               "  LEFT JOIN bmlc_t ON bmlcent = bmlaent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003",
               "  LEFT JOIN bmld_t ON bmldent = bmlaent AND bmlc001 = bmld001 AND bmlc002 = bmld002 AND bmlc003 = bmld003 AND bmlc004 = bmld004",
               " LEFT JOIN imaal_t t1 ON t1.imaalent='"||g_enterprise||"' AND t1.imaal001=t0.bmla001 AND t1.imaal002='"||g_lang||"' ",
               " LEFT JOIN imaal_t t2 ON t2.imaalent='"||g_enterprise||"' AND t2.imaal001=t0.bmla001 AND t2.imaal002='"||g_lang||"' ",
               " WHERE t0.bmlaent = '" ||g_enterprise|| "' AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("bmla_t")
   #end add-point
   LET g_sql = g_sql, " ORDER BY bmla001,bmla002 ",g_order
 
   #add-point:browser_fill,before_prepare name="browser_fill.before_prepare"
   
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"bmla_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE browse_pre FROM g_sql
      DECLARE browse_cur CURSOR FOR browse_pre
      
      #add-point:browser_fill段open cursor name="browser_fill.open"
      
      #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_bmla001,g_browser[g_cnt].b_bmla002, 
          g_browser[g_cnt].b_bmla001_desc,g_browser[g_cnt].b_bmla001_desc_desc
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference name="browser_fill.reference"
         
         #end add-point
      
         #遮罩相關處理
         CALL abmm208_browser_mask()
      
         
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_browse THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      FREE browse_pre
   END IF
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_bmla001) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
 
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前 name="browser_fill.after"
   
   #end add-point   
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION abmm208_ui_headershow()
   #add-point:ui_headershow段define(客製用) name="ui_headershow.define_customerization"
   
   #end add-point  
   #add-point:ui_headershow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_headershow.define"
   
   #end add-point      
   
   #add-point:Function前置處理  name="ui_headershow.pre_function"
   
   #end add-point
   
   LET g_bmla_m.bmla001 = g_browser[g_current_idx].b_bmla001   
   LET g_bmla_m.bmla002 = g_browser[g_current_idx].b_bmla002   
 
   EXECUTE abmm208_master_referesh USING g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmla_m.bmla001,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
       g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt,g_bmla_m.bmla001_desc, 
       g_bmla_m.bmla001_desc_desc,g_bmla_m.bmlaownid_desc,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid_desc, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlamodid_desc
   
   CALL abmm208_bmla_t_mask()
   CALL abmm208_show()
      
END FUNCTION
 
{</section>}
 
{<section id="abmm208.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION abmm208_ui_detailshow()
   #add-point:ui_detailshow段define(客製用) name="ui_detailshow.define_customerization"
   
   #end add-point    
   #add-point:ui_detailshow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_detailshow.define"
   
   #end add-point    
 
   #add-point:Function前置處理 name="ui_detailshow.before"
   
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
      CALL g_curr_diag.setCurrentRow("s_detail2",g_detail_idx)
 
   END IF
   
   #add-point:ui_detailshow段after name="ui_detailshow.after"
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail3",g_detail_idx)
 
   END IF
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION abmm208_ui_browser_refresh()
   #add-point:ui_browser_refresh段define(客製用) name="ui_browser_refresh.define_customerization"
   
   #end add-point    
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_browser_refresh.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="ui_browser_refresh.pre_function"
   
   #end add-point
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_bmla001 = g_bmla_m.bmla001 
         AND g_browser[l_i].b_bmla002 = g_bmla_m.bmla002 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after name="ui_browser_refresh.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION abmm208_construct()
   #add-point:cs段define(客製用) name="cs.define_customerization"
   
   #end add-point    
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   DEFINE la_wc       DYNAMIC ARRAY OF RECORD
          tableid     STRING,
          wc          STRING
          END RECORD
   DEFINE li_idx      LIKE type_t.num10
   #add-point:cs段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="cs.define"
 
   #end add-point    
   
   #add-point:Function前置處理  name="cs.pre_function"
   
   #end add-point
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_bmla_m.* TO NULL
   CALL g_bmlb_d.clear()        
   CALL g_bmlb2_d.clear() 
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前 name="cs.before_construct"
   CALL g_bmlb3_d.clear() 
   INITIALIZE g_wc2_table2 TO NULL
   INITIALIZE g_wc2_table3 TO NULL
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON bmla001,bmla002,bmla003,bmla004,bmla005,bmlaownid,bmlaowndp,bmlacrtid, 
          bmlacrtdp,bmlacrtdt,bmlamodid,bmlamoddt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.head.before_construct"
            
            #end add-point 
            
         #公用欄位開窗相關處理
         #應用 a11 樣板自動產生(Version:3)
         #共用欄位查詢處理  
         ##----<<bmlacrtdt>>----
         AFTER FIELD bmlacrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
 
         #----<<bmlamoddt>>----
         AFTER FIELD bmlamoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<bmlacnfdt>>----
         
         #----<<bmlapstdt>>----
 
 
 
            
         #一般欄位開窗相關處理    
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla001
            #add-point:BEFORE FIELD bmla001 name="construct.b.bmla001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla001
            
            #add-point:AFTER FIELD bmla001 name="construct.a.bmla001"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmla001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla001
            #add-point:ON ACTION controlp INFIELD bmla001 name="construct.c.bmla001"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = " bmaasite ='ALL' and bmaa001 in(select imaa001 from imaa_t ",
                                   "                                 where imaaent = ",g_enterprise,
                                   "                                   and imaa004 = 'T') "
            CALL q_bmaa001_3()                               #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmla001   #顯示到畫面上
            NEXT FIELD bmla001                          #返回原欄位
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla002
            #add-point:BEFORE FIELD bmla002 name="construct.b.bmla002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla002
            
            #add-point:AFTER FIELD bmla002 name="construct.a.bmla002"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmla002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla002
            #add-point:ON ACTION controlp INFIELD bmla002 name="construct.c.bmla002"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            #LET g_qryparam.where = " bmaasite ='ALL' "
            #CALL q_bmaa002_2()                               #呼叫開窗
            CALL q_bmla002()                               #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmla002   #顯示到畫面上
            NEXT FIELD bmla002                          #返回原欄位
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla003
            #add-point:BEFORE FIELD bmla003 name="construct.b.bmla003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla003
            
            #add-point:AFTER FIELD bmla003 name="construct.a.bmla003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmla003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla003
            #add-point:ON ACTION controlp INFIELD bmla003 name="construct.c.bmla003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla004
            #add-point:BEFORE FIELD bmla004 name="construct.b.bmla004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla004
            
            #add-point:AFTER FIELD bmla004 name="construct.a.bmla004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmla004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla004
            #add-point:ON ACTION controlp INFIELD bmla004 name="construct.c.bmla004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla005
            #add-point:BEFORE FIELD bmla005 name="construct.b.bmla005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla005
            
            #add-point:AFTER FIELD bmla005 name="construct.a.bmla005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmla005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla005
            #add-point:ON ACTION controlp INFIELD bmla005 name="construct.c.bmla005"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmlaownid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlaownid
            #add-point:ON ACTION controlp INFIELD bmlaownid name="construct.c.bmlaownid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlaownid  #顯示到畫面上
            NEXT FIELD bmlaownid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlaownid
            #add-point:BEFORE FIELD bmlaownid name="construct.b.bmlaownid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlaownid
            
            #add-point:AFTER FIELD bmlaownid name="construct.a.bmlaownid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmlaowndp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlaowndp
            #add-point:ON ACTION controlp INFIELD bmlaowndp name="construct.c.bmlaowndp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlaowndp  #顯示到畫面上
            NEXT FIELD bmlaowndp                     #返回原欄位
    


            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooea001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlaowndp  #顯示到畫面上
            NEXT FIELD bmlaowndp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlaowndp
            #add-point:BEFORE FIELD bmlaowndp name="construct.b.bmlaowndp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlaowndp
            
            #add-point:AFTER FIELD bmlaowndp name="construct.a.bmlaowndp"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmlacrtid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlacrtid
            #add-point:ON ACTION controlp INFIELD bmlacrtid name="construct.c.bmlacrtid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlacrtid  #顯示到畫面上
            NEXT FIELD bmlacrtid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlacrtid
            #add-point:BEFORE FIELD bmlacrtid name="construct.b.bmlacrtid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlacrtid
            
            #add-point:AFTER FIELD bmlacrtid name="construct.a.bmlacrtid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmlacrtdp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlacrtdp
            #add-point:ON ACTION controlp INFIELD bmlacrtdp name="construct.c.bmlacrtdp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlacrtdp  #顯示到畫面上
            NEXT FIELD bmlacrtdp                     #返回原欄位
    


            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooea001_1()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlacrtdp  #顯示到畫面上
            NEXT FIELD bmlacrtdp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlacrtdp
            #add-point:BEFORE FIELD bmlacrtdp name="construct.b.bmlacrtdp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlacrtdp
            
            #add-point:AFTER FIELD bmlacrtdp name="construct.a.bmlacrtdp"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlacrtdt
            #add-point:BEFORE FIELD bmlacrtdt name="construct.b.bmlacrtdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmlamodid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlamodid
            #add-point:ON ACTION controlp INFIELD bmlamodid name="construct.c.bmlamodid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlamodid  #顯示到畫面上
            NEXT FIELD bmlamodid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlamodid
            #add-point:BEFORE FIELD bmlamodid name="construct.b.bmlamodid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlamodid
            
            #add-point:AFTER FIELD bmlamodid name="construct.a.bmlamodid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlamoddt
            #add-point:BEFORE FIELD bmlamoddt name="construct.b.bmlamoddt"
            
            #END add-point
 
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON bmlb004,bmlb003,bmlb005,bmlb006,bmlb007,bmlb008
           FROM s_detail1[1].bmlb004,s_detail1[1].bmlb003,s_detail1[1].bmlb005,s_detail1[1].bmlb006, 
               s_detail1[1].bmlb007,s_detail1[1].bmlb008
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb004
            #add-point:BEFORE FIELD bmlb004 name="construct.b.page1.bmlb004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb004
            
            #add-point:AFTER FIELD bmlb004 name="construct.a.page1.bmlb004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb004
            #add-point:ON ACTION controlp INFIELD bmlb004 name="construct.c.page1.bmlb004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb003
            #add-point:BEFORE FIELD bmlb003 name="construct.b.page1.bmlb003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb003
            
            #add-point:AFTER FIELD bmlb003 name="construct.a.page1.bmlb003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb003
            #add-point:ON ACTION controlp INFIELD bmlb003 name="construct.c.page1.bmlb003"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '1112'
            CALL q_oocq002_5()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlb003  #顯示到畫面上
            NEXT FIELD bmlb003                    #返回原欄位
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb005
            #add-point:BEFORE FIELD bmlb005 name="construct.b.page1.bmlb005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb005
            
            #add-point:AFTER FIELD bmlb005 name="construct.a.page1.bmlb005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb005
            #add-point:ON ACTION controlp INFIELD bmlb005 name="construct.c.page1.bmlb005"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb006
            #add-point:BEFORE FIELD bmlb006 name="construct.b.page1.bmlb006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb006
            
            #add-point:AFTER FIELD bmlb006 name="construct.a.page1.bmlb006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb006
            #add-point:ON ACTION controlp INFIELD bmlb006 name="construct.c.page1.bmlb006"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb007
            #add-point:BEFORE FIELD bmlb007 name="construct.b.page1.bmlb007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb007
            
            #add-point:AFTER FIELD bmlb007 name="construct.a.page1.bmlb007"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb007
            #add-point:ON ACTION controlp INFIELD bmlb007 name="construct.c.page1.bmlb007"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb008
            #add-point:BEFORE FIELD bmlb008 name="construct.b.page1.bmlb008"
 
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb008
            
            #add-point:AFTER FIELD bmlb008 name="construct.a.page1.bmlb008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmlb008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb008
            #add-point:ON ACTION controlp INFIELD bmlb008 name="construct.c.page1.bmlb008"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '273'
            CALL q_imeb004_4()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlb008  #顯示到畫面上
            NEXT FIELD bmlb008                    #返回原欄位
            #END add-point
 
 
   
       
      END CONSTRUCT
      
 
      
      CONSTRUCT g_wc2_table2 ON bmlc004,bmlc005,bmlc006,bmlc007,bmlc008
           FROM s_detail2[1].bmlc004,s_detail2[1].bmlc005,s_detail2[1].bmlc006,s_detail2[1].bmlc007, 
               s_detail2[1].bmlc008
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body2.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc004
            #add-point:BEFORE FIELD bmlc004 name="construct.b.page2.bmlc004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc004
            
            #add-point:AFTER FIELD bmlc004 name="construct.a.page2.bmlc004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmlc004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc004
            #add-point:ON ACTION controlp INFIELD bmlc004 name="construct.c.page2.bmlc004"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_imaa001_10()                          #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlc004  #顯示到畫面上
            NEXT FIELD bmlc004                    #返回原欄位
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc005
            #add-point:BEFORE FIELD bmlc005 name="construct.b.page2.bmlc005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc005
            
            #add-point:AFTER FIELD bmlc005 name="construct.a.page2.bmlc005"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmlc005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc005
            #add-point:ON ACTION controlp INFIELD bmlc005 name="construct.c.page2.bmlc005"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc006
            #add-point:BEFORE FIELD bmlc006 name="construct.b.page2.bmlc006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc006
            
            #add-point:AFTER FIELD bmlc006 name="construct.a.page2.bmlc006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmlc006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc006
            #add-point:ON ACTION controlp INFIELD bmlc006 name="construct.c.page2.bmlc006"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc007
            #add-point:BEFORE FIELD bmlc007 name="construct.b.page2.bmlc007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc007
            
            #add-point:AFTER FIELD bmlc007 name="construct.a.page2.bmlc007"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmlc007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc007
            #add-point:ON ACTION controlp INFIELD bmlc007 name="construct.c.page2.bmlc007"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc008
            #add-point:BEFORE FIELD bmlc008 name="construct.b.page2.bmlc008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc008
            
            #add-point:AFTER FIELD bmlc008 name="construct.a.page2.bmlc008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmlc008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc008
            #add-point:ON ACTION controlp INFIELD bmlc008 name="construct.c.page2.bmlc008"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = " (bmlc008 is not null or bmlc008!=' ') "
            CALL q_bmlc008()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmlc008  #顯示到畫面上
            NEXT FIELD bmlc008                    #返回原欄位
            #END add-point
 
 
   
       
      END CONSTRUCT
 
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令) name="cs.add_cs"
       CONSTRUCT g_wc2_table3 ON bmld005,bmld006
           FROM s_detail3[1].bmld005,s_detail3[1].bmld006
                      
         BEFORE CONSTRUCT 
         
         ON ACTION controlp INFIELD bmld005
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = '1112'
            CALL q_oocq002_5()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmld005  #顯示到畫面上
            NEXT FIELD bmld005                    #返回原欄位 
            
         ON ACTION controlp INFIELD bmld006  
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_imaa001_10()                          #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmld006  #顯示到畫面上
            NEXT FIELD bmld006                    #返回原欄位 
            
      END CONSTRUCT
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="cs.b_dialog"
         
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
         IF NOT cl_null(ls_wc) THEN
            CALL util.JSON.parse(ls_wc, la_wc)
            INITIALIZE g_wc, g_wc2, g_wc2_table1, g_wc2_extend TO NULL
 
            FOR li_idx = 1 TO la_wc.getLength()
               CASE
                  WHEN la_wc[li_idx].tableid = "bmla_t" 
                     LET g_wc = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "bmlb_t" 
                     LET g_wc2_table1 = la_wc[li_idx].wc
 
               END CASE
            END FOR
         END IF
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
 
 
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
   END IF
 
 
   
   #add-point:cs段結束前 name="cs.after_construct"
   IF g_wc2_table3 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
   END IF
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.filter" >}
#應用 a50 樣板自動產生(Version:8)
#+ filter過濾功能
PRIVATE FUNCTION abmm208_filter()
   #add-point:filter段define name="filter.define_customerization"
   
   #end add-point   
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="filter.pre_function"
   
   #end add-point
   
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter.trim()
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter_t, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON bmla001,bmla002
                          FROM s_browse[1].b_bmla001,s_browse[1].b_bmla002
 
         BEFORE CONSTRUCT
               DISPLAY abmm208_filter_parser('bmla001') TO s_browse[1].b_bmla001
            DISPLAY abmm208_filter_parser('bmla002') TO s_browse[1].b_bmla002
      
         #add-point:filter段cs_ctrl name="filter.cs_ctrl"
 
         #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs name="filter.add_cs"
      
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog name="filter.b_dialog"
         
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL abmm208_filter_show('bmla001')
   CALL abmm208_filter_show('bmla002')
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION abmm208_filter_parser(ps_field)
   #add-point:filter段define name="filter_parser.define_customerization"
   
   #end add-point    
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num10
   DEFINE li_tmp2    LIKE type_t.num10
   DEFINE ls_var     STRING
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter_parser.define"
   
   #end add-point    
   
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION abmm208_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
 
   LET ls_name = "formonly.b_", ps_field
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
 
   #顯示資料組合
   LET ls_condition = abmm208_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
 
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION abmm208_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   
   #end add-point   
   DEFINE ls_wc STRING
   #add-point:query段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="query.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_bmlb_d.clear()
   CALL g_bmlb2_d.clear()
 
   
   #add-point:query段other name="query.other"
   CALL g_bmlb3_d.clear()
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL abmm208_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      CALL abmm208_browser_fill("")
      CALL abmm208_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_detail_idx_list[1] = 1
   LET g_detail_idx_list[2] = 1
 
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
      CALL abmm208_filter_show('bmla001')
   CALL abmm208_filter_show('bmla002')
   CALL abmm208_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "-100" 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   ELSE
      CALL abmm208_fetch("F") 
      #顯示單身筆數
      CALL abmm208_idx_chk()
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION abmm208_fetch(p_flag)
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   
   #end add-point    
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="fetch.pre_function"
   
   #end add-point
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   #清空第二階單身
   CALL g_bmlb2_d.clear()
 
   
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #避免超出browser資料筆數上限
   IF g_current_idx > g_browser.getLength() THEN
      LET g_browser_idx = g_browser.getLength()
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_bmla_m.bmla001 = g_browser[g_current_idx].b_bmla001
   LET g_bmla_m.bmla002 = g_browser[g_current_idx].b_bmla002
 
   
   #重讀DB,因TEMP有不被更新特性
   EXECUTE abmm208_master_referesh USING g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmla_m.bmla001,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
       g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt,g_bmla_m.bmla001_desc, 
       g_bmla_m.bmla001_desc_desc,g_bmla_m.bmlaownid_desc,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid_desc, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlamodid_desc
   
   #遮罩相關處理
   LET g_bmla_m_mask_o.* =  g_bmla_m.*
   CALL abmm208_bmla_t_mask()
   LET g_bmla_m_mask_n.* =  g_bmla_m.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmm208_set_act_visible()   
   CALL abmm208_set_act_no_visible()
   
   #add-point:fetch段action控制 name="fetch.action_control"
   
   #end add-point  
   
   
   
   #add-point:fetch結束前 name="fetch.after"
   
   #end add-point
   
   #保存單頭舊值
   LET g_bmla_m_t.* = g_bmla_m.*
   LET g_bmla_m_o.* = g_bmla_m.*
   
   LET g_data_owner = g_bmla_m.bmlaownid      
   LET g_data_dept  = g_bmla_m.bmlaowndp
   
   #重新顯示   
   CALL abmm208_show()
 
   
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.insert" >}
#+ 資料新增
PRIVATE FUNCTION abmm208_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   
   #end add-point    
   #add-point:insert段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   CALL g_bmlb3_d.clear()
   #end add-point    
   
   #add-point:Function前置處理  name="insert.pre_function"
   
   #end add-point
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_bmlb_d.clear()   
   CALL g_bmlb2_d.clear()  
 
 
   INITIALIZE g_bmla_m.* TO NULL             #DEFAULT 設定
   
   LET g_bmla001_t = NULL
   LET g_bmla002_t = NULL
 
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before name="insert.before"
   
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_bmla_m.bmlaownid = g_user
      LET g_bmla_m.bmlaowndp = g_dept
      LET g_bmla_m.bmlacrtid = g_user
      LET g_bmla_m.bmlacrtdp = g_dept 
      LET g_bmla_m.bmlacrtdt = cl_get_current()
      LET g_bmla_m.bmlamodid = g_user
      LET g_bmla_m.bmlamoddt = cl_get_current()
 
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
      
  
      #add-point:單頭預設值 name="insert.default"
      
      #end add-point 
      
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET g_bmla_m_t.* = g_bmla_m.*
      LET g_bmla_m_o.* = g_bmla_m.*
      
      #顯示狀態(stus)圖片
      
    
      CALL abmm208_input("a")
      
      #add-point:單頭輸入後 name="insert.after_insert"
      
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
      END IF
      
      IF NOT g_master_insert THEN
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_bmla_m.* TO NULL
         INITIALIZE g_bmlb_d TO NULL
         INITIALIZE g_bmlb2_d TO NULL
 
         #add-point:取消新增後 name="insert.cancel"
         INITIALIZE g_bmlb3_d TO NULL
         #end add-point 
         CALL abmm208_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_bmlb_d.clear()
      #CALL g_bmlb2_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmm208_set_act_visible()   
   CALL abmm208_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_bmla001_t = g_bmla_m.bmla001
   LET g_bmla002_t = g_bmla_m.bmla002
 
   
   #組合新增資料的條件
   LET g_add_browse = " bmlaent = " ||g_enterprise|| " AND",
                      " bmla001 = '", g_bmla_m.bmla001, "' "
                      ," AND bmla002 = '", g_bmla_m.bmla002, "' "
 
                      
   #add-point:組合新增資料的條件後 name="insert.after.add_browse"
   
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL abmm208_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE abmm208_cl
   
   CALL abmm208_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   EXECUTE abmm208_master_referesh USING g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmla_m.bmla001,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
       g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt,g_bmla_m.bmla001_desc, 
       g_bmla_m.bmla001_desc_desc,g_bmla_m.bmlaownid_desc,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid_desc, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlamodid_desc
   
   
   #遮罩相關處理
   LET g_bmla_m_mask_o.* =  g_bmla_m.*
   CALL abmm208_bmla_t_mask()
   LET g_bmla_m_mask_n.* =  g_bmla_m.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME g_bmla_m.bmla001,g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaownid_desc, 
       g_bmla_m.bmlaowndp,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid,g_bmla_m.bmlacrtid_desc,g_bmla_m.bmlacrtdp, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamodid_desc,g_bmla_m.bmlamoddt 
 
   
   #add-point:新增結束後 name="insert.after"
   
   #end add-point 
   
   LET g_data_owner = g_bmla_m.bmlaownid      
   LET g_data_dept  = g_bmla_m.bmlaowndp
   
   #功能已完成,通報訊息中心
   CALL abmm208_msgcentre_notify('insert')
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.modify" >}
#+ 資料修改
PRIVATE FUNCTION abmm208_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   
   #end add-point    
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
 
   DEFINE l_wc2_table2   STRING
 
 
   #add-point:modify段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   DEFINE l_wc2_table3   STRING

   #end add-point    
   
   #add-point:Function前置處理  name="modify.pre_function"
   
   #end add-point
   
   #保存單頭舊值
   LET g_bmla_m_t.* = g_bmla_m.*
   LET g_bmla_m_o.* = g_bmla_m.*
   
   IF g_bmla_m.bmla001 IS NULL
   OR g_bmla_m.bmla002 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_bmla001_t = g_bmla_m.bmla001
   LET g_bmla002_t = g_bmla_m.bmla002
 
   CALL s_transaction_begin()
   
   OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN abmm208_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE abmm208_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE abmm208_master_referesh USING g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmla_m.bmla001,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
       g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt,g_bmla_m.bmla001_desc, 
       g_bmla_m.bmla001_desc_desc,g_bmla_m.bmlaownid_desc,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid_desc, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlamodid_desc
   
   #檢查是否允許此動作
   IF NOT abmm208_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_bmla_m_mask_o.* =  g_bmla_m.*
   CALL abmm208_bmla_t_mask()
   LET g_bmla_m_mask_n.* =  g_bmla_m.*
   
   
   
   #add-point:modify段show之前 name="modify.before_show"
   
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
 
   #LET l_wc2_table2 = g_wc2_table2
   #LET l_wc2_table2 = " 1=1"
 
 
   
   CALL abmm208_show()
   #add-point:modify段show之後 name="modify.after_show"
   
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
 
   #LET  g_wc2_table2 = l_wc2_table2 
 
 
    
   WHILE TRUE
      LET g_bmla001_t = g_bmla_m.bmla001
      LET g_bmla002_t = g_bmla_m.bmla002
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_bmla_m.bmlamodid = g_user 
LET g_bmla_m.bmlamoddt = cl_get_current()
LET g_bmla_m.bmlamodid_desc = cl_get_username(g_bmla_m.bmlamodid)
      
      #add-point:modify段修改前 name="modify.before_input"
      
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      LET g_master_commit = "N"
      CALL abmm208_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後 name="modify.after_input"
      
      #end add-point
      
      IF g_update OR NOT INT_FLAG THEN
         #若有modid跟moddt則進行update
         UPDATE bmla_t SET (bmlamodid,bmlamoddt) = (g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt)
          WHERE bmlaent = g_enterprise AND bmla001 = g_bmla001_t
            AND bmla002 = g_bmla002_t
 
      END IF
    
      IF INT_FLAG THEN
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         #若單頭無commit則還原
         IF g_master_commit = "N" THEN
            LET g_bmla_m.* = g_bmla_m_t.*
            CALL abmm208_show()
         END IF
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF g_bmla_m.bmla001 != g_bmla_m_t.bmla001
      OR g_bmla_m.bmla002 != g_bmla_m_t.bmla002
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前 name="modify.body.b_fk_update"
         
         #end add-point
         
         #更新單身key值
         UPDATE bmlb_t SET bmlb001 = g_bmla_m.bmla001
                                       ,bmlb002 = g_bmla_m.bmla002
 
          WHERE bmlbent = g_enterprise AND bmlb001 = g_bmla_m_t.bmla001
            AND bmlb002 = g_bmla_m_t.bmla002
 
            
         #add-point:單身fk修改中 name="modify.body.m_fk_update"
         
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "bmlb_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後 name="modify.body.a_fk_update"
         
         #end add-point
         
 
         
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update2"
         
         #end add-point
         UPDATE bmlc_t
            SET bmlc001 = g_bmla_m.bmla001
               ,bmlc002 = g_bmla_m.bmla002
 
          WHERE bmlcent = g_enterprise AND
                bmlc001 = g_bmla001_t
            AND bmlc002 = g_bmla002_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update2"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmlc_t" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update2"
         UPDATE bmld_t
            SET bmld001 = g_bmla_m.bmla001
               ,bmld002 = g_bmla_m.bmla002
 
          WHERE bmldent = g_enterprise AND
                bmld001 = g_bmla001_t
            AND bmld002 = g_bmla002_t
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmld_t" 
               LET g_errparam.code   = "std-00009" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
            WHEN SQLCA.sqlcode #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmld_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               CALL s_transaction_end('N','0')
               CONTINUE WHILE
         END CASE
         #end add-point
 
 
         
         #UPDATE 多語言table key值
         
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmm208_set_act_visible()   
   CALL abmm208_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " bmlaent = " ||g_enterprise|| " AND",
                      " bmla001 = '", g_bmla_m.bmla001, "' "
                      ," AND bmla002 = '", g_bmla_m.bmla002, "' "
 
   #填到對應位置
   CALL abmm208_browser_fill("")
 
   CLOSE abmm208_cl
   
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL abmm208_msgcentre_notify('modify')
 
END FUNCTION 
 
{</section>}
 
{<section id="abmm208.input" >}
#+ 資料輸入
PRIVATE FUNCTION abmm208_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   
   #end add-point  
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_ac_t                LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   DEFINE l_success              LIKE type_t.num5
   #DEFINE l_where                STRING
   DEFINE l_imaa005              LIKE imaa_t.imaa005
   DEFINE l_imeb005              LIKE imeb_t.imeb005
   
   #DEFINE l_itemno   LIKE imaa_t.imaa001 #zll 临时测试用
   #DEFINE l_feature  LIKE inag_t.inag002 #zll 临时测试用
   #end add-point  
   
   #add-point:Function前置處理  name="input.pre_function"
   
   #end add-point
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_bmla_m.bmla001,g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaownid_desc, 
       g_bmla_m.bmlaowndp,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid,g_bmla_m.bmlacrtid_desc,g_bmla_m.bmlacrtdp, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamodid_desc,g_bmla_m.bmlamoddt 
 
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql name="input.define_sql"
   
   #end add-point 
   LET g_forupd_sql = "SELECT bmlb004,bmlb003,bmlb005,bmlb006,bmlb007,bmlb008 FROM bmlb_t WHERE bmlbent=?  
       AND bmlb001=? AND bmlb002=? AND bmlb003=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmm208_bcl CURSOR FROM g_forupd_sql
   
 
   
   #add-point:input段define_sql name="input.define_sql2"
   
   #end add-point 
   LET g_forupd_sql = "SELECT bmlc004,bmlc005,bmlc006,bmlc007,bmlc008 FROM bmlc_t WHERE bmlcent=? AND  
       bmlc001=? AND bmlc002=? AND bmlc003=? AND bmlc004=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql2"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmm208_bcl2 CURSOR FROM g_forupd_sql
 
 
 
   #add-point:input段define_sql name="input.other_sql"
   LET g_forupd_sql = "SELECT bmld005,bmld006 FROM bmld_t WHERE bmldent=? AND bmld001=? AND bmld002=?  
       AND bmld003=? AND bmld004=? AND bmld005=? AND bmld006=? FOR UPDATE"
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmm208_bcl3 CURSOR FROM g_forupd_sql
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL abmm208_set_entry(p_cmd)
   #add-point:set_entry後 name="input.after_set_entry"
   
   #end add-point
   CALL abmm208_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005 
 
   
   LET lb_reproduce = FALSE
   LET l_ac_t = 1
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前 name="input.before_input"
   
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
{</section>}
 
{<section id="abmm208.input.head" >}
      #單頭段
      INPUT BY NAME g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005  
 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION gen_b
            LET g_action_choice="gen_b"
            IF cl_auth_chk_act("gen_b") THEN
               
               #add-point:ON ACTION gen_b name="input.master_input.gen_b"
               CALL abmm208_gen_b('2') RETURNING l_success
               CALL abmm208_b_fill() #單身填充
               CALL abmm208_b_fill2('0') #單身填充
               
               #CALL s_abmm208_delete_table() RETURNING l_success #zll
               #CALL s_abmm208(g_bmla_m.bmla001,g_bmla_m.bmla002) RETURNING l_success,l_itemno,l_feature  #zll临时测试用
               #END add-point
            END IF
 
 
 
 
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmm208_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmm208_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL abmm208_set_entry(p_cmd)
            #add-point:資料輸入前 name="input.m.before_input"
            
            #end add-point
            CALL abmm208_set_no_entry(p_cmd)
    
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla001
            
            #add-point:AFTER FIELD bmla001 name="input.a.bmla001"
            #此段落由子樣板a05產生
            #確認資料無重複
            IF  NOT cl_null(g_bmla_m.bmla001) AND NOT cl_null(g_bmla_m.bmla002) THEN 
               #IF p_cmd = 'a' OR ( p_cmd = 'u' AND (g_bmla_m.bmla001 != g_bmla001_t  OR g_bmla_m.bmla002 != g_bmla002_t )) THEN  #160822-00040#1 mark
               IF g_bmla_m.bmla001 != g_bmla_m_o.bmla001  OR g_bmla_m.bmla002 != g_bmla_m_o.bmla002 THEN     #160822-00040#1
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmla_t WHERE "||"bmlaent = '" ||g_enterprise|| "' AND "||"bmla001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmla002 = '"||g_bmla_m.bmla002 ||"'",'std-00004',0) THEN
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            CALL abmm208_chk_column_a('bmla001') RETURNING l_success
            IF NOT l_success THEN
               #160822-00040#1---(S)
               LET g_bmla_m.bmla001 = g_bmla_m_o.bmla001    
               LET g_bmla_m.bmla002 = g_bmla_m_o.bmla002   
               CALL s_desc_get_item_desc(g_bmla_m.bmla001) RETURNING g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc     
               DISPLAY BY NAME g_bmla_m.bmla001_desc        
               DISPLAY BY NAME g_bmla_m.bmla001_desc_desc   
               #160822-00040#1---(E)
               NEXT FIELD CURRENT
            END IF

            #INITIALIZE g_ref_fields TO NULL
            #LET g_ref_fields[1] = g_bmla_m.bmla001
            #CALL ap_ref_array2(g_ref_fields,"SELECT imaal003 FROM imaal_t WHERE imaalent='"||g_enterprise||"' AND imaal001=? AND imaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            #LET g_bmla_m.bmla001_desc = '', g_rtn_fields[1] , ''
            #DISPLAY BY NAME g_bmla_m.bmla001_desc
            CALL s_desc_get_item_desc(g_bmla_m.bmla001) RETURNING g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc
            DISPLAY BY NAME g_bmla_m.bmla001_desc
            DISPLAY BY NAME g_bmla_m.bmla001_desc_desc
            LET g_bmla_m_o.* = g_bmla_m.*      #160822-00040#1
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla001
            #add-point:BEFORE FIELD bmla001 name="input.b.bmla001"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmla001
            #add-point:ON CHANGE bmla001 name="input.g.bmla001"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla002
            #add-point:BEFORE FIELD bmla002 name="input.b.bmla002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla002
            
            #add-point:AFTER FIELD bmla002 name="input.a.bmla002"
            #此段落由子樣板a05產生
            #確認資料無重複
            IF  NOT cl_null(g_bmla_m.bmla001) AND NOT cl_null(g_bmla_m.bmla002) THEN 
               #IF p_cmd = 'a' OR ( p_cmd = 'u' AND (g_bmla_m.bmla001 != g_bmla001_t  OR g_bmla_m.bmla002 != g_bmla002_t )) THEN    #160822-00040#1 mark
               IF g_bmla_m.bmla001 != g_bmla_m_o.bmla001  OR g_bmla_m.bmla002 != g_bmla_m_o.bmla002 THEN     #160822-00040#1   
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmla_t WHERE "||"bmlaent = '" ||g_enterprise|| "' AND "||"bmla001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmla002 = '"||g_bmla_m.bmla002 ||"'",'std-00004',0) THEN 
                     LET g_bmla_m.bmla002 = g_bmla_m_o.bmla002   #160822-00040#1
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            CALL abmm208_chk_column_a('bmla002') RETURNING l_success
            IF NOT l_success THEN
               LET g_bmla_m.bmla002 = g_bmla_m_o.bmla002   #160822-00040#1
               NEXT FIELD CURRENT
            END IF
            LET g_bmla_m_o.* = g_bmla_m.*     #160822-00040#1



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmla002
            #add-point:ON CHANGE bmla002 name="input.g.bmla002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla003
            #add-point:BEFORE FIELD bmla003 name="input.b.bmla003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla003
            
            #add-point:AFTER FIELD bmla003 name="input.a.bmla003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmla003
            #add-point:ON CHANGE bmla003 name="input.g.bmla003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla004
            #add-point:BEFORE FIELD bmla004 name="input.b.bmla004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla004
            
            #add-point:AFTER FIELD bmla004 name="input.a.bmla004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmla004
            #add-point:ON CHANGE bmla004 name="input.g.bmla004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmla005
            #add-point:BEFORE FIELD bmla005 name="input.b.bmla005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmla005
            
            #add-point:AFTER FIELD bmla005 name="input.a.bmla005"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmla005
            #add-point:ON CHANGE bmla005 name="input.g.bmla005"
            
            #END add-point 
 
 
 #欄位檢查
                  #Ctrlp:input.c.bmla001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla001
            #add-point:ON ACTION controlp INFIELD bmla001 name="input.c.bmla001"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmla_m.bmla001             #給予default值
            LET g_qryparam.where = " bmaasite ='ALL' and bmaa001 in(select imaa001 from imaa_t ",
                                   "                                 where imaaent = ",g_enterprise,
                                   "                                   and imaa004 = 'T') "
            CALL q_bmaa001_3()                               #呼叫開窗
            LET g_bmla_m.bmla001 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmla_m.bmla001 TO bmla001              #顯示到畫面上
            CALL s_desc_get_item_desc(g_bmla_m.bmla001) RETURNING g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc
            DISPLAY BY NAME g_bmla_m.bmla001_desc
            DISPLAY BY NAME g_bmla_m.bmla001_desc_desc
            NEXT FIELD bmla001                          #返回原欄位
            #END add-point
 
 
         #Ctrlp:input.c.bmla002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla002
            #add-point:ON ACTION controlp INFIELD bmla002 name="input.c.bmla002"
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmla_m.bmla002             #給予default值
            LET g_qryparam.arg1 = g_bmla_m.bmla001             #給予default值
            LET g_qryparam.where = " bmaasite ='ALL' "
            CALL q_bmaa002_2()                               #呼叫開窗
            LET g_bmla_m.bmla002 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmla_m.bmla002 TO bmla002              #顯示到畫面上
            NEXT FIELD bmla002                          #返回原欄位
            #END add-point
 
 
         #Ctrlp:input.c.bmla003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla003
            #add-point:ON ACTION controlp INFIELD bmla003 name="input.c.bmla003"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmla004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla004
            #add-point:ON ACTION controlp INFIELD bmla004 name="input.c.bmla004"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmla005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmla005
            #add-point:ON ACTION controlp INFIELD bmla005 name="input.c.bmla005"
            
            #END add-point
 
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_bmla_m.bmla001,g_bmla_m.bmla002
                        
            #add-point:單頭INPUT後 name="input.head.after_input"
            IF cl_null(g_bmla_m.bmla002) THEN LET g_bmla_m.bmla002 = ' ' END IF
            CALL abmm208_chk_column_a('bmla001+bmla002') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD bmla001
            END IF
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前 name="input.head.b_insert"
               
               #end add-point
               
               INSERT INTO bmla_t (bmlaent,bmla001,bmla002,bmla003,bmla004,bmla005,bmlaownid,bmlaowndp, 
                   bmlacrtid,bmlacrtdp,bmlacrtdt,bmlamodid,bmlamoddt)
               VALUES (g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmla_m.bmla003,g_bmla_m.bmla004, 
                   g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid,g_bmla_m.bmlacrtdp, 
                   g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt) 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_bmla_m:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中 name="input.head.m_insert"
               CALL abmm208_gen_b('1') RETURNING l_success
               IF NOT l_success THEN
                  CALL s_transaction_end('N','0')
                  CONTINUE DIALOG
               END IF
               #end add-point
               
               
               
               
               #add-point:單頭新增後 name="input.head.a_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL abmm208_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL abmm208_b_fill()
                  CALL abmm208_b_fill2('0')
               END IF
               
               #add-point:單頭新增後 name="input.head.a_insert2"
               
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前 name="input.head.b_update"
               
               #end add-point
               
               #將遮罩欄位還原
               CALL abmm208_bmla_t_mask_restore('restore_mask_o')
               
               UPDATE bmla_t SET (bmla001,bmla002,bmla003,bmla004,bmla005,bmlaownid,bmlaowndp,bmlacrtid, 
                   bmlacrtdp,bmlacrtdt,bmlamodid,bmlamoddt) = (g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmla_m.bmla003, 
                   g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
                   g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt)
                WHERE bmlaent = g_enterprise AND bmla001 = g_bmla001_t
                  AND bmla002 = g_bmla002_t
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "bmla_t:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中 name="input.head.m_update"
               IF g_bmla001_t!= g_bmla_m.bmla001 OR g_bmla002_t!= g_bmla_m.bmla002 THEN
                  CALL abmm208_gen_b('1') RETURNING l_success
                  IF NOT l_success THEN
                     CALL s_transaction_end('N','0')
                     CONTINUE DIALOG
                  END IF
               END IF
               #end add-point
               
               
               
               
               #將遮罩欄位進行遮蔽
               CALL abmm208_bmla_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(g_bmla_m_t)
               LET g_log2 = util.JSON.stringify(g_bmla_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後 name="input.head.a_update"
               
               #end add-point
            END IF
            
            LET g_master_commit = "Y"
            LET g_bmla001_t = g_bmla_m.bmla001
            LET g_bmla002_t = g_bmla_m.bmla002
 
            
      END INPUT
   
 
{</section>}
 
{<section id="abmm208.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_bmlb_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION gen_b
            LET g_action_choice="gen_b"
            IF cl_auth_chk_act("gen_b") THEN
               
               #add-point:ON ACTION gen_b name="input.detail_input.page1.gen_b"
               CALL abmm208_gen_b('2') RETURNING l_success
               CALL abmm208_b_fill() #單身填充
               CALL abmm208_b_fill2('0') #單身填充
               #END add-point
            END IF
 
 
 
 
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body.before_input2"
            
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmlb_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL abmm208_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
            END IF
            LET g_loc = 'm'
            LET g_rec_b = g_bmlb_d.getLength()
            #add-point:資料輸入前 name="input.d.before_input"
            
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_detail_idx_list[1] = l_ac
            LET g_current_page = 1
            CALL abmm208_b_fill2('2')
 
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmm208_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmm208_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_bmlb_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmlb_d[l_ac].bmlb003 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_bmlb_d_t.* = g_bmlb_d[l_ac].*  #BACKUP
               LET g_bmlb_d_o.* = g_bmlb_d[l_ac].*  #BACKUP
               CALL abmm208_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body.after_set_entry_b"
               
               #end add-point  
               CALL abmm208_set_no_entry_b(l_cmd)
               IF NOT abmm208_lock_b("bmlb_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmm208_bcl INTO g_bmlb_d[l_ac].bmlb004,g_bmlb_d[l_ac].bmlb003,g_bmlb_d[l_ac].bmlb005, 
                      g_bmlb_d[l_ac].bmlb006,g_bmlb_d[l_ac].bmlb007,g_bmlb_d[l_ac].bmlb008
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_bmlb_d_t.bmlb003,":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_bmlb_d_mask_o[l_ac].* =  g_bmlb_d[l_ac].*
                  CALL abmm208_bmlb_t_mask()
                  LET g_bmlb_d_mask_n[l_ac].* =  g_bmlb_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL abmm208_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body.before_row"
CALL abmm208_b_fill2('3')
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
        
         BEFORE INSERT  
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmlb_d[l_ac].* TO NULL 
            INITIALIZE g_bmlb_d_t.* TO NULL 
            INITIALIZE g_bmlb_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
                  LET g_bmlb_d[l_ac].bmlb005 = "N"
      LET g_bmlb_d[l_ac].bmlb006 = "1"
      LET g_bmlb_d[l_ac].bmlb007 = "1"
 
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            #預設最大順序加1
            SELECT MAX(bmlb004) INTO g_bmlb_d[l_ac].bmlb004 FROM bmlb_t
             WHERE bmlbent = g_enterprise
               AND bmlb001 = g_bmla_m.bmla001
               AND bmlb002 = g_bmla_m.bmla002
            IF cl_null(g_bmlb_d[l_ac].bmlb004) THEN
               LET g_bmlb_d[l_ac].bmlb004 = 0
            END IF
            LET g_bmlb_d[l_ac].bmlb004 = g_bmlb_d[l_ac].bmlb004 + 1
            #end add-point
            LET g_bmlb_d_t.* = g_bmlb_d[l_ac].*     #新輸入資料
            LET g_bmlb_d_o.* = g_bmlb_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmm208_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"
            
            #end add-point
            CALL abmm208_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmlb_d[li_reproduce_target].* = g_bmlb_d[li_reproduce].*
 
               LET g_bmlb_d[li_reproduce_target].bmlb003 = NULL
 
            END IF
            
 
            #add-point:modify段before insert name="input.body.before_insert"
            
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmlb_t 
             WHERE bmlbent = g_enterprise AND bmlb001 = g_bmla_m.bmla001
               AND bmlb002 = g_bmla_m.bmla002
 
               AND bmlb003 = g_bmlb_d[l_ac].bmlb003
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               CALL abmm208_insert_b('bmlb_t',gs_keys,"'1'")
                           
               #add-point:單身新增後 name="input.body.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               INITIALIZE g_bmlb_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL abmm208_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert name="input.body.a_insert2"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_bmla_m.bmla001
               LET gs_keys[gs_keys.getLength()+1] = g_bmla_m.bmla002
 
               LET gs_keys[gs_keys.getLength()+1] = g_bmlb_d_t.bmlb003
 
            
               #刪除同層單身
               IF NOT abmm208_delete_b('bmlb_t',gs_keys,"'1'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmm208_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT abmm208_key_delete_b(gs_keys,'bmlb_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmm208_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身刪除中 name="input.body.m_delete"
               
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE abmm208_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"
               #mark 150129
               #   LET l_success = TRUE
               #   DELETE FROM bmlc_t
               #    WHERE bmlcent = g_enterprise
               #      AND bmlc001 = g_bmla_m.bmla001
               #      AND bmlc002 = g_bmla_m.bmla002
               #      AND bmlc003 = g_bmlb_d_t.bmlb003
               #   IF SQLCA.sqlcode THEN
               #      INITIALIZE g_errparam TO NULL 
               #      LET g_errparam.extend = "bmlc_t" 
               #      LET g_errparam.code   = SQLCA.sqlcode 
               #      LET g_errparam.popup  = TRUE 
               #      CALL cl_err()
               #      LET l_success = FALSE
               #   END IF
               #   DELETE FROM bmld_t
               #    WHERE bmldent = g_enterprise
               #      AND bmld001 = g_bmla_m.bmla001
               #      AND bmld002 = g_bmla_m.bmla002
               #      AND bmld003 = g_bmlb_d_t.bmlb003
               #   IF SQLCA.sqlcode THEN
               #      INITIALIZE g_errparam TO NULL 
               #      LET g_errparam.extend = "bmld_t" 
               #      LET g_errparam.code   = SQLCA.sqlcode 
               #      LET g_errparam.popup  = TRUE 
               #      CALL cl_err()
               #      LET l_success = FALSE 
               #   END IF
               #   IF l_success = FALSE THEN
               #      CALL s_transaction_end('N','0')
               #      LET g_rec_b = g_rec_b+1
               #      CANCEL DELETE  
               #   END IF
               #mark 150129 end
               #end add-point
               LET l_count = g_bmlb_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
               
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_bmlb_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb004
            #add-point:BEFORE FIELD bmlb004 name="input.b.page1.bmlb004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb004
            
            #add-point:AFTER FIELD bmlb004 name="input.a.page1.bmlb004"
            IF cl_null(g_bmlb_d_t.bmlb004) OR (NOT cl_null(g_bmlb_d[l_ac].bmlb004) AND g_bmlb_d[l_ac].bmlb004 != g_bmlb_d_t.bmlb004) THEN
               CALL abmm208_chk_column_b(l_ac,'bmlb004') RETURNING l_success
               IF NOT l_success THEN
                  NEXT FIELD CURRENT
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb004
            #add-point:ON CHANGE bmlb004 name="input.g.page1.bmlb004"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb003
            
            #add-point:AFTER FIELD bmlb003 name="input.a.page1.bmlb003"
            #此段落由子樣板a05產生
            #確認資料無重複
            IF  g_bmla_m.bmla001 IS NOT NULL AND g_bmla_m.bmla002 IS NOT NULL AND g_bmlb_d[g_detail_idx].bmlb003 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmla_m.bmla001 != g_bmla001_t OR g_bmla_m.bmla002 != g_bmla002_t OR g_bmlb_d[g_detail_idx].bmlb003 != g_bmlb_d_t.bmlb003)) THEN
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmlb_t WHERE "||"bmlbent = '" ||g_enterprise|| "' AND "||"bmlb001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmlb002 = '"||g_bmla_m.bmla002 ||"' AND "|| "bmlb003 = '"||g_bmlb_d[g_detail_idx].bmlb003 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            CALL abmm208_chk_column_b(l_ac,'bmlb003') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            
            #INITIALIZE g_ref_fields TO NULL
            #LET g_ref_fields[1] = g_bmlb_d[l_ac].bmlb003
            #CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='1112' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            #LET g_bmlb_d[l_ac].bmlb003_desc = '', g_rtn_fields[1] , ''
            CALL s_desc_get_acc_desc('1112',g_bmlb_d[l_ac].bmlb003) RETURNING g_bmlb_d[l_ac].bmlb003_desc
            DISPLAY BY NAME g_bmlb_d[l_ac].bmlb003_desc
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb003
            #add-point:BEFORE FIELD bmlb003 name="input.b.page1.bmlb003"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb003
            #add-point:ON CHANGE bmlb003 name="input.g.page1.bmlb003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb005
            #add-point:BEFORE FIELD bmlb005 name="input.b.page1.bmlb005"
            CALL abmm208_set_entry_b(l_cmd)
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb005
            
            #add-point:AFTER FIELD bmlb005 name="input.a.page1.bmlb005"

            CALL abmm208_chk_column_b(l_ac,'bmlb005') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            
            CALL s_desc_get_acc_desc('273',g_bmlb_d[l_ac].bmlb008) RETURNING g_bmlb_d[l_ac].bmlb008_desc
            DISPLAY BY NAME g_bmlb_d[l_ac].bmlb008_desc

            CALL abmm208_set_no_entry_b(l_cmd)
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb005
            #add-point:ON CHANGE bmlb005 name="input.g.page1.bmlb005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb006
            #add-point:BEFORE FIELD bmlb006 name="input.b.page1.bmlb006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb006
            
            #add-point:AFTER FIELD bmlb006 name="input.a.page1.bmlb006"

            CALL abmm208_chk_column_b(l_ac,'bmlb006') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb006
            #add-point:ON CHANGE bmlb006 name="input.g.page1.bmlb006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb007
            #add-point:BEFORE FIELD bmlb007 name="input.b.page1.bmlb007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb007
            
            #add-point:AFTER FIELD bmlb007 name="input.a.page1.bmlb007"

            CALL abmm208_chk_column_b(l_ac,'bmlb007') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb007
            #add-point:ON CHANGE bmlb007 name="input.g.page1.bmlb007"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlb008
            
            #add-point:AFTER FIELD bmlb008 name="input.a.page1.bmlb008"
            CALL abmm208_chk_column_b(l_ac,'bmlb008') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            CALL s_desc_get_acc_desc('273',g_bmlb_d[l_ac].bmlb008) RETURNING g_bmlb_d[l_ac].bmlb008_desc
            DISPLAY BY NAME g_bmlb_d[l_ac].bmlb008_desc
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlb008
            #add-point:BEFORE FIELD bmlb008 name="input.b.page1.bmlb008"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlb008
            #add-point:ON CHANGE bmlb008 name="input.g.page1.bmlb008"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page1.bmlb004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb004
            #add-point:ON ACTION controlp INFIELD bmlb004 name="input.c.page1.bmlb004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmlb003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb003
            #add-point:ON ACTION controlp INFIELD bmlb003 name="input.c.page1.bmlb003"
            LET g_today_dt = cl_get_current()
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmlb_d[l_ac].bmlb003            #給予default值
            LET g_qryparam.arg1 = '1112'
            #组where条件满足主件+特征及下阶bom的
            #LET g_qryparam.where = " EXISTS (select 1 FROM bmba_t ",
            #                       "          where bmbaent=",g_enterprise,
            #                       "            and bmbasite='ALL' ",
            #                       "            and bmba001='",g_bmla_m.bmla001,"' ",
            #                       "            and bmba002='",g_bmla_m.bmla002,"' ",
            #                       "            and to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
            #                       "            and (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
            #                       "            and bmba017=oocq002 "
            #LET g_qryparam.where = " oocq002 in (select unique bmba017 FROM bmba_t ",
            #                       "              where bmbaent=",g_enterprise,
            #                       "                and bmbasite='ALL' ",
            #                       "                and bmba001='",g_bmla_m.bmla001,"' ",
            #                       "                and bmba002='",g_bmla_m.bmla002,"' ",
            #                       "                and to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
            #                       "                and (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
            #                       "                and (bmba017 IS NOT NULL OR bmba017!=' ') "
            LET g_where = ""
            CALL abmm208_get_bmba017_where(g_bmla_m.bmla001,g_bmla_m.bmla002) #获得g_where= select unique bmba017 from bmba_t where ... union select unique bmba017 from bmba_t where ...
            IF cl_null(g_where) THEN
               LET g_qryparam.where = " oocq001 = '0000' "  #使不存在的资料，与arg1冲突可以不存在
            ELSE
               LET g_qryparam.where = " oocq002 in (",g_where CLIPPED,") "
            END IF
            CALL q_oocq002_5()                               #呼叫開窗
            LET g_bmlb_d[l_ac].bmlb003 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmlb_d[l_ac].bmlb003 TO bmlb003             #顯示到畫面上
            
            CALL s_desc_get_acc_desc('1112',g_bmlb_d[l_ac].bmlb003) RETURNING g_bmlb_d[l_ac].bmlb003_desc
            DISPLAY BY NAME g_bmlb_d[l_ac].bmlb003_desc

            NEXT FIELD bmlb003                          #返回原欄位
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmlb005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb005
            #add-point:ON ACTION controlp INFIELD bmlb005 name="input.c.page1.bmlb005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmlb006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb006
            #add-point:ON ACTION controlp INFIELD bmlb006 name="input.c.page1.bmlb006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmlb007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb007
            #add-point:ON ACTION controlp INFIELD bmlb007 name="input.c.page1.bmlb007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmlb008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlb008
            #add-point:ON ACTION controlp INFIELD bmlb008 name="input.c.page1.bmlb008"
            LET g_today_dt = cl_get_current()
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmlb_d[l_ac].bmlb008            #給予default值
            SELECT imaa005 INTO l_imaa005 FROM imaa_t
             WHERE imaaent = g_enterprise
               AND imaa001 = g_bmla_m.bmla001
            LET g_qryparam.arg1 = l_imaa005
            CALL q_imeb004_4()                               #呼叫開窗
            LET g_bmlb_d[l_ac].bmlb008 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmlb_d[l_ac].bmlb008 TO bmlb008             #顯示到畫面上
            
            CALL s_desc_get_acc_desc('273',g_bmlb_d[l_ac].bmlb008) RETURNING g_bmlb_d[l_ac].bmlb008_desc
            DISPLAY BY NAME g_bmlb_d[l_ac].bmlb008_desc

            NEXT FIELD bmlb008                          #返回原欄位
            #END add-point
 
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_bmlb_d[l_ac].* = g_bmlb_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmm208_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_bmlb_d[l_ac].bmlb003 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_bmlb_d[l_ac].* = g_bmlb_d_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               CALL abmm208_bmlb_t_mask_restore('restore_mask_o')
      
               UPDATE bmlb_t SET (bmlb001,bmlb002,bmlb004,bmlb003,bmlb005,bmlb006,bmlb007,bmlb008) = (g_bmla_m.bmla001, 
                   g_bmla_m.bmla002,g_bmlb_d[l_ac].bmlb004,g_bmlb_d[l_ac].bmlb003,g_bmlb_d[l_ac].bmlb005, 
                   g_bmlb_d[l_ac].bmlb006,g_bmlb_d[l_ac].bmlb007,g_bmlb_d[l_ac].bmlb008)
                WHERE bmlbent = g_enterprise AND bmlb001 = g_bmla_m.bmla001 
                  AND bmlb002 = g_bmla_m.bmla002 
 
                  AND bmlb003 = g_bmlb_d_t.bmlb003 #項次   
 
                  
               #add-point:單身修改中 name="input.body.m_update"
               
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_bmlb_d[l_ac].* = g_bmlb_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmlb_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_bmlb_d[l_ac].* = g_bmlb_d_t.*  
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()                   
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys_bak[1] = g_bmla001_t
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys_bak[2] = g_bmla002_t
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys_bak[3] = g_bmlb_d_t.bmlb003
               CALL abmm208_update_b('bmlb_t',gs_keys,gs_keys_bak,"'1'")
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL abmm208_bmlb_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(g_bmlb_d[g_detail_idx].bmlb003 = g_bmlb_d_t.bmlb003 
 
                  ) THEN
                  LET gs_keys[01] = g_bmla_m.bmla001
                  LET gs_keys[gs_keys.getLength()+1] = g_bmla_m.bmla002
 
                  LET gs_keys[gs_keys.getLength()+1] = g_bmlb_d_t.bmlb003
 
                  CALL abmm208_key_update_b(gs_keys,'bmlb_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb_d_t)
               LET g_log2 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               #放入abmm208_update_b中实现
               #LET l_success = TRUE
               #UPDATE bmlc_t SET (bmlc003) = (g_bmlb_d[l_ac].bmlb003)
               # WHERE bmlcent = g_enterprise
               #   AND bmlc001 = g_bmla_m.bmla001 
               #   AND bmlc002 = g_bmla_m.bmla002 
               #   AND bmlc003 = g_bmlb_d_t.bmlb003 #項次 
               #IF SQLCA.sqlcode THEN
               #   INITIALIZE g_errparam TO NULL 
               #   LET g_errparam.extend = "bmlc_t" 
               #   LET g_errparam.code   = SQLCA.sqlcode 
               #   LET g_errparam.popup  = TRUE 
               #   CALL cl_err()
               #   LET l_success = FALSE          
               #END IF
               #UPDATE bmld_t SET (bmld003) = (g_bmlb_d[l_ac].bmlb003)
               # WHERE bmldent = g_enterprise
               #   AND bmld001 = g_bmla_m.bmla001 
               #   AND bmld002 = g_bmla_m.bmla002 
               #   AND bmld003 = g_bmlb_d_t.bmlb003 #項次 
               #IF SQLCA.sqlcode THEN
               #   INITIALIZE g_errparam TO NULL 
               #   LET g_errparam.extend = "bmld_t" 
               #   LET g_errparam.code   = SQLCA.sqlcode 
               #   LET g_errparam.popup  = TRUE 
               #   CALL cl_err()
               #   LET l_success = FALSE          
               #END IF
               #IF l_success = FALSE THEN
               #   CALL s_transaction_end('N','0')
               #   LET g_bmlb_d[l_ac].* = g_bmlb_d_t.*  
               #END IF
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            
            #end add-point
            CALL abmm208_unlock_b("bmlb_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            
            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_bmlb_d[li_reproduce_target].* = g_bmlb_d[li_reproduce].*
 
               LET g_bmlb_d[li_reproduce_target].bmlb003 = NULL
 
            ELSE
               CALL FGL_SET_ARR_CURR(g_bmlb_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_bmlb_d.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
 
      
      INPUT ARRAY g_bmlb2_d FROM s_detail2.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_2)
         
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION gen_b
            LET g_action_choice="gen_b"
            IF cl_auth_chk_act("gen_b") THEN
               
               #add-point:ON ACTION gen_b name="input.detail_input.page2.gen_b"
               CALL abmm208_gen_b('2') RETURNING l_success
               CALL abmm208_b_fill() #單身填充
               CALL abmm208_b_fill2('0') #單身填充
               #END add-point
            END IF
 
 
 
 
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[1]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR g_bmlb_d.getLength() = 0 THEN
               NEXT FIELD bmlb003
            END IF
            #檢查上層單身是否有資料
            IF cl_null(g_bmlb_d[g_detail_idx].bmlb003) THEN
               NEXT FIELD bmlb003
            END IF
            #add-point:資料輸入前 name="input.body2.before_input2"
            
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmlb2_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_bmlb2_d.getLength()
            #add-point:資料輸入前 name="input.body2.before_input"
 
            #end add-point
            
         BEFORE INSERT
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmlb2_d[l_ac].* TO NULL 
            INITIALIZE g_bmlb2_d_t.* TO NULL 
            INITIALIZE g_bmlb2_d_o.* TO NULL 
            #公用欄位給值(單身2)
            
            #自定義預設值(單身2)
            
            #add-point:modify段before備份 name="input.body2.insert.before_bak"
            
            #end add-point
            LET g_bmlb2_d_t.* = g_bmlb2_d[l_ac].*     #新輸入資料
            LET g_bmlb2_d_o.* = g_bmlb2_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmm208_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body2.insert.after_set_entry_b"
            
            #end add-point
            CALL abmm208_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmlb2_d[li_reproduce_target].* = g_bmlb2_d[li_reproduce].*
 
               LET g_bmlb2_d[li_reproduce_target].bmlc004 = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body2.before_insert"
            
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body2.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[2] = l_ac
            LET g_current_page = 2
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmm208_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE abmm208_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN abmm208_bcl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003 
 
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmm208_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmm208_cl
               CLOSE abmm208_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_bmlb2_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmlb2_d[l_ac].bmlc004 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_bmlb2_d_t.* = g_bmlb2_d[l_ac].*  #BACKUP
               LET g_bmlb2_d_o.* = g_bmlb2_d[l_ac].*  #BACKUP
               CALL abmm208_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body2.after_set_entry_b"
               
               #end add-point  
               CALL abmm208_set_no_entry_b(l_cmd)
               IF NOT abmm208_lock_b("bmlc_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmm208_bcl2 INTO g_bmlb2_d[l_ac].bmlc004,g_bmlb2_d[l_ac].bmlc005,g_bmlb2_d[l_ac].bmlc006, 
                      g_bmlb2_d[l_ac].bmlc007,g_bmlb2_d[l_ac].bmlc008
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_bmlb2_d_mask_o[l_ac].* =  g_bmlb2_d[l_ac].*
                  CALL abmm208_bmlc_t_mask()
                  LET g_bmlb2_d_mask_n[l_ac].* =  g_bmlb2_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL abmm208_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body2.before_row"
            CALL abmm208_b_fill2('3')  #LET g_detail_idx2 = l_ac下没有add point 故放此处
             

            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body2.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body2.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身2刪除前 name="input.body2.b_delete"
               
               #end add-point    
 
               #取得該筆資料key值
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys[4] = g_bmlb2_d_t.bmlc004
 
 
               #刪除同層單身
               IF NOT abmm208_delete_b('bmlc_t',gs_keys,"'2'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmm208_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身2刪除中 name="input.body2.m_delete"
               #add 150129
               DELETE FROM bmld_t
                WHERE bmldent = g_enterprise
                  AND bmld001 = g_bmla_m.bmla001
                  AND bmld002 = g_bmla_m.bmla002
                  AND bmld003 = g_bmlb_d[g_detail_idx].bmlb003
                  AND bmld004 = g_bmlb2_d_t.bmlc004
               IF SQLCA.sqlcode THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "bmld_t" 
                  LET g_errparam.code   = SQLCA.sqlcode 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CALL s_transaction_end('N','0')
                  CLOSE abmm208_bcl
                  CANCEL DELETE
               END IF
               #add 150129 end
               #end add-point   
               
               CALL s_transaction_end('Y','0')
               CLOSE abmm208_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身2刪除後 name="input.body2.a_delete"
               #mark 150129
               #   LET l_success = TRUE
               #   DELETE FROM bmld_t
               #    WHERE bmldent = g_enterprise
               #      AND bmld001 = g_bmla_m.bmla001
               #      AND bmld002 = g_bmla_m.bmla002
               #      AND bmld003 = g_bmlb_d[g_detail_idx].bmlb003
               #      AND bmld004 = g_bmlb2_d[g_detail_idx2].bmlc004
               #   IF SQLCA.sqlcode THEN
               #      INITIALIZE g_errparam TO NULL 
               #      LET g_errparam.extend = "bmld_t" 
               #      LET g_errparam.code   = SQLCA.sqlcode 
               #      LET g_errparam.popup  = TRUE 
               #      CALL cl_err()
               #      LET l_success = FALSE
               #   END IF
               #   IF l_success = FALSE THEN
               #      CALL s_transaction_end('N','0')
               #      LET g_rec_b = g_rec_b+1
               #      CANCEL DELETE   
               #   END IF
               #mark 150129 end
               #end add-point
 
               LET l_count = g_bmlb_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body2.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_bmlb2_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身2新增前 name="input.body2.b_a_insert"
            
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmlc_t 
             WHERE bmlcent = g_enterprise AND bmlc001 = g_bmla_m.bmla001 AND bmlc002 = g_bmla_m.bmla002  
                 AND bmlc003 = g_bmlb_d[g_detail_idx].bmlb003 AND bmlc004 = g_bmlb2_d[g_detail_idx2].bmlc004 
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身2新增前 name="input.body2.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys[4] = g_bmlb2_d[g_detail_idx2].bmlc004
               CALL abmm208_insert_b('bmlc_t',gs_keys,"'2'")
                           
               #add-point:單身新增後2 name="input.body2.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_bmlb_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL abmm208_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body2.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_bmlb2_d[l_ac].* = g_bmlb2_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmm208_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_bmlb2_d[l_ac].* = g_bmlb2_d_t.*
            ELSE
               #add-point:單身page2修改前 name="input.body2.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身2)
               
               
               #將遮罩欄位還原
               CALL abmm208_bmlc_t_mask_restore('restore_mask_o')
               
               UPDATE bmlc_t SET (bmlc001,bmlc002,bmlc003,bmlc004,bmlc005,bmlc006,bmlc007,bmlc008) = (g_bmla_m.bmla001, 
                   g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003,g_bmlb2_d[l_ac].bmlc004,g_bmlb2_d[l_ac].bmlc005, 
                   g_bmlb2_d[l_ac].bmlc006,g_bmlb2_d[l_ac].bmlc007,g_bmlb2_d[l_ac].bmlc008) #自訂欄位頁簽 
 
                WHERE bmlcent = g_enterprise AND bmlc001 = g_bmla001_t AND bmlc002 = g_bmla002_t AND  
                    bmlc003 = g_bmlb_d[g_detail_idx].bmlb003 AND bmlc004 = g_bmlb2_d_t.bmlc004
                  
               #add-point:單身page2修改中 name="input.body2.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_bmlb2_d[l_ac].* = g_bmlb2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmlc_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_bmlb2_d[l_ac].* = g_bmlb2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys_bak[1] = g_bmla001_t
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys_bak[2] = g_bmla002_t
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys_bak[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys[4] = g_bmlb2_d[g_detail_idx2].bmlc004
               LET gs_keys_bak[4] = g_bmlb2_d_t.bmlc004
               CALL abmm208_update_b('bmlc_t',gs_keys,gs_keys_bak,"'2'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL abmm208_bmlc_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb2_d_t)
               LET g_log2 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb2_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page2修改後 name="input.body2.a_update"
               #连动的表放入abmm208_update_b中实现
               #end add-point
            END IF
         
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc004
            
            #add-point:AFTER FIELD bmlc004 name="input.a.page2.bmlc004"
            #此段落由子樣板a05產生
            #確認資料無重複
            IF  g_bmla_m.bmla001 IS NOT NULL AND g_bmla_m.bmla002 IS NOT NULL AND g_bmlb_d[g_detail_idx].bmlb003 IS NOT NULL AND g_bmlb2_d[g_detail_idx2].bmlc004 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmla_m.bmla001 != g_bmla001_t OR g_bmla_m.bmla002 != g_bmla002_t OR g_bmlb_d[g_detail_idx].bmlb003 != g_bmlb_d[g_detail_idx].bmlb003 OR g_bmlb2_d[g_detail_idx2].bmlc004 != g_bmlb2_d_t.bmlc004)) THEN
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmlc_t WHERE "||"bmlcent = '" ||g_enterprise|| "' AND "||"bmlc001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmlc002 = '"||g_bmla_m.bmla002 ||"' AND "|| "bmlc003 = '"||g_bmlb_d[g_detail_idx].bmlb003 ||"' AND "|| "bmlc004 = '"||g_bmlb2_d[g_detail_idx2].bmlc004 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            CALL abmm208_chk_column_b2(l_ac,'bmlc004') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            

            #INITIALIZE g_ref_fields TO NULL
            #LET g_ref_fields[1] = g_bmlb2_d[l_ac].bmlc004
            #CALL ap_ref_array2(g_ref_fields,"SELECT imaal003 FROM imaal_t WHERE imaalent='"||g_enterprise||"' AND imaal001=? AND imaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            #LET g_bmlb2_d[l_ac].bmlc004_desc = '', g_rtn_fields[1] , ''
            #DISPLAY BY NAME g_bmlb2_d[l_ac].bmlc004_desc
            CALL s_desc_get_item_desc(g_bmlb2_d[l_ac].bmlc004) RETURNING g_bmlb2_d[l_ac].bmlc004_desc,g_bmlb2_d[l_ac].bmlc004_desc_desc
            DISPLAY BY NAME g_bmlb2_d[l_ac].bmlc004_desc
            DISPLAY BY NAME g_bmlb2_d[l_ac].bmlc004_desc_desc
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc004
            #add-point:BEFORE FIELD bmlc004 name="input.b.page2.bmlc004"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlc004
            #add-point:ON CHANGE bmlc004 name="input.g.page2.bmlc004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc005
            #add-point:BEFORE FIELD bmlc005 name="input.b.page2.bmlc005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc005
            
            #add-point:AFTER FIELD bmlc005 name="input.a.page2.bmlc005"
            IF NOT cl_null(g_bmlb2_d[l_ac].bmlc004) THEN
               IF cl_null(g_bmlb2_d_t.bmlc004) OR g_bmlb2_d[l_ac].bmlc004 != g_bmlb2_d_t.bmlc004 THEN
                  CALL abmm208_chk_column_b2(l_ac,'bmlc005') RETURNING l_success
                  IF NOT l_success THEN
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlc005
            #add-point:ON CHANGE bmlc005 name="input.g.page2.bmlc005"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc006
            #add-point:BEFORE FIELD bmlc006 name="input.b.page2.bmlc006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc006
            
            #add-point:AFTER FIELD bmlc006 name="input.a.page2.bmlc006"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlc006
            #add-point:ON CHANGE bmlc006 name="input.g.page2.bmlc006"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc007
            #add-point:BEFORE FIELD bmlc007 name="input.b.page2.bmlc007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc007
            
            #add-point:AFTER FIELD bmlc007 name="input.a.page2.bmlc007"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlc007
            #add-point:ON CHANGE bmlc007 name="input.g.page2.bmlc007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmlc008
            #add-point:BEFORE FIELD bmlc008 name="input.b.page2.bmlc008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmlc008
            
            #add-point:AFTER FIELD bmlc008 name="input.a.page2.bmlc008"
            CALL abmm208_chk_column_b2(l_ac,'bmlc008') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmlc008
            #add-point:ON CHANGE bmlc008 name="input.g.page2.bmlc008"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page2.bmlc004
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc004
            #add-point:ON ACTION controlp INFIELD bmlc004 name="input.c.page2.bmlc004"
            LET g_today_dt = cl_get_current()
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmlb2_d[l_ac].bmlc004            #給予default值

            #组where条件满足主件+特征及下阶bom的
            LET g_where = ""
            CALL abmm208_get_bmba003_where(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003) #获得g_where= select unique bmba003 from bmba_t where ... union select unique bmba017 from bmba_t where ...
            IF cl_null(g_where) THEN LET g_where = "'kjdsgks9284I8ws84ei'" END IF  #不存在的资料
            LET g_qryparam.where = " imaa001 in (",g_where CLIPPED,") "
            CALL q_imaa001_10()                               #呼叫開窗
            LET g_bmlb2_d[l_ac].bmlc004 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmlb2_d[l_ac].bmlc004 TO bmlc004            #顯示到畫面上
            
            CALL s_desc_get_item_desc(g_bmlb2_d[l_ac].bmlc004) RETURNING g_bmlb2_d[l_ac].bmlc004_desc,g_bmlb2_d[l_ac].bmlc004_desc_desc
            DISPLAY BY NAME g_bmlb2_d[l_ac].bmlc004_desc
            DISPLAY BY NAME g_bmlb2_d[l_ac].bmlc004_desc_desc

            NEXT FIELD bmlc004                          #返回原欄位
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmlc005
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc005
            #add-point:ON ACTION controlp INFIELD bmlc005 name="input.c.page2.bmlc005"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmlc006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc006
            #add-point:ON ACTION controlp INFIELD bmlc006 name="input.c.page2.bmlc006"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmlc007
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc007
            #add-point:ON ACTION controlp INFIELD bmlc007 name="input.c.page2.bmlc007"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmlc008
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmlc008
            #add-point:ON ACTION controlp INFIELD bmlc008 name="input.c.page2.bmlc008"
            SELECT imaa005 INTO l_imaa005 FROM imaa_t
             WHERE imaaent = g_enterprise
               AND imaa001 = g_bmla_m.bmla001
            IF NOT cl_null(l_imaa005) AND NOT cl_null(g_bmlb_d[g_detail_idx].bmlb008) THEN
               SELECT imeb005 INTO l_imeb005
                 FROM imeb_t
                WHERE imebent = g_enterprise
                  AND imeb001 = l_imaa005
                  AND imeb003 = '2' #库存层级
                  AND imeb004 = g_bmlb_d[g_detail_idx].bmlb008 #特征类型
                IF l_imeb005 = '2' THEN  #賦值方式
                   #開窗i段
                   INITIALIZE g_qryparam.* TO NULL
                   LET g_qryparam.state = 'i'
                   LET g_qryparam.reqry = FALSE

                   LET g_qryparam.default1 = g_bmlb2_d[l_ac].bmlc008             #給予default值

                   #給予arg
                   LET g_qryparam.where = "imeastus = 'Y' "
                   LET g_qryparam.arg1 = l_imaa005 #特徵群組代碼
                   LET g_qryparam.arg2 = g_bmlb_d[g_detail_idx].bmlb008
                   CALL q_imec003()                                #呼叫開窗                          #呼叫開窗

                   LET g_bmlb2_d[l_ac].bmlc008 = g_qryparam.return1              #將開窗取得的值回傳到變數

                   DISPLAY g_bmlb2_d[l_ac].bmlc008 TO bmlc008              #顯示到畫面上

                   NEXT FIELD bmlc008                          #返回原欄位
                END IF
             END  IF
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page2_after_row name="input.body2.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_bmlb2_d[l_ac].* = g_bmlb2_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmm208_bcl2
               CLOSE abmm208_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL abmm208_unlock_b("bmlc_t","'2'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page2_after_row2 name="input.body2.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body2.after_input"
            
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_bmlb2_d[li_reproduce_target].* = g_bmlb2_d[li_reproduce].*
 
               LET g_bmlb2_d[li_reproduce_target].bmlc004 = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_bmlb2_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_bmlb2_d.getLength()+1
            END IF
        
      END INPUT
 
 
 
 
{</section>}
 
{<section id="abmm208.input.other" >}
      
      #add-point:自定義input name="input.more_input"
      INPUT ARRAY g_bmlb3_d FROM s_detail3.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)

         ON ACTION gen_b
            LET g_action_choice="gen_b"
            IF cl_auth_chk_act("gen_b") THEN
               CALL abmm208_gen_b('2') RETURNING l_success
               CALL abmm208_b_fill() #單身填充
               CALL abmm208_b_fill2('0') #單身填充
            END IF
            
         BEFORE INPUT
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmlb3_d.getLength()+1) 
              LET g_insert = 'N' 
            END IF 
 
            IF g_rec_b != 0 THEN
               CALL fgl_set_arr_curr(l_ac)
            END IF
            LET g_rec_b = g_bmlb3_d.getLength()
            
         BEFORE INSERT
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmlb3_d[l_ac].* TO NULL 
            INITIALIZE g_bmlb3_d_t.* TO NULL 
            INITIALIZE g_bmlb3_d_o.* TO NULL 
            LET g_bmlb3_d_t.* = g_bmlb3_d[l_ac].*     #新輸入資料
            LET g_bmlb3_d_o.* = g_bmlb3_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmm208_set_entry_b(l_cmd)
            CALL abmm208_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmlb3_d[li_reproduce_target].* = g_bmlb3_d[li_reproduce].*
               LET g_bmlb3_d[li_reproduce_target].bmld005 = NULL
               LET g_bmlb3_d[li_reproduce_target].bmld006 = NULL
            END IF 
            
         BEFORE ROW 
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac = ARR_CURR()
            LET g_detail_idx3 = l_ac
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
            OPEN abmm208_bcl2 USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003, 
g_bmlb2_d[g_detail_idx2].bmlc004
            IF STATUS THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmm208_cl:" 
               LET g_errparam.code   = STATUS 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CLOSE abmm208_cl
               CLOSE abmm208_bcl2
               CALL s_transaction_end('N','0')
               RETURN
            END IF
            
            LET g_rec_b = g_bmlb3_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmlb3_d[l_ac].bmld005 IS NOT NULL
               AND g_bmlb3_d[l_ac].bmld006 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_bmlb3_d_t.* = g_bmlb3_d[l_ac].*  #BACKUP
               LET g_bmlb3_d_o.* = g_bmlb3_d[l_ac].*  #BACKUP
               CALL abmm208_set_entry_b(l_cmd) 
               CALL abmm208_set_no_entry_b(l_cmd)
               IF NOT abmm208_lock_b("bmld_t","'3'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmm208_bcl3 INTO g_bmlb3_d[l_ac].bmld005,g_bmlb3_d[l_ac].bmld006
                  IF SQLCA.sqlcode THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = '' 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  LET g_bfill = "N"
                  CALL abmm208_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF            
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
            ELSE
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code   = -263 
                  LET g_errparam.popup  = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF  
               
               #mod 150129
               #DELETE FROM bmld_t
               #      WHERE bmldent = g_enterprise AND bmld001 = g_bmla_m.bmla001 AND bmld002 = g_bmla_m.bmla002  
               #          AND bmld003 = g_bmlb_d[g_detail_idx].bmlb003 AND bmld004 = g_bmlb2_d[g_detail_idx2].bmlc004  
               #          AND bmld005 = g_bmlb3_d_t.bmld005 AND bmld006 =g_bmlb3_d_t.bmld006
               #IF SQLCA.sqlcode THEN
               #   INITIALIZE g_errparam TO NULL 
               #   LET g_errparam.extend = "bmlb_t" 
               #   LET g_errparam.code   = SQLCA.sqlcode 
               #   LET g_errparam.popup  = TRUE 
               #   CALL cl_err()
               #   CALL s_transaction_end('N','0')
               #   CANCEL DELETE   
               #ELSE
               #   LET g_rec_b = g_rec_b-1
               #   CALL s_transaction_end('Y','0')
               #END IF 
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys[4] = g_bmlb2_d[g_detail_idx2].bmlc004
               LET gs_keys[5] = g_bmlb3_d_t.bmld005
               LET gs_keys[6] = g_bmlb3_d_t.bmld006
               
               #刪除同層單身
               IF NOT abmm208_delete_b('bmld_t',gs_keys,"'3'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmm208_bcl
                  CANCEL DELETE
               END IF
               
               CALL s_transaction_end('Y','0')
               LET g_rec_b = g_rec_b-1
               #mod 150129 end
    
               CLOSE abmm208_bcl
               LET l_count = g_bmlb_d.getLength()
            END IF 
            
         AFTER DELETE 
            #mark 150129
            #IF l_cmd <> 'd' THEN
            #   CALL abmm208_delete_b('bmld_t',gs_keys,"'3'")
            #END IF
            #mark 150129 end
            #如果是最後一筆
            IF l_ac = (g_bmlb3_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmld_t 
             WHERE bmldent = g_enterprise AND bmld001 = g_bmla_m.bmla001 AND bmld002 = g_bmla_m.bmla002  
                 AND bmld003 = g_bmlb_d[g_detail_idx].bmlb003 AND bmld004 = g_bmlb2_d[g_detail_idx2].bmlc004  
                 AND bmld005 = g_bmlb3_d[g_detail_idx3].bmld005 AND bmld006 =g_bmlb3_d[g_detail_idx3].bmld006 
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmla_m.bmla001
               LET gs_keys[2] = g_bmla_m.bmla002
               LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
               LET gs_keys[4] = g_bmlb2_d[g_detail_idx2].bmlc004
               LET gs_keys[5] = g_bmlb3_d[g_detail_idx3].bmld005
               LET gs_keys[6] = g_bmlb3_d[g_detail_idx3].bmld006
               CALL abmm208_insert_b('bmld_t',gs_keys,"'3'")
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code   = "std-00006" 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               INITIALIZE g_bmlb_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmld_t" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               CALL s_transaction_end('N','0')                    
               CANCEL INSERT
            ELSE
               CALL s_transaction_end('Y','0')
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               LET g_bmlb3_d[l_ac].* = g_bmlb3_d_t.*
               CLOSE abmm208_bcl3
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = -263 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
               LET g_bmlb3_d[l_ac].* = g_bmlb3_d_t.*
            ELSE
               UPDATE bmld_t SET (bmld001,bmld002,bmld003,bmld004,bmld005,bmld006) = (g_bmla_m.bmla001, 
                   g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003,g_bmlb2_d[g_detail_idx2].bmlc004,g_bmlb3_d[l_ac].bmld005,g_bmlb3_d[l_ac].bmld006)  
                   #自訂欄位頁簽
                #WHERE bmldent = g_enterprise AND bmld001 =  AND bmld002 =  AND bmld003 = g__t AND bmld004 = g_bmlb3_d_t.bmld005 AND bmld005 = g_bmlb3_d_t.bmld006 AND bmld006 = 
                WHERE bmldent = g_enterprise AND bmld001 = g_bmla_m.bmla001 AND bmld002 = g_bmla_m.bmla002 
                    AND bmld003 = g_bmlb_d[g_detail_idx].bmlb003 AND bmld004 = g_bmlb2_d[g_detail_idx2].bmlc004  
                    AND bmld005 = g_bmlb3_d_t.bmld005 AND bmld006 =g_bmlb3_d_t.bmld006 
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmld_t" 
                     LET g_errparam.code   = "std-00009" 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     CALL s_transaction_end('N','0')
                     LET g_bmlb3_d[l_ac].* = g_bmlb3_d_t.*
                  WHEN SQLCA.sqlcode #其他錯誤
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmld_t" 
                     LET g_errparam.code   = SQLCA.sqlcode 
                     LET g_errparam.popup  = TRUE 
                     CALL cl_err()
                     CALL s_transaction_end('N','0')
                     LET g_bmlb3_d[l_ac].* = g_bmlb3_d_t.*
                  OTHERWISE
                     INITIALIZE gs_keys TO NULL 
                     LET gs_keys[1] = g_bmla_m.bmla001
                     LET gs_keys_bak[1] = g_bmla001_t
                     LET gs_keys[2] = g_bmla_m.bmla002
                     LET gs_keys_bak[2] = g_bmla002_t
                     LET gs_keys[3] = g_bmlb_d[g_detail_idx].bmlb003
                     LET gs_keys_bak[3] = g_bmlb_d[g_detail_idx].bmlb003
                     LET gs_keys[4] = g_bmlb2_d[g_detail_idx2].bmlc004
                     LET gs_keys_bak[4] = g_bmlb2_d[g_detail_idx2].bmlc004
                     LET gs_keys[5] = g_bmlb3_d[g_detail_idx3].bmld005
                     LET gs_keys_bak[5] = g_bmlb3_d_t.bmld005
                     LET gs_keys[6] = g_bmlb3_d[g_detail_idx3].bmld006
                     LET gs_keys_bak[6] = g_bmlb3_d_t.bmld006
                     CALL abmm208_update_b('bmld_t',gs_keys,gs_keys_bak,"'3'")
               END CASE
               
               #修改歷程記錄
               LET g_log1 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb3_d_t)
               LET g_log2 = util.JSON.stringify(g_bmla_m),util.JSON.stringify(g_bmlb3_d[l_ac])
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
            END IF
         
         AFTER FIELD bmld005
            IF g_bmla_m.bmla001 IS NOT NULL AND g_bmla_m.bmla002 IS NOT NULL AND g_bmlb_d[g_detail_idx].bmlb003 IS NOT NULL AND g_bmlb2_d[g_detail_idx2].bmlc004 IS NOT NULL AND g_bmlb3_d[g_detail_idx3].bmld005 IS NOT NULL AND g_bmlb3_d[g_detail_idx3].bmld006 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmlb3_d[g_detail_idx3].bmld005 != g_bmlb3_d_t.bmld005 OR g_bmlb3_d[g_detail_idx3].bmld006 != g_bmlb3_d_t.bmld006)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmld_t WHERE "||"bmldent = '" ||g_enterprise|| "' AND "||"bmld001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmld002 = '"||g_bmla_m.bmla002 ||"' AND "|| "bmld003 = '"||g_bmlb_d[g_detail_idx].bmlb003 ||"' AND "|| "bmld004 = '"||g_bmlb2_d[g_detail_idx2].bmlc004 ||"' AND "|| "bmld005 = '"||g_bmlb3_d[g_detail_idx3].bmld005 ||"' AND "|| "bmld006 = '"||g_bmlb3_d[g_detail_idx3].bmld006 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            
            CALL abmm208_chk_column_b3(l_ac,'bmld005') RETURNING l_success
            IF NOT l_success THEN
               NEXT FIELD CURRENT
            END IF
            
            #INITIALIZE g_ref_fields TO NULL
            #LET g_ref_fields[1] = g_bmlb3_d[l_ac].bmld005
            #CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001='1112' AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
            #LET g_bmlb3_d[l_ac].bmld005_desc = '', g_rtn_fields[1] , ''
            CALL s_desc_get_acc_desc('1112',g_bmlb3_d[l_ac].bmld005) RETURNING g_bmlb3_d[l_ac].bmld005_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld005_desc

         AFTER FIELD bmld006
            IF g_bmla_m.bmla001 IS NOT NULL AND g_bmla_m.bmla002 IS NOT NULL AND g_bmlb_d[g_detail_idx].bmlb003 IS NOT NULL AND g_bmlb2_d[g_detail_idx2].bmlc004 IS NOT NULL AND g_bmlb3_d[g_detail_idx3].bmld005 IS NOT NULL AND g_bmlb3_d[g_detail_idx3].bmld006 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmlb3_d[g_detail_idx3].bmld005 != g_bmlb3_d_t.bmld005 OR g_bmlb3_d[g_detail_idx3].bmld006 != g_bmlb3_d_t.bmld006)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(1) FROM bmld_t WHERE "||"bmldent = '" ||g_enterprise|| "' AND "||"bmld001 = '"||g_bmla_m.bmla001 ||"' AND "|| "bmld002 = '"||g_bmla_m.bmla002 ||"' AND "|| "bmld003 = '"||g_bmlb_d[g_detail_idx].bmlb003 ||"' AND "|| "bmld004 = '"||g_bmlb2_d[g_detail_idx2].bmlc004 ||"' AND "|| "bmld005 = '"||g_bmlb3_d[g_detail_idx3].bmld005 ||"' AND "|| "bmld006 = '"||g_bmlb3_d[g_detail_idx3].bmld006 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF

            IF NOT cl_null(g_bmlb2_d[l_ac].bmlc004) THEN
               IF cl_null(g_bmlb2_d_t.bmlc004) OR g_bmlb2_d[l_ac].bmlc004 != g_bmlb2_d_t.bmlc004 THEN
                  CALL abmm208_chk_column_b3(l_ac,'bmld006') RETURNING l_success
                  IF NOT l_success THEN
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            #INITIALIZE g_ref_fields TO NULL
            #LET g_ref_fields[1] = g_bmlb3_d[l_ac].bmld006
            #CALL ap_ref_array2(g_ref_fields,"SELECT imaal003 FROM imaal_t WHERE imaalent='"||g_enterprise||"' AND imaal001=? AND imaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
            #LET g_bmlb3_d[l_ac].bmld006_desc = '', g_rtn_fields[1] , ''
            #DISPLAY BY NAME g_bmlb3_d[l_ac].bmld006_desc
            CALL s_desc_get_item_desc(g_bmlb3_d[l_ac].bmld006) RETURNING g_bmlb3_d[l_ac].bmld006_desc,g_bmlb3_d[l_ac].bmld006_desc_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld006_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld006_desc_desc
            
         ON ACTION controlp INFIELD bmld005
            LET g_today_dt = cl_get_current()
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmlb3_d[l_ac].bmld005            #給予default值
            LET g_qryparam.arg1 = '1112'
            #组where条件满足主件+特征及下阶bom的
            LET g_where = ""
            CALL abmm208_get_bmba017_where(g_bmla_m.bmla001,g_bmla_m.bmla002) #获得g_where= select unique bmba017 from bmba_t where ... union select unique bmba017 from bmba_t where ...
            IF cl_null(g_where) THEN
               LET g_qryparam.where = " oocq001 = '0000' "  #使不存在的资料，与arg1冲突可以不存在
            ELSE
               LET g_qryparam.where = " oocq002 in (",g_where CLIPPED,") "
            END IF
            CALL q_oocq002_5()                               #呼叫開窗
            LET g_bmlb3_d[l_ac].bmld005 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmlb3_d[l_ac].bmld005 TO bmld005             #顯示到畫面上

            CALL s_desc_get_acc_desc('1112',g_bmlb3_d[l_ac].bmld005) RETURNING g_bmlb3_d[l_ac].bmld005_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld005_desc
            
            NEXT FIELD bmld005                          #返回原欄位
            
         ON ACTION controlp INFIELD bmld006
            #add-point:ON ACTION controlp INFIELD bmlc004
            LET g_today_dt = cl_get_current()
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.default1 = g_bmlb3_d[l_ac].bmld006            #給予default值

            #组where条件满足主件+特征及下阶bom的
            LET g_where = ""
            CALL abmm208_get_bmba003_where(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb3_d[l_ac].bmld005) #获得g_where= select unique bmba003 from bmba_t where ... union select unique bmba017 from bmba_t where ...
            IF cl_null(g_where) THEN LET g_where = "'kjdsgks9284I8ws84ei'" END IF  #不存在的资料
            LET g_qryparam.where = " imaa001 in (",g_where CLIPPED,") "
            CALL q_imaa001_10()                               #呼叫開窗
            LET g_bmlb3_d[l_ac].bmld006 = g_qryparam.return1              #將開窗取得的值回傳到變數
            DISPLAY g_bmlb3_d[l_ac].bmld006 TO bmld006            #顯示到畫面上
            
            CALL s_desc_get_item_desc(g_bmlb3_d[l_ac].bmld006) RETURNING g_bmlb3_d[l_ac].bmld006_desc,g_bmlb3_d[l_ac].bmld006_desc_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld006_desc
            DISPLAY BY NAME g_bmlb3_d[l_ac].bmld006_desc_desc

            NEXT FIELD bmld006                          #返回原欄位
            
         AFTER ROW
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code   = 9001 
               LET g_errparam.popup  = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_bmlb3_d[l_ac].* = g_bmlb3_d_t.*
               END IF
               CLOSE abmm208_bcl3
               CLOSE abmm208_bcl2
               CALL s_transaction_end('N','0')
               EXIT DIALOG 
            END IF
            CALL abmm208_unlock_b("bmld_t","'3'")
            CALL s_transaction_end('Y','0')
 
         AFTER INPUT
 
         ON ACTION controlo    
            CALL FGL_SET_ARR_CURR(g_bmlb3_d.getLength()+1)
            LET lb_reproduce = TRUE
            LET li_reproduce = l_ac
            LET li_reproduce_target = g_bmlb3_d.getLength()+1
 
      END INPUT
      
      #AFTER DIALOG

      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog name="input.before_dialog"
 
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_idx_group.getValue("'1',"))      
         CALL DIALOG.setCurrentRow("s_detail2",g_idx_group.getValue("'2',"))
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field name="input.next_field"
            
            #end add-point  
            NEXT FIELD bmla001
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD bmlb004
               WHEN "s_detail2"
                  NEXT FIELD bmlc004
 
               #add-point:input段modify_detail  name="input.modify_detail.other"
               WHEN "s_detail3"
                  NEXT FIELD bmld005
               #end add-point  
            END CASE
         END IF
      
      AFTER DIALOG
         #add-point:input段after_dialog name="input.after_dialog"
         SELECT COUNT(1) INTO l_cnt FROM bmlc_t
          WHERE bmlcent = g_enterprise
            AND bmlc001 = g_bmla_m.bmla001
            AND bmlc002 = g_bmla_m.bmla002
            AND (bmlc005 IS NULL OR bmlc005 = ' ')
         IF l_cnt > 0 THEN
            #“料件编号”字段缺少资料，请检查并将料件编号补充完整
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = ""
            LET g_errparam.code   = "abm-00232" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            NEXT FIELD bmlb004
         END IF
         #end add-point    
         
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept  name="input.accept"
         
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         #add-point:input段cancel name="input.cancel"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         #add-point:input段close name="input.close"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         #add-point:input段exit name="input.exit"
         
         #end add-point
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input  name="input.after_input"
   
   #end add-point    
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION abmm208_show()
   #add-point:show段define(客製用) name="show.define_customerization"
   
   #end add-point  
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="show.before"
   
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL abmm208_b_fill() #單身填充
      CALL abmm208_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #應用 a12 樣板自動產生(Version:4)
 
 
 
   
   #顯示followup圖示
   #應用 a48 樣板自動產生(Version:3)
   CALL abmm208_set_pk_array()
   #add-point:ON ACTION agendum name="show.follow_pic"
   
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference name="show.head.reference"
   
   #end add-point
   
   #遮罩相關處理
   LET g_bmla_m_mask_o.* =  g_bmla_m.*
   CALL abmm208_bmla_t_mask()
   LET g_bmla_m_mask_n.* =  g_bmla_m.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_bmla_m.bmla001,g_bmla_m.bmla001_desc,g_bmla_m.bmla001_desc_desc,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaownid_desc, 
       g_bmla_m.bmlaowndp,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid,g_bmla_m.bmlacrtid_desc,g_bmla_m.bmlacrtdp, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamodid_desc,g_bmla_m.bmlamoddt 
 
   
   #顯示狀態(stus)圖片
   
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_bmlb_d.getLength()
      #add-point:show段單身reference name="show.body.reference"
      
      #end add-point
   END FOR
   
   FOR l_ac = 1 TO g_bmlb2_d.getLength()
      #add-point:show段單身reference name="show.body2.reference"
      
      #end add-point
   END FOR
 
   
    
   
   #add-point:show段other name="show.other"
   FOR l_ac = 1 TO g_bmlb3_d.getLength()

   END FOR
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL abmm208_detail_show()
 
   #add-point:show段之後 name="show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION abmm208_detail_show()
   #add-point:detail_show段define(客製用) name="detail_show.define_customerization"
   
   #end add-point  
   #add-point:detail_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="detail_show.before"
   
   #end add-point
   
   #add-point:detail_show段之後 name="detail_show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION abmm208_reproduce()
   #add-point:reproduce段define(客製用) name="reproduce.define_customerization"
   
   #end add-point   
   DEFINE l_newno     LIKE bmla_t.bmla001 
   DEFINE l_oldno     LIKE bmla_t.bmla001 
   DEFINE l_newno02     LIKE bmla_t.bmla002 
   DEFINE l_oldno02     LIKE bmla_t.bmla002 
 
   DEFINE l_master    RECORD LIKE bmla_t.* #此變數樣板目前無使用
   DEFINE l_detail    RECORD LIKE bmlb_t.* #此變數樣板目前無使用
 
   DEFINE l_detail2    RECORD LIKE bmlc_t.* #此變數樣板目前無使用
 
 
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="reproduce.define"
  # DEFINE l_detail3    RECORD LIKE bmld_t.*   #161124-00048#1 2016/12/02 By 08734 mark
  #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_detail3 RECORD  #FAS組合限制檔
       bmldent LIKE bmld_t.bmldent, #企业编号
       bmld001 LIKE bmld_t.bmld001, #范本主件料号
       bmld002 LIKE bmld_t.bmld002, #特性
       bmld003 LIKE bmld_t.bmld003, #FAS群组
       bmld004 LIKE bmld_t.bmld004, #元件料号
       bmld005 LIKE bmld_t.bmld005, #受限FAS群组
       bmld006 LIKE bmld_t.bmld006 #受限元件料号
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)
   #end add-point   
   
   #add-point:Function前置處理  name="reproduce.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   LET g_master_insert = FALSE
   
   IF g_bmla_m.bmla001 IS NULL
   OR g_bmla_m.bmla002 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_bmla001_t = g_bmla_m.bmla001
   LET g_bmla002_t = g_bmla_m.bmla002
 
    
   LET g_bmla_m.bmla001 = ""
   LET g_bmla_m.bmla002 = ""
 
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_bmla_m.bmlaownid = g_user
      LET g_bmla_m.bmlaowndp = g_dept
      LET g_bmla_m.bmlacrtid = g_user
      LET g_bmla_m.bmlacrtdp = g_dept 
      LET g_bmla_m.bmlacrtdt = cl_get_current()
      LET g_bmla_m.bmlamodid = g_user
      LET g_bmla_m.bmlamoddt = cl_get_current()
 
 
 
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前 name="reproduce.head.b_input"
   
   #end add-point
   
   #顯示狀態(stus)圖片
   
   
   #清空key欄位的desc
      LET g_bmla_m.bmla001_desc = ''
   DISPLAY BY NAME g_bmla_m.bmla001_desc
   LET g_bmla_m.bmla001_desc_desc = ''
   DISPLAY BY NAME g_bmla_m.bmla001_desc_desc
 
   
   CALL abmm208_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_bmla_m.* TO NULL
      INITIALIZE g_bmlb_d TO NULL
      INITIALIZE g_bmlb2_d TO NULL
 
      #add-point:複製取消後 name="reproduce.cancel"
      INITIALIZE g_bmlb3_d TO NULL
      #end add-point
      CALL abmm208_show()
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code = 9001 
      LET g_errparam.popup = FALSE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmm208_set_act_visible()   
   CALL abmm208_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_bmla001_t = g_bmla_m.bmla001
   LET g_bmla002_t = g_bmla_m.bmla002
 
   
   #組合新增資料的條件
   LET g_add_browse = " bmlaent = " ||g_enterprise|| " AND",
                      " bmla001 = '", g_bmla_m.bmla001, "' "
                      ," AND bmla002 = '", g_bmla_m.bmla002, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL abmm208_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後 name="reproduce.after_reproduce"
   
   #end add-point
   
   CALL abmm208_idx_chk()
   
   LET g_data_owner = g_bmla_m.bmlaownid      
   LET g_data_dept  = g_bmla_m.bmlaowndp
   
   #功能已完成,通報訊息中心
   CALL abmm208_msgcentre_notify('reproduce')
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION abmm208_detail_reproduce()
   #add-point:delete段define(客製用) name="detail_reproduce.define_customerization"
   
   #end add-point    
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE bmlb_t.* #此變數樣板目前無使用
 
   DEFINE l_detail2    RECORD LIKE bmlc_t.* #此變數樣板目前無使用
 
 
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_reproduce.define"
  # DEFINE l_detail3    RECORD LIKE bmld_t.*  #161124-00048#1 2016/12/02 By 08734 mark
   #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_detail3 RECORD  #FAS組合限制檔
       bmldent LIKE bmld_t.bmldent, #企业编号
       bmld001 LIKE bmld_t.bmld001, #范本主件料号
       bmld002 LIKE bmld_t.bmld002, #特性
       bmld003 LIKE bmld_t.bmld003, #FAS群组
       bmld004 LIKE bmld_t.bmld004, #元件料号
       bmld005 LIKE bmld_t.bmld005, #受限FAS群组
       bmld006 LIKE bmld_t.bmld006 #受限元件料号
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)

   #end add-point    
   
   #add-point:Function前置處理  name="detail_reproduce.pre_function"
   
   #end add-point
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE abmm208_detail
   
   #add-point:單身複製前1 name="detail_reproduce.body.table1.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM bmlb_t
    WHERE bmlbent = g_enterprise AND bmlb001 = g_bmla001_t
     AND bmlb002 = g_bmla002_t
 
    INTO TEMP abmm208_detail
 
   #將key修正為調整後   
   UPDATE abmm208_detail 
      #更新key欄位
      SET bmlb001 = g_bmla_m.bmla001
          , bmlb002 = g_bmla_m.bmla002
 
      #更新共用欄位
      
 
   #add-point:單身修改前 name="detail_reproduce.body.table1.b_update"
   
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO bmlb_t SELECT * FROM abmm208_detail
   
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1 name="detail_reproduce.body.table1.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE abmm208_detail
   
   #add-point:單身複製後1 name="detail_reproduce.body.table1.a_insert"
   
   #end add-point
 
 
   
   #add-point:單身複製前 name="detail_reproduce.body.table2.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM bmlc_t 
    WHERE bmlcent = g_enterprise AND bmlc001 = g_bmla001_t
    AND bmlc002 = g_bmla002_t   
 
    INTO TEMP abmm208_detail
 
   #將key修正為調整後   
   UPDATE abmm208_detail SET bmlc001 = g_bmla_m.bmla001
                                       , bmlc002 = g_bmla_m.bmla002
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table2.b_update"
   
   #end add-point    
  
   #將資料塞回原table   
   INSERT INTO bmlc_t SELECT * FROM abmm208_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table2.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE abmm208_detail
   
   LET g_data_owner = g_bmla_m.bmlaownid      
   LET g_data_dept  = g_bmla_m.bmlaowndp
   
   #add-point:單身複製後 name="detail_reproduce.body.table2.a_insert"
   #CREATE TEMP TABLE
   LET ls_sql = 
      "CREATE GLOBAL TEMPORARY TABLE abmm208_detail AS ",
     # "SELECT * FROM bmld_t "  #161124-00048#1 2016/12/02 By 08734 mark
      "SELECT bmldent,bmld001,bmld002,bmld003,bmld004,bmld005,bmld006 FROM bmld_t "  #161124-00048#1 2016/12/02 By 08734 add
   PREPARE repro_tbl3 FROM ls_sql
   EXECUTE repro_tbl3
   FREE repro_tbl3
   #將符合條件的資料丟入TEMP TABLE
   INSERT INTO abmm208_detail SELECT * FROM bmld_t
                                         WHERE bmldent = g_enterprise AND bmld001 = g_bmla001_t
                                         AND bmld002 = g_bmla002_t
   #將key修正為調整後   
   UPDATE abmm208_detail SET bmld001 = g_bmla_m.bmla001
                                       , bmld002 = g_bmla_m.bmla002
   #將資料塞回原table   
   INSERT INTO bmld_t SELECT * FROM abmm208_detail
   #刪除TEMP TABLE
   DROP TABLE abmm208_detail
   #end add-point
 
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_bmla001_t = g_bmla_m.bmla001
   LET g_bmla002_t = g_bmla_m.bmla002
 
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.delete" >}
#+ 資料刪除
PRIVATE FUNCTION abmm208_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   
   #end add-point     
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete.pre_function"
   
   #end add-point
   
   IF g_bmla_m.bmla001 IS NULL
   OR g_bmla_m.bmla002 IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   
   
   CALL s_transaction_begin()
 
   OPEN abmm208_cl USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN abmm208_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE abmm208_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE abmm208_master_referesh USING g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmla_m.bmla001,g_bmla_m.bmla002, 
       g_bmla_m.bmla003,g_bmla_m.bmla004,g_bmla_m.bmla005,g_bmla_m.bmlaownid,g_bmla_m.bmlaowndp,g_bmla_m.bmlacrtid, 
       g_bmla_m.bmlacrtdp,g_bmla_m.bmlacrtdt,g_bmla_m.bmlamodid,g_bmla_m.bmlamoddt,g_bmla_m.bmla001_desc, 
       g_bmla_m.bmla001_desc_desc,g_bmla_m.bmlaownid_desc,g_bmla_m.bmlaowndp_desc,g_bmla_m.bmlacrtid_desc, 
       g_bmla_m.bmlacrtdp_desc,g_bmla_m.bmlamodid_desc
   
   
   #檢查是否允許此動作
   IF NOT abmm208_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_bmla_m_mask_o.* =  g_bmla_m.*
   CALL abmm208_bmla_t_mask()
   LET g_bmla_m_mask_n.* =  g_bmla_m.*
   
   CALL abmm208_show()
   
   #add-point:delete段before ask name="delete.before_ask"
   
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前 name="delete.head.b_delete"
      
      #end add-point   
      
      #應用 a47 樣板自動產生(Version:4)
      #刪除相關文件
      CALL abmm208_set_pk_array()
      #add-point:相關文件刪除前 name="delete.befroe.related_document_remove"
      
      #end add-point   
      CALL cl_doc_remove()  
 
 
 
  
  
      #資料備份
      LET g_bmla001_t = g_bmla_m.bmla001
      LET g_bmla002_t = g_bmla_m.bmla002
 
 
      DELETE FROM bmla_t
       WHERE bmlaent = g_enterprise AND bmla001 = g_bmla_m.bmla001
         AND bmla002 = g_bmla_m.bmla002
 
       
      #add-point:單頭刪除中 name="delete.head.m_delete"
      
      #end add-point
       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_bmla_m.bmla001,":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF
      
      #add-point:單頭刪除後 name="delete.head.a_delete"
      
      #end add-point
  
      #add-point:單身刪除前 name="delete.body.b_delete"
      
      #end add-point
      
      DELETE FROM bmlb_t
       WHERE bmlbent = g_enterprise AND bmlb001 = g_bmla_m.bmla001
         AND bmlb002 = g_bmla_m.bmla002
 
 
      #add-point:單身刪除中 name="delete.body.m_delete"
      
      #end add-point
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF    
 
      #add-point:單身刪除後 name="delete.body.a_delete"
      
      #end add-point
      
            
                                                               
 
 
      #add-point:單身刪除前 name="delete.body.b_delete2"
      
      #end add-point
      DELETE FROM bmlc_t
       WHERE bmlcent = g_enterprise AND
             bmlc001 = g_bmla_m.bmla001 AND bmlc002 = g_bmla_m.bmla002
      #add-point:單身刪除中 name="delete.body.m_delete2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete2"
      DELETE FROM bmld_t
       WHERE bmldent = g_enterprise AND
             bmld001 = g_bmla_m.bmla001 AND bmld002 = g_bmla_m.bmla002
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
 
         CALL s_transaction_end('N','0')
         RETURN
      END IF 
      CALL g_bmlb3_d.clear() #下面没处写，写上面
      #end add-point
 
 
      
      #修改歷程記錄(刪除)
      LET g_log1 = util.JSON.stringify(g_bmla_m)   #(ver:78)
      IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:78)
         CLOSE abmm208_cl
         CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL g_bmlb_d.clear() 
      CALL g_bmlb2_d.clear()       
 
     
      CALL abmm208_ui_browser_refresh()  
      #CALL abmm208_ui_headershow()  
      #CALL abmm208_ui_detailshow()
 
      #add-point:多語言刪除 name="delete.lang.before_delete"
      
      #end add-point
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
      
 
   
      #add-point:多語言刪除 name="delete.lang.delete"
      
      #end add-point
      
      IF g_browser_cnt > 0 THEN 
         #CALL abmm208_browser_fill("")
         CALL abmm208_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
      
      CALL s_transaction_end('Y','0')
   ELSE
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE abmm208_cl
 
   #功能已完成,通報訊息中心
   CALL abmm208_msgcentre_notify('delete')
    
END FUNCTION
 
{</section>}
 
{<section id="abmm208.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION abmm208_b_fill()
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   
   #end add-point     
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="b_fill.pre_function"
   
   #end add-point
   
   #清空第一階單身
   CALL g_bmlb_d.clear()
 
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   CALL g_bmlb3_d.clear()

   #end add-point
   
   #判斷是否填充
   IF abmm208_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.long_sql_if"
      
      #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT bmlb004,bmlb003,bmlb005,bmlb006,bmlb007,bmlb008 ,t1.oocql004 , 
             t2.oocql004 FROM bmlb_t",   
                     " INNER JOIN bmla_t ON bmlaent = " ||g_enterprise|| " AND bmla001 = bmlb001 ",
                     " AND bmla002 = bmlb002 ",
 
                     #"",
                     " LEFT JOIN bmlc_t ON bmlbent = bmlcent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003 ",
                     "",
                     #下層單身所需的join條件
                     " ",
 
 
                                    " LEFT JOIN oocql_t t1 ON t1.oocqlent="||g_enterprise||" AND t1.oocql001='1112' AND t1.oocql002=bmlb003 AND t1.oocql003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t2 ON t2.oocqlent="||g_enterprise||" AND t2.oocql001='273' AND t2.oocql002=bmlb008 AND t2.oocql003='"||g_dlang||"' ",
 
                     " WHERE bmlbent=? AND bmlb001=? AND bmlb002=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body.fill_sql"
 
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
            IF NOT cl_null(g_wc2_table2) THEN 
      LET g_sql = g_sql CLIPPED," AND ", g_wc2_table2 CLIPPED
   END IF 
 
         
         LET g_sql = g_sql, " ORDER BY bmlb_t.bmlb003"
         
         #add-point:單身填充控制 name="b_fill.sql"
      #g_sql 重新定义
      LET g_sql = "SELECT  UNIQUE bmlb004,bmlb003,bmlb005,bmlb006,bmlb007,bmlb008 ,t1.oocql004,t2.oocql004 FROM bmlb_t", 
                  " INNER JOIN bmla_t ON bmlaent = bmlbent AND bmla001 = bmlb001 AND bmla002 = bmlb002 ",
                  " LEFT JOIN bmlc_t ON bmlbent = bmlcent AND bmlb001 = bmlc001 AND bmlb002 = bmlc002 AND bmlb003 = bmlc003 ",
                  " LEFT JOIN bmld_t ON bmlbent = bmldent AND bmlb001 = bmld001 AND bmlb002 = bmld002 AND bmlb003 = bmld003 ",
                  " LEFT JOIN oocql_t t1 ON t1.oocqlent='"||g_enterprise||"' AND t1.oocql001='1112' AND t1.oocql002=bmlb003 AND t1.oocql003='"||g_dlang||"' ",
                  " LEFT JOIN oocql_t t2 ON t2.oocqlent='"||g_enterprise||"' AND t2.oocql001='273' AND t2.oocql002=bmlb008 AND t2.oocql003='"||g_dlang||"' ",
                  " WHERE bmlbent=? AND bmlb001=? AND bmlb002=?"
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      IF NOT cl_null(g_wc2_table3) THEN 
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table3 CLIPPED
      END IF
      #end add-point
      IF NOT cl_null(g_wc2_table1) THEN
         LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
      END IF
      
      #子單身的WC
      IF NOT cl_null(g_wc2_table2) THEN 
         LET g_sql = g_sql CLIPPED," AND ", g_wc2_table2 CLIPPED
      END IF 

      LET g_sql = g_sql, " ORDER BY bmlb_t.bmlb004"
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmm208_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR abmm208_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
   #  OPEN b_fill_cs USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002   #(ver:78)
                                               
      FOREACH b_fill_cs USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002 INTO g_bmlb_d[l_ac].bmlb004, 
          g_bmlb_d[l_ac].bmlb003,g_bmlb_d[l_ac].bmlb005,g_bmlb_d[l_ac].bmlb006,g_bmlb_d[l_ac].bmlb007, 
          g_bmlb_d[l_ac].bmlb008,g_bmlb_d[l_ac].bmlb003_desc,g_bmlb_d[l_ac].bmlb008_desc   #(ver:78) 
 
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill.fill"
         
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
    
 
   
   #add-point:browser_fill段其他table處理 name="browser_fill.other_fill"

   CALL g_bmlb3_d.deleteElement(g_bmlb3_d.getLength()) #这个不要加貌似 包含下面的2
   #end add-point
   
   CALL g_bmlb_d.deleteElement(g_bmlb_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE abmm208_pb
 
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO g_bmlb_d.getLength()
      LET g_bmlb_d_mask_o[l_ac].* =  g_bmlb_d[l_ac].*
      CALL abmm208_bmlb_t_mask()
      LET g_bmlb_d_mask_n[l_ac].* =  g_bmlb_d[l_ac].*
   END FOR
   
   LET g_bmlb2_d_mask_o.* =  g_bmlb2_d.*
   FOR l_ac = 1 TO g_bmlb2_d.getLength()
      LET g_bmlb2_d_mask_o[l_ac].* =  g_bmlb2_d[l_ac].*
      CALL abmm208_bmlc_t_mask()
      LET g_bmlb2_d_mask_n[l_ac].* =  g_bmlb2_d[l_ac].*
   END FOR
 
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION abmm208_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"
      
      #end add-point    
      DELETE FROM bmlb_t
       WHERE bmlbent = g_enterprise AND
         bmlb001 = ps_keys_bak[1] AND bmlb002 = ps_keys_bak[2] AND bmlb003 = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ":",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_bmlb_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete2"
      
      #end add-point    
      DELETE FROM bmlc_t
       WHERE bmlcent = g_enterprise AND
             bmlc001 = ps_keys_bak[1] AND bmlc002 = ps_keys_bak[2] AND bmlc003 = ps_keys_bak[3] AND bmlc004 = ps_keys_bak[4]
      #add-point:delete_b段刪除中 name="delete_b.m_delete2"
         AND bmlc004 = ps_keys_bak[4]
         AND bmlcent = g_enterprise
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      IF ps_page <> "'2'" THEN 
         CALL g_bmlb2_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete2"
      
      #end add-point    
   END IF
 
 
   
   #add-point:delete_b段other name="delete_b.other"
   LET ls_group = "'3',"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN    
      DELETE FROM bmld_t
       WHERE bmld001 = ps_keys_bak[1] AND bmld002 = ps_keys_bak[2] AND bmld003 = ps_keys_bak[3] AND bmld004 = ps_keys_bak[4]
         AND bmld005 = ps_keys_bak[5] AND bmld006 = ps_keys_bak[6]
         AND bmldent = g_enterprise       
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF

   END IF
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION abmm208_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="insert_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"
      
      #end add-point 
      INSERT INTO bmlb_t
                  (bmlbent,
                   bmlb001,bmlb002,
                   bmlb003
                   ,bmlb004,bmlb005,bmlb006,bmlb007,bmlb008) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_bmlb_d[g_detail_idx].bmlb004,g_bmlb_d[g_detail_idx].bmlb005,g_bmlb_d[g_detail_idx].bmlb006, 
                       g_bmlb_d[g_detail_idx].bmlb007,g_bmlb_d[g_detail_idx].bmlb008)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert"
      
      #end add-point 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_bmlb_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"
      
      #end add-point 
   END IF
   
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert2"
      
      #end add-point 
      INSERT INTO bmlc_t
                  (bmlcent,
                   bmlc001,bmlc002,bmlc003,
                   bmlc004
                   ,bmlc005,bmlc006,bmlc007,bmlc008) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4]
                   ,g_bmlb2_d[g_detail_idx2].bmlc005,g_bmlb2_d[g_detail_idx2].bmlc006,g_bmlb2_d[g_detail_idx2].bmlc007, 
                       g_bmlb2_d[g_detail_idx2].bmlc008)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      IF ps_page <> "'2'" THEN 
         CALL g_bmlb2_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert2"
      
      #end add-point
   END IF
 
 
   
   #add-point:insert_b段other name="insert_b.other"
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      INSERT INTO bmld_t
                  (bmldent,
                   bmld001,bmld002,bmld003,bmld004,
                   bmld005,bmld006
                   ) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4],ps_keys[5],ps_keys[6]
                   )
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = FALSE 
         CALL cl_err()
 
      END IF
   END IF
   #end add-point     
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION abmm208_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   
   #end add-point   
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   DEFINE l_success        LIKE type_t.num5
   DEFINE l_cnt            LIKE type_t.num5
   #end add-point   
   
   #add-point:Function前置處理  name="update_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmlb_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update"
      
      #end add-point 
      
      #將遮罩欄位還原
      CALL abmm208_bmlb_t_mask_restore('restore_mask_o')
               
      UPDATE bmlb_t 
         SET (bmlb001,bmlb002,
              bmlb003
              ,bmlb004,bmlb005,bmlb006,bmlb007,bmlb008) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_bmlb_d[g_detail_idx].bmlb004,g_bmlb_d[g_detail_idx].bmlb005,g_bmlb_d[g_detail_idx].bmlb006, 
                  g_bmlb_d[g_detail_idx].bmlb007,g_bmlb_d[g_detail_idx].bmlb008) 
         WHERE bmlbent = g_enterprise AND bmlb001 = ps_keys_bak[1] AND bmlb002 = ps_keys_bak[2] AND bmlb003 = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update"
      
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlb_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlb_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL abmm208_bmlb_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      
      #end add-point  
   END IF
   
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   
 
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmlc_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update2"
      
      #end add-point
      
      #將遮罩欄位還原
      CALL abmm208_bmlc_t_mask_restore('restore_mask_o')
               
      UPDATE bmlc_t 
         SET (bmlc001,bmlc002,bmlc003,
              bmlc004
              ,bmlc005,bmlc006,bmlc007,bmlc008) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4]
              ,g_bmlb2_d[g_detail_idx2].bmlc005,g_bmlb2_d[g_detail_idx2].bmlc006,g_bmlb2_d[g_detail_idx2].bmlc007, 
                  g_bmlb2_d[g_detail_idx2].bmlc008) 
         WHERE bmlcent = g_enterprise AND bmlc001 = ps_keys_bak[1] AND bmlc002 = ps_keys_bak[2] AND bmlc003 = ps_keys_bak[3] AND bmlc004 = ps_keys_bak[4]
      #add-point:update_b段修改中 name="update_b.m_update2"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlc_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL abmm208_bmlc_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update2"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
 
   
   #add-point:update_b段other name="update_b.other"
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmld_t" THEN    
      UPDATE bmld_t 
         SET (bmld001,bmld002,bmld003,bmld004,
              bmld005,bmld006
              ) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3],ps_keys[4],ps_keys[5],ps_keys[6]
              ) 
         WHERE bmldent = g_enterprise AND bmld001 = ps_keys_bak[1] AND bmld002 = ps_keys_bak[2] AND bmld003 = ps_keys_bak[3] AND bmld004 = ps_keys_bak[4] AND bmld005 = ps_keys_bak[5] AND bmld006 = ps_keys_bak[6] 
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmld_t" 
            LET g_errparam.code   = "std-00009" 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
            CALL s_transaction_end('N','0')
         WHEN SQLCA.sqlcode #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmld_t" 
            LET g_errparam.code   = SQLCA.sqlcode 
            LET g_errparam.popup  = TRUE 
            CALL cl_err()
 
            CALL s_transaction_end('N','0')
         OTHERWISE
            
      END CASE 
   END IF

   #bmlb修改后连动
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table = "bmlb_t" THEN     
      LET l_success = TRUE

      UPDATE bmlc_t SET (bmlc003) = (ps_keys[3])
       WHERE bmlcent = g_enterprise
         AND bmlc001 = ps_keys_bak[1]
         AND bmlc002 = ps_keys_bak[2]
         AND bmlc003 = ps_keys_bak[3]
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmlc_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET l_success = FALSE          
      END IF

      UPDATE bmld_t SET (bmld003) = (ps_keys[3])
       WHERE bmldent = g_enterprise
         AND bmld001 = ps_keys_bak[1]
         AND bmld002 = ps_keys_bak[2]
         AND bmld003 = ps_keys_bak[3]
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET l_success = FALSE          
      END IF
      
      IF l_success = FALSE THEN
         CALL s_transaction_end('N','0')
      END IF
   END IF

   #bmlc修改后连动
   LET ls_group = "'2',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table = "bmlc_t" THEN     
      LET l_success = TRUE
      UPDATE bmld_t SET (bmld004) = (ps_keys[4])
       WHERE bmldent = g_enterprise
         AND bmld001 = ps_keys_bak[1]
         AND bmld002 = ps_keys_bak[2]
         AND bmld003 = ps_keys_bak[3]
         AND bmld004 = ps_keys_bak[4]
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET l_success = FALSE          
      END IF
      IF l_success = FALSE THEN
         CALL s_transaction_end('N','0')
      END IF
   END IF
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.key_update_b" >}
#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION abmm208_key_update_b(ps_keys_bak,ps_table)
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_key       DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_update_b.pre_function"
   
   #end add-point
   
   #如果是上層單身則進行update
   IF ps_table = 'bmlb_t' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update2"
      
      #end add-point
      
      UPDATE bmlc_t 
         SET (bmlc001,bmlc002,bmlc003) 
              = 
             (g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003) 
         WHERE bmlcent = g_enterprise AND
               bmlc001 = ps_keys_bak[1] AND bmlc002 = ps_keys_bak[2] AND bmlc003 = ps_keys_bak[3]
 
      #add-point:update_b段修改中 name="key_update_b.m_update2"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update2"
      
      #end add-point
   END IF
 
 
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.key_delete_b" >}
#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION abmm208_key_delete_b(ps_keys_bak,ps_table)
   #add-point:delete_b段define(客製用) name="key_delete_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_delete_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_delete_b.pre_function"
   
   #end add-point
   
   #如果是上層單身則進行delete
   IF ps_table = 'bmlb_t' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete2"
      
      #end add-point
      
      DELETE FROM bmlc_t 
            WHERE bmlcent = g_enterprise AND
                  bmlc001 = ps_keys_bak[1] AND bmlc002 = ps_keys_bak[2] AND bmlc003 = ps_keys_bak[3]
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete2"
      
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmlc_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
       
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete2"
      #add 150129
      DELETE FROM bmld_t
       WHERE bmldent = g_enterprise
         AND bmld001 = ps_keys_bak[1]
         AND bmld002 = ps_keys_bak[2]
         AND bmld003 = ps_keys_bak[3]
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmld_t" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         CALL s_transaction_end('N','0')
         RETURN FALSE
      END IF
      #add 150129 end
      #end add-point
   END IF
 
 
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION abmm208_lock_b(ps_table,ps_page)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   
   #end add-point   
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   
   #end add-point
    
   #先刷新資料
   #CALL abmm208_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "bmlb_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN abmm208_bcl USING g_enterprise,
                                       g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003  
                                               
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmm208_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
 
   
   #鎖定整組table
   #LET ls_group = "'2',"
   #僅鎖定自身table
   LET ls_group = "bmlc_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN abmm208_bcl2 USING g_enterprise,
                                             g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003, 
 
                                             g_bmlb2_d[g_detail_idx2].bmlc004
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmm208_bcl2:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
 
   
   #add-point:lock_b段other name="lock_b.other"
   #鎖定整組table
   #LET ls_group = "'3',"
   #僅鎖定自身table
   LET ls_group = "bmld_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN abmm208_bcl3 USING g_enterprise,
                                             g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003,g_bmlb2_d[g_detail_idx2].bmlc004,
 
                                             g_bmlb3_d[g_detail_idx3].bmld005,g_bmlb3_d[g_detail_idx3].bmld006 
 
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmm208_bcl3" 
         LET g_errparam.code   = SQLCA.sqlcode 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
 
         RETURN FALSE
      END IF
   END IF
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION abmm208_unlock_b(ps_table,ps_page)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   
   #end add-point  
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   
   #end add-point
    
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmm208_bcl
   END IF
   
 
   
   LET ls_group = "'2',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmm208_bcl2
   END IF
 
 
 
   #add-point:unlock_b段other name="unlock_b.other"
   LET ls_group = "'3',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmm208_bcl3
   END IF

   #end add-point  
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION abmm208_set_entry(p_cmd)
   #add-point:set_entry段define(客製用) name="set_entry.define_customerization"
   
   #end add-point       
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry.define"
   
   #end add-point       
   
   #add-point:Function前置處理  name="set_entry.pre_function"
   
   #end add-point
   
   CALL cl_set_comp_entry("",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("bmla001,bmla002",TRUE)
      CALL cl_set_comp_entry("",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry段欄位控制 name="set_entry.field_control"
      
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後 name="set_entry.after_control"
   
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION abmm208_set_no_entry(p_cmd)
   #add-point:set_no_entry段define(客製用) name="set_no_entry.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_no_entry.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("bmla001,bmla002",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry段欄位控制 name="set_no_entry.field_control"
      
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("",FALSE)
   END IF 
 
#  IF p_cmd = 'u' THEN  #docdt欄位依照設定關閉(FALSE則為設定不同意修正) #(ver:78)
      IF NOT cl_chk_update_docdt() THEN
         CALL cl_set_comp_entry("",FALSE)
      END IF
#  END IF 
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION abmm208_set_entry_b(p_cmd)
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   
   #end add-point
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制 name="set_entry_b.field_control"
      
      #end add-point  
   END IF
   
   #add-point:set_entry_b段 name="set_entry_b.set_entry_b"
   #bmlb
   CALL cl_set_comp_entry("bmlb008",TRUE)
   
   #bmlc
   CALL cl_set_comp_entry("bmlc008",TRUE)
   #end add-point  
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION abmm208_set_no_entry_b(p_cmd)
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   
   #end add-point    
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   DEFINE l_imaa005  LIKE imaa_t.imaa005
   #end add-point    
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段 name="set_no_entry_b.set_no_entry_b"
   #bmlb
   #料件有没有做特征管理
   SELECT imaa005 INTO l_imaa005 FROM imaa_t
    WHERE imaaent = g_enterprise
      AND imaa001 = g_bmla_m.bmla001
   IF cl_null(l_imaa005) THEN
      CALL cl_set_comp_entry("bmlb008",FALSE)
   END IF
   #FAS群组若设置允许多选
   IF g_bmlb_d[l_ac].bmlb005 = 'Y' THEN
      CALL cl_set_comp_entry("bmlb008",FALSE)
   END IF
   #bmlc
   IF cl_null(g_bmlb_d[g_detail_idx].bmlb008) THEN
      CALL cl_set_comp_entry("bmlc008",FALSE)
   END IF
   #end add-point     
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION abmm208_set_act_visible()
   #add-point:set_act_visible段define(客製用) name="set_act_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible.define"
   
   #end add-point   
   #add-point:set_act_visible段 name="set_act_visible.set_act_visible"
   CALL cl_set_act_visible("gen_b",TRUE) 
   CALL cl_set_act_visible("modify,modify_detail,delete",TRUE)  #161216-00029#9 add
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION abmm208_set_act_no_visible()
   #add-point:set_act_no_visible段define(客製用) name="set_act_no_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible.define"
   DEFINE l_bmaastus  LIKE bmaa_t.bmaastus    #161216-00029#9 add   
   #end add-point   
   #add-point:set_act_no_visible段 name="set_act_no_visible.set_act_no_visible"
   #161216-00029#9 add(s)
   SELECT bmaastus INTO l_bmaastus FROM bmaa_t 
    WHERE bmaaent = g_enterprise
      AND bmaasite = 'ALL'
      AND bmaa001 = g_bmla_m.bmla001
      AND bmaa002 = g_bmla_m.bmla002
   IF l_bmaastus = 'VO' THEN
      CALL cl_set_act_visible("modify,modify_detail,delete,gen_b",FALSE)
   END IF
   #161216-00029#9 add(e)   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION abmm208_set_act_visible_b()
   #add-point:set_act_visible_b段define(客製用) name="set_act_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible_b.define"
   
   #end add-point   
   #add-point:set_act_visible_b段 name="set_act_visible_b.set_act_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION abmm208_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define(客製用) name="set_act_no_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible_b.define"
   
   #end add-point   
   #add-point:set_act_no_visible_b段 name="set_act_no_visible_b.set_act_no_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION abmm208_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   
   #end add-point  
   DEFINE li_idx     LIKE type_t.num10
   DEFINE li_cnt     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE ls_where   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="default_search.before"
   
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " bmla001 = '", g_argv[01], "' AND "
   END IF
   
   IF NOT cl_null(g_argv[02]) THEN
      LET ls_wc = ls_wc, " bmla002 = '", g_argv[02], "' AND "
   END IF
 
   
   #add-point:default_search段after sql name="default_search.after_sql"
   
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      
      #預設查詢條件
      CALL cl_qbe_get_default_qryplan() RETURNING ls_where
      IF NOT cl_null(ls_where) THEN
         CALL util.JSON.parse(ls_where, la_wc)
         INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
 
         FOR li_idx = 1 TO la_wc.getLength()
            CASE
               WHEN la_wc[li_idx].tableid = "bmla_t" 
                  LET g_wc = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "bmlb_t" 
                  LET g_wc2_table1 = la_wc[li_idx].wc
 
               WHEN la_wc[li_idx].tableid = "EXTENDWC"
                  LET g_wc2_extend = la_wc[li_idx].wc
            END CASE
         END FOR
         IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
 
            OR NOT cl_null(g_wc2_extend)
            THEN
            #組合g_wc2
            IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
               LET g_wc2 = g_wc2_table1
            END IF
 
            IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
            END IF
         
            IF g_wc2.subString(1,5) = " AND " THEN
               LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
            END IF
         END IF
      END IF
    
      IF cl_null(g_wc) AND cl_null(g_wc2) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.state_change" >}
   
 
{</section>}
 
{<section id="abmm208.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION abmm208_idx_chk()
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   
   #end add-point  
   #add-point:idx_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_bmlb_d.getLength() THEN
         LET g_detail_idx = g_bmlb_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_bmlb_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_bmlb_d.getLength() TO FORMONLY.cnt
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx2 = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx2 > g_bmlb2_d.getLength() THEN
         LET g_detail_idx2 = g_bmlb2_d.getLength()
      END IF
      IF g_detail_idx2 = 0 AND g_bmlb2_d.getLength() <> 0 THEN
         LET g_detail_idx2 = 1
      END IF
      DISPLAY g_detail_idx2 TO FORMONLY.idx
      DISPLAY g_bmlb2_d.getLength() TO FORMONLY.cnt
   END IF
 
   
   #add-point:idx_chk段other name="idx_chk.other"
   IF g_current_page = 3 THEN
      LET g_detail_idx3 = g_curr_diag.getCurrentRow("s_detail3")
      IF g_detail_idx3 > g_bmlb3_d.getLength() THEN
         LET g_detail_idx3 = g_bmlb3_d.getLength()
      END IF
      IF g_detail_idx3 = 0 AND g_bmlb3_d.getLength() <> 0 THEN
         LET g_detail_idx3 = 1
      END IF
      DISPLAY g_detail_idx3 TO FORMONLY.idx
      DISPLAY g_bmlb3_d.getLength() TO FORMONLY.cnt
   END IF
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION abmm208_b_fill2(pi_idx)
   #add-point:b_fill2段define(客製用) name="b_fill2.define_customerization"
   
   #end add-point
   DEFINE pi_idx                 LIKE type_t.num10
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"
   
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
   LET li_detail_idx_tmp = g_detail_idx
   
   IF abmm208_fill_chk(2) THEN
      IF (pi_idx = 2 OR pi_idx = 0 ) AND g_bmlb_d.getLength() > 0 THEN
               CALL g_bmlb2_d.clear()
 
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[1]
         
         LET g_sql = "SELECT  DISTINCT bmlc004,bmlc005,bmlc006,bmlc007,bmlc008 ,t3.imaal003 ,t4.imaal004 FROM bmlc_t", 
                 
                     "",
                                    " LEFT JOIN imaal_t t3 ON t3.imaalent="||g_enterprise||" AND t3.imaal001=bmlc004 AND t3.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t4 ON t4.imaalent="||g_enterprise||" AND t4.imaal001=bmlc004 AND t4.imaal002='"||g_dlang||"' ",
 
                     " WHERE bmlcent=? AND bmlc001=? AND bmlc002=? AND bmlc003=?"
         
         IF NOT cl_null(g_wc2_table2) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  bmlc_t.bmlc004" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill2"
         
         #end add-point
         
         #先清空資料
               CALL g_bmlb2_d.clear()
 
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmm208_pb2 FROM g_sql
         DECLARE b_fill_curs2 CURSOR FOR abmm208_pb2
         
      #  OPEN b_fill_curs2 USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003  
      #      #(ver:78)
         LET l_ac = 1
         FOREACH b_fill_curs2 USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003 INTO g_bmlb2_d[l_ac].bmlc004, 
             g_bmlb2_d[l_ac].bmlc005,g_bmlb2_d[l_ac].bmlc006,g_bmlb2_d[l_ac].bmlc007,g_bmlb2_d[l_ac].bmlc008, 
             g_bmlb2_d[l_ac].bmlc004_desc,g_bmlb2_d[l_ac].bmlc004_desc_desc   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill2"
            
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
               CALL g_bmlb2_d.deleteElement(g_bmlb2_d.getLength())
 
      END IF
   END IF
 
 
      
   LET g_bmlb2_d_mask_o.* =  g_bmlb2_d.*
   FOR l_ac = 1 TO g_bmlb2_d.getLength()
      LET g_bmlb2_d_mask_o[l_ac].* =  g_bmlb2_d[l_ac].*
      CALL abmm208_bmlc_t_mask()
      LET g_bmlb2_d_mask_n[l_ac].* =  g_bmlb2_d[l_ac].*
   END FOR
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"
   IF abmm208_fill_chk(3) THEN
      IF (pi_idx = 3 OR pi_idx = 0 ) AND g_bmlb2_d.getLength() > 0 THEN
               CALL g_bmlb3_d.clear()
 
         LET g_sql = "SELECT  UNIQUE bmld005,bmld006 ,t4.oocql004 ,t5.imaal003 ,t6.imaal004 FROM bmld_t", 
                                    " LEFT JOIN oocql_t t4 ON t4.oocqlent='"||g_enterprise||"' AND t4.oocql001='1112' AND t4.oocql002=bmld005 AND t4.oocql003='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t5 ON t5.imaalent='"||g_enterprise||"' AND t5.imaal001=bmld006 AND t5.imaal002='"||g_dlang||"' ",
               " LEFT JOIN imaal_t t6 ON t6.imaalent='"||g_enterprise||"' AND t6.imaal001=bmld006 AND t6.imaal002='"||g_dlang||"' ",
                     " WHERE bmldent=? AND bmld001=? AND bmld002=? AND bmld003=? AND bmld004=?"
         
         IF NOT cl_null(g_wc2_table3) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table3 CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  bmld_t.bmld005,bmld_t.bmld006" 
                                     
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmm208_pb3 FROM g_sql
         DECLARE b_fill_curs3 CURSOR FOR abmm208_pb3
         
         IF cl_null(g_detail_idx2) THEN LET g_detail_idx2 = 1 END IF
         OPEN b_fill_curs3 USING g_enterprise,g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003, g_bmlb2_d[g_detail_idx2].bmlc004
 
         LET l_ac = 1
         FOREACH b_fill_curs3 INTO g_bmlb3_d[l_ac].bmld005,g_bmlb3_d[l_ac].bmld006,g_bmlb3_d[l_ac].bmld005_desc, 
             g_bmlb3_d[l_ac].bmld006_desc,g_bmlb3_d[l_ac].bmld006_desc_desc 
            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:" 
               LET g_errparam.code   = SQLCA.sqlcode 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               EXIT FOREACH
            END IF
                       
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code   = 9035 
               LET g_errparam.popup  = TRUE 
               CALL cl_err()
 
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
         CALL g_bmlb3_d.deleteElement(g_bmlb3_d.getLength())
 
      END IF
   END IF
   #end add-point
    
   LET l_ac = li_ac
   
   CALL abmm208_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION abmm208_fill_chk(ps_idx)
   #add-point:fill_chk段define(客製用) name="fill_chk.define_customerization"
   
   #end add-point
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fill_chk.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="fill_chk.before_chk"
   ##全部為1=1 or null時回傳true
   #IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
   #   (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1')  AND 
   #   (cl_null(g_wc2_table3) OR g_wc2_table3.trim() = '1=1') THEN
   #   RETURN TRUE
   #END IF
   #
   ##第一單身
   #IF ps_idx = 1 AND
   #   ((NOT cl_null(g_wc2_table1) AND g_wc2_table1.trim() <> '1=1')  OR 
   #   (NOT cl_null(g_wc2_table2) AND g_wc2_table2.trim() <> '1=1')) THEN
   #   RETURN TRUE
   #END IF
   #
   ##根據wc判定是否需要填充
   #
   #IF ps_idx = 2 AND
   #   ((NOT cl_null(g_wc2_table1) AND g_wc2_table1.trim() <> '1=1') OR 
   #   (NOT cl_null(g_wc2_table2) AND g_wc2_table2.trim() <> '1=1')  OR 
   #   (NOT cl_null(g_wc2_table3) AND g_wc2_table3.trim() <> '1=1')) THEN
   #   RETURN TRUE
   #END IF
   #
   #IF ps_idx = 3 AND
   #   ((NOT cl_null(g_wc2_table2) AND g_wc2_table2.trim() <> '1=1') OR 
   #   (NOT cl_null(g_wc2_table3) AND g_wc2_table3.trim() <> '1=1')) THEN
   #   RETURN TRUE
   #END IF
   #
   #RETURN FALSE  #此段怎么写分析下  此处是原来产生的
   RETURN TRUE
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
      (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk name="fill_chk.other_chk"
      
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk name="fill_chk.after_chk"
   
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="abmm208.status_show" >}
PRIVATE FUNCTION abmm208_status_show()
   #add-point:status_show段define(客製用) name="status_show.define_customerization"
   
   #end add-point
   #add-point:status_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="status_show.define"
   
   #end add-point
   
   #add-point:status_show段status_show name="status_show.status_show"
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="abmm208.mask_functions" >}
&include "erp/abm/abmm208_mask.4gl"
 
{</section>}
 
{<section id="abmm208.signature" >}
   
 
{</section>}
 
{<section id="abmm208.set_pk_array" >}
   #應用 a51 樣板自動產生(Version:8)
#+ 給予pk_array內容
PRIVATE FUNCTION abmm208_set_pk_array()
   #add-point:set_pk_array段define name="set_pk_array.define_customerization"
   
   #end add-point
   #add-point:set_pk_array段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_pk_array.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="set_pk_array.before"
   
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_bmla_m.bmla001
   LET g_pk_array[1].column = 'bmla001'
   LET g_pk_array[2].values = g_bmla_m.bmla002
   LET g_pk_array[2].column = 'bmla002'
   
   #add-point:set_pk_array段之後 name="set_pk_array.after"
   
   #end add-point  
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="abmm208.other_dialog" readonly="Y" >}
   
 
{</section>}
 
{<section id="abmm208.msgcentre_notify" >}
#應用 a66 樣板自動產生(Version:6)
PRIVATE FUNCTION abmm208_msgcentre_notify(lc_state)
   #add-point:msgcentre_notify段define name="msgcentre_notify.define_customerization"
   
   #end add-point   
   DEFINE lc_state LIKE type_t.chr80
   #add-point:msgcentre_notify段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="msgcentre_notify.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="msgcentre_notify.pre_function"
   
   #end add-point
   
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = lc_state
 
   #PK資料填寫
   CALL abmm208_set_pk_array()
   #單頭資料填寫
   LET g_msgparam.data[1] = util.JSON.stringify(g_bmla_m)
 
   #add-point:msgcentre其他通知 name="msgcentre_notify.process"
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="abmm208.action_chk" >}
#+ 修改/刪除前行為檢查(是否可允許此動作), 若有其他行為須管控也可透過此段落
PRIVATE FUNCTION abmm208_action_chk()
   #add-point:action_chk段define(客製用) name="action_chk.define_customerization"
   
   #end add-point
   #add-point:action_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="action_chk.define"
   
   #end add-point
   
   #add-point:action_chk段action_chk name="action_chk.action_chk"
   
   #end add-point
      
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmm208.other_function" readonly="Y" >}

#检查栏位
PRIVATE FUNCTION abmm208_chk_column_a(p_column)
   DEFINE p_column      LIKE type_t.chr20
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE

   CASE p_column
      WHEN 'bmla001'
           IF cl_null(g_bmla_m.bmla001) THEN
              #此字段不可空白, 请输入数据!
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = "" 
              LET g_errparam.code   = "aoo-00052" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           #检查料件類別(imaa004)需等於T.範本
           SELECT COUNT(1) INTO l_cnt FROM imaa_t
            WHERE imaaent = g_enterprise
              AND imaa001 = g_bmla_m.bmla001
              AND imaa004 = 'T' #範本
           IF l_cnt = 0 THEN
              #此料件不存在，或料件类别不为'T 范本' ！请检查[料件主档维护作业 aimm200]后，输入'T 范本'类料件！
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = g_bmla_m.bmla001
              LET g_errparam.code   = "abm-00212" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           #检查是否在bom中
           SELECT COUNT(1) INTO l_cnt FROM bmaa_t
            WHERE bmaaent = g_enterprise
              AND bmaasite= 'ALL'
              AND bmaa001 = g_bmla_m.bmla001
           IF l_cnt = 0 THEN
              #無此料號的BOM資料
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = g_bmla_m.bmla001
              LET g_errparam.code   = "abm-00213" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           IF NOT cl_null(g_bmla_m.bmla002) THEN
              #检查範本主件料號+特性需存在abmm200內
              SELECT COUNT(1) INTO l_cnt FROM bmaa_t
               WHERE bmaaent = g_enterprise
                 AND bmaasite= 'ALL'
                 AND bmaa001 = g_bmla_m.bmla001
                 AND bmaa002 = g_bmla_m.bmla002
              IF l_cnt = 0 THEN
                 #无此料号+特性的BOM资料
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = "'",g_bmla_m.bmla001,"'+'",g_bmla_m.bmla002,"'"
                 LET g_errparam.code   = "abm-00214" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      WHEN 'bmla002'
           IF NOT cl_null(g_bmla_m.bmla001) AND NOT cl_null(g_bmla_m.bmla002) THEN
              #检查範本主件料號+特性需存在abmm200內
              SELECT COUNT(1) INTO l_cnt FROM bmaa_t
               WHERE bmaaent = g_enterprise
                 AND bmaasite= 'ALL'
                 AND bmaa001 = g_bmla_m.bmla001
                 AND bmaa002 = g_bmla_m.bmla002
              IF l_cnt = 0 THEN
                 #无此料号+特性的BOM资料
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = "'",g_bmla_m.bmla001,"'+'",g_bmla_m.bmla002,"'"
                 LET g_errparam.code   = "abm-00214" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      WHEN 'bmla001+bmla002'
           IF cl_null(g_bmla_m.bmla002) THEN LET g_bmla_m.bmla002 = ' ' END IF
           #检查範本主件料號+特性需存在abmm200內
           SELECT COUNT(1) INTO l_cnt FROM bmaa_t
            WHERE bmaaent = g_enterprise
              AND bmaasite= 'ALL'
              AND bmaa001 = g_bmla_m.bmla001
              AND bmaa002 = g_bmla_m.bmla002
           IF l_cnt = 0 THEN
              #无此料号+特性的BOM资料
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = "'",g_bmla_m.bmla001,"'+'",g_bmla_m.bmla002,"'"
              LET g_errparam.code   = "abm-00214" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      OTHERWISE
   END CASE

   RETURN r_success
END FUNCTION

#检查第一单身栏位
PRIVATE FUNCTION abmm208_chk_column_b(p_ac,p_column)
   DEFINE p_ac          LIKE type_t.num5  #传参为null或0 代表全体检查
   DEFINE p_column      LIKE type_t.chr20
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_imaa005     LIKE imaa_t.imaa005

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE
   LET g_today_dt = cl_get_current()
   
   CASE p_column
      WHEN 'bmlb004' #顺序
           #顺序不能重复
           SELECT COUNT(1) INTO l_cnt FROM bmlb_t
            WHERE bmlbent = g_enterprise
              AND bmlb001 = g_bmla_m.bmla001
              AND bmlb002 = g_bmla_m.bmla002
              AND bmlb004 = g_bmlb_d[p_ac].bmlb004
           IF l_cnt > 0 THEN
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "aps-00062" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlb003' #FAS群组
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb003) THEN
              IF NOT cl_null(g_bmlb_d_t.bmlb003) AND g_bmlb_d[p_ac].bmlb003 != g_bmlb_d_t.bmlb003 THEN
                 #bmlc有资料时不能随意修改
                 SELECT COUNT(1) INTO l_cnt FROM bmlc_t
                  WHERE bmlcent = g_enterprise
                    AND bmlc001 = g_bmla_m.bmla001
                    AND bmlc002 = g_bmla_m.bmla002
                    AND bmlc003 = g_bmlb_d_t.bmlb003
                 IF l_cnt > 0 THEN
                    #单身已存在元件明细，不可变更FAS群组！请先删除单身再作变更！
                    INITIALIZE g_errparam TO NULL 
                    LET g_errparam.extend = ""
                    LET g_errparam.code   = "abm-00222" 
                    LET g_errparam.popup  = TRUE 
                    CALL cl_err()
                    LET r_success = FALSE
                    RETURN r_success
                 END IF
              END IF
              CALL s_azzi650_chk_exist('1112',g_bmlb_d[p_ac].bmlb003) RETURNING l_success
              IF NOT l_success THEN
                 LET r_success = FALSE
                 RETURN r_success
              END IF
              #輸入值需存在範本主件+特性對應的BOM內，且可能跨階
              CALL abmm208_chk_bmba017(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[p_ac].bmlb003) RETURNING l_cnt  #检查跨阶的
              IF l_cnt = 0 THEN
                 #输入值不存在于范本主件+特性对应的BOM及其下阶BOM内，请确认！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00216" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      WHEN 'bmlb005' #允许多选
           IF cl_null(g_bmlb_d[p_ac].bmlb005) THEN
              ##此字段不可为空,请重新输入
              #INITIALIZE g_errparam TO NULL 
              #LET g_errparam.extend = ""
              #LET g_errparam.code   = "aqc-00006" 
              #LET g_errparam.popup  = TRUE 
              #CALL cl_err()
              #LET r_success = FALSE
              RETURN r_success
           END IF
           IF g_bmlb_d[p_ac].bmlb005 NOT MATCHES '[YN]' THEN
              #输入值只能为Y或N,请重新输入
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "aec-00035" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           IF g_bmlb_d[p_ac].bmlb005 ='Y' AND NOT cl_null(g_bmlb_d[p_ac].bmlb008) THEN
              #允许多选情况下不能有“带入主件产品特征”！请先删除特征！
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "abm-00236" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlb006' #數量加總下限
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb006) AND g_bmlb_d[p_ac].bmlb006<0 THEN
              #数量不可小于0,请重新输入
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "agl-00041" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb007) AND NOT cl_null(g_bmlb_d[p_ac].bmlb006) AND g_bmlb_d[p_ac].bmlb007<g_bmlb_d[p_ac].bmlb006 THEN
              #上限值不可以小于下限值！请重新输入
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "aim-00142" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlb007' #數量加總上限
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb007) AND g_bmlb_d[p_ac].bmlb007<0 THEN
              #数量不可小于0,请重新输入
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "agl-00041" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb007) AND NOT cl_null(g_bmlb_d[p_ac].bmlb006) AND g_bmlb_d[p_ac].bmlb007<g_bmlb_d[p_ac].bmlb006 THEN
              #上限值不可以小于下限值！请重新输入
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "aim-00142" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlb008' #带入产品特征
           IF (NOT cl_null(g_bmlb_d_t.bmlb008) AND g_bmlb_d[p_ac].bmlb008 != g_bmlb_d_t.bmlb008)
           OR (NOT cl_null(g_bmlb_d_t.bmlb008) AND cl_null(g_bmlb_d[p_ac].bmlb008))
           THEN
              #bmlc有资料时不能随意修改
              SELECT COUNT(1) INTO l_cnt FROM bmlc_t
               WHERE bmlcent = g_enterprise
                 AND bmlc001 = g_bmla_m.bmla001
                 AND bmlc002 = g_bmla_m.bmla002
                 AND bmlc003 = g_bmlb_d_t.bmlb003
                 AND bmlc008 IS NOT NULL
              IF l_cnt > 0 THEN
                 #单身已存在产品特征值，不可变更带入主件产品特征！请先清空单身产品特征后再作变更！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00223" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
           IF NOT cl_null(g_bmlb_d[p_ac].bmlb008) THEN
              #檢查是否存在料件的產品特徵內，且產品特徵的歸屬層級為2:库存
              SELECT imaa005 INTO l_imaa005 FROM imaa_t  #特征类别
               WHERE imaaent = g_enterprise
                 AND imaa001 = g_bmla_m.bmla001
              IF cl_null(l_imaa005) THEN
                 #范本主件料号设置不做特征管理，此处不能维护资料
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00220" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
              SELECT COUNT(1) INTO l_cnt FROM imeb_t
               WHERE imebent = g_enterprise
                 AND imeb001 = l_imaa005
                 AND imeb003 = '2'  #库存
                 AND imeb004 = g_bmlb_d[p_ac].bmlb008  #类型
              IF l_cnt = 0 THEN
                 #输入资料不存在于范本主件料号对应的库存层级特征类型内，请检查【料件特征维护作业 aimi092】！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00221" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
              #检查一個只能被選一次
              SELECT COUNT(1) INTO l_cnt FROM bmlb_t
               WHERE bmlbent = g_enterprise
                 AND bmlb001 = g_bmla_m.bmla001
                 AND bmlb002 = g_bmla_m.bmla002
                 AND bmlb003!= g_bmlb_d_t.bmlb003
                 AND bmlb008 = g_bmlb_d[p_ac].bmlb008
              IF l_cnt > 0 THEN
                 #此特征已被其他FAS群组选用，不可重复选用！请确认是否维护正确！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = g_bmlb_d[p_ac].bmlb008
                 LET g_errparam.code   = "abm-00237" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      OTHERWISE
   END CASE

   RETURN r_success
END FUNCTION

#检查第二单身栏位
PRIVATE FUNCTION abmm208_chk_column_b2(p_ac,p_column)
   DEFINE p_ac          LIKE type_t.num5  #传参为null或0 代表全体检查
   DEFINE p_column      LIKE type_t.chr20
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_imaa005     LIKE imaa_t.imaa005
   DEFINE l_errno         LIKE gzze_t.gzze001
   DEFINE l_value         LIKE type_t.chr30

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE

   CASE p_column
      WHEN 'bmlc004'  #元件料号
           IF cl_null(g_bmlb2_d[p_ac].bmlc004) THEN
              ##此字段不可为空,请重新输入
              #INITIALIZE g_errparam TO NULL 
              #LET g_errparam.extend = ""
              #LET g_errparam.code   = "aqc-00006" 
              #LET g_errparam.popup  = TRUE 
              #CALL cl_err()
              #LET r_success = FALSE
              RETURN r_success
           END IF
           #需存在範本主件料號BOM樹FAS群組內的元件料號
           CALL abmm208_chk_bmba003(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb_d[g_detail_idx].bmlb003,g_bmlb2_d[p_ac].bmlc004) RETURNING l_cnt  #检查跨阶的
           IF l_cnt = 0 THEN
              #输入值不存在于范本主件料号+特性的BOM树对应FAS群组内，请检查【集团研发产品结构维护作业 abmm200】！
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "abm-00217" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlc005'  #料件编号
           #IF cl_null(g_bmlb2_d[p_ac].bmlc005) THEN
           #   #此字段不可为空,请重新输入
           #   INITIALIZE g_errparam TO NULL 
           #   LET g_errparam.extend = ""
           #   LET g_errparam.code   = "aqc-00006" 
           #   LET g_errparam.popup  = TRUE 
           #   CALL cl_err()
           #   LET r_success = FALSE
           #   RETURN r_success
           #END IF
           #mark 由画面控制
           #同一個FAS群組不同元件料號的料號編碼不可重覆
           SELECT COUNT(1) INTO l_cnt FROM bmlc_t
            WHERE bmlcent = g_enterprise
              AND bmlc001 = g_bmla_m.bmla001
              AND bmlc002 = g_bmla_m.bmla002
              AND bmlc003 = g_bmlb_d[g_detail_idx].bmlb003
              AND bmlc004 = g_bmlb2_d[p_ac].bmlc004
           IF l_cnt > 1 THEN
              #同一個FAS群組不同元件料號的料號編碼不可重覆！
              INITIALIZE g_errparam TO NULL 
              LET g_errparam.extend = ""
              LET g_errparam.code   = "abm-00218" 
              LET g_errparam.popup  = TRUE 
              CALL cl_err()
              LET r_success = FALSE
              RETURN r_success
           END IF
      WHEN 'bmlc008'  #产品特征值
           IF NOT cl_null(g_bmlb2_d[p_ac].bmlc008) THEN
              SELECT imaa005 INTO l_imaa005 FROM imaa_t  #特征类别
               WHERE imaaent = g_enterprise
                 AND imaa001 = g_bmla_m.bmla001
              #受到產品特徵設定的規範
              CALL s_aimi092_chk_eigenvalue(l_imaa005,g_bmlb_d[g_detail_idx].bmlb008,g_bmlb2_d[p_ac].bmlc008,g_bmla_m.bmla001,'2') RETURNING l_success,l_errno,l_value  #160712-00010#1
              IF NOT l_success THEN
                 INITIALIZE g_errparam TO NULL
                 LET g_errparam.code = l_errno
                 LET g_errparam.extend = g_bmlb_d[g_detail_idx].bmlb008
                 LET g_errparam.popup = TRUE
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
              LET g_bmlb2_d[p_ac].bmlc008 = l_value
           END IF
      OTHERWISE
   END CASE

   RETURN r_success
END FUNCTION

#检查第三单身栏位
PRIVATE FUNCTION abmm208_chk_column_b3(p_ac,p_column)
   DEFINE p_ac          LIKE type_t.num5  #传参为null或0 代表全体检查
   DEFINE p_column      LIKE type_t.chr20
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE

   CASE p_column
      WHEN 'bmld005' #限制FAS群组
           IF NOT cl_null(g_bmlb3_d[p_ac].bmld005) THEN
              #只可維護存在此BOM(包含下階)內的FAS群組
              CALL abmm208_chk_bmba017(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb3_d[p_ac].bmld005) RETURNING l_cnt  #检查跨阶的
              IF l_cnt = 0 THEN
                 #输入值不存在于范本主件+特性对应的BOM及其下阶BOM内，请确认！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00216" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      WHEN 'bmld006' #可选择元件料号
           #只可維護存在受限群組內的元件料號
           IF NOT cl_null(g_bmlb3_d[p_ac].bmld006) THEN
              IF cl_null(g_bmlb3_d[p_ac].bmld005) THEN
                 #请先维护FAS群组
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00219" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
              #只可維護存在受限群組內的元件料號
              CALL abmm208_chk_bmba003(g_bmla_m.bmla001,g_bmla_m.bmla002,g_bmlb3_d[p_ac].bmld005,g_bmlb3_d[p_ac].bmld006) RETURNING l_cnt  #检查跨阶的
              IF l_cnt = 0 THEN
                 #输入值不存在于范本主件料号+特性的BOM树对应FAS群组内，请检查【集团研发产品结构维护作业 abmm200】！
                 INITIALIZE g_errparam TO NULL 
                 LET g_errparam.extend = ""
                 LET g_errparam.code   = "abm-00217" 
                 LET g_errparam.popup  = TRUE 
                 CALL cl_err()
                 LET r_success = FALSE
                 RETURN r_success
              END IF
           END IF
      OTHERWISE
   END CASE

   RETURN r_success
END FUNCTION

#p_type=1:自动产生单身资料——单身清除后全部重新产生
#p_type=2:自动撷取单身资料——单身不清除，将不在目前已經護的資料內的，全部自動新增
PRIVATE FUNCTION abmm208_gen_b(p_type)
   DEFINE p_type        LIKE type_t.chr1  #1:自动产生单身资料  2:自动撷取单身资料
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_sql         STRING
  # DEFINE l_bmlb        RECORD LIKE bmlb_t.*   #161124-00048#1 2016/12/02 By 08734 mark
   #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_bmlb RECORD  #FAS組合群組檔
       bmlbent LIKE bmlb_t.bmlbent, #企业编号
       bmlb001 LIKE bmlb_t.bmlb001, #范本主件料号
       bmlb002 LIKE bmlb_t.bmlb002, #特性
       bmlb003 LIKE bmlb_t.bmlb003, #FAS群组
       bmlb004 LIKE bmlb_t.bmlb004, #顺序
       bmlb005 LIKE bmlb_t.bmlb005, #允许多选
       bmlb006 LIKE bmlb_t.bmlb006, #数量下限
       bmlb007 LIKE bmlb_t.bmlb007, #数量上限
       bmlb008 LIKE bmlb_t.bmlb008 #带入主件产品特徴
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)
  # DEFINE l_bmlc        RECORD LIKE bmlc_t.*  #161124-00048#1 2016/12/02 By 08734 mark
   #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_bmlc RECORD  #FAS組合元件檔
       bmlcent LIKE bmlc_t.bmlcent, #企业编号
       bmlc001 LIKE bmlc_t.bmlc001, #范本主件料号
       bmlc002 LIKE bmlc_t.bmlc002, #特性
       bmlc003 LIKE bmlc_t.bmlc003, #FAS群组
       bmlc004 LIKE bmlc_t.bmlc004, #元件料号
       bmlc005 LIKE bmlc_t.bmlc005, #料件编码
       bmlc006 LIKE bmlc_t.bmlc006, #品名编码
       bmlc007 LIKE bmlc_t.bmlc007, #规格编码
       bmlc008 LIKE bmlc_t.bmlc008 #产品特征
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)
   DEFINE l_bmba017     LIKE bmba_t.bmba017  #FAS選擇群組
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件里料号
   DEFINE l_bmlb004     LIKE bmlb_t.bmlb004  #顺序

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE

   LET g_today_dt = cl_get_current()
   
   IF p_type = 1 THEN
      #---自动产生单身资料——单身清除后全部重新产生---
      #检查单身是否已经有资料
      SELECT COUNT(1) INTO l_cnt FROM bmlb_t
       WHERE bmlbent = g_enterprise
         AND bmlb001 = g_bmla_m.bmla001
         AND bmlb002 = g_bmla_m.bmla002
      IF l_cnt > 0 THEN
         #範本主件料號+特性有异动，单身将重新产生，是否确定执行？
         IF NOT cl_ask_confirm('abm-00215') THEN
            LET r_success = FALSE
            RETURN r_success
         END IF
      END IF
      
      #删除旧值
      DELETE FROM bmlb_t
       WHERE bmlbent = g_enterprise
         AND bmlb001 = g_bmla_m.bmla001
         AND bmlb002 = g_bmla_m.bmla002
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = 'del bmlb'
         LET g_errparam.code   = SQLCA.sqlcode
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      
      DELETE FROM bmlc_t
       WHERE bmlcent = g_enterprise
         AND bmlc001 = g_bmla_m.bmla001
         AND bmlc002 = g_bmla_m.bmla002
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = 'del bmlc'
         LET g_errparam.code   = SQLCA.sqlcode
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      
      DELETE FROM bmld_t
       WHERE bmldent = g_enterprise
         AND bmld001 = g_bmla_m.bmla001
         AND bmld002 = g_bmla_m.bmla002
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = 'del bmld'
         LET g_errparam.code   = SQLCA.sqlcode
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
   ELSE
      #---自动撷取单身资料——单身不清除，将不在目前已經護的資料內的，全部自動新增---
      #是否自动撷取资料？
      IF NOT cl_ask_confirm('abm-00230') THEN
         LET r_success = FALSE
         RETURN r_success
      END IF
   END IF

   #自动产生单身--当阶
   LET l_sql = " SELECT UNIQUE bmba017 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",g_bmla_m.bmla001,"' ",
               "    AND bmba002 = '",g_bmla_m.bmla002,"' ",
               "    AND (bmba017 IS NOT NULL OR bmba017!=' ') ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_gen_b_p1 FROM l_sql
   DECLARE abmm208_gen_b_c1 CURSOR FOR abmm208_gen_b_p1

   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",g_bmla_m.bmla001,"' ",
               "    AND bmba002 = '",g_bmla_m.bmla002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
               "    AND bmba017 = ? "
   PREPARE abmm208_gen_b_p2 FROM l_sql
   DECLARE abmm208_gen_b_c2 CURSOR FOR abmm208_gen_b_p2

   SELECT MAX(bmlb004) INTO l_bmlb004 FROM bmlb_t
    WHERE bmlbent = g_enterprise
      AND bmlb001 = g_bmla_m.bmla001
      AND bmlb002 = g_bmla_m.bmla002
   IF cl_null(l_bmlb004) THEN
      LET l_bmlb004 = 0
   END IF
   
   FOREACH abmm208_gen_b_c1 INTO l_bmba017
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_gen_b_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      
      #检查bmba017是否产生过，产生过则只处理bmlc，未产生过则先产生bmlb，再处理bmlc
      LET l_cnt = 0
      SELECT COUNT(1) INTO l_cnt FROM bmlb_t
       WHERE bmlbent = g_enterprise
         AND bmlb001 = g_bmla_m.bmla001
         AND bmlb002 = g_bmla_m.bmla002
         AND bmlb003 = l_bmba017
      IF l_cnt = 0 THEN
         LET l_bmlb004 = l_bmlb004 + 1
         INITIALIZE l_bmlb.* TO NULL
         LET l_bmlb.bmlbent = g_enterprise #企業編號
         LET l_bmlb.bmlb001 = g_bmla_m.bmla001 #範本主件料號
         LET l_bmlb.bmlb002 = g_bmla_m.bmla002 #特性
         LET l_bmlb.bmlb003 = l_bmba017 #FAS群組
         LET l_bmlb.bmlb004 = l_bmlb004 #順序
         LET l_bmlb.bmlb005 = 'N' #允許多選
         LET l_bmlb.bmlb006 = 1   #數量下限
         LET l_bmlb.bmlb007 = 1   #數量上限
         LET l_bmlb.bmlb008 = ''  #帶入主件產品特徴
         #INSERT INTO bmlb_t VALUES(l_bmlb.*)  #161124-00048#1 2016/12/02 By 08734 mark
         INSERT INTO bmlb_t(bmlbent,bmlb001,bmlb002,bmlb003,bmlb004,bmlb005,bmlb006,bmlb007,bmlb008)
            VALUES(l_bmlb.bmlbent,l_bmlb.bmlb001,l_bmlb.bmlb002,l_bmlb.bmlb003,l_bmlb.bmlb004,l_bmlb.bmlb005,l_bmlb.bmlb006,l_bmlb.bmlb007,l_bmlb.bmlb008) #161124-00048#1 2016/12/02 By 08734 add
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = 'ins bmlb_t'
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE
            RETURN r_success
         END IF
      END IF

      FOREACH abmm208_gen_b_c2 USING l_bmba017 INTO l_bmba003
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:abmm208_gen_b_c2"
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE
            RETURN r_success
         END IF
         
         #检查是否产生过，产生过的不重复产生
         LET l_cnt = 0
         SELECT COUNT(1) INTO l_cnt FROM bmlc_t
          WHERE bmlcent = g_enterprise
            AND bmlc001 = g_bmla_m.bmla001
            AND bmlc002 = g_bmla_m.bmla002
            AND bmlc003 = l_bmba017
            AND bmlc004 = l_bmba003
         IF l_cnt = 0 THEN
            INITIALIZE l_bmlc.* TO NULL
            LET l_bmlc.bmlcent = g_enterprise #企業編號
            LET l_bmlc.bmlc001 = g_bmla_m.bmla001 #範本主件料號
            LET l_bmlc.bmlc002 = g_bmla_m.bmla002 #特性	
            LET l_bmlc.bmlc003 = l_bmba017 #FAS群組
            LET l_bmlc.bmlc004 = l_bmba003 #元件料號
            LET l_bmlc.bmlc005 = '' #料件編碼
            LET l_bmlc.bmlc006 = '' #品名編碼
            LET l_bmlc.bmlc007 = '' #規格編碼
            LET l_bmlc.bmlc008 = '' #產品特徵
            #INSERT INTO bmlc_t VALUES(l_bmlc.*)  #161124-00048#1 2016/12/02 By 08734 mark
            INSERT INTO bmlc_t(bmlcent,bmlc001,bmlc002,bmlc003,bmlc004,bmlc005,bmlc006,bmlc007,bmlc008)
               VALUES(l_bmlc.bmlcent,l_bmlc.bmlc001,l_bmlc.bmlc002,l_bmlc.bmlc003,l_bmlc.bmlc004,l_bmlc.bmlc005,l_bmlc.bmlc006,l_bmlc.bmlc007,l_bmlc.bmlc008)  #161124-00048#1 2016/12/02 By 08734 add
            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = 'ins bmlc_t'
               LET g_errparam.popup = TRUE
               CALL cl_err()
               LET r_success = FALSE
               RETURN r_success
            END IF
         END IF
      END FOREACH
      CLOSE abmm208_gen_b_c2
      FREE abmm208_gen_b_p2

   END FOREACH
   CLOSE abmm208_gen_b_c1
   FREE abmm208_gen_b_p1

   #自动产生单身--跨阶 开始递归
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",g_bmla_m.bmla001,"' ",
               "    AND bmba002 = '",g_bmla_m.bmla002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_gen_b_p3 FROM l_sql
   DECLARE abmm208_gen_b_c3 CURSOR FOR abmm208_gen_b_p3
   FOREACH abmm208_gen_b_c3 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_gen_b_c3"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = g_bmla_m.bmla002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         CALL abmm208_gen_b_dg(p_type,l_bmba003,g_bmla_m.bmla002) RETURNING l_success
         IF NOT l_success THEN
            LET r_success = FALSE
            RETURN r_success
         END IF
      END IF
   END FOREACH
   CLOSE abmm208_gen_b_c3
   FREE abmm208_gen_b_p3
   
   RETURN r_success
END FUNCTION

#自动产生单身资料-下阶递归
PRIVATE FUNCTION abmm208_gen_b_dg(p_type,p_bmba001,p_bmba002)
   DEFINE p_type        LIKE type_t.chr1  #1:自动产生单身资料  2:自动撷取单身资料
   DEFINE p_bmba001     LIKE bmba_t.bmba001 #bom主件
   DEFINE p_bmba002     LIKE bmba_t.bmba002 #特性
   DEFINE r_success     LIKE type_t.num5
   DEFINE l_success     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   DEFINE l_sql         STRING
  # DEFINE l_bmlb        RECORD LIKE bmlb_t.*  #161124-00048#1 2016/12/02 By 08734 mark
   #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_bmlb RECORD  #FAS組合群組檔
       bmlbent LIKE bmlb_t.bmlbent, #企业编号
       bmlb001 LIKE bmlb_t.bmlb001, #范本主件料号
       bmlb002 LIKE bmlb_t.bmlb002, #特性
       bmlb003 LIKE bmlb_t.bmlb003, #FAS群组
       bmlb004 LIKE bmlb_t.bmlb004, #顺序
       bmlb005 LIKE bmlb_t.bmlb005, #允许多选
       bmlb006 LIKE bmlb_t.bmlb006, #数量下限
       bmlb007 LIKE bmlb_t.bmlb007, #数量上限
       bmlb008 LIKE bmlb_t.bmlb008 #带入主件产品特徴
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)
  # DEFINE l_bmlc        RECORD LIKE bmlc_t.*  #161124-00048#1 2016/12/02 By 08734 mark
   #161124-00048#1 2016/12/02 By 08734 add(S)
   DEFINE l_bmlc RECORD  #FAS組合元件檔
       bmlcent LIKE bmlc_t.bmlcent, #企业编号
       bmlc001 LIKE bmlc_t.bmlc001, #范本主件料号
       bmlc002 LIKE bmlc_t.bmlc002, #特性
       bmlc003 LIKE bmlc_t.bmlc003, #FAS群组
       bmlc004 LIKE bmlc_t.bmlc004, #元件料号
       bmlc005 LIKE bmlc_t.bmlc005, #料件编码
       bmlc006 LIKE bmlc_t.bmlc006, #品名编码
       bmlc007 LIKE bmlc_t.bmlc007, #规格编码
       bmlc008 LIKE bmlc_t.bmlc008 #产品特征
END RECORD
#161124-00048#1 2016/12/02 By 08734 add(E)
   DEFINE l_bmba017     LIKE bmba_t.bmba017  #FAS選擇群組
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件料号
   DEFINE l_bmlb004     LIKE bmlb_t.bmlb004  #顺序
   DEFINE dg            DYNAMIC ARRAY OF RECORD
                        bmba003  LIKE bmba_t.bmba003, #元件，下阶主件
                        bmba002  LIKE bmba_t.bmba002  #特性
                        END RECORD
   DEFINE l_i,l_row     LIKE type_t.num5

   WHENEVER ERROR CONTINUE
   LET r_success = TRUE
   
   IF cl_null(g_today_dt) THEN LET g_today_dt = cl_get_current() END IF
   
   #自动产生单身--当阶
   LET l_sql = " SELECT UNIQUE bmba017 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND (bmba017 IS NOT NULL OR bmba017!=' ') ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
               #"    AND NOT EXISTS(SELECT 1 FROM bmlb_t ",  #bmba017未产生过的
               #"                    WHERE bmlbent = bmbaent AND bmlb001=bmba001 AND bmlb002=bmba002 AND bmlb003=bmba017) "
               #mark 已产生过的bmba017也要记录入bmlc的
               #141028 跨阶不允许出现同一个FAS群组 所以已产生过的再找到需提示错误
   PREPARE abmm208_gen_b_dg_p1 FROM l_sql
   DECLARE abmm208_gen_b_dg_c1 CURSOR FOR abmm208_gen_b_dg_p1

   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
               "    AND bmba017 = ? ",
               "    AND NOT EXISTS(SELECT 1 FROM bmlc_t ",  #bmba003未产生过的
               "                    WHERE bmlcent = bmbaent ",
               "                      AND bmlc001='",g_bmla_m.bmla001,"' AND bmlc002=bmba002 ",
               "                      AND bmlc003 = bmba017 AND bmlc004=bmba003 ) "
   PREPARE abmm208_gen_b_dg_p2 FROM l_sql
   DECLARE abmm208_gen_b_dg_c2 CURSOR FOR abmm208_gen_b_dg_p2
   
   SELECT MAX(bmlb004) INTO l_bmlb004 FROM bmlb_t
    WHERE bmlbent = g_enterprise
      AND bmlb001 = g_bmla_m.bmla001
      AND bmlb002 = g_bmla_m.bmla002
   IF cl_null(l_bmlb004) THEN
      LET l_bmlb004 = 0
   END IF
   FOREACH abmm208_gen_b_dg_c1 INTO l_bmba017
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_gen_b_dg_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      
      #检查bmba017是否产生过，产生过则只处理bmlc，未产生过则先产生bmlb，再处理bmlc
      LET l_cnt = 0
      SELECT COUNT(1) INTO l_cnt FROM bmlb_t
       WHERE bmlbent = g_enterprise
         AND bmlb001 = g_bmla_m.bmla001
         AND bmlb002 = p_bmba002
         AND bmlb003 = l_bmba017
      #141028 add
      IF l_cnt > 0 AND p_type = '1' THEN   #1:自动产生单身资料
         #同一FAS群组不可跨阶存在，请检查并修改BOM资料
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = "abm-00234"
         LET g_errparam.extend = ""
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF
      #141028 end
      IF l_cnt = 0 THEN
         LET l_bmlb004 = l_bmlb004 + 1
         INITIALIZE l_bmlb.* TO NULL
         LET l_bmlb.bmlbent = g_enterprise #企業編號
         LET l_bmlb.bmlb001 = g_bmla_m.bmla001 #範本主件料號
         LET l_bmlb.bmlb002 = p_bmba002 #特性
         LET l_bmlb.bmlb003 = l_bmba017 #FAS群組
         LET l_bmlb.bmlb004 = l_bmlb004 #順序
         LET l_bmlb.bmlb005 = 'N' #允許多選
         LET l_bmlb.bmlb006 = 1   #數量下限
         LET l_bmlb.bmlb007 = 1   #數量上限
         LET l_bmlb.bmlb008 = ''  #帶入主件產品特徴
         #INSERT INTO bmlb_t VALUES(l_bmlb.*)  #161124-00048#1 2016/12/02 By 08734 mark
         INSERT INTO bmlb_t(bmlbent,bmlb001,bmlb002,bmlb003,bmlb004,bmlb005,bmlb006,bmlb007,bmlb008)
            VALUES(l_bmlb.bmlbent,l_bmlb.bmlb001,l_bmlb.bmlb002,l_bmlb.bmlb003,l_bmlb.bmlb004,l_bmlb.bmlb005,l_bmlb.bmlb006,l_bmlb.bmlb007,l_bmlb.bmlb008) #161124-00048#1 2016/12/02 By 08734 add
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = 'ins bmlb_t'
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE
            RETURN r_success
         END IF
      END IF

      FOREACH abmm208_gen_b_dg_c2 USING l_bmba017 INTO l_bmba003
         IF SQLCA.sqlcode THEN
            INITIALIZE g_errparam TO NULL
            LET g_errparam.code = SQLCA.sqlcode
            LET g_errparam.extend = "FOREACH:abmm208_gen_b_dg_c2"
            LET g_errparam.popup = TRUE
            CALL cl_err()
            LET r_success = FALSE
            RETURN r_success
         END IF
         
         #检查是否产生过，产生过的不重复产生
         LET l_cnt = 0
         SELECT COUNT(1) INTO l_cnt FROM bmlc_t
          WHERE bmlcent = g_enterprise
            AND bmlc001 = g_bmla_m.bmla001
            AND bmlc002 = p_bmba002
            AND bmlc003 = l_bmba017
            AND bmlc004 = l_bmba003
         IF l_cnt = 0 THEN
            INITIALIZE l_bmlc.* TO NULL
            LET l_bmlc.bmlcent = g_enterprise #企業編號
            LET l_bmlc.bmlc001 = g_bmla_m.bmla001 #範本主件料號
            LET l_bmlc.bmlc002 = p_bmba002 #特性	
            LET l_bmlc.bmlc003 = l_bmba017 #FAS群組
            LET l_bmlc.bmlc004 = l_bmba003 #元件料號
            LET l_bmlc.bmlc005 = '' #料件編碼
            LET l_bmlc.bmlc006 = '' #品名編碼
            LET l_bmlc.bmlc007 = '' #規格編碼
            LET l_bmlc.bmlc008 = '' #產品特徵
            #INSERT INTO bmlc_t VALUES(l_bmlc.*)  #161124-00048#1 2016/12/02 By 08734 mark
            INSERT INTO bmlc_t(bmlcent,bmlc001,bmlc002,bmlc003,bmlc004,bmlc005,bmlc006,bmlc007,bmlc008)
               VALUES(l_bmlc.bmlcent,l_bmlc.bmlc001,l_bmlc.bmlc002,l_bmlc.bmlc003,l_bmlc.bmlc004,l_bmlc.bmlc005,l_bmlc.bmlc006,l_bmlc.bmlc007,l_bmlc.bmlc008)  #161124-00048#1 2016/12/02 By 08734 add
            IF SQLCA.sqlcode THEN
               INITIALIZE g_errparam TO NULL
               LET g_errparam.code = SQLCA.sqlcode
               LET g_errparam.extend = 'ins bmlc_t'
               LET g_errparam.popup = TRUE
               CALL cl_err()
               LET r_success = FALSE
               RETURN r_success
            END IF
         END IF
      END FOREACH
      CLOSE abmm208_gen_b_dg_c2
      FREE abmm208_gen_b_dg_p2

   END FOREACH
   CLOSE abmm208_gen_b_dg_c1
   FREE abmm208_gen_b_dg_p1

   #自动产生单身--跨阶
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_gen_b_dg_p3 FROM l_sql
   DECLARE abmm208_gen_b_dg_c3 CURSOR FOR abmm208_gen_b_dg_p3
   LET l_row = 0 #首先期初赋值
   FOREACH abmm208_gen_b_dg_c3 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_gen_b_dg_c3"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         LET r_success = FALSE
         RETURN r_success
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = p_bmba002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         #碰到需要递归的则先记录下来
         LET l_row = l_row + 1
         LET dg[l_row].bmba003 = l_bmba003
         LET dg[l_row].bmba002 = p_bmba002
      END IF
   END FOREACH
   CLOSE abmm208_gen_b_dg_c3
   FREE abmm208_gen_b_dg_p3
   
   #后面再做递归处理
   IF l_row > 0 THEN
      FOR l_i = 1 TO l_row
          CALL abmm208_gen_b_dg(p_type,dg[l_i].bmba003,dg[l_i].bmba002) RETURNING l_success
          IF NOT l_success THEN
             LET r_success = FALSE
             RETURN r_success
          END IF
      END FOR
   END IF
   RETURN r_success
END FUNCTION

#检查輸入值需存在範本主件+特性對應的BOM內，且可能跨階
PRIVATE FUNCTION abmm208_chk_bmba017(p_bmba001,p_bmba002,p_bmlb003)
   DEFINE p_bmba001     LIKE bmba_t.bmba001  #bom主件
   DEFINE p_bmba002     LIKE bmba_t.bmba002  #特性
   DEFINE p_bmlb003     LIKE bmlb_t.bmlb003  #被检查的FAS群组
   DEFINE r_cnt         LIKE type_t.num5
   DEFINE l_sql         STRING
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件料号
   DEFINE dg            DYNAMIC ARRAY OF RECORD
                        bmba003  LIKE bmba_t.bmba003, #元件，下阶主件
                        bmba002  LIKE bmba_t.bmba002  #特性
                        END RECORD
   DEFINE l_i,l_row     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   
   WHENEVER ERROR CONTINUE
   LET r_cnt = 0
   
   IF cl_null(g_today_dt) THEN LET g_today_dt = cl_get_current() END IF
   
   #輸入值需存在範本主件+特性對應的BOM內，且可能跨階
   SELECT COUNT(1) INTO r_cnt FROM bmba_t
    WHERE bmbaent = g_enterprise
      AND bmbasite= 'ALL'
      AND bmba001 = p_bmba001
      AND bmba002 = p_bmba002
      AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
      AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      AND bmba017 = p_bmlb003
   IF r_cnt > 0 THEN
      RETURN r_cnt
   END IF
   
   #未找到再往下跨阶找
   #跨阶
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_chk_bmba017_p1 FROM l_sql
   DECLARE abmm208_chk_bmba017_c1 CURSOR FOR abmm208_chk_bmba017_p1
   LET l_row = 0 #首先期初赋值
   FOREACH abmm208_chk_bmba017_c1 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_chk_bmba017_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         EXIT FOREACH
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = p_bmba002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         #碰到需要递归的则先记录下来
         LET l_row = l_row + 1
         LET dg[l_row].bmba003 = l_bmba003
         LET dg[l_row].bmba002 = p_bmba002
      END IF
   END FOREACH
   CLOSE abmm208_chk_bmba017_c1
   FREE abmm208_chk_bmba017_p1
   
   #后面再做递归处理
   IF l_row > 0 THEN
      FOR l_i = 1 TO l_row
          CALL abmm208_chk_bmba017(dg[l_i].bmba003,dg[l_i].bmba002,p_bmlb003) RETURNING r_cnt
          IF r_cnt > 0 THEN
             RETURN r_cnt
          END IF
      END FOR
   END IF
   
   RETURN r_cnt
END FUNCTION

#开装where条件组递归子bom的where条件
PRIVATE FUNCTION abmm208_get_bmba017_where(p_bmba001,p_bmba002)
   DEFINE p_bmba001  LIKE bmba_t.bmba001
   DEFINE p_bmba002  LIKE bmba_t.bmba002
   DEFINE l_sql         STRING
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件料号
   DEFINE dg            DYNAMIC ARRAY OF RECORD
                        bmba003  LIKE bmba_t.bmba003, #元件，下阶主件
                        bmba002  LIKE bmba_t.bmba002  #特性
                        END RECORD
   DEFINE l_i,l_row     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   
   WHENEVER ERROR CONTINUE
   
   IF cl_null(g_today_dt) THEN LET g_today_dt = cl_get_current() END IF
   
   SELECT COUNT(1) INTO l_cnt FROM bmba_t
    WHERE bmbaent=g_enterprise
      AND bmbasite='ALL' 
      AND bmba001=p_bmba001
      AND bmba002=p_bmba002
      AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
      AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) 
      AND (bmba017 IS NOT NULL OR bmba017!=' ') 
   IF l_cnt > 0 THEN
      IF cl_null(g_where) THEN
         LET g_where = " SELECT UNIQUE bmba017 FROM bmba_t ",
                       "  WHERE bmbaent=",g_enterprise,
                       "    AND bmbasite='ALL' ",
                       "    AND bmba001='",p_bmba001,"' ",
                       "    AND bmba002='",p_bmba002,"' ",
                       "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
                       "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
                       "    AND (bmba017 IS NOT NULL OR bmba017!=' ') "
      ELSE
         LET g_where = g_where CLIPPED," UNION ",
                       " SELECT UNIQUE bmba017 FROM bmba_t ",
                       "  WHERE bmbaent=",g_enterprise,
                       "    AND bmbasite='ALL' ",
                       "    AND bmba001='",p_bmba001,"' ",
                       "    AND bmba002='",p_bmba002,"' ",
                       "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
                       "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
                       "    AND (bmba017 IS NOT NULL OR bmba017!=' ') "
      END IF
   END IF

   #跨阶
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_chk_bmba017_where_p1 FROM l_sql
   DECLARE abmm208_chk_bmba017_where_c1 CURSOR FOR abmm208_chk_bmba017_where_p1
   LET l_row = 0 #首先期初赋值
   FOREACH abmm208_chk_bmba017_where_c1 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_chk_bmba017_where_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         EXIT FOREACH
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = p_bmba002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         #碰到需要递归的则先记录下来
         LET l_row = l_row + 1
         LET dg[l_row].bmba003 = l_bmba003
         LET dg[l_row].bmba002 = p_bmba002
      END IF
   END FOREACH
   CLOSE abmm208_chk_bmba017_where_c1
   FREE abmm208_chk_bmba017_where_p1
   
   #后面再做递归处理
   IF l_row > 0 THEN
      FOR l_i = 1 TO l_row
          CALL abmm208_get_bmba017_where(dg[l_i].bmba003,dg[l_i].bmba002)
      END FOR
   END IF
END FUNCTION

#需存在範本主件料號BOM樹FAS群組內的元件料號
PRIVATE FUNCTION abmm208_chk_bmba003(p_bmba001,p_bmba002,p_bmlb003,p_bmlc004)
   DEFINE p_bmba001     LIKE bmba_t.bmba001  #bom主件
   DEFINE p_bmba002     LIKE bmba_t.bmba002  #特性
   DEFINE p_bmlb003     LIKE bmlb_t.bmlb003  #FAS群组
   DEFINE p_bmlc004     LIKE bmlc_t.bmlc004  #被检查的元件
   DEFINE r_cnt         LIKE type_t.num5
   DEFINE l_sql         STRING
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件料号
   DEFINE dg            DYNAMIC ARRAY OF RECORD
                        bmba003  LIKE bmba_t.bmba003, #元件，下阶主件
                        bmba002  LIKE bmba_t.bmba002  #特性
                        END RECORD
   DEFINE l_i,l_row     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   
   WHENEVER ERROR CONTINUE
   LET r_cnt = 0
   
   IF cl_null(g_today_dt) THEN LET g_today_dt = cl_get_current() END IF
   
   #需输入存在範本主件料號BOM樹FAS群組內的元件料號
   SELECT COUNT(1) INTO r_cnt FROM bmba_t
    WHERE bmbaent = g_enterprise
      AND bmbasite= 'ALL'
      AND bmba001 = p_bmba001
      AND bmba002 = p_bmba002
      AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
      AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      AND bmba017 = p_bmlb003
      AND bmba003 = p_bmlc004
   IF r_cnt > 0 THEN
      RETURN r_cnt
   END IF
   
   #未找到再往下跨阶找
   #跨阶
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_chk_bmba003_p1 FROM l_sql
   DECLARE abmm208_chk_bmba003_c1 CURSOR FOR abmm208_chk_bmba003_p1
   LET l_row = 0 #首先期初赋值
   FOREACH abmm208_chk_bmba003_c1 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_chk_bmba003_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         EXIT FOREACH
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = p_bmba002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         #碰到需要递归的则先记录下来
         LET l_row = l_row + 1
         LET dg[l_row].bmba003 = l_bmba003
         LET dg[l_row].bmba002 = p_bmba002
      END IF
   END FOREACH
   CLOSE abmm208_chk_bmba003_c1
   FREE abmm208_chk_bmba003_p1
   
   #后面再做递归处理
   IF l_row > 0 THEN
      FOR l_i = 1 TO l_row
          CALL abmm208_chk_bmba003(dg[l_i].bmba003,dg[l_i].bmba002,p_bmlb003,p_bmlc004) RETURNING r_cnt
          IF r_cnt > 0 THEN
             RETURN r_cnt
          END IF
      END FOR
   END IF
   
   RETURN r_cnt
END FUNCTION

#开装where条件组递归子bom的where条件
PRIVATE FUNCTION abmm208_get_bmba003_where(p_bmba001,p_bmba002,p_bmlb003)
   DEFINE p_bmba001  LIKE bmba_t.bmba001
   DEFINE p_bmba002  LIKE bmba_t.bmba002
   DEFINE p_bmlb003  LIKE bmlb_t.bmlb003
   DEFINE l_sql         STRING
   DEFINE l_bmba003     LIKE bmba_t.bmba003  #元件料号
   DEFINE dg            DYNAMIC ARRAY OF RECORD
                        bmba003  LIKE bmba_t.bmba003, #元件，下阶主件
                        bmba002  LIKE bmba_t.bmba002  #特性
                        END RECORD
   DEFINE l_i,l_row     LIKE type_t.num5
   DEFINE l_cnt         LIKE type_t.num5
   
   WHENEVER ERROR CONTINUE
   
   IF cl_null(p_bmlb003) THEN  #无FAS群组
      RETURN
   END IF
   
   IF cl_null(g_today_dt) THEN LET g_today_dt = cl_get_current() END IF
   
   SELECT COUNT(1) INTO l_cnt FROM bmba_t
    WHERE bmbaent=g_enterprise
      AND bmbasite='ALL' 
      AND bmba001=p_bmba001
      AND bmba002=p_bmba002
      AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
      AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) 
      AND bmba017=p_bmlb003
   IF l_cnt > 0 THEN
      IF cl_null(g_where) THEN
         LET g_where = " SELECT UNIQUE bmba003 FROM bmba_t ",
                       "  WHERE bmbaent=",g_enterprise,
                       "    AND bmbasite='ALL' ",
                       "    AND bmba001='",p_bmba001,"' ",
                       "    AND bmba002='",p_bmba002,"' ",
                       "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
                       "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
                       "    AND bmba017='",p_bmlb003,"' "
      ELSE
         LET g_where = g_where CLIPPED," UNION ",
                       " SELECT UNIQUE bmba003 FROM bmba_t ",
                       "  WHERE bmbaent=",g_enterprise,
                       "    AND bmbasite='ALL' ",
                       "    AND bmba001='",p_bmba001,"' ",
                       "    AND bmba002='",p_bmba002,"' ",
                       "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
                       "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) ",
                       "    AND bmba017='",p_bmlb003,"' "
      END IF
   END IF

   #跨阶
   LET l_sql = " SELECT UNIQUE bmba003 FROM bmba_t ",
               "  WHERE bmbaent = ",g_enterprise,
               "    AND bmbasite= 'ALL' ",
               "    AND bmba001 = '",p_bmba001,"' ",
               "    AND bmba002 = '",p_bmba002,"' ",
               "    AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= '",g_today_dt,"' ",
               "    AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> '",g_today_dt,"' OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL ) "
   PREPARE abmm208_chk_bmba003_where_p1 FROM l_sql
   DECLARE abmm208_chk_bmba003_where_c1 CURSOR FOR abmm208_chk_bmba003_where_p1
   LET l_row = 0 #首先期初赋值
   FOREACH abmm208_chk_bmba003_where_c1 INTO l_bmba003
      IF SQLCA.sqlcode THEN
         INITIALIZE g_errparam TO NULL
         LET g_errparam.code = SQLCA.sqlcode
         LET g_errparam.extend = "FOREACH:abmm208_chk_bmba003_where_c1"
         LET g_errparam.popup = TRUE
         CALL cl_err()
         EXIT FOREACH
      END IF

      #检查是否有子bom
      SELECT COUNT(1) INTO l_cnt FROM bmba_t
       WHERE bmbaent = g_enterprise
         AND bmbasite= 'ALL'
         AND bmba001 = l_bmba003
         AND bmba002 = p_bmba002
         AND to_char(bmba005,'yyyy-mm-dd hh24:mi:ss')<= g_today_dt
         AND (to_char(bmba006,'yyyy-mm-dd hh24:mi:ss')> g_today_dt OR to_char(bmba006,'yyyy-mm-dd hh24:mi:ss') IS NULL )
      IF l_cnt > 0 THEN
         #碰到需要递归的则先记录下来
         LET l_row = l_row + 1
         LET dg[l_row].bmba003 = l_bmba003
         LET dg[l_row].bmba002 = p_bmba002
      END IF
   END FOREACH
   CLOSE abmm208_chk_bmba003_where_c1
   FREE abmm208_chk_bmba003_where_p1
   
   #后面再做递归处理
   IF l_row > 0 THEN
      FOR l_i = 1 TO l_row
          CALL abmm208_get_bmba003_where(dg[l_i].bmba003,dg[l_i].bmba002,p_bmlb003)
      END FOR
   END IF
END FUNCTION

 
{</section>}
 
