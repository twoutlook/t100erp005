#該程式未解開Section, 採用最新樣板產出!
{<section id="abmt500.description" >}
#應用 a00 樣板自動產生(Version:3)
#+ Standard Version.....: SD版次:0023(2014-10-30 16:55:30), PR版次:0023(2017-02-20 09:44:29)
#+ Customerized Version.: SD版次:0000(1900-01-01 00:00:00), PR版次:0000(1900-01-01 00:00:00)
#+ Build......: 000156
#+ Filename...: abmt500
#+ Description: ECR申請作業
#+ Creator....: 02295(2014-07-03 17:15:35)
#+ Modifier...: 02295 -SD/PR- 01996
 
{</section>}
 
{<section id="abmt500.global" >}
#應用 t01 樣板自動產生(Version:79)
#add-point:填寫註解說明 name="global.memo" 
#151125-00001#1  15/11/27 BY fionchen  執行[作廢]作業時,增加詢問「是否執行作廢？」
#151224-00025#1  15/12/29 By tsungyung 手動輸入特徵碼沒有同步新增inam_t[料件產品特徵明細檔](整批修改)
#160318-00005#6  16/03/21 By Jessy     修正azzi920重複定義之錯誤訊息
#160314-00009#10 16/03/25 By zhujing   各程式增加产品特征是否需要自动开窗的程式段处理
#160325-00010#1  16/03/25 By xianghui  资料复制时异动资讯页签的资料需要带出当前使用者的信息
#160318-00025#3  16/04/11 By 07675     將重複內容的錯誤訊息置換為公用錯誤訊息(r.v）
#160802-00023#1  16/08/02 by liuym     修改ECR变更开窗、检查存在限制条件，允许料件类型为X：虚拟品和T:范本变更
#160802-00030#1  16/08/03 By xianghui  当单号为空时，不抓取单别说明
#160812-00017#4  16/08/15 By 06814     在satatchange( )的FUNCTION中，有RETURN指令但沒有加上transaction_end( ) 造成transaction沒有結束就直接RETURN
#160818-00017#4  16/08/26 By lixh      单据类作业修改，删除时需重新检查状态
#160913-00055#1  16/09/18 By lixiang   交易对象栏位开窗调整为q_pmaa001_25
#161024-00028#1  16/11/04 By 08734     输入主料件后带出的旧料件生命周期的栏位说明
#161124-00048#1  16/12/05 By 08734     星号整批调整
#161216-00029#13 17/01/23 By xujinge   申请变更料号栏位after field增加控管：不可输入当前据点已失效的bom料号
#160711-00040#3  17/02/20 By xujing   T類作業的單別開窗的where條件(找CALL q_ooba002_開頭的)增加如下程式段
#                                        CALL s_control_get_docno_sql(g_user,g_dept) RETURNING l_success,l_sql1
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"

#end add-point
 
IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目 name="global.import"

#end add-point 
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"

#end add-point
 
#單頭 type 宣告
PRIVATE type type_g_bmka_m        RECORD
       bmkadocno LIKE bmka_t.bmkadocno, 
   oobxl003 LIKE type_t.chr80, 
   bmkadocdt LIKE bmka_t.bmkadocdt, 
   bmka001 LIKE bmka_t.bmka001, 
   bmka001_desc LIKE type_t.chr80, 
   bmka002 LIKE bmka_t.bmka002, 
   bmka002_desc LIKE type_t.chr80, 
   bmka003 LIKE bmka_t.bmka003, 
   bmka003_desc LIKE type_t.chr80, 
   bmkastus LIKE bmka_t.bmkastus, 
   bmka004 LIKE bmka_t.bmka004, 
   bmka005 LIKE bmka_t.bmka005, 
   imaal003 LIKE imaal_t.imaal003, 
   imaal004 LIKE imaal_t.imaal004, 
   bmka006 LIKE bmka_t.bmka006, 
   bmka006_desc LIKE type_t.chr80, 
   bmka007 LIKE bmka_t.bmka007, 
   bmka007_desc LIKE type_t.chr80, 
   bmka008 LIKE bmka_t.bmka008, 
   bmkasite LIKE bmka_t.bmkasite, 
   bmka009 LIKE bmka_t.bmka009, 
   bmka009_desc LIKE type_t.chr80, 
   bmka010 LIKE bmka_t.bmka010, 
   bmka011 LIKE bmka_t.bmka011, 
   bmka011_desc LIKE type_t.chr80, 
   bmka012 LIKE bmka_t.bmka012, 
   bmka012_desc LIKE type_t.chr80, 
   bmka013 LIKE bmka_t.bmka013, 
   bmkaownid LIKE bmka_t.bmkaownid, 
   bmkaownid_desc LIKE type_t.chr80, 
   bmkaowndp LIKE bmka_t.bmkaowndp, 
   bmkaowndp_desc LIKE type_t.chr80, 
   bmkacrtid LIKE bmka_t.bmkacrtid, 
   bmkacrtid_desc LIKE type_t.chr80, 
   bmkacrtdp LIKE bmka_t.bmkacrtdp, 
   bmkacrtdp_desc LIKE type_t.chr80, 
   bmkacrtdt LIKE bmka_t.bmkacrtdt, 
   bmkamodid LIKE bmka_t.bmkamodid, 
   bmkamodid_desc LIKE type_t.chr80, 
   bmkamoddt LIKE bmka_t.bmkamoddt, 
   bmkacnfid LIKE bmka_t.bmkacnfid, 
   bmkacnfid_desc LIKE type_t.chr80, 
   bmkacnfdt LIKE bmka_t.bmkacnfdt
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_g_bmkb_d        RECORD
       bmkbseq LIKE bmkb_t.bmkbseq, 
   bmkb001 LIKE bmkb_t.bmkb001, 
   bmkb001_desc LIKE type_t.chr500, 
   bmkbseq1 LIKE bmkb_t.bmkbseq1, 
   bmkb002 LIKE bmkb_t.bmkb002, 
   bmkb002_desc LIKE type_t.chr500, 
   bmkb003 LIKE bmkb_t.bmkb003, 
   bmkb004 LIKE bmkb_t.bmkb004, 
   bmkbsite LIKE bmkb_t.bmkbsite
       END RECORD
PRIVATE TYPE type_g_bmkb2_d RECORD
       bmkcseq LIKE bmkc_t.bmkcseq, 
   bmkc001 LIKE bmkc_t.bmkc001, 
   bmkc002 LIKE bmkc_t.bmkc002, 
   bmkc002_desc LIKE type_t.chr500, 
   bmkc003 LIKE bmkc_t.bmkc003, 
   bmkc004 LIKE bmkc_t.bmkc004, 
   bmkcsite LIKE bmkc_t.bmkcsite
       END RECORD
PRIVATE TYPE type_g_bmkb3_d RECORD
       bmkdseq LIKE bmkd_t.bmkdseq, 
   bmkd001 LIKE bmkd_t.bmkd001, 
   bmkd001_desc LIKE type_t.chr500, 
   bmkdseq1 LIKE bmkd_t.bmkdseq1, 
   bmkd002 LIKE bmkd_t.bmkd002, 
   bmkd002_desc LIKE type_t.chr500, 
   bmkd003 LIKE bmkd_t.bmkd003, 
   bmkd004 LIKE bmkd_t.bmkd004, 
   bmkdsite LIKE bmkd_t.bmkdsite
       END RECORD
 
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
            b_bmkadocno LIKE bmka_t.bmkadocno,
      b_bmkadocdt LIKE bmka_t.bmkadocdt,
      b_bmka001 LIKE bmka_t.bmka001,
   b_bmka001_desc LIKE type_t.chr80,
      b_bmka002 LIKE bmka_t.bmka002,
   b_bmka002_desc LIKE type_t.chr80,
      b_bmka003 LIKE bmka_t.bmka003,
   b_bmka003_desc LIKE type_t.chr80,
      b_bmka009 LIKE bmka_t.bmka009,
   b_bmka009_desc LIKE type_t.chr80,
      b_bmkacrtid LIKE bmka_t.bmkacrtid,
   b_bmkacrtid_desc LIKE type_t.chr80,
      b_bmkacrtdt LIKE bmka_t.bmkacrtdt,
      b_bmkamodid LIKE bmka_t.bmkamodid,
   b_bmkamodid_desc LIKE type_t.chr80,
      b_bmkamoddt LIKE bmka_t.bmkamoddt
       END RECORD
       
#add-point:自定義模組變數(Module Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
#DEFINE g_ooef                RECORD LIKE ooef_t.*  #161124-00048#1 2016/12/05 By 08734 mark
#161124-00048#1 2016/12/05 By 08734 add(S)
DEFINE g_ooef RECORD  #組織基本資料檔
       ooefent LIKE ooef_t.ooefent, #企业编号
       ooefstus LIKE ooef_t.ooefstus, #状态码
       ooef001 LIKE ooef_t.ooef001, #组织编号
       ooef002 LIKE ooef_t.ooef002, #税号
       ooef004 LIKE ooef_t.ooef004, #单据别参照表号
       ooef005 LIKE ooef_t.ooef005, #单据据点编号
       ooef006 LIKE ooef_t.ooef006, #所属国家地区
       ooef007 LIKE ooef_t.ooef007, #上市柜公司编号
       ooef008 LIKE ooef_t.ooef008, #行事历参照表号
       ooef009 LIKE ooef_t.ooef009, #制造行事历对应类别
       ooef010 LIKE ooef_t.ooef010, #办公行事历对应类别
       ooef011 LIKE ooef_t.ooef011, #专属国家地区功能
       ooef012 LIKE ooef_t.ooef012, #联络对象识别码
       ooef013 LIKE ooef_t.ooef013, #日期显示格式
       ooefownid LIKE ooef_t.ooefownid, #资料所有者
       ooefowndp LIKE ooef_t.ooefowndp, #资料所有部门
       ooefcrtid LIKE ooef_t.ooefcrtid, #资料录入者
       ooefcrtdp LIKE ooef_t.ooefcrtdp, #资料录入部门
       ooefcrtdt LIKE ooef_t.ooefcrtdt, #资料创建日
       ooefmodid LIKE ooef_t.ooefmodid, #资料更改者
       ooefmoddt LIKE ooef_t.ooefmoddt, #最近更改日
       ooef014 LIKE ooef_t.ooef014, #币种参照表号
       ooef015 LIKE ooef_t.ooef015, #汇率参照表号
       ooef016 LIKE ooef_t.ooef016, #主币种编号
       ooef017 LIKE ooef_t.ooef017, #法人归属
       ooef018 LIKE ooef_t.ooef018, #时区
       ooef019 LIKE ooef_t.ooef019, #税区
       ooef020 LIKE ooef_t.ooef020, #工商登记号
       ooef021 LIKE ooef_t.ooef021, #法人代表
       ooef022 LIKE ooef_t.ooef022, #注册资本
       ooef003 LIKE ooef_t.ooef003, #法人否
       ooef023 LIKE ooef_t.ooef023, #数字/金额显示格式
       ooef024 LIKE ooef_t.ooef024, #据点对应客户/供应商编号
       ooef025 LIKE ooef_t.ooef025, #品管参照表号
       ooef026 LIKE ooef_t.ooef026, #默认存款银行账户
       ooef100 LIKE ooef_t.ooef100, #门店状态
       ooef101 LIKE ooef_t.ooef101, #层级类型
       ooef102 LIKE ooef_t.ooef102, #业态
       ooef103 LIKE ooef_t.ooef103, #渠道
       ooef104 LIKE ooef_t.ooef104, #商圈
       ooef105 LIKE ooef_t.ooef105, #可比店
       ooef106 LIKE ooef_t.ooef106, #价格参考标准
       ooef107 LIKE ooef_t.ooef107, #店庆会计期
       ooef108 LIKE ooef_t.ooef108, #散客编号
       ooef109 LIKE ooef_t.ooef109, #开业日期
       ooef110 LIKE ooef_t.ooef110, #闭店日期
       ooef111 LIKE ooef_t.ooef111, #测量面积
       ooef112 LIKE ooef_t.ooef112, #建筑面积
       ooef113 LIKE ooef_t.ooef113, #经营面积
       ooef114 LIKE ooef_t.ooef114, #合作对象总数
       ooef115 LIKE ooef_t.ooef115, #24小时营业否
       ooef120 LIKE ooef_t.ooef120, #本店取货订定比例
       ooef121 LIKE ooef_t.ooef121, #异店取货订定比例
       ooef122 LIKE ooef_t.ooef122, #总部配送订定比例
       ooef123 LIKE ooef_t.ooef123, #默认收货成本仓
       ooef124 LIKE ooef_t.ooef124, #默认出货成本仓
       ooef125 LIKE ooef_t.ooef125, #默认在途成本仓
       ooef150 LIKE ooef_t.ooef150, #门店类别
       ooef151 LIKE ooef_t.ooef151, #规模类别
       ooef152 LIKE ooef_t.ooef152, #门店周期
       ooef153 LIKE ooef_t.ooef153, #销售区域
       ooef154 LIKE ooef_t.ooef154, #销售省区
       ooef155 LIKE ooef_t.ooef155, #销售地区
       ooef156 LIKE ooef_t.ooef156, #销售片区
       ooef157 LIKE ooef_t.ooef157, #其他属性1
       ooef158 LIKE ooef_t.ooef158, #其他属性2
       ooef159 LIKE ooef_t.ooef159, #其他属性3
       ooef160 LIKE ooef_t.ooef160, #其他属性4
       ooef161 LIKE ooef_t.ooef161, #其他属性5
       ooef162 LIKE ooef_t.ooef162, #其他属性6
       ooef163 LIKE ooef_t.ooef163, #其他属性7
       ooef164 LIKE ooef_t.ooef164, #其他属性8
       ooef165 LIKE ooef_t.ooef165, #其他属性9
       ooef166 LIKE ooef_t.ooef166, #其他属性10
       ooef167 LIKE ooef_t.ooef167, #其他属性11
       ooef168 LIKE ooef_t.ooef168, #其他属性12
       ooef169 LIKE ooef_t.ooef169, #其他属性13
       ooef170 LIKE ooef_t.ooef170, #其他属性14
       ooef171 LIKE ooef_t.ooef171, #其他属性15
       ooef172 LIKE ooef_t.ooef172, #其他属性16
       ooef173 LIKE ooef_t.ooef173, #其他属性17
       ooefunit LIKE ooef_t.ooefunit, #应用组织
       ooef200 LIKE ooef_t.ooef200, #分群编号
       ooef201 LIKE ooef_t.ooef201, #营运据点
       ooef202 LIKE ooef_t.ooef202, #预测组织
       ooef203 LIKE ooef_t.ooef203, #部门组织
       ooef204 LIKE ooef_t.ooef204, #核算组织
       ooef205 LIKE ooef_t.ooef205, #预算组织
       ooef206 LIKE ooef_t.ooef206, #资金组织
       ooef207 LIKE ooef_t.ooef207, #资产组织
       ooef208 LIKE ooef_t.ooef208, #销售组织
       ooef209 LIKE ooef_t.ooef209, #销售范围
       ooef210 LIKE ooef_t.ooef210, #采购组织
       ooef211 LIKE ooef_t.ooef211, #物流组织
       ooef212 LIKE ooef_t.ooef212, #结算组织
       ooef213 LIKE ooef_t.ooef213, #nouse
       ooef214 LIKE ooef_t.ooef214, #nouse
       ooef215 LIKE ooef_t.ooef215, #nouse
       ooef216 LIKE ooef_t.ooef216, #nouse
       ooef217 LIKE ooef_t.ooef217, #nouse
       ooef301 LIKE ooef_t.ooef301, #营销中心
       ooef302 LIKE ooef_t.ooef302, #配送中心
       ooef303 LIKE ooef_t.ooef303, #采购中心
       ooef304 LIKE ooef_t.ooef304, #门店
       ooef305 LIKE ooef_t.ooef305, #办事处
       ooef306 LIKE ooef_t.ooef306, #nouse
       ooef307 LIKE ooef_t.ooef307, #nouse
       ooef308 LIKE ooef_t.ooef308, #nouse
       ooef309 LIKE ooef_t.ooef309, #nouse
       ooef310 LIKE ooef_t.ooef310, #nouse
       ooef126 LIKE ooef_t.ooef126, #默认收货非成本仓
       ooef127 LIKE ooef_t.ooef127, #默认出货非成本仓
       ooef128 LIKE ooef_t.ooef128, #默认在途非成本仓
       ooef116 LIKE ooef_t.ooef116 #语言别
END RECORD
#161124-00048#1 2016/12/05 By 08734 add(E)
DEFINE g_bmkb_c              LIKE type_t.num5
DEFINE g_bmkd_c              LIKE type_t.num5
#end add-point
       
#模組變數(Module Variables)
DEFINE g_bmka_m          type_g_bmka_m
DEFINE g_bmka_m_t        type_g_bmka_m
DEFINE g_bmka_m_o        type_g_bmka_m
DEFINE g_bmka_m_mask_o   type_g_bmka_m #轉換遮罩前資料
DEFINE g_bmka_m_mask_n   type_g_bmka_m #轉換遮罩後資料
 
   DEFINE g_bmkadocno_t LIKE bmka_t.bmkadocno
 
 
DEFINE g_bmkb_d          DYNAMIC ARRAY OF type_g_bmkb_d
DEFINE g_bmkb_d_t        type_g_bmkb_d
DEFINE g_bmkb_d_o        type_g_bmkb_d
DEFINE g_bmkb_d_mask_o   DYNAMIC ARRAY OF type_g_bmkb_d #轉換遮罩前資料
DEFINE g_bmkb_d_mask_n   DYNAMIC ARRAY OF type_g_bmkb_d #轉換遮罩後資料
DEFINE g_bmkb2_d          DYNAMIC ARRAY OF type_g_bmkb2_d
DEFINE g_bmkb2_d_t        type_g_bmkb2_d
DEFINE g_bmkb2_d_o        type_g_bmkb2_d
DEFINE g_bmkb2_d_mask_o   DYNAMIC ARRAY OF type_g_bmkb2_d #轉換遮罩前資料
DEFINE g_bmkb2_d_mask_n   DYNAMIC ARRAY OF type_g_bmkb2_d #轉換遮罩後資料
DEFINE g_bmkb3_d          DYNAMIC ARRAY OF type_g_bmkb3_d
DEFINE g_bmkb3_d_t        type_g_bmkb3_d
DEFINE g_bmkb3_d_o        type_g_bmkb3_d
DEFINE g_bmkb3_d_mask_o   DYNAMIC ARRAY OF type_g_bmkb3_d #轉換遮罩前資料
DEFINE g_bmkb3_d_mask_n   DYNAMIC ARRAY OF type_g_bmkb3_d #轉換遮罩後資料
 
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
DEFINE g_wc2_table2   STRING
 
DEFINE g_wc2_table3   STRING
 
 
 
DEFINE g_wc2_extend          STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                         #Current Dialog
                                                               
DEFINE g_pagestart           LIKE type_t.num10                 
DEFINE gwin_curr             ui.Window                         #Current Window
DEFINE gfrm_curr             ui.Form                           #Current Form
DEFINE g_page_action         STRING                            #page action
DEFINE g_header_hidden       LIKE type_t.num5                  #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5                  #隱藏工作Panel
DEFINE g_page                STRING                            #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10                  #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx_tmp      LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10                  #單身2目前所在筆數
DEFINE g_detail_idx_list     DYNAMIC ARRAY OF LIKE type_t.num10 #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10                  #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10                  #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10                  #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                             #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10                  #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                            #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10                  #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5                   #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
DEFINE g_idx_group           om.SaxAttributes              #頁籤群組
DEFINE g_master_commit       LIKE type_t.chr1              #確認單頭是否修改過
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"

#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"

#end add-point
 
{</section>}
 
{<section id="abmt500.main" >}
#應用 a26 樣板自動產生(Version:7)
#+ 作業開始(主程式類型)
MAIN
   #add-point:main段define(客製用) name="main.define_customerization"
   
   #end add-point   
   #add-point:main段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="main.define"
   
   #end add-point   
   
   OPTIONS
   INPUT NO WRAP
   DEFER INTERRUPT
   
   #設定SQL錯誤記錄方式 (模組內定義有效)
   WHENEVER ERROR CALL cl_err_msg_log
       
   #依模組進行系統初始化設定(系統設定)
   CALL cl_ap_init("abm","")
 
   #add-point:作業初始化 name="main.init"
   
   #end add-point
   
   
 
   #LOCK CURSOR (identifier)
   #add-point:SQL_define name="main.define_sql"
   
   #end add-point
   LET g_forupd_sql = " SELECT bmkadocno,'',bmkadocdt,bmka001,'',bmka002,'',bmka003,'',bmkastus,bmka004, 
       bmka005,'','',bmka006,'',bmka007,'',bmka008,bmkasite,bmka009,'',bmka010,bmka011,'',bmka012,'', 
       bmka013,bmkaownid,'',bmkaowndp,'',bmkacrtid,'',bmkacrtdp,'',bmkacrtdt,bmkamodid,'',bmkamoddt, 
       bmkacnfid,'',bmkacnfdt", 
                      " FROM bmka_t",
                      " WHERE bmkaent= ? AND bmkadocno=? FOR UPDATE"
   #add-point:SQL_define name="main.after_define_sql"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)                #轉換不同資料庫語法
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmt500_cl CURSOR FROM g_forupd_sql                 # LOCK CURSOR
 
   LET g_sql = " SELECT DISTINCT t0.bmkadocno,t0.bmkadocdt,t0.bmka001,t0.bmka002,t0.bmka003,t0.bmkastus, 
       t0.bmka004,t0.bmka005,t0.bmka006,t0.bmka007,t0.bmka008,t0.bmkasite,t0.bmka009,t0.bmka010,t0.bmka011, 
       t0.bmka012,t0.bmka013,t0.bmkaownid,t0.bmkaowndp,t0.bmkacrtid,t0.bmkacrtdp,t0.bmkacrtdt,t0.bmkamodid, 
       t0.bmkamoddt,t0.bmkacnfid,t0.bmkacnfdt,t1.bmjal003 ,t2.ooag011 ,t3.ooefl003 ,t4.oocql004 ,t5.pmaal003 , 
       t6.oocql004 ,t7.oocql004 ,t8.ooag011 ,t9.ooefl003 ,t10.ooag011 ,t11.ooefl003 ,t12.ooag011 ,t13.ooag011", 
 
               " FROM bmka_t t0",
                              " LEFT JOIN bmjal_t t1 ON t1.bmjalent="||g_enterprise||" AND t1.bmjal001=t0.bmka001 AND t1.bmjal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.bmka002  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.bmka003 AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t4 ON t4.oocqlent="||g_enterprise||" AND t4.oocql001='221' AND t4.oocql002=t0.bmka007 AND t4.oocql003='"||g_dlang||"' ",
               " LEFT JOIN pmaal_t t5 ON t5.pmaalent="||g_enterprise||" AND t5.pmaal001=t0.bmka009 AND t5.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t6 ON t6.oocqlent="||g_enterprise||" AND t6.oocql001='210' AND t6.oocql002=t0.bmka011 AND t6.oocql003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t7 ON t7.oocqlent="||g_enterprise||" AND t7.oocql001='210' AND t7.oocql002=t0.bmka012 AND t7.oocql003='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t8 ON t8.ooagent="||g_enterprise||" AND t8.ooag001=t0.bmkaownid  ",
               " LEFT JOIN ooefl_t t9 ON t9.ooeflent="||g_enterprise||" AND t9.ooefl001=t0.bmkaowndp AND t9.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t10 ON t10.ooagent="||g_enterprise||" AND t10.ooag001=t0.bmkacrtid  ",
               " LEFT JOIN ooefl_t t11 ON t11.ooeflent="||g_enterprise||" AND t11.ooefl001=t0.bmkacrtdp AND t11.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t12 ON t12.ooagent="||g_enterprise||" AND t12.ooag001=t0.bmkamodid  ",
               " LEFT JOIN ooag_t t13 ON t13.ooagent="||g_enterprise||" AND t13.ooag001=t0.bmkacnfid  ",
 
               " WHERE t0.bmkaent = " ||g_enterprise|| " AND t0.bmkadocno = ?"
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
   #add-point:SQL_define name="main.after_refresh_sql"
   
   #end add-point
   PREPARE abmt500_master_referesh FROM g_sql
 
    
 
   
   IF g_bgjob = "Y" THEN
      #add-point:Service Call name="main.servicecall"
      
      #end add-point
   ELSE
      #畫面開啟 (identifier)
      OPEN WINDOW w_abmt500 WITH FORM cl_ap_formpath("abm",g_code)
   
      #瀏覽頁簽資料初始化
      CALL cl_ui_init()
   
      #程式初始化
      CALL abmt500_init()   
 
      #進入選單 Menu (="N")
      CALL abmt500_ui_dialog() 
      
      #add-point:畫面關閉前 name="main.before_close"
      
      #end add-point
 
      #畫面關閉
      CLOSE WINDOW w_abmt500
      
   END IF 
   
   CLOSE abmt500_cl
   
   
 
   #add-point:作業離開前 name="main.exit"
   
   #end add-point
 
   #離開作業
   CALL cl_ap_exitprogram("0")
END MAIN
 
 
 
 
{</section>}
 
{<section id="abmt500.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION abmt500_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   
   #end add-point    
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   
   #end add-point
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   
   #各個page指標
   LET g_detail_idx_list[1] = 1 
   LET g_detail_idx_list[2] = 1
   LET g_detail_idx_list[3] = 1
 
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
      CALL cl_set_combo_scc_part('bmkastus','13','N,Y,A,D,R,W,X')
 
      CALL cl_set_combo_scc('bmkc001','5446') 
 
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
   
   #page群組
   LET g_idx_group = om.SaxAttributes.create()
   CALL g_idx_group.addAttribute("'1',","1")
   CALL g_idx_group.addAttribute("'2',","1")
   CALL g_idx_group.addAttribute("'3',","1")
 
 
   #add-point:畫面資料初始化 name="init.init"
  # SELECT * INTO g_ooef.* FROM ooef_t WHERE ooefent = g_enterprise AND ooef001 = g_site  #161124-00048#1 2016/12/05 By 08734 mark
   SELECT ooefent,ooefstus,ooef001,ooef002,ooef004,ooef005,ooef006,ooef007,ooef008,ooef009,ooef010,ooef011,ooef012,ooef013,ooefownid,ooefowndp,ooefcrtid,ooefcrtdp,ooefcrtdt,ooefmodid,ooefmoddt,ooef014,ooef015,ooef016,ooef017,ooef018,ooef019,ooef020,ooef021,ooef022,ooef003,ooef023,ooef024,ooef025,ooef026,ooef100,ooef101,ooef102,ooef103,ooef104,ooef105,ooef106,ooef107,ooef108,ooef109,ooef110,ooef111,ooef112,ooef113,ooef114,ooef115,ooef120,ooef121,ooef122,ooef123,ooef124,ooef125,ooef150,ooef151,ooef152,ooef153,ooef154,ooef155,ooef156,ooef157,ooef158,
       ooef159,ooef160,ooef161,ooef162,ooef163,ooef164,ooef165,ooef166,ooef167,ooef168,ooef169,ooef170,ooef171,ooef172,ooef173,ooefunit,ooef200,ooef201,ooef202,ooef203,ooef204,ooef205,ooef206,ooef207,ooef208,ooef209,ooef210,ooef211,ooef212,ooef213,ooef214,ooef215,ooef216,ooef217,ooef301,ooef302,ooef303,ooef304,ooef305,ooef306,ooef307,ooef308,ooef309,ooef310,ooef126,ooef127,ooef128,ooef116   #161124-00048#1 2016/12/05 By 08734 add 
      INTO g_ooef.* FROM ooef_t WHERE ooefent = g_enterprise AND ooef001 = g_site
   IF cl_get_para(g_enterprise,g_site,'S-BAS-0036') = 'N' THEN
      CALL cl_set_comp_visible("bmka006,bmka006_desc",FALSE)
   END IF   
   #end add-point
   
   #初始化搜尋條件
   CALL abmt500_default_search()
    
END FUNCTION
 
{</section>}
 
{<section id="abmt500.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION abmt500_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   
   #end add-point
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   DEFINE  l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE  l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE  l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   #因應查詢方案進行處理
   IF g_default THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   ELSE
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF
   
   #action default動作
   #應用 a42 樣板自動產生(Version:3)
   #進入程式時預設執行的動作
   CASE g_actdefault
      WHEN "insert"
         LET g_action_choice="insert"
         LET g_actdefault = ""
         IF cl_auth_chk_act("insert") THEN
            CALL abmt500_insert()
            #add-point:ON ACTION insert name="menu.default.insert"
            
            #END add-point
         END IF
 
      #add-point:action default自訂 name="ui_dialog.action_default"
      
      #end add-point
      OTHERWISE
   END CASE
 
 
 
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE g_bmka_m.* TO NULL
         CALL g_bmkb_d.clear()
         CALL g_bmkb2_d.clear()
         CALL g_bmkb3_d.clear()
 
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL abmt500_init()
      END IF
   
      CALL lib_cl_dlg.cl_dlg_before_display()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
         #左側瀏覽頁簽
         DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
            BEFORE ROW
               #回歸舊筆數位置 (回到當時異動的筆數)
               LET g_current_idx = DIALOG.getCurrentRow("s_browse")
               IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
                  CALL DIALOG.setCurrentRow("s_browse",g_current_row)
                  LET g_current_idx = g_current_row
               END IF
               LET g_current_row = g_current_idx #目前指標
               LET g_current_sw = TRUE
         
               IF g_current_idx > g_browser.getLength() THEN
                  LET g_current_idx = g_browser.getLength()
               END IF 
               
               CALL abmt500_fetch('') # reload data
               LET l_ac = 1
               CALL abmt500_ui_detailshow() #Setting the current row 
         
               CALL abmt500_idx_chk()
               #NEXT FIELD bmkbseq
         
               ON ACTION qbefield_user   #欄位隱藏設定 
                  LET g_action_choice="qbefield_user"
                  CALL cl_ui_qbefield_user()
         END DISPLAY
    
         DISPLAY ARRAY g_bmkb_d TO s_detail1.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmt500_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[1] = l_ac
               CALL g_idx_group.addAttribute("'1',",l_ac)
               
               #add-point:page1, before row動作 name="ui_dialog.page1.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail1")
               LET g_current_page = 1
               #顯示單身筆數
               CALL abmt500_idx_chk()
               #add-point:page1自定義行為 name="ui_dialog.page1.before_display"
               
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            
               
            #add-point:page1自定義行為 name="ui_dialog.page1.action"
            
            #end add-point
               
         END DISPLAY
        
         #第一階單身段落
         DISPLAY ARRAY g_bmkb2_d TO s_detail2.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmt500_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[2] = l_ac
               CALL g_idx_group.addAttribute("'2',",l_ac)
               
               #add-point:page2, before row動作 name="ui_dialog.body2.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail2")
               LET g_current_page = 2
               #顯示單身筆數
               CALL abmt500_idx_chk()
               #add-point:page2自定義行為 name="ui_dialog.body2.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_2)
            
         
            #add-point:page2自定義行為 name="ui_dialog.body2.action"
            
            #end add-point
         
         END DISPLAY
         #第一階單身段落
         DISPLAY ARRAY g_bmkb3_d TO s_detail3.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL abmt500_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[3] = l_ac
               CALL g_idx_group.addAttribute("'3',",l_ac)
               
               #add-point:page3, before row動作 name="ui_dialog.body3.before_row"
               
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'3',"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("s_detail3")
               LET g_current_page = 3
               #顯示單身筆數
               CALL abmt500_idx_chk()
               #add-point:page3自定義行為 name="ui_dialog.body3.before_display"
               
               #end add-point
      
            #自訂ACTION(detail_show,page_3)
            
         
            #add-point:page3自定義行為 name="ui_dialog.body3.action"
            
            #end add-point
         
         END DISPLAY
 
         
 
         
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         
         #end add-point
         
         SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            #先填充browser資料
            CALL abmt500_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
               CALL DIALOG.setCurrentRow("s_browse",g_current_row)
               LET g_current_idx = g_current_row
            END IF
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL abmt500_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL abmt500_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL abmt500_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2 name="ui_dialog.before_dialog2"
            
            #end add-point
 
         #add-point:ui_dialog段more_action name="ui_dialog.more_action"
         
         #end add-point
 
         #狀態碼切換
         ON ACTION statechange
            LET g_action_choice = "statechange"
            CALL abmt500_statechange()
            #根據資料狀態切換action狀態
            CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
            CALL abmt500_set_act_visible()   
            CALL abmt500_set_act_no_visible()
            IF NOT (g_bmka_m.bmkadocno IS NULL
 
              ) THEN
               #組合條件
               LET g_add_browse = " bmkaent = " ||g_enterprise|| " AND",
                                  " bmkadocno = '", g_bmka_m.bmkadocno, "' "
 
               #填到對應位置
               CALL abmt500_browser_fill("")
            END IF
         #應用 a32 樣板自動產生(Version:3)
         #簽核狀況
         ON ACTION bpm_status
            #查詢簽核狀況, 統一建立HyperLink
            CALL cl_bpm_status()
            #add-point:ON ACTION bpm_status name="menu.bpm_status"
            
            #END add-point
 
 
 
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               INITIALIZE g_wc2_table2 TO NULL
 
               INITIALIZE g_wc2_table3 TO NULL
 
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "bmka_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmkb_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmkc_t" 
                        LET g_wc2_table2 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "bmkd_t" 
                        LET g_wc2_table3 = la_wc[li_idx].wc
 
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
                  OR NOT cl_null(g_wc2_table2)
 
                  OR NOT cl_null(g_wc2_table3)
 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  #組合g_wc2
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
                  END IF
 
                  IF g_wc2_table3 <> " 1=1" AND NOT cl_null(g_wc2_table3) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
                  END IF
 
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
 
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
               END IF
               CALL abmt500_browser_fill("F")   #browser_fill()會將notice區塊清空
               CALL cl_notice()   #重新顯示,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               INITIALIZE g_wc2_table2 TO NULL
 
               INITIALIZE g_wc2_table3 TO NULL
 
 
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "bmka_t" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmkb_t" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "bmkc_t" 
                        LET g_wc2_table2 = la_wc[li_idx].wc
 
                     WHEN la_wc[li_idx].tableid = "bmkd_t" 
                        LET g_wc2_table3 = la_wc[li_idx].wc
 
 
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1)
                  OR NOT cl_null(g_wc2_table2)
 
                  OR NOT cl_null(g_wc2_table3)
 
 
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
                  END IF
 
                  IF g_wc2_table3 <> " 1=1" AND NOT cl_null(g_wc2_table3) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
                  END IF
 
 
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
                  #取得條件後需要重查、跳到結果第一筆資料的功能程式段
                  CALL abmt500_browser_fill("F")
                  IF g_browser_cnt = 0 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "-100" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     CLEAR FORM
                  ELSE
                     CALL abmt500_fetch("F")
                  END IF
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            CALL cl_notice()
          
         #應用 a49 樣板自動產生(Version:4)
            #過濾瀏覽頁資料
            ON ACTION filter
               LET g_action_choice = "fetch"
               #add-point:filter action name="ui_dialog.action.filter"
               
               #end add-point
               CALL abmt500_filter()
               EXIT DIALOG
 
 
 
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL abmt500_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmt500_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL abmt500_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmt500_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL abmt500_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmt500_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL abmt500_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmt500_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL abmt500_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL abmt500_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(g_bmkb_d)
                  LET g_export_id[1]   = "s_detail1"
                  LET g_export_node[2] = base.typeInfo.create(g_bmkb2_d)
                  LET g_export_id[2]   = "s_detail2"
                  LET g_export_node[3] = base.typeInfo.create(g_bmkb3_d)
                  LET g_export_id[3]   = "s_detail3"
 
                  #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
                  
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
         #瀏覽頁折疊
         ON ACTION worksheethidden   
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
            END IF
            IF lb_first THEN
               LET lb_first = FALSE
               NEXT FIELD bmkbseq
            END IF
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify
            LET g_action_choice="modify"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = ''
               CALL abmt500_modify()
               #add-point:ON ACTION modify name="menu.modify"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION modify_detail
            LET g_action_choice="modify_detail"
            IF cl_auth_chk_act("modify") THEN
               LET g_aw = g_curr_diag.getCurrentItem()
               CALL abmt500_modify()
               #add-point:ON ACTION modify_detail name="menu.modify_detail"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION delete
            LET g_action_choice="delete"
            IF cl_auth_chk_act("delete") THEN
               CALL abmt500_delete()
               #add-point:ON ACTION delete name="menu.delete"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION insert
            LET g_action_choice="insert"
            IF cl_auth_chk_act("insert") THEN
               CALL abmt500_insert()
               #add-point:ON ACTION insert name="menu.insert"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION output
            LET g_action_choice="output"
            IF cl_auth_chk_act("output") THEN
               
               #add-point:ON ACTION output name="menu.output"
               LET g_rep_wc = "bmkaent ="|| g_enterprise ||" AND bmkadocno ='"|| g_bmka_m.bmkadocno||"'"
               #END add-point
               &include "erp/abm/abmt500_rep.4gl"
               #add-point:ON ACTION output.after name="menu.after_output"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION quickprint
            LET g_action_choice="quickprint"
            IF cl_auth_chk_act("quickprint") THEN
               
               #add-point:ON ACTION quickprint name="menu.quickprint"
               LET g_rep_wc = "bmkaent ="|| g_enterprise ||" AND bmkadocno ='"|| g_bmka_m.bmkadocno||"'"
               #END add-point
               &include "erp/abm/abmt500_rep.4gl"
               #add-point:ON ACTION quickprint.after name="menu.after_quickprint"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION reproduce
            LET g_action_choice="reproduce"
            IF cl_auth_chk_act("reproduce") THEN
               CALL abmt500_reproduce()
               #add-point:ON ACTION reproduce name="menu.reproduce"
               
               #END add-point
               
            END IF
 
 
 
 
         #應用 a43 樣板自動產生(Version:4)
         ON ACTION query
            LET g_action_choice="query"
            IF cl_auth_chk_act("query") THEN
               CALL abmt500_query()
               #add-point:ON ACTION query name="menu.query"
               
               #END add-point
               #應用 a59 樣板自動產生(Version:3)  
               CALL g_curr_diag.setCurrentRow("s_detail1",1)
               CALL g_curr_diag.setCurrentRow("s_detail2",1)
               CALL g_curr_diag.setCurrentRow("s_detail3",1)
 
 
 
 
            END IF
 
 
 
 
         
         #應用 a46 樣板自動產生(Version:3)
         #新增相關文件
         ON ACTION related_document
            CALL abmt500_set_pk_array()
            IF cl_auth_chk_act("related_document") THEN
               #add-point:ON ACTION related_document name="ui_dialog.dialog.related_document"
               
               #END add-point
               CALL cl_doc()
            END IF
            
         ON ACTION agendum
            CALL abmt500_set_pk_array()
            #add-point:ON ACTION agendum name="ui_dialog.dialog.agendum"
            
            #END add-point
            CALL cl_user_overview()
            CALL cl_user_overview_set_follow_pic()
         
         ON ACTION followup
            CALL abmt500_set_pk_array()
            #add-point:ON ACTION followup name="ui_dialog.dialog.followup"
            
            #END add-point
            CALL cl_user_overview_follow(g_bmka_m.bmkadocdt)
 
 
 
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG
 
      #(ver:79) ---add start---
      #add-point:ui_dialog段 after dialog name="ui_dialog.exit_dialog"
      
      #end add-point
      #(ver:79) --- add end ---
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前 name="ui_dialog.b_exit"
         
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
 
{</section>}
 
{<section id="abmt500.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION abmt500_browser_fill(ps_page_action)
   #add-point:browser_fill段define(客製用) name="browser_fill.define_customerization"
   
   #end add-point  
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="browser_fill.define"
   
   #end add-point    
   
   #add-point:Function前置處理 name="browser_fill.before_browser_fill"
   
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前 name="browser_fill.before_foreach"
   
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT DISTINCT bmkadocno ",
                      " FROM bmka_t ",
                      " ",
                      " LEFT JOIN bmkb_t ON bmkbent = bmkaent AND bmkadocno = bmkbdocno ", "  ",
                      #add-point:browser_fill段sql(bmkb_t1) name="browser_fill.cnt.join.}"
                      
                      #end add-point
                      " LEFT JOIN bmkc_t ON bmkcent = bmkaent AND bmkadocno = bmkcdocno", "  ",
                      #add-point:browser_fill段sql(bmkc_t1) name="browser_fill.cnt.join.bmkc_t1"
                      
                      #end add-point
 
                      " LEFT JOIN bmkd_t ON bmkdent = bmkaent AND bmkadocno = bmkddocno", "  ",
                      #add-point:browser_fill段sql(bmkd_t1) name="browser_fill.cnt.join.bmkd_t1"
                      
                      #end add-point
 
 
 
                      " ", 
                      " ", 
                      " ",                      
 
                      " ",                      
 
 
 
                      " WHERE bmkaent = " ||g_enterprise|| " AND bmkbent = " ||g_enterprise|| " AND ",l_wc, " AND ", l_wc2, cl_sql_add_filter("bmka_t")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT DISTINCT bmkadocno ",
                      " FROM bmka_t ", 
                      "  ",
                      "  ",
                      " WHERE bmkaent = " ||g_enterprise|| " AND ",l_wc CLIPPED, cl_sql_add_filter("bmka_t")
   END IF
   
   #add-point:browser_fill,cnt wc name="browser_fill.cnt_sqlwc"
   
   #end add-point
   
   LET g_sql = " SELECT COUNT(1) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前 name="browser_fill.before_count"
   
   #end add-point
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE header_cnt_pre FROM g_sql
      EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
      FREE header_cnt_pre
   END IF
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code = 9035 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE g_bmka_m.* TO NULL
      CALL g_bmkb_d.clear()        
      CALL g_bmkb2_d.clear() 
      CALL g_bmkb3_d.clear() 
 
      #add-point:browser_fill g_add_browse段額外處理 name="browser_fill.add_browse.other"
      
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照t0.bmkadocno,t0.bmkadocdt,t0.bmka001,t0.bmka002,t0.bmka003,t0.bmka009,t0.bmkacrtid,t0.bmkacrtdt,t0.bmkamodid,t0.bmkamoddt Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.bmkastus,t0.bmkadocno,t0.bmkadocdt,t0.bmka001,t0.bmka002,t0.bmka003, 
          t0.bmka009,t0.bmkacrtid,t0.bmkacrtdt,t0.bmkamodid,t0.bmkamoddt,t1.bmjal003 ,t2.ooag011 ,t3.ooefl003 , 
          t4.pmaal003 ,t5.ooag011 ,t6.ooag011 ",
                  " FROM bmka_t t0",
                  "  ",
                  "  LEFT JOIN bmkb_t ON bmkbent = bmkaent AND bmkadocno = bmkbdocno ", "  ", 
                  #add-point:browser_fill段sql(bmkb_t1) name="browser_fill.join.bmkb_t1"
                  
                  #end add-point
                  "  LEFT JOIN bmkc_t ON bmkcent = bmkaent AND bmkadocno = bmkcdocno", "  ", 
                  #add-point:browser_fill段sql(bmkc_t1) name="browser_fill.join.bmkc_t1"
                  
                  #end add-point
 
                  "  LEFT JOIN bmkd_t ON bmkdent = bmkaent AND bmkadocno = bmkddocno", "  ", 
                  #add-point:browser_fill段sql(bmkd_t1) name="browser_fill.join.bmkd_t1"
                  
                  #end add-point
 
 
 
                  " ", 
                  " ",                      
 
                  " ",                      
 
 
 
                                 " LEFT JOIN bmjal_t t1 ON t1.bmjalent="||g_enterprise||" AND t1.bmjal001=t0.bmka001 AND t1.bmjal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.bmka002  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.bmka003 AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN pmaal_t t4 ON t4.pmaalent="||g_enterprise||" AND t4.pmaal001=t0.bmka009 AND t4.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t5 ON t5.ooagent="||g_enterprise||" AND t5.ooag001=t0.bmkacrtid  ",
               " LEFT JOIN ooag_t t6 ON t6.ooagent="||g_enterprise||" AND t6.ooag001=t0.bmkamodid  ",
 
                  " WHERE t0.bmkaent = " ||g_enterprise|| " AND ",l_wc," AND ",l_wc2, cl_sql_add_filter("bmka_t")
   ELSE
      #單身無輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT t0.bmkastus,t0.bmkadocno,t0.bmkadocdt,t0.bmka001,t0.bmka002,t0.bmka003, 
          t0.bmka009,t0.bmkacrtid,t0.bmkacrtdt,t0.bmkamodid,t0.bmkamoddt,t1.bmjal003 ,t2.ooag011 ,t3.ooefl003 , 
          t4.pmaal003 ,t5.ooag011 ,t6.ooag011 ",
                  " FROM bmka_t t0",
                  "  ",
                                 " LEFT JOIN bmjal_t t1 ON t1.bmjalent="||g_enterprise||" AND t1.bmjal001=t0.bmka001 AND t1.bmjal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t2 ON t2.ooagent="||g_enterprise||" AND t2.ooag001=t0.bmka002  ",
               " LEFT JOIN ooefl_t t3 ON t3.ooeflent="||g_enterprise||" AND t3.ooefl001=t0.bmka003 AND t3.ooefl002='"||g_dlang||"' ",
               " LEFT JOIN pmaal_t t4 ON t4.pmaalent="||g_enterprise||" AND t4.pmaal001=t0.bmka009 AND t4.pmaal002='"||g_dlang||"' ",
               " LEFT JOIN ooag_t t5 ON t5.ooagent="||g_enterprise||" AND t5.ooag001=t0.bmkacrtid  ",
               " LEFT JOIN ooag_t t6 ON t6.ooagent="||g_enterprise||" AND t6.ooag001=t0.bmkamodid  ",
 
                  " WHERE t0.bmkaent = " ||g_enterprise|| " AND ",l_wc, cl_sql_add_filter("bmka_t")
   END IF
   #add-point:browser_fill,sql wc name="browser_fill.fill_sqlwc"
   
   #end add-point
   LET g_sql = g_sql, " ORDER BY bmkadocno ",g_order
 
   #add-point:browser_fill,before_prepare name="browser_fill.before_prepare"
   
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"bmka_t") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE browse_pre FROM g_sql
      DECLARE browse_cur CURSOR FOR browse_pre
      
      #add-point:browser_fill段open cursor name="browser_fill.open"
      
      #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,g_browser[g_cnt].b_bmkadocno,g_browser[g_cnt].b_bmkadocdt, 
          g_browser[g_cnt].b_bmka001,g_browser[g_cnt].b_bmka002,g_browser[g_cnt].b_bmka003,g_browser[g_cnt].b_bmka009, 
          g_browser[g_cnt].b_bmkacrtid,g_browser[g_cnt].b_bmkacrtdt,g_browser[g_cnt].b_bmkamodid,g_browser[g_cnt].b_bmkamoddt, 
          g_browser[g_cnt].b_bmka001_desc,g_browser[g_cnt].b_bmka002_desc,g_browser[g_cnt].b_bmka003_desc, 
          g_browser[g_cnt].b_bmka009_desc,g_browser[g_cnt].b_bmkacrtid_desc,g_browser[g_cnt].b_bmkamodid_desc 
 
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference name="browser_fill.reference"
         
         #end add-point
      
         #遮罩相關處理
         CALL abmt500_browser_mask()
      
               #應用 a24 樣板自動產生(Version:3)
      #browser顯示圖片
      CASE g_browser[g_cnt].b_statepic
         WHEN "N"
            LET g_browser[g_cnt].b_statepic = "stus/16/unconfirmed.png"
         WHEN "Y"
            LET g_browser[g_cnt].b_statepic = "stus/16/confirmed.png"
         WHEN "A"
            LET g_browser[g_cnt].b_statepic = "stus/16/approved.png"
         WHEN "D"
            LET g_browser[g_cnt].b_statepic = "stus/16/withdraw.png"
         WHEN "R"
            LET g_browser[g_cnt].b_statepic = "stus/16/rejection.png"
         WHEN "W"
            LET g_browser[g_cnt].b_statepic = "stus/16/signing.png"
         WHEN "X"
            LET g_browser[g_cnt].b_statepic = "stus/16/invalid.png"
         
      END CASE
 
 
 
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_browse THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      FREE browse_pre
   END IF
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_bmkadocno) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0
 
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前 name="browser_fill.after"
   CALL abmt500_fetch("")
   #end add-point   
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION abmt500_ui_headershow()
   #add-point:ui_headershow段define(客製用) name="ui_headershow.define_customerization"
   
   #end add-point  
   #add-point:ui_headershow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_headershow.define"
   
   #end add-point      
   
   #add-point:Function前置處理  name="ui_headershow.pre_function"
   
   #end add-point
   
   LET g_bmka_m.bmkadocno = g_browser[g_current_idx].b_bmkadocno   
 
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
   CALL abmt500_bmka_t_mask()
   CALL abmt500_show()
      
END FUNCTION
 
{</section>}
 
{<section id="abmt500.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION abmt500_ui_detailshow()
   #add-point:ui_detailshow段define(客製用) name="ui_detailshow.define_customerization"
   
   #end add-point    
   #add-point:ui_detailshow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_detailshow.define"
   
   #end add-point    
 
   #add-point:Function前置處理 name="ui_detailshow.before"
   
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("s_detail1",g_detail_idx)      
      CALL g_curr_diag.setCurrentRow("s_detail2",g_detail_idx)
      CALL g_curr_diag.setCurrentRow("s_detail3",g_detail_idx)
 
   END IF
   
   #add-point:ui_detailshow段after name="ui_detailshow.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION abmt500_ui_browser_refresh()
   #add-point:ui_browser_refresh段define(客製用) name="ui_browser_refresh.define_customerization"
   
   #end add-point    
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_browser_refresh.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="ui_browser_refresh.pre_function"
   
   #end add-point
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_bmkadocno = g_bmka_m.bmkadocno 
 
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after name="ui_browser_refresh.after"
   
   #end add-point    
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION abmt500_construct()
   #add-point:cs段define(客製用) name="cs.define_customerization"
   
   #end add-point    
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   DEFINE la_wc       DYNAMIC ARRAY OF RECORD
          tableid     STRING,
          wc          STRING
          END RECORD
   DEFINE li_idx      LIKE type_t.num10
   #add-point:cs段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="cs.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="cs.pre_function"
   
   #end add-point
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE g_bmka_m.* TO NULL
   CALL g_bmkb_d.clear()        
   CALL g_bmkb2_d.clear() 
   CALL g_bmkb3_d.clear() 
 
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
   INITIALIZE g_wc2_table2 TO NULL
 
   INITIALIZE g_wc2_table3 TO NULL
 
 
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前 name="cs.before_construct"
   
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON bmkadocno,oobxl003,bmkadocdt,bmka001,bmka002,bmka003,bmkastus,bmka004, 
          bmka005,bmka006,bmka006_desc,bmka007,bmka008,bmkasite,bmka009,bmka010,bmka011,bmka012,bmka013, 
          bmkaownid,bmkaowndp,bmkacrtid,bmkacrtdp,bmkacrtdt,bmkamodid,bmkamoddt,bmkacnfid,bmkacnfdt
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.head.before_construct"
            
            #end add-point 
            
         #公用欄位開窗相關處理
         #應用 a11 樣板自動產生(Version:3)
         #共用欄位查詢處理  
         ##----<<bmkacrtdt>>----
         AFTER FIELD bmkacrtdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
 
         #----<<bmkamoddt>>----
         AFTER FIELD bmkamoddt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<bmkacnfdt>>----
         AFTER FIELD bmkacnfdt
            CALL FGL_DIALOG_GETBUFFER() RETURNING ls_result
            IF NOT cl_null(ls_result) THEN
               IF NOT cl_chk_date_symbol(ls_result) THEN
                  LET ls_result = cl_add_date_extra_cond(ls_result)
               END IF
            END IF
            CALL FGL_DIALOG_SETBUFFER(ls_result)
         
         #----<<bmkapstdt>>----
 
 
 
            
         #一般欄位開窗相關處理    
                  #Ctrlp:construct.c.bmkadocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkadocno
            #add-point:ON ACTION controlp INFIELD bmkadocno name="construct.c.bmkadocno"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.where = " bmkasite ='",g_site,"'"
            CALL q_bmkadocno()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkadocno  #顯示到畫面上
            NEXT FIELD bmkadocno                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkadocno
            #add-point:BEFORE FIELD bmkadocno name="construct.b.bmkadocno"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkadocno
            
            #add-point:AFTER FIELD bmkadocno name="construct.a.bmkadocno"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD oobxl003
            #add-point:BEFORE FIELD oobxl003 name="construct.b.oobxl003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD oobxl003
            
            #add-point:AFTER FIELD oobxl003 name="construct.a.oobxl003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.oobxl003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD oobxl003
            #add-point:ON ACTION controlp INFIELD oobxl003 name="construct.c.oobxl003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkadocdt
            #add-point:BEFORE FIELD bmkadocdt name="construct.b.bmkadocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkadocdt
            
            #add-point:AFTER FIELD bmkadocdt name="construct.a.bmkadocdt"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkadocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkadocdt
            #add-point:ON ACTION controlp INFIELD bmkadocdt name="construct.c.bmkadocdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmka001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka001
            #add-point:ON ACTION controlp INFIELD bmka001 name="construct.c.bmka001"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_bmja001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka001  #顯示到畫面上
            NEXT FIELD bmka001                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka001
            #add-point:BEFORE FIELD bmka001 name="construct.b.bmka001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka001
            
            #add-point:AFTER FIELD bmka001 name="construct.a.bmka001"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka002
            #add-point:ON ACTION controlp INFIELD bmka002 name="construct.c.bmka002"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka002  #顯示到畫面上
            NEXT FIELD bmka002                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka002
            #add-point:BEFORE FIELD bmka002 name="construct.b.bmka002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka002
            
            #add-point:AFTER FIELD bmka002 name="construct.a.bmka002"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka003
            #add-point:ON ACTION controlp INFIELD bmka003 name="construct.c.bmka003"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = g_today
            CALL q_ooeg001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka003  #顯示到畫面上
            NEXT FIELD bmka003                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka003
            #add-point:BEFORE FIELD bmka003 name="construct.b.bmka003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka003
            
            #add-point:AFTER FIELD bmka003 name="construct.a.bmka003"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkastus
            #add-point:BEFORE FIELD bmkastus name="construct.b.bmkastus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkastus
            
            #add-point:AFTER FIELD bmkastus name="construct.a.bmkastus"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkastus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkastus
            #add-point:ON ACTION controlp INFIELD bmkastus name="construct.c.bmkastus"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka004
            #add-point:BEFORE FIELD bmka004 name="construct.b.bmka004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka004
            
            #add-point:AFTER FIELD bmka004 name="construct.a.bmka004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka004
            #add-point:ON ACTION controlp INFIELD bmka004 name="construct.c.bmka004"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmka005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka005
            #add-point:ON ACTION controlp INFIELD bmka005 name="construct.c.bmka005"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            #CALL q_imaa001()                           #呼叫開窗     #160802-00023#1 mark
            CALL q_imaa001_7()                                       #160802-00023#1 add
            DISPLAY g_qryparam.return1 TO bmka005  #顯示到畫面上
            NEXT FIELD bmka005                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka005
            #add-point:BEFORE FIELD bmka005 name="construct.b.bmka005"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka005
            
            #add-point:AFTER FIELD bmka005 name="construct.a.bmka005"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka006
            #add-point:BEFORE FIELD bmka006 name="construct.b.bmka006"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka006
            
            #add-point:AFTER FIELD bmka006 name="construct.a.bmka006"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka006
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka006
            #add-point:ON ACTION controlp INFIELD bmka006 name="construct.c.bmka006"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka006_desc
            #add-point:BEFORE FIELD bmka006_desc name="construct.b.bmka006_desc"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka006_desc
            
            #add-point:AFTER FIELD bmka006_desc name="construct.a.bmka006_desc"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka006_desc
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka006_desc
            #add-point:ON ACTION controlp INFIELD bmka006_desc name="construct.c.bmka006_desc"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmka007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka007
            #add-point:ON ACTION controlp INFIELD bmka007 name="construct.c.bmka007"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "221"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka007  #顯示到畫面上
            NEXT FIELD bmka007                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka007
            #add-point:BEFORE FIELD bmka007 name="construct.b.bmka007"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka007
            
            #add-point:AFTER FIELD bmka007 name="construct.a.bmka007"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka008
            #add-point:BEFORE FIELD bmka008 name="construct.b.bmka008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka008
            
            #add-point:AFTER FIELD bmka008 name="construct.a.bmka008"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka008
            #add-point:ON ACTION controlp INFIELD bmka008 name="construct.c.bmka008"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkasite
            #add-point:BEFORE FIELD bmkasite name="construct.b.bmkasite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkasite
            
            #add-point:AFTER FIELD bmkasite name="construct.a.bmkasite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkasite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkasite
            #add-point:ON ACTION controlp INFIELD bmkasite name="construct.c.bmkasite"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmka009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka009
            #add-point:ON ACTION controlp INFIELD bmka009 name="construct.c.bmka009"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            #CALL q_pmaa001()                           #呼叫開窗  #160913-00055#1 
            CALL q_pmaa001_25()        #160913-00055#1 
            DISPLAY g_qryparam.return1 TO bmka009  #顯示到畫面上
            NEXT FIELD bmka009                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka009
            #add-point:BEFORE FIELD bmka009 name="construct.b.bmka009"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka009
            
            #add-point:AFTER FIELD bmka009 name="construct.a.bmka009"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka010
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka010
            #add-point:ON ACTION controlp INFIELD bmka010 name="construct.c.bmka010"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_bmfa001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka010  #顯示到畫面上
            NEXT FIELD bmka010                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka010
            #add-point:BEFORE FIELD bmka010 name="construct.b.bmka010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka010
            
            #add-point:AFTER FIELD bmka010 name="construct.a.bmka010"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka011
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka011
            #add-point:ON ACTION controlp INFIELD bmka011 name="construct.c.bmka011"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "210"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka011  #顯示到畫面上
            NEXT FIELD bmka011                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka011
            #add-point:BEFORE FIELD bmka011 name="construct.b.bmka011"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka011
            
            #add-point:AFTER FIELD bmka011 name="construct.a.bmka011"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka012
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka012
            #add-point:ON ACTION controlp INFIELD bmka012 name="construct.c.bmka012"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "210"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmka012  #顯示到畫面上
            NEXT FIELD bmka012                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka012
            #add-point:BEFORE FIELD bmka012 name="construct.b.bmka012"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka012
            
            #add-point:AFTER FIELD bmka012 name="construct.a.bmka012"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka013
            #add-point:BEFORE FIELD bmka013 name="construct.b.bmka013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka013
            
            #add-point:AFTER FIELD bmka013 name="construct.a.bmka013"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmka013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka013
            #add-point:ON ACTION controlp INFIELD bmka013 name="construct.c.bmka013"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmkaownid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkaownid
            #add-point:ON ACTION controlp INFIELD bmkaownid name="construct.c.bmkaownid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkaownid  #顯示到畫面上
            NEXT FIELD bmkaownid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkaownid
            #add-point:BEFORE FIELD bmkaownid name="construct.b.bmkaownid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkaownid
            
            #add-point:AFTER FIELD bmkaownid name="construct.a.bmkaownid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkaowndp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkaowndp
            #add-point:ON ACTION controlp INFIELD bmkaowndp name="construct.c.bmkaowndp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkaowndp  #顯示到畫面上
            NEXT FIELD bmkaowndp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkaowndp
            #add-point:BEFORE FIELD bmkaowndp name="construct.b.bmkaowndp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkaowndp
            
            #add-point:AFTER FIELD bmkaowndp name="construct.a.bmkaowndp"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkacrtid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkacrtid
            #add-point:ON ACTION controlp INFIELD bmkacrtid name="construct.c.bmkacrtid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkacrtid  #顯示到畫面上
            NEXT FIELD bmkacrtid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkacrtid
            #add-point:BEFORE FIELD bmkacrtid name="construct.b.bmkacrtid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkacrtid
            
            #add-point:AFTER FIELD bmkacrtid name="construct.a.bmkacrtid"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.bmkacrtdp
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkacrtdp
            #add-point:ON ACTION controlp INFIELD bmkacrtdp name="construct.c.bmkacrtdp"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooeg001_9()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkacrtdp  #顯示到畫面上
            NEXT FIELD bmkacrtdp                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkacrtdp
            #add-point:BEFORE FIELD bmkacrtdp name="construct.b.bmkacrtdp"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkacrtdp
            
            #add-point:AFTER FIELD bmkacrtdp name="construct.a.bmkacrtdp"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkacrtdt
            #add-point:BEFORE FIELD bmkacrtdt name="construct.b.bmkacrtdt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmkamodid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkamodid
            #add-point:ON ACTION controlp INFIELD bmkamodid name="construct.c.bmkamodid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkamodid  #顯示到畫面上
            NEXT FIELD bmkamodid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkamodid
            #add-point:BEFORE FIELD bmkamodid name="construct.b.bmkamodid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkamodid
            
            #add-point:AFTER FIELD bmkamodid name="construct.a.bmkamodid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkamoddt
            #add-point:BEFORE FIELD bmkamoddt name="construct.b.bmkamoddt"
            
            #END add-point
 
 
         #Ctrlp:construct.c.bmkacnfid
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkacnfid
            #add-point:ON ACTION controlp INFIELD bmkacnfid name="construct.c.bmkacnfid"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            CALL q_ooag001()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkacnfid  #顯示到畫面上
            NEXT FIELD bmkacnfid                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkacnfid
            #add-point:BEFORE FIELD bmkacnfid name="construct.b.bmkacnfid"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkacnfid
            
            #add-point:AFTER FIELD bmkacnfid name="construct.a.bmkacnfid"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkacnfdt
            #add-point:BEFORE FIELD bmkacnfdt name="construct.b.bmkacnfdt"
            
            #END add-point
 
 
 
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON bmkbseq,bmkb001,bmkbseq1,bmkb002,bmkb003,bmkb004,bmkbsite
           FROM s_detail1[1].bmkbseq,s_detail1[1].bmkb001,s_detail1[1].bmkbseq1,s_detail1[1].bmkb002, 
               s_detail1[1].bmkb003,s_detail1[1].bmkb004,s_detail1[1].bmkbsite
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理
       
         
       #單身一般欄位開窗相關處理
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbseq
            #add-point:BEFORE FIELD bmkbseq name="construct.b.page1.bmkbseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbseq
            
            #add-point:AFTER FIELD bmkbseq name="construct.a.page1.bmkbseq"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmkbseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbseq
            #add-point:ON ACTION controlp INFIELD bmkbseq name="construct.c.page1.bmkbseq"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.bmkb001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb001
            #add-point:ON ACTION controlp INFIELD bmkb001 name="construct.c.page1.bmkb001"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1117"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkb001  #顯示到畫面上
            NEXT FIELD bmkb001                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb001
            #add-point:BEFORE FIELD bmkb001 name="construct.b.page1.bmkb001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb001
            
            #add-point:AFTER FIELD bmkb001 name="construct.a.page1.bmkb001"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbseq1
            #add-point:BEFORE FIELD bmkbseq1 name="construct.b.page1.bmkbseq1"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbseq1
            
            #add-point:AFTER FIELD bmkbseq1 name="construct.a.page1.bmkbseq1"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmkbseq1
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbseq1
            #add-point:ON ACTION controlp INFIELD bmkbseq1 name="construct.c.page1.bmkbseq1"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page1.bmkb002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb002
            #add-point:ON ACTION controlp INFIELD bmkb002 name="construct.c.page1.bmkb002"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1118"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkb002  #顯示到畫面上
            NEXT FIELD bmkb002                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb002
            #add-point:BEFORE FIELD bmkb002 name="construct.b.page1.bmkb002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb002
            
            #add-point:AFTER FIELD bmkb002 name="construct.a.page1.bmkb002"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb003
            #add-point:BEFORE FIELD bmkb003 name="construct.b.page1.bmkb003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb003
            
            #add-point:AFTER FIELD bmkb003 name="construct.a.page1.bmkb003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmkb003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb003
            #add-point:ON ACTION controlp INFIELD bmkb003 name="construct.c.page1.bmkb003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb004
            #add-point:BEFORE FIELD bmkb004 name="construct.b.page1.bmkb004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb004
            
            #add-point:AFTER FIELD bmkb004 name="construct.a.page1.bmkb004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmkb004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb004
            #add-point:ON ACTION controlp INFIELD bmkb004 name="construct.c.page1.bmkb004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbsite
            #add-point:BEFORE FIELD bmkbsite name="construct.b.page1.bmkbsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbsite
            
            #add-point:AFTER FIELD bmkbsite name="construct.a.page1.bmkbsite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page1.bmkbsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbsite
            #add-point:ON ACTION controlp INFIELD bmkbsite name="construct.c.page1.bmkbsite"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
      
      CONSTRUCT g_wc2_table2 ON bmkcseq,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite
           FROM s_detail2[1].bmkcseq,s_detail2[1].bmkc001,s_detail2[1].bmkc002,s_detail2[1].bmkc003, 
               s_detail2[1].bmkc004,s_detail2[1].bmkcsite
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body2.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 2)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkcseq
            #add-point:BEFORE FIELD bmkcseq name="construct.b.page2.bmkcseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkcseq
            
            #add-point:AFTER FIELD bmkcseq name="construct.a.page2.bmkcseq"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmkcseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkcseq
            #add-point:ON ACTION controlp INFIELD bmkcseq name="construct.c.page2.bmkcseq"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc001
            #add-point:BEFORE FIELD bmkc001 name="construct.b.page2.bmkc001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc001
            
            #add-point:AFTER FIELD bmkc001 name="construct.a.page2.bmkc001"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmkc001
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc001
            #add-point:ON ACTION controlp INFIELD bmkc001 name="construct.c.page2.bmkc001"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page2.bmkc002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc002
            #add-point:ON ACTION controlp INFIELD bmkc002 name="construct.c.page2.bmkc002"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1121"
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkc002  #顯示到畫面上
            NEXT FIELD bmkc002                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc002
            #add-point:BEFORE FIELD bmkc002 name="construct.b.page2.bmkc002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc002
            
            #add-point:AFTER FIELD bmkc002 name="construct.a.page2.bmkc002"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc003
            #add-point:BEFORE FIELD bmkc003 name="construct.b.page2.bmkc003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc003
            
            #add-point:AFTER FIELD bmkc003 name="construct.a.page2.bmkc003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmkc003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc003
            #add-point:ON ACTION controlp INFIELD bmkc003 name="construct.c.page2.bmkc003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc004
            #add-point:BEFORE FIELD bmkc004 name="construct.b.page2.bmkc004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc004
            
            #add-point:AFTER FIELD bmkc004 name="construct.a.page2.bmkc004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmkc004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc004
            #add-point:ON ACTION controlp INFIELD bmkc004 name="construct.c.page2.bmkc004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkcsite
            #add-point:BEFORE FIELD bmkcsite name="construct.b.page2.bmkcsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkcsite
            
            #add-point:AFTER FIELD bmkcsite name="construct.a.page2.bmkcsite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page2.bmkcsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkcsite
            #add-point:ON ACTION controlp INFIELD bmkcsite name="construct.c.page2.bmkcsite"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
      CONSTRUCT g_wc2_table3 ON bmkdseq,bmkd001,bmkdseq1,bmkd002,bmkd003,bmkd004,bmkdsite
           FROM s_detail3[1].bmkdseq,s_detail3[1].bmkd001,s_detail3[1].bmkdseq1,s_detail3[1].bmkd002, 
               s_detail3[1].bmkd003,s_detail3[1].bmkd004,s_detail3[1].bmkdsite
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body3.before_construct"
            
            #end add-point 
            
       #單身公用欄位開窗相關處理(table 3)
       
       
       #單身一般欄位開窗相關處理       
                #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdseq
            #add-point:BEFORE FIELD bmkdseq name="construct.b.page3.bmkdseq"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdseq
            
            #add-point:AFTER FIELD bmkdseq name="construct.a.page3.bmkdseq"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.bmkdseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdseq
            #add-point:ON ACTION controlp INFIELD bmkdseq name="construct.c.page3.bmkdseq"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page3.bmkd001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd001
            #add-point:ON ACTION controlp INFIELD bmkd001 name="construct.c.page3.bmkd001"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1119" 
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkd001  #顯示到畫面上
            NEXT FIELD bmkd001                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd001
            #add-point:BEFORE FIELD bmkd001 name="construct.b.page3.bmkd001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd001
            
            #add-point:AFTER FIELD bmkd001 name="construct.a.page3.bmkd001"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdseq1
            #add-point:BEFORE FIELD bmkdseq1 name="construct.b.page3.bmkdseq1"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdseq1
            
            #add-point:AFTER FIELD bmkdseq1 name="construct.a.page3.bmkdseq1"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.bmkdseq1
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdseq1
            #add-point:ON ACTION controlp INFIELD bmkdseq1 name="construct.c.page3.bmkdseq1"
            
            #END add-point
 
 
         #Ctrlp:construct.c.page3.bmkd002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd002
            #add-point:ON ACTION controlp INFIELD bmkd002 name="construct.c.page3.bmkd002"
            #此段落由子樣板a08產生
            #開窗c段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'c'
            LET g_qryparam.reqry = FALSE
            LET g_qryparam.arg1 = "1120" 
            CALL q_oocq002()                           #呼叫開窗
            DISPLAY g_qryparam.return1 TO bmkd002  #顯示到畫面上
            NEXT FIELD bmkd002                     #返回原欄位
    


            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd002
            #add-point:BEFORE FIELD bmkd002 name="construct.b.page3.bmkd002"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd002
            
            #add-point:AFTER FIELD bmkd002 name="construct.a.page3.bmkd002"
            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd003
            #add-point:BEFORE FIELD bmkd003 name="construct.b.page3.bmkd003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd003
            
            #add-point:AFTER FIELD bmkd003 name="construct.a.page3.bmkd003"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.bmkd003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd003
            #add-point:ON ACTION controlp INFIELD bmkd003 name="construct.c.page3.bmkd003"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd004
            #add-point:BEFORE FIELD bmkd004 name="construct.b.page3.bmkd004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd004
            
            #add-point:AFTER FIELD bmkd004 name="construct.a.page3.bmkd004"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.bmkd004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd004
            #add-point:ON ACTION controlp INFIELD bmkd004 name="construct.c.page3.bmkd004"
            
            #END add-point
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdsite
            #add-point:BEFORE FIELD bmkdsite name="construct.b.page3.bmkdsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdsite
            
            #add-point:AFTER FIELD bmkdsite name="construct.a.page3.bmkdsite"
            
            #END add-point
            
 
 
         #Ctrlp:construct.c.page3.bmkdsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdsite
            #add-point:ON ACTION controlp INFIELD bmkdsite name="construct.c.page3.bmkdsite"
            
            #END add-point
 
 
   
       
      END CONSTRUCT
 
 
      
 
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令) name="cs.add_cs"
      
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="cs.b_dialog"
         
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
         IF NOT cl_null(ls_wc) THEN
            CALL util.JSON.parse(ls_wc, la_wc)
            INITIALIZE g_wc, g_wc2, g_wc2_table1, g_wc2_extend TO NULL
            INITIALIZE g_wc2_table2 TO NULL
 
            INITIALIZE g_wc2_table3 TO NULL
 
 
            FOR li_idx = 1 TO la_wc.getLength()
               CASE
                  WHEN la_wc[li_idx].tableid = "bmka_t" 
                     LET g_wc = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "bmkb_t" 
                     LET g_wc2_table1 = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "bmkc_t" 
                     LET g_wc2_table2 = la_wc[li_idx].wc
 
                  WHEN la_wc[li_idx].tableid = "bmkd_t" 
                     LET g_wc2_table3 = la_wc[li_idx].wc
 
 
               END CASE
            END FOR
         END IF
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
   IF g_wc2_table2 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
   END IF
 
   IF g_wc2_table3 <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
   END IF
 
 
 
 
   
   #add-point:cs段結束前 name="cs.after_construct"
   LET g_wc = g_wc," AND bmkasite = '",g_site,"'"
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.filter" >}
#應用 a50 樣板自動產生(Version:8)
#+ filter過濾功能
PRIVATE FUNCTION abmt500_filter()
   #add-point:filter段define name="filter.define_customerization"
   
   #end add-point   
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="filter.pre_function"
   
   #end add-point
   
   #切換畫面
   IF NOT g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",1)
      CALL gfrm_curr.setElementHidden("worksheet",0)
      LET g_main_hidden = 1
   END IF   
 
   LET INT_FLAG = 0
 
   LET g_qryparam.state = 'c'
 
   LET g_wc_filter_t = g_wc_filter.trim()
   LET g_wc_t = g_wc
 
   LET g_wc = cl_replace_str(g_wc, g_wc_filter_t, '')
 
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單頭
      CONSTRUCT g_wc_filter ON bmkadocno,bmkadocdt,bmka001,bmka002,bmka003,bmka009,bmkacrtid,bmkacrtdt, 
          bmkamodid,bmkamoddt
                          FROM s_browse[1].b_bmkadocno,s_browse[1].b_bmkadocdt,s_browse[1].b_bmka001, 
                              s_browse[1].b_bmka002,s_browse[1].b_bmka003,s_browse[1].b_bmka009,s_browse[1].b_bmkacrtid, 
                              s_browse[1].b_bmkacrtdt,s_browse[1].b_bmkamodid,s_browse[1].b_bmkamoddt 
 
 
         BEFORE CONSTRUCT
               DISPLAY abmt500_filter_parser('bmkadocno') TO s_browse[1].b_bmkadocno
            DISPLAY abmt500_filter_parser('bmkadocdt') TO s_browse[1].b_bmkadocdt
            DISPLAY abmt500_filter_parser('bmka001') TO s_browse[1].b_bmka001
            DISPLAY abmt500_filter_parser('bmka002') TO s_browse[1].b_bmka002
            DISPLAY abmt500_filter_parser('bmka003') TO s_browse[1].b_bmka003
            DISPLAY abmt500_filter_parser('bmka009') TO s_browse[1].b_bmka009
            DISPLAY abmt500_filter_parser('bmkacrtid') TO s_browse[1].b_bmkacrtid
            DISPLAY abmt500_filter_parser('bmkacrtdt') TO s_browse[1].b_bmkacrtdt
            DISPLAY abmt500_filter_parser('bmkamodid') TO s_browse[1].b_bmkamodid
            DISPLAY abmt500_filter_parser('bmkamoddt') TO s_browse[1].b_bmkamoddt
      
         #add-point:filter段cs_ctrl name="filter.cs_ctrl"
         
         #end add-point
      
      END CONSTRUCT
 
      #add-point:filter段add_cs name="filter.add_cs"
      
      #end add-point
 
      BEFORE DIALOG
         #add-point:filter段b_dialog name="filter.b_dialog"
         
         #end add-point  
      
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   
   END DIALOG
 
   IF NOT INT_FLAG THEN
      LET g_wc_filter = "   AND   ", g_wc_filter, "   "
      LET g_wc = g_wc , g_wc_filter
   ELSE
      LET g_wc_filter = g_wc_filter_t
      LET g_wc = g_wc_t
   END IF
 
      CALL abmt500_filter_show('bmkadocno')
   CALL abmt500_filter_show('bmkadocdt')
   CALL abmt500_filter_show('bmka001')
   CALL abmt500_filter_show('bmka002')
   CALL abmt500_filter_show('bmka003')
   CALL abmt500_filter_show('bmka009')
   CALL abmt500_filter_show('bmkacrtid')
   CALL abmt500_filter_show('bmkacrtdt')
   CALL abmt500_filter_show('bmkamodid')
   CALL abmt500_filter_show('bmkamoddt')
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.filter_parser" >}
#+ filter過濾功能
PRIVATE FUNCTION abmt500_filter_parser(ps_field)
   #add-point:filter段define name="filter_parser.define_customerization"
   
   #end add-point    
   DEFINE ps_field   STRING
   DEFINE ls_tmp     STRING
   DEFINE li_tmp     LIKE type_t.num10
   DEFINE li_tmp2    LIKE type_t.num10
   DEFINE ls_var     STRING
   #add-point:filter段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="filter_parser.define"
   
   #end add-point    
   
   #一般條件解析
   LET ls_tmp = ps_field, "='"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
   END IF
 
   #模糊條件解析
   LET ls_tmp = ps_field, " like '"
   LET li_tmp = g_wc_filter.getIndexOf(ls_tmp,1)
   IF li_tmp > 0 THEN
      LET li_tmp = ls_tmp.getLength() + li_tmp
      LET li_tmp2 = g_wc_filter.getIndexOf("'",li_tmp + 1) - 1
      LET ls_var = g_wc_filter.subString(li_tmp,li_tmp2)
      LET ls_var = cl_replace_str(ls_var,'%','*')
   END IF
 
   RETURN ls_var
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.filter_show" >}
#+ 顯示過濾條件
PRIVATE FUNCTION abmt500_filter_show(ps_field)
   DEFINE ps_field         STRING
   DEFINE lnode_item       om.DomNode
   DEFINE ls_title         STRING
   DEFINE ls_name          STRING
   DEFINE ls_condition     STRING
 
   LET ls_name = "formonly.b_", ps_field
   LET lnode_item = gfrm_curr.findNode("TableColumn", ls_name)
   LET ls_title = lnode_item.getAttribute("text")
   IF ls_title.getIndexOf('※',1) > 0 THEN
      LEt ls_title = ls_title.subString(1,ls_title.getIndexOf('※',1)-1)
   END IF
 
   #顯示資料組合
   LET ls_condition = abmt500_filter_parser(ps_field)
   IF NOT cl_null(ls_condition) THEN
      LET ls_title = ls_title, '※', ls_condition, '※'
   END IF
 
   #將資料顯示回去
   CALL lnode_item.setAttribute("text",ls_title)
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION abmt500_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   
   #end add-point   
   DEFINE ls_wc STRING
   #add-point:query段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="query.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL g_bmkb_d.clear()
   CALL g_bmkb2_d.clear()
   CALL g_bmkb3_d.clear()
 
   
   #add-point:query段other name="query.other"
   
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL abmt500_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      CALL abmt500_browser_fill("")
      CALL abmt500_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_detail_idx_list[1] = 1
   LET g_detail_idx_list[2] = 1
   LET g_detail_idx_list[3] = 1
 
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
      CALL abmt500_filter_show('bmkadocno')
   CALL abmt500_filter_show('bmkadocdt')
   CALL abmt500_filter_show('bmka001')
   CALL abmt500_filter_show('bmka002')
   CALL abmt500_filter_show('bmka003')
   CALL abmt500_filter_show('bmka009')
   CALL abmt500_filter_show('bmkacrtid')
   CALL abmt500_filter_show('bmkacrtdt')
   CALL abmt500_filter_show('bmkamodid')
   CALL abmt500_filter_show('bmkamoddt')
   CALL abmt500_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "-100" 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   ELSE
      CALL abmt500_fetch("F") 
      #顯示單身筆數
      CALL abmt500_idx_chk()
   END IF
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION abmt500_fetch(p_flag)
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   
   #end add-point    
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="fetch.pre_function"
   
   #end add-point
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   #清空第二階單身
 
   
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   LET g_browser_idx = g_pagestart+g_current_idx-1
   DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   
   CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #避免超出browser資料筆數上限
   IF g_current_idx > g_browser.getLength() THEN
      LET g_browser_idx = g_browser.getLength()
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET g_bmka_m.bmkadocno = g_browser[g_current_idx].b_bmkadocno
 
   
   #重讀DB,因TEMP有不被更新特性
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
   #遮罩相關處理
   LET g_bmka_m_mask_o.* =  g_bmka_m.*
   CALL abmt500_bmka_t_mask()
   LET g_bmka_m_mask_n.* =  g_bmka_m.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmt500_set_act_visible()   
   CALL abmt500_set_act_no_visible()
   
   #add-point:fetch段action控制 name="fetch.action_control"
   CALL cl_set_act_visible("modify,modify_detail,delete",TRUE)
#   IF g_bmka_m.bmkastus <> 'N' THEN 
#      CALL cl_set_act_visible("modify,modify_detail,delete",FALSE)
#   END IF
   IF g_bmka_m.bmkastus NOT MATCHES "[NDR]" THEN   # N未確認/D抽單/R已拒絕允許修改
      CALL cl_set_act_visible("modify,delete,modify_detail", FALSE)
   END IF
   
   #end add-point  
   
   
   
   #add-point:fetch結束前 name="fetch.after"
   
   #end add-point
   
   #保存單頭舊值
   LET g_bmka_m_t.* = g_bmka_m.*
   LET g_bmka_m_o.* = g_bmka_m.*
   
   LET g_data_owner = g_bmka_m.bmkaownid      
   LET g_data_dept  = g_bmka_m.bmkaowndp
   
   #重新顯示   
   CALL abmt500_show()
 
   #應用 a56 樣板自動產生(Version:3)
   #檢查此單據是否需顯示BPM簽核狀況按鈕 
   IF cl_bpm_chk() THEN
      CALL cl_set_act_visible("bpm_status",TRUE)
   ELSE
      CALL cl_set_act_visible("bpm_status",FALSE)
   END IF
 
 
 
 
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.insert" >}
#+ 資料新增
PRIVATE FUNCTION abmt500_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   
   #end add-point    
   #add-point:insert段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="insert.pre_function"
   
   #end add-point
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL g_bmkb_d.clear()   
   CALL g_bmkb2_d.clear()  
   CALL g_bmkb3_d.clear()  
 
 
   INITIALIZE g_bmka_m.* TO NULL             #DEFAULT 設定
   
   LET g_bmkadocno_t = NULL
 
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before name="insert.before"
   
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_bmka_m.bmkaownid = g_user
      LET g_bmka_m.bmkaowndp = g_dept
      LET g_bmka_m.bmkacrtid = g_user
      LET g_bmka_m.bmkacrtdp = g_dept 
      LET g_bmka_m.bmkacrtdt = cl_get_current()
      LET g_bmka_m.bmkamodid = g_user
      LET g_bmka_m.bmkamoddt = cl_get_current()
      LET g_bmka_m.bmkastus = 'N'
 
 
 
 
      #append欄位給值
      
     
      #一般欄位給值
            LET g_bmka_m.bmkastus = "N"
 
  
      #add-point:單頭預設值 name="insert.default"
      LET g_bmka_m.bmkadocdt = g_today
      LET g_bmka_m.bmkasite = g_site
      LET g_bmka_m.bmka002 = g_user
      LET g_bmka_m.bmka003 = g_dept
      CALL abmt500_bmka002_desc()
      CALL abmt500_bmka003_desc()
      LET g_bmka_m_t.* = g_bmka_m.*
      LET g_bmka_m_o.* = g_bmka_m.*
      #end add-point 
      
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET g_bmka_m_t.* = g_bmka_m.*
      LET g_bmka_m_o.* = g_bmka_m.*
      
      #顯示狀態(stus)圖片
            #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_bmka_m.bmkastus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
    
      CALL abmt500_input("a")
      
      #add-point:單頭輸入後 name="insert.after_insert"
      
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
      END IF
      
      IF NOT g_master_insert THEN
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE g_bmka_m.* TO NULL
         INITIALIZE g_bmkb_d TO NULL
         INITIALIZE g_bmkb2_d TO NULL
         INITIALIZE g_bmkb3_d TO NULL
 
         #add-point:取消新增後 name="insert.cancel"
         
         #end add-point 
         CALL abmt500_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL g_bmkb_d.clear()
      #CALL g_bmkb2_d.clear()
      #CALL g_bmkb3_d.clear()
 
 
      LET g_rec_b = 0
      CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmt500_set_act_visible()   
   CALL abmt500_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " bmkaent = " ||g_enterprise|| " AND",
                      " bmkadocno = '", g_bmka_m.bmkadocno, "' "
 
                      
   #add-point:組合新增資料的條件後 name="insert.after.add_browse"
   
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL abmt500_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE abmt500_cl
   
   CALL abmt500_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
   
   #遮罩相關處理
   LET g_bmka_m_mask_o.* =  g_bmka_m.*
   CALL abmt500_bmka_t_mask()
   LET g_bmka_m_mask_n.* =  g_bmka_m.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.oobxl003,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka001_desc, 
       g_bmka_m.bmka002,g_bmka_m.bmka002_desc,g_bmka_m.bmka003,g_bmka_m.bmka003_desc,g_bmka_m.bmkastus, 
       g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka006,g_bmka_m.bmka006_desc, 
       g_bmka_m.bmka007,g_bmka_m.bmka007_desc,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka009_desc, 
       g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka011_desc,g_bmka_m.bmka012,g_bmka_m.bmka012_desc, 
       g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkacrtdt, 
       g_bmka_m.bmkamodid,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfid_desc, 
       g_bmka_m.bmkacnfdt
   
   #add-point:新增結束後 name="insert.after"
   
   #end add-point 
   
   LET g_data_owner = g_bmka_m.bmkaownid      
   LET g_data_dept  = g_bmka_m.bmkaowndp
   
   #功能已完成,通報訊息中心
   CALL abmt500_msgcentre_notify('insert')
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.modify" >}
#+ 資料修改
PRIVATE FUNCTION abmt500_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   
   #end add-point    
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
   DEFINE l_wc2_table2   STRING
 
   DEFINE l_wc2_table3   STRING
 
 
 
   #add-point:modify段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="modify.pre_function"
   
   #end add-point
   
   #保存單頭舊值
   LET g_bmka_m_t.* = g_bmka_m.*
   LET g_bmka_m_o.* = g_bmka_m.*
   
   IF g_bmka_m.bmkadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
   CALL s_transaction_begin()
   
   OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
   #檢查是否允許此動作
   IF NOT abmt500_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_bmka_m_mask_o.* =  g_bmka_m.*
   CALL abmt500_bmka_t_mask()
   LET g_bmka_m_mask_n.* =  g_bmka_m.*
   
   
   
   #add-point:modify段show之前 name="modify.before_show"
   
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
   #LET l_wc2_table2 = g_wc2_table2
   #LET l_wc2_table2 = " 1=1"
 
   #LET l_wc2_table3 = g_wc2_table3
   #LET l_wc2_table3 = " 1=1"
 
 
 
   
   CALL abmt500_show()
   #add-point:modify段show之後 name="modify.after_show"
   
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
   #LET  g_wc2_table2 = l_wc2_table2 
 
   #LET  g_wc2_table3 = l_wc2_table3 
 
 
 
    
   WHILE TRUE
      LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
      
      #寫入修改者/修改日期資訊(單頭)
      LET g_bmka_m.bmkamodid = g_user 
LET g_bmka_m.bmkamoddt = cl_get_current()
LET g_bmka_m.bmkamodid_desc = cl_get_username(g_bmka_m.bmkamodid)
      
      #add-point:modify段修改前 name="modify.before_input"
      #「D抽單 / R已拒絕」狀況碼更改資料後，需還原為「N未確認」
      IF g_bmka_m.bmkastus MATCHES "[DR]" THEN 
         LET g_bmka_m.bmkastus = "N"
      END IF
      
      LET g_bmka_m_t.* = g_bmka_m.*
      LET g_bmka_m_o.* = g_bmka_m.*
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      LET g_master_commit = "N"
      CALL abmt500_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後 name="modify.after_input"
      
      #end add-point
      
      IF g_update OR NOT INT_FLAG THEN
         #若有modid跟moddt則進行update
         UPDATE bmka_t SET (bmkamodid,bmkamoddt) = (g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt)
          WHERE bmkaent = g_enterprise AND bmkadocno = g_bmkadocno_t
 
      END IF
    
      IF INT_FLAG THEN
         CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         #若單頭無commit則還原
         IF g_master_commit = "N" THEN
            LET g_bmka_m.* = g_bmka_m_t.*
            CALL abmt500_show()
         END IF
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF g_bmka_m.bmkadocno != g_bmka_m_t.bmkadocno
 
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前 name="modify.body.b_fk_update"
         
         #end add-point
         
         #更新單身key值
         UPDATE bmkb_t SET bmkbdocno = g_bmka_m.bmkadocno
 
          WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmka_m_t.bmkadocno
 
            
         #add-point:單身fk修改中 name="modify.body.m_fk_update"
         
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "bmkb_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後 name="modify.body.a_fk_update"
         
         #end add-point
         
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update2"
         
         #end add-point
         
         UPDATE bmkc_t
            SET bmkcdocno = g_bmka_m.bmkadocno
 
          WHERE bmkcent = g_enterprise AND
                bmkcdocno = g_bmkadocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update2"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "bmkc_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update2"
         
         #end add-point
 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update3"
         
         #end add-point
         
         UPDATE bmkd_t
            SET bmkddocno = g_bmka_m.bmkadocno
 
          WHERE bmkdent = g_enterprise AND
                bmkddocno = g_bmkadocno_t
 
         #add-point:單身fk修改中 name="modify.body.m_fk_update3"
         
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "bmkd_t" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update3"
         
         #end add-point
 
 
         
 
         
         #UPDATE 多語言table key值
         
         
         
 
         CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmt500_set_act_visible()   
   CALL abmt500_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " bmkaent = " ||g_enterprise|| " AND",
                      " bmkadocno = '", g_bmka_m.bmkadocno, "' "
 
   #填到對應位置
   CALL abmt500_browser_fill("")
 
   CLOSE abmt500_cl
   
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL abmt500_msgcentre_notify('modify')
 
END FUNCTION 
 
{</section>}
 
{<section id="abmt500.input" >}
#+ 資料輸入
PRIVATE FUNCTION abmt500_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   
   #end add-point  
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_ac_t                LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   DEFINE  l_success             LIKE type_t.num5
   DEFINE  l_stus                LIKE bmaa_t.bmaastus #161216-00029#13
   DEFINE  l_sql1                STRING   #160711-00040#3 ad
   #end add-point  
   
   #add-point:Function前置處理  name="input.pre_function"
   
   #end add-point
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.oobxl003,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka001_desc, 
       g_bmka_m.bmka002,g_bmka_m.bmka002_desc,g_bmka_m.bmka003,g_bmka_m.bmka003_desc,g_bmka_m.bmkastus, 
       g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka006,g_bmka_m.bmka006_desc, 
       g_bmka_m.bmka007,g_bmka_m.bmka007_desc,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka009_desc, 
       g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka011_desc,g_bmka_m.bmka012,g_bmka_m.bmka012_desc, 
       g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkacrtdt, 
       g_bmka_m.bmkamodid,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfid_desc, 
       g_bmka_m.bmkacnfdt
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql name="input.define_sql"
   
   #end add-point 
   LET g_forupd_sql = "SELECT bmkbseq,bmkb001,bmkbseq1,bmkb002,bmkb003,bmkb004,bmkbsite FROM bmkb_t  
       WHERE bmkbent=? AND bmkbdocno=? AND bmkbseq=? AND bmkbseq1=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql"
   
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmt500_bcl CURSOR FROM g_forupd_sql
   
   #add-point:input段define_sql name="input.define_sql2"
   
   #end add-point    
   LET g_forupd_sql = "SELECT bmkcseq,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite FROM bmkc_t WHERE bmkcent=?  
       AND bmkcdocno=? AND bmkcseq=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql2"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmt500_bcl2 CURSOR FROM g_forupd_sql
 
   #add-point:input段define_sql name="input.define_sql3"
   
   #end add-point    
   LET g_forupd_sql = "SELECT bmkdseq,bmkd001,bmkdseq1,bmkd002,bmkd003,bmkd004,bmkdsite FROM bmkd_t  
       WHERE bmkdent=? AND bmkddocno=? AND bmkdseq=? AND bmkdseq1=? FOR UPDATE"
   #add-point:input段define_sql name="input.after_define_sql3"
   
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE abmt500_bcl3 CURSOR FROM g_forupd_sql
 
 
   
 
 
   #add-point:input段define_sql name="input.other_sql"
   
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL abmt500_set_entry(p_cmd)
   #add-point:set_entry後 name="input.after_set_entry"
   
   #end add-point
   CALL abmt500_set_no_entry(p_cmd)
 
   DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003, 
       g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008, 
       g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013 
 
   
   LET lb_reproduce = FALSE
   LET l_ac_t = 1
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前 name="input.before_input"
   LET g_errshow = 1
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
{</section>}
 
{<section id="abmt500.input.head" >}
      #單頭段
      INPUT BY NAME g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003, 
          g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008, 
          g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013  
 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         
     
         BEFORE INPUT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmt500_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            IF l_cmd_t = 'r' THEN
               
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL abmt500_set_entry(p_cmd)
            #add-point:資料輸入前 name="input.m.before_input"
            CALL abmt500_set_entry(p_cmd)
            CALL abmt500_set_no_entry(p_cmd)
            #end add-point
            CALL abmt500_set_no_entry(p_cmd)
    
                  #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkadocno
            #add-point:BEFORE FIELD bmkadocno name="input.b.bmkadocno"
            CALL abmt500_bmkadocno_desc('1',g_bmka_m.bmkadocno) RETURNING g_bmka_m.oobxl003
            DISPLAY BY NAME g_bmka_m.oobxl003
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkadocno
            
            #add-point:AFTER FIELD bmkadocno name="input.a.bmkadocno"
            CALL abmt500_bmkadocno_desc('1',g_bmka_m.bmkadocno) RETURNING g_bmka_m.oobxl003
            DISPLAY BY NAME g_bmka_m.oobxl003            
            IF NOT cl_null(g_bmka_m.bmkadocno) THEN 
               CALL s_aooi200_chk_slip(g_site,g_ooef.ooef004,g_bmka_m.bmkadocno,g_prog) RETURNING g_success
               IF NOT g_success THEN
                  LET g_bmka_m.bmkadocno = g_bmka_m_t.bmkadocno              
                  NEXT FIELD CURRENT
               END IF
            ELSE
               NEXT FIELD CURRENT            
            END IF



            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkadocno
            #add-point:ON CHANGE bmkadocno name="input.g.bmkadocno"
 
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkadocdt
            #add-point:BEFORE FIELD bmkadocdt name="input.b.bmkadocdt"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkadocdt
            
            #add-point:AFTER FIELD bmkadocdt name="input.a.bmkadocdt"
            IF cl_null(g_bmka_m.bmkadocdt) THEN 
               NEXT FIELD CURRENT
            END IF
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkadocdt
            #add-point:ON CHANGE bmkadocdt name="input.g.bmkadocdt"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka001
            
            #add-point:AFTER FIELD bmka001 name="input.a.bmka001"
            IF NOT cl_null(g_bmka_m.bmka001) THEN 
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_bmka_m.bmka001
               #160318-00025#3--add--str
               LET g_errshow = TRUE 
               LET g_chkparam.err_str[1] = "abm-00116:sub-01302|abmi500|",cl_get_progname("abmi500",g_lang,"2"),"|:EXEPROGabmi500"
               #160318-00025#3--add--end   
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_bmja001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_bmka_m.bmka001 = g_bmka_m_t.bmka001
                  NEXT FIELD CURRENT
               END IF
               IF p_cmd = 'u' AND (g_bmka_m_o.bmka001 <> g_bmka_m.bmka001 OR cl_null(g_bmka_m_o.bmka001)) THEN 
                  IF NOT cl_ask_confirm('abm-00109') THEN
                  ELSE
                     CALL abmt500_gen() RETURNING l_success
                     IF l_success THEN 
                        CALL abmt500_show()
                     END IF
                  END IF   
               END IF
            END IF
            LET g_bmka_m_o.bmka001 = g_bmka_m.bmka001            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka001
            #add-point:BEFORE FIELD bmka001 name="input.b.bmka001"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka001
            #add-point:ON CHANGE bmka001 name="input.g.bmka001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka002
            
            #add-point:AFTER FIELD bmka002 name="input.a.bmka002"
            CALL abmt500_bmka002_desc()            
            IF NOT cl_null(g_bmka_m.bmka002) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_bmka_m.bmka002
               #160318-00025#3--add--str
               LET g_errshow = TRUE 
               LET g_chkparam.err_str[1] = "aim-00070:sub-01302|aooi130|",cl_get_progname("aooi130",g_lang,"2"),"|:EXEPROGaooi130"
               #160318-00025#3--add--end  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooag001") THEN
                  SELECT ooag003 INTO g_bmka_m.bmka003
                    FROM ooag_t
                   WHERE ooagent = g_enterprise
                     AND ooag001 = g_bmka_m.bmka002
                  CALL abmt500_bmka003_desc()   
               ELSE
                  #檢查失敗時後續處理
                  LET g_bmka_m.bmka002 = g_bmka_m_t.bmka002
                  NEXT FIELD CURRENT
               END IF
            

            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka002
            #add-point:BEFORE FIELD bmka002 name="input.b.bmka002"
            CALL abmt500_bmka002_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka002
            #add-point:ON CHANGE bmka002 name="input.g.bmka002"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka003
            
            #add-point:AFTER FIELD bmka003 name="input.a.bmka003"
            CALL abmt500_bmka003_desc()
            IF NOT cl_null(g_bmka_m.bmka003) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_bmka_m.bmka003
               LET g_chkparam.arg2 = g_bmka_m.bmkadocdt
               #160318-00025#3--add--str
               LET g_errshow = TRUE 
               LET g_chkparam.err_str[1] = "aoo-00029:sub-01302|aooi125|",cl_get_progname("aooi125",g_lang,"2"),"|:EXEPROGaooi125"
               #160318-00025#3--add--end
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_ooeg001") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_bmka_m.bmka003 = g_bmka_m_t.bmka003
                  NEXT FIELD CURRENT
               END IF
            

            END IF 



            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka003
            #add-point:BEFORE FIELD bmka003 name="input.b.bmka003"
            CALL abmt500_bmka003_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka003
            #add-point:ON CHANGE bmka003 name="input.g.bmka003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkastus
            #add-point:BEFORE FIELD bmkastus name="input.b.bmkastus"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkastus
            
            #add-point:AFTER FIELD bmkastus name="input.a.bmkastus"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkastus
            #add-point:ON CHANGE bmkastus name="input.g.bmkastus"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka004
            #add-point:BEFORE FIELD bmka004 name="input.b.bmka004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka004
            
            #add-point:AFTER FIELD bmka004 name="input.a.bmka004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka004
            #add-point:ON CHANGE bmka004 name="input.g.bmka004"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka005
            
            #add-point:AFTER FIELD bmka005 name="input.a.bmka005"
            CALL abmt500_bmka005_desc()
            IF NOT cl_null(g_bmka_m.bmka005) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_bmka_m.bmka005
                  
               #呼叫檢查存在並帶值的library
               #IF cl_chk_exist("v_imaa001_6") THEN         #160802-00023#1 mark
               IF cl_chk_exist("v_imaa001_13") THEN         #160802-00023#1 add
                  IF NOT abmt500_ecm_chk() THEN 
                     LET g_bmka_m.bmka005 = g_bmka_m_t.bmka005
                     LET g_bmka_m.bmka011 = g_bmka_m_t.bmka011
                     NEXT FIELD CURRENT                     
                  END IF
                  #161216-00029#13 add(s)
                  SELECT bmaastus INTO l_stus FROM bmaa_t
                  WHERE bmaa001 = g_bmka_m.bmka005
                    AND bmaa002 = ' '
                    AND bmaaent = g_enterprise
                    AND bmaasite = g_site  
                  IF l_stus = 'VO' THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "abm-00274" 
                     LET g_errparam.popup = FALSE 
                     CALL cl_err()
                     LET g_bmka_m.bmka005 = g_bmka_m_t.bmka005
                     NEXT FIELD CURRENT
                  END IF
                  #161216-00029#13 add(e)
                  INITIALIZE g_ref_fields TO NULL
                  LET g_ref_fields[1] = g_bmka_m.bmka005
                  CALL ap_ref_array2(g_ref_fields,"SELECT imaa010 FROM imaa_t WHERE imaaent='"||g_enterprise||"' AND imaa001=? ","") RETURNING g_rtn_fields
                  LET g_bmka_m.bmka011 = g_rtn_fields[1]   
                  DISPLAY BY NAME g_bmka_m.bmka011
                  #161024-00028#1  16/11/04 By 08734 add(S)
                  CALL abmt500_oocql004_desc('210',g_bmka_m.bmka011) 
                  RETURNING g_bmka_m.bmka011_desc
                  DISPLAY BY NAME g_bmka_m.bmka011_desc
                  
               ELSE
                  #檢查失敗時後續處理
                  LET g_bmka_m.bmka005 = g_bmka_m_t.bmka005
                  LET g_bmka_m.bmka011 = g_bmka_m_t.bmka011
                  #161024-00028#1  16/11/04 By 08734 add(S)
                  CALL abmt500_oocql004_desc('210',g_bmka_m.bmka011)                  
                  RETURNING g_bmka_m.bmka011_desc
                  DISPLAY BY NAME g_bmka_m.bmka011_desc
                  #161024-00028#1  16/11/04 By 08734 add(E)
                  NEXT FIELD CURRENT
               END IF
            END IF 
            IF g_bmka_m.bmka005 <> g_bmka_m_o.bmka005 OR cl_null(g_bmka_m_o.bmka005) THEN 
               LET g_bmka_m.bmka006 = ' '
               DISPLAY BY NAME g_bmka_m.bmka006
            END IF
            LET g_bmka_m_o.bmka005 = g_bmka_m.bmka006 
            CALL abmt500_set_entry(p_cmd)
            CALL abmt500_set_no_entry(p_cmd)

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka005
            #add-point:BEFORE FIELD bmka005 name="input.b.bmka005"
            CALL abmt500_bmka005_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka005
            #add-point:ON CHANGE bmka005 name="input.g.bmka005"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka006
            
            #add-point:AFTER FIELD bmka006 name="input.a.bmka006"
            CALL s_feature_description(g_bmka_m.bmka005,g_bmka_m.bmka006) RETURNING l_success,g_bmka_m.bmka006_desc 
            DISPLAY BY NAME g_bmka_m.bmka006_desc  
            IF NOT cl_null(g_bmka_m.bmka006) THEN   
               IF NOT s_feature_check(g_bmka_m.bmka005,g_bmka_m.bmka006) THEN
                  LET g_bmka_m.bmka006 = g_bmka_m_t.bmka006
                  NEXT FIELD CURRENT
               END IF
               #151224-00025#1 tsungyung --- add start ---
               IF NOT s_feature_direct_input(g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m_t.bmka006,g_bmka_m.bmkadocno,g_bmka_m.bmkasite) THEN
                  NEXT FIELD CURRENT
               END IF   
               #151224-00025#1 tsungyung --- add end   ---                 
            END IF   
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka006
            #add-point:BEFORE FIELD bmka006 name="input.b.bmka006"
            #160314-00009#10 16/03/25 By zhujing marked---(S)
            #IF abmt500_imaa005_exists() THEN
            #160314-00009#10 16/03/25 By zhujing marked---(S)
            IF s_feature_auto_chk(g_bmka_m.bmka005) THEN #160314-00009#10 16/03/25 By zhujing mod
               IF cl_null(g_bmka_m.bmka006) THEN
                  CALL s_feature_single(g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m.bmkasite,'') RETURNING l_success,g_bmka_m.bmka006
                  IF cl_null(g_bmka_m.bmka006) THEN LET g_bmka_m.bmka006 = '' END IF
                  DISPLAY BY NAME g_bmka_m.bmka006
                  #CALL s_transaction_begin()   #20151221-xianghui-mark
               END IF
               CALL s_feature_description(g_bmka_m.bmka005,g_bmka_m.bmka006) RETURNING l_success,g_bmka_m.bmka006_desc
               DISPLAY BY NAME g_bmka_m.bmka006_desc                
            END IF
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka006
            #add-point:ON CHANGE bmka006 name="input.g.bmka006"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka007
            
            #add-point:AFTER FIELD bmka007 name="input.a.bmka007"
            CALL abmt500_oocql004_desc('221',g_bmka_m.bmka007) RETURNING g_bmka_m.bmka007_desc
            DISPLAY BY NAME g_bmka_m.bmka007_desc
            IF NOT cl_null(g_bmka_m.bmka007) THEN 
               IF NOT s_azzi650_chk_exist('221',g_bmka_m.bmka007) THEN
                  LET g_bmka_m.bmka007 = g_bmka_m_t.bmka007
                  NEXT FIELD CURRENT
               END IF 
               IF NOT abmt500_ecm_chk() THEN 
                  LET g_bmka_m.bmka007 = g_bmka_m_t.bmka007
                  NEXT FIELD CURRENT                  
               END IF               
            END IF             
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka007
            #add-point:BEFORE FIELD bmka007 name="input.b.bmka007"
            CALL abmt500_oocql004_desc('221',g_bmka_m.bmka007) RETURNING g_bmka_m.bmka007_desc
            DISPLAY BY NAME g_bmka_m.bmka007_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka007
            #add-point:ON CHANGE bmka007 name="input.g.bmka007"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka008
            #add-point:BEFORE FIELD bmka008 name="input.b.bmka008"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka008
            
            #add-point:AFTER FIELD bmka008 name="input.a.bmka008"
            IF NOT abmt500_ecm_chk() THEN 
               LET g_bmka_m.bmka008 = g_bmka_m_t.bmka008
               NEXT FIELD CURRENT                  
            END IF  
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka008
            #add-point:ON CHANGE bmka008 name="input.g.bmka008"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkasite
            #add-point:BEFORE FIELD bmkasite name="input.b.bmkasite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkasite
            
            #add-point:AFTER FIELD bmkasite name="input.a.bmkasite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkasite
            #add-point:ON CHANGE bmkasite name="input.g.bmkasite"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka009
            
            #add-point:AFTER FIELD bmka009 name="input.a.bmka009"
            CALL abmt500_bmka009_desc()
            IF NOT cl_null(g_bmka_m.bmka009) THEN 
#此段落由子樣板a19產生
               #設定g_chkparam.*的參數前，先將其初始化，避免之前設定遺留的參數值造成影響。
               INITIALIZE g_chkparam.* TO NULL
               
               #設定g_chkparam.*的參數
               LET g_chkparam.arg1 = g_bmka_m.bmka009
               #160318-00025#3--add--str
               LET g_errshow = TRUE 
               LET g_chkparam.err_str[1] = "apm-00044:sub-01302|apmm100|",cl_get_progname("apmm100",g_lang,"2"),"|:EXEPROGapmm100"
               #160318-00025#3--add--end  
               #呼叫檢查存在並帶值的library
               IF cl_chk_exist("v_pmaa001_2") THEN
                  #檢查成功時後續處理
                  #LET  = g_chkparam.return1
                  #DISPLAY BY NAME 
               ELSE
                  #檢查失敗時後續處理
                  LET g_bmka_m.bmka009 = g_bmka_m_t.bmka009
                  NEXT FIELD CURRENT
               END IF
            

            END IF 

            
 
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka009
            #add-point:BEFORE FIELD bmka009 name="input.b.bmka009"
            CALL abmt500_bmka009_desc()
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka009
            #add-point:ON CHANGE bmka009 name="input.g.bmka009"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka010
            #add-point:BEFORE FIELD bmka010 name="input.b.bmka010"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka010
            
            #add-point:AFTER FIELD bmka010 name="input.a.bmka010"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka010
            #add-point:ON CHANGE bmka010 name="input.g.bmka010"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka011
            
            #add-point:AFTER FIELD bmka011 name="input.a.bmka011"
            CALL abmt500_oocql004_desc('210',g_bmka_m.bmka011) RETURNING g_bmka_m.bmka011_desc
            DISPLAY BY NAME g_bmka_m.bmka011_desc
            IF NOT cl_null(g_bmka_m.bmka011) THEN 
               IF NOT s_azzi650_chk_exist('210',g_bmka_m.bmka011) THEN
                  LET g_bmka_m.bmka011 = g_bmka_m_t.bmka011
                  NEXT FIELD CURRENT
               END IF        
            END IF 
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka011
            #add-point:BEFORE FIELD bmka011 name="input.b.bmka011"
            CALL abmt500_oocql004_desc('210',g_bmka_m.bmka011) RETURNING g_bmka_m.bmka011_desc
            DISPLAY BY NAME g_bmka_m.bmka011_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka011
            #add-point:ON CHANGE bmka011 name="input.g.bmka011"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka012
            
            #add-point:AFTER FIELD bmka012 name="input.a.bmka012"
            CALL abmt500_oocql004_desc('210',g_bmka_m.bmka012) RETURNING g_bmka_m.bmka012_desc
            DISPLAY BY NAME g_bmka_m.bmka012_desc
            IF NOT cl_null(g_bmka_m.bmka012) THEN 
               IF NOT s_azzi650_chk_exist('210',g_bmka_m.bmka012) THEN
                  LET g_bmka_m.bmka012 = g_bmka_m_t.bmka012
                  NEXT FIELD CURRENT
               END IF        
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka012
            #add-point:BEFORE FIELD bmka012 name="input.b.bmka012"
            CALL abmt500_oocql004_desc('210',g_bmka_m.bmka012) RETURNING g_bmka_m.bmka012_desc
            DISPLAY BY NAME g_bmka_m.bmka012_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka012
            #add-point:ON CHANGE bmka012 name="input.g.bmka012"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmka013
            #add-point:BEFORE FIELD bmka013 name="input.b.bmka013"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmka013
            
            #add-point:AFTER FIELD bmka013 name="input.a.bmka013"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmka013
            #add-point:ON CHANGE bmka013 name="input.g.bmka013"
            
            #END add-point 
 
 
 #欄位檢查
                  #Ctrlp:input.c.bmkadocno
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkadocno
            #add-point:ON ACTION controlp INFIELD bmkadocno name="input.c.bmkadocno"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmkadocno             #給予default值

            #給予arg
            LET g_qryparam.arg1 = g_ooef.ooef004
            #LET g_qryparam.arg2 = "abmt500" #    #160705-00042#1 160711 by sakura mark
            LET g_qryparam.arg2 = g_prog          #160705-00042#1 160711 by sakura add
            #160711-00040#3 add(s)
            CALL s_control_get_docno_sql(g_user,g_dept)
                RETURNING l_success,l_sql1
            IF NOT cl_null(l_sql1) THEN
               LET g_qryparam.where = l_sql1
            END IF
            #160711-00040#3 add(e)
            CALL q_ooba002_1()                                #呼叫開窗

            LET g_bmka_m.bmkadocno = g_qryparam.return1              

            DISPLAY g_bmka_m.bmkadocno TO bmkadocno              #

            NEXT FIELD bmkadocno                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmkadocdt
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkadocdt
            #add-point:ON ACTION controlp INFIELD bmkadocdt name="input.c.bmkadocdt"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmka001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka001
            #add-point:ON ACTION controlp INFIELD bmka001 name="input.c.bmka001"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka001             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_bmja001()                                #呼叫開窗

            LET g_bmka_m.bmka001 = g_qryparam.return1              

            DISPLAY g_bmka_m.bmka001 TO bmka001              #

            NEXT FIELD bmka001                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka002
            #add-point:ON ACTION controlp INFIELD bmka002 name="input.c.bmka002"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka002             #給予default值

            #給予arg
            LET g_qryparam.arg1 = "" #

            
            CALL q_ooag001()                                #呼叫開窗

            LET g_bmka_m.bmka002 = g_qryparam.return1              

            DISPLAY g_bmka_m.bmka002 TO bmka002              #

            NEXT FIELD bmka002                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka003
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka003
            #add-point:ON ACTION controlp INFIELD bmka003 name="input.c.bmka003"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka003             #給予default值
            LET g_qryparam.default2 = "" #g_bmka_m.ooeg001 #部門編號
            #給予arg
            LET g_qryparam.arg1 = g_bmka_m.bmkadocdt

            
            CALL q_ooeg001()                                #呼叫開窗

            LET g_bmka_m.bmka003 = g_qryparam.return1              
            #LET g_bmka_m.ooeg001 = g_qryparam.return2 
            DISPLAY g_bmka_m.bmka003 TO bmka003              #
            #DISPLAY g_bmka_m.ooeg001 TO ooeg001 #部門編號
            NEXT FIELD bmka003                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmkastus
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkastus
            #add-point:ON ACTION controlp INFIELD bmkastus name="input.c.bmkastus"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmka004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka004
            #add-point:ON ACTION controlp INFIELD bmka004 name="input.c.bmka004"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmka005
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka005
            #add-point:ON ACTION controlp INFIELD bmka005 name="input.c.bmka005"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka005             #給予default值
            LET g_qryparam.default2 = "" #g_bmka_m.imaal003 #品名
            LET g_qryparam.default3 = "" #g_bmka_m.imaal004 #規格
            #給予arg
            LET g_qryparam.arg1 = "" #
            #LET g_qryparam.where = " imaa004 = 'A'"                   #160802-00023#1 mark
            LET g_qryparam.where = " imaa004 IN ('A','X','T')"         #160802-00023#1 add
            #CALL q_imaa001()                    #呼叫開窗              #160802-00023#1 mark
            CALL q_imaa001_7()                                         #160802-00023#1 add
            LET g_bmka_m.bmka005 = g_qryparam.return1              
            #LET g_bmka_m.imaal003 = g_qryparam.return2 
            #LET g_bmka_m.imaal004 = g_qryparam.return3 
            DISPLAY g_bmka_m.bmka005 TO bmka005              #
            #DISPLAY g_bmka_m.imaal003 TO imaal003 #品名
            #DISPLAY g_bmka_m.imaal004 TO imaal004 #規格
            NEXT FIELD bmka005                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka006
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka006
            #add-point:ON ACTION controlp INFIELD bmka006 name="input.c.bmka006"
            CALL s_feature_single(g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m.bmkasite,'') RETURNING l_success,g_bmka_m.bmka006
            DISPLAY BY NAME g_bmka_m.bmka006
            #NEXT FIELD CURRENT  #160314-00009#10 16/03/25 By zhujing marked
            #END add-point
 
 
         #Ctrlp:input.c.bmka007
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka007
            #add-point:ON ACTION controlp INFIELD bmka007 name="input.c.bmka007"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka007             #給予default值
            LET g_qryparam.default2 = "" #g_bmka_m.oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "221" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmka_m.bmka007 = g_qryparam.return1              
            #LET g_bmka_m.oocq002 = g_qryparam.return2 
            DISPLAY g_bmka_m.bmka007 TO bmka007              #
            #DISPLAY g_bmka_m.oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmka007                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka008
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka008
            #add-point:ON ACTION controlp INFIELD bmka008 name="input.c.bmka008"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmkasite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkasite
            #add-point:ON ACTION controlp INFIELD bmkasite name="input.c.bmkasite"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmka009
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka009
            #add-point:ON ACTION controlp INFIELD bmka009 name="input.c.bmka009"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka009             #給予default值
        
            #CALL q_pmaa001()                                #呼叫開窗  #160913-00055#1 
            CALL q_pmaa001_25()        #160913-00055#1 

            LET g_bmka_m.bmka009 = g_qryparam.return1              

            DISPLAY g_bmka_m.bmka009 TO bmka009              #

            NEXT FIELD bmka009                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka010
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka010
            #add-point:ON ACTION controlp INFIELD bmka010 name="input.c.bmka010"
            
            #END add-point
 
 
         #Ctrlp:input.c.bmka011
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka011
            #add-point:ON ACTION controlp INFIELD bmka011 name="input.c.bmka011"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka011             #給予default值
            LET g_qryparam.default2 = "" #g_bmka_m.oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "210" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmka_m.bmka011 = g_qryparam.return1              
            #LET g_bmka_m.oocq002 = g_qryparam.return2 
            DISPLAY g_bmka_m.bmka011 TO bmka011              #
            #DISPLAY g_bmka_m.oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmka011                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka012
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka012
            #add-point:ON ACTION controlp INFIELD bmka012 name="input.c.bmka012"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmka_m.bmka012             #給予default值
            LET g_qryparam.default2 = "" #g_bmka_m.oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "210" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmka_m.bmka012 = g_qryparam.return1              
            #LET g_bmka_m.oocq002 = g_qryparam.return2 
            DISPLAY g_bmka_m.bmka012 TO bmka012              #
            #DISPLAY g_bmka_m.oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmka012                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.bmka013
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmka013
            #add-point:ON ACTION controlp INFIELD bmka013 name="input.c.bmka013"
            
            #END add-point
 
 
 #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME g_bmka_m.bmkadocno
                        
            #add-point:單頭INPUT後 name="input.head.after_input"
            
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前 name="input.head.b_insert"
               CALL s_aooi200_gen_docno(g_site,g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt,g_prog)
                    RETURNING l_success,g_bmka_m.bmkadocno
               IF NOT l_success THEN
                  INITIALIZE g_errparam TO NULL
                  LET g_errparam.code = 'apm-00003'
                  LET g_errparam.extend = g_bmka_m.bmkadocno
                  LET g_errparam.popup = TRUE
                  CALL cl_err()

                  NEXT FIELD bmkadocno
               END IF
               DISPLAY BY NAME g_bmka_m.bmkadocno
               #end add-point
               
               INSERT INTO bmka_t (bmkaent,bmkadocno,bmkadocdt,bmka001,bmka002,bmka003,bmkastus,bmka004, 
                   bmka005,bmka006,bmka007,bmka008,bmkasite,bmka009,bmka010,bmka011,bmka012,bmka013, 
                   bmkaownid,bmkaowndp,bmkacrtid,bmkacrtdp,bmkacrtdt,bmkamodid,bmkamoddt,bmkacnfid,bmkacnfdt) 
 
               VALUES (g_enterprise,g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka002, 
                   g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.bmka006, 
                   g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
                   g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp, 
                   g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt, 
                   g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfdt) 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "g_bmka_m:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中 name="input.head.m_insert"
               
               #end add-point
               
               
               
               
               #add-point:單頭新增後 name="input.head.a_insert"
               CALL s_transaction_end('Y','0')
               CALL s_transaction_begin()
               IF NOT cl_null(g_bmka_m.bmka001) THEN
                 LET l_success = ''
                 CALL abmt500_gen()  #自動產生單身
                      RETURNING l_success
                 IF NOT l_success THEN
                    CALL s_transaction_end('N','0')
                 END IF
                 LET p_cmd = 'u'                
               END IF 
               #end add-point
               CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL abmt500_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL abmt500_b_fill()
                  CALL abmt500_b_fill2('0')
               END IF
               
               #add-point:單頭新增後 name="input.head.a_insert2"
               
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前 name="input.head.b_update"
               
               #end add-point
               
               #將遮罩欄位還原
               CALL abmt500_bmka_t_mask_restore('restore_mask_o')
               
               UPDATE bmka_t SET (bmkadocno,bmkadocdt,bmka001,bmka002,bmka003,bmkastus,bmka004,bmka005, 
                   bmka006,bmka007,bmka008,bmkasite,bmka009,bmka010,bmka011,bmka012,bmka013,bmkaownid, 
                   bmkaowndp,bmkacrtid,bmkacrtdp,bmkacrtdt,bmkamodid,bmkamoddt,bmkacnfid,bmkacnfdt) = (g_bmka_m.bmkadocno, 
                   g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus, 
                   g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008, 
                   g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka012, 
                   g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtdp, 
                   g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfdt) 
 
                WHERE bmkaent = g_enterprise AND bmkadocno = g_bmkadocno_t
 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "bmka_t:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中 name="input.head.m_update"
               
               #end add-point
               
               
               
               
               #將遮罩欄位進行遮蔽
               CALL abmt500_bmka_t_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(g_bmka_m_t)
               LET g_log2 = util.JSON.stringify(g_bmka_m)
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               ELSE
                  CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後 name="input.head.a_update"
               
               #end add-point
            END IF
            
            LET g_master_commit = "Y"
            LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
            
      END INPUT
   
 
{</section>}
 
{<section id="abmt500.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY g_bmkb_d FROM s_detail1.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = l_allow_insert, 
                  DELETE ROW = l_allow_delete,
                  APPEND ROW = l_allow_insert)
 
         #自訂ACTION(detail_input,page_1)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body.before_input2"
            
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmkb_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL abmt500_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'1',"))
            END IF
            LET g_loc = 'm'
            LET g_rec_b = g_bmkb_d.getLength()
            #add-point:資料輸入前 name="input.d.before_input"
            
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_detail_idx_list[1] = l_ac
            LET g_current_page = 1
            
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmt500_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_bmkb_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmkb_d[l_ac].bmkbseq IS NOT NULL
               AND g_bmkb_d[l_ac].bmkbseq1 IS NOT NULL
 
            THEN
               LET l_cmd='u'
               LET g_bmkb_d_t.* = g_bmkb_d[l_ac].*  #BACKUP
               LET g_bmkb_d_o.* = g_bmkb_d[l_ac].*  #BACKUP
               CALL abmt500_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body.after_set_entry_b"
               
               #end add-point  
               CALL abmt500_set_no_entry_b(l_cmd)
               IF NOT abmt500_lock_b("bmkb_t","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmt500_bcl INTO g_bmkb_d[l_ac].bmkbseq,g_bmkb_d[l_ac].bmkb001,g_bmkb_d[l_ac].bmkbseq1, 
                      g_bmkb_d[l_ac].bmkb002,g_bmkb_d[l_ac].bmkb003,g_bmkb_d[l_ac].bmkb004,g_bmkb_d[l_ac].bmkbsite 
 
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = g_bmkb_d_t.bmkbseq,":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_bmkb_d_mask_o[l_ac].* =  g_bmkb_d[l_ac].*
                  CALL abmt500_bmkb_t_mask()
                  LET g_bmkb_d_mask_n[l_ac].* =  g_bmkb_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL abmt500_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
        
         BEFORE INSERT  
            
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmkb_d[l_ac].* TO NULL 
            INITIALIZE g_bmkb_d_t.* TO NULL 
            INITIALIZE g_bmkb_d_o.* TO NULL 
            #公用欄位給值(單身)
            
            #自定義預設值
                  LET g_bmkb_d[l_ac].bmkb003 = "N"
 
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            
            #end add-point
            LET g_bmkb_d_t.* = g_bmkb_d[l_ac].*     #新輸入資料
            LET g_bmkb_d_o.* = g_bmkb_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmt500_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"
            
            #end add-point
            CALL abmt500_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmkb_d[li_reproduce_target].* = g_bmkb_d[li_reproduce].*
 
               LET g_bmkb_d[li_reproduce_target].bmkbseq = NULL
               LET g_bmkb_d[li_reproduce_target].bmkbseq1 = NULL
 
            END IF
            
 
            #add-point:modify段before insert name="input.body.before_insert"
            IF cl_null(g_bmkb_d[l_ac].bmkbseq) THEN 
               SELECT MAX(bmkbseq) INTO g_bmkb_d[l_ac].bmkbseq
                 FROM bmkb_t
                WHERE bmkbent = g_enterprise
                  AND bmkbdocno = g_bmka_m.bmkadocno
               IF NOT cl_null(g_bmkb_d[l_ac].bmkbseq) THEN 
                  LET g_bmkb_d[l_ac].bmkbseq = g_bmkb_d[l_ac].bmkbseq + 1
               ELSE
                  LET g_bmkb_d[l_ac].bmkbseq = 1               
               END IF
            END IF
            LET g_bmkb_d[l_ac].bmkbsite = g_bmka_m.bmkasite
            LET g_bmkb_d_t.* = g_bmkb_d[l_ac].*     #新輸入資料
            LET g_bmkb_d_o.* = g_bmkb_d[l_ac].*     #新輸入資料  
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmkb_t 
             WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmka_m.bmkadocno
 
               AND bmkbseq = g_bmkb_d[l_ac].bmkbseq
               AND bmkbseq1 = g_bmkb_d[l_ac].bmkbseq1
 
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               
               #end add-point
            
               #同步新增到同層的table
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys[2] = g_bmkb_d[g_detail_idx].bmkbseq
               LET gs_keys[3] = g_bmkb_d[g_detail_idx].bmkbseq1
               CALL abmt500_insert_b('bmkb_t',gs_keys,"'1'")
                           
               #add-point:單身新增後 name="input.body.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               INITIALIZE g_bmkb_d[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL abmt500_b_fill()
               #資料多語言用-增/改
               
               #add-point:input段-after_insert name="input.body.a_insert2"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_bmka_m.bmkadocno
 
               LET gs_keys[gs_keys.getLength()+1] = g_bmkb_d_t.bmkbseq
               LET gs_keys[gs_keys.getLength()+1] = g_bmkb_d_t.bmkbseq1
 
            
               #刪除同層單身
               IF NOT abmt500_delete_b('bmkb_t',gs_keys,"'1'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT abmt500_key_delete_b(gs_keys,'bmkb_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身刪除中 name="input.body.m_delete"
               
               #end add-point 
               
               CALL s_transaction_end('Y','0')
               CLOSE abmt500_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"
               
               #end add-point
               LET l_count = g_bmkb_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
               
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_bmkb_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbseq
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_bmkb_d[l_ac].bmkbseq,"1.000","1","","","azz-00079",1) THEN
               NEXT FIELD bmkbseq
            END IF 
 
 
 
            #add-point:AFTER FIELD bmkbseq name="input.a.page1.bmkbseq"
            #此段落由子樣板a05產生
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkbseq1 != g_bmkb_d_t.bmkbseq1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq = '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkbseq1 = '"||g_bmkb_d[g_detail_idx].bmkbseq1 ||"'",'std-00004',0) THEN 
                     LET g_bmkb_d[l_ac].bmkbseq = g_bmkb_d_t.bmkbseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            IF NOT cl_null(g_bmkb_d[l_ac].bmkbseq) THEN 
               IF l_cmd = 'a' OR (l_cmd = 'u' AND (g_bmkb_d[l_ac].bmkbseq <> g_bmkb_d_o.bmkbseq OR cl_null(g_bmkb_d_o.bmkbseq))) THEN 
                  CALL abmt500_bmkb001_ref() 
               END IF            
            END IF            
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkb001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkb001 != g_bmkb_d_t.bmkb001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq <> '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkb001 = '"||g_bmkb_d[g_detail_idx].bmkb001 ||"'",'std-00004',0) THEN 
                     LET g_bmkb_d[l_ac].bmkbseq = g_bmkb_d_t.bmkbseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkb002 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkb002 != g_bmkb_d_t.bmkb002)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq = '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkb002 = '"||g_bmkb_d[g_detail_idx].bmkb002 ||"'",'std-00004',0) THEN 
                     LET g_bmkb_d[l_ac].bmkbseq = g_bmkb_d_t.bmkbseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF            
            LET g_bmkb_d_o.bmkbseq = g_bmkb_d[l_ac].bmkbseq
            CALL abmt500_set_entry_b(l_cmd)
            CALL abmt500_set_no_entry_b(l_cmd)                        
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbseq
            #add-point:BEFORE FIELD bmkbseq name="input.b.page1.bmkbseq"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkbseq
            #add-point:ON CHANGE bmkbseq name="input.g.page1.bmkbseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb001
            
            #add-point:AFTER FIELD bmkb001 name="input.a.page1.bmkb001"
            CALL abmt500_oocql004_desc('1117',g_bmkb_d[l_ac].bmkb001) RETURNING g_bmkb_d[l_ac].bmkb001_desc 
            DISPLAY BY NAME g_bmkb_d[l_ac].bmkb001_desc
            IF NOT cl_null(g_bmkb_d[l_ac].bmkb001) THEN 
               IF NOT s_azzi650_chk_exist('1117',g_bmkb_d[l_ac].bmkb001) THEN
                  LET g_bmkb_d[l_ac].bmkb001 = g_bmkb_d_t.bmkb001
                  NEXT FIELD CURRENT
               END IF 
               IF NOT abmt500_oocq_chk('1118',g_bmkb_d[l_ac].bmkb002,g_bmkb_d[l_ac].bmkb001) THEN 
                  LET g_bmkb_d[l_ac].bmkb002 = g_bmkb_d_t.bmkb002
                  NEXT FIELD CURRENT               
               END IF               
            END IF
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkb001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkb001 != g_bmkb_d_t.bmkb001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq <> '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkb001 = '"||g_bmkb_d[g_detail_idx].bmkb001 ||"'",'std-00004',0) THEN 
                     LET g_bmkb_d[l_ac].bmkb001 = g_bmkb_d_t.bmkb001
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb001
            #add-point:BEFORE FIELD bmkb001 name="input.b.page1.bmkb001"
            CALL abmt500_oocql004_desc('1117',g_bmkb_d[l_ac].bmkb001) RETURNING g_bmkb_d[l_ac].bmkb001_desc 
            DISPLAY BY NAME g_bmkb_d[l_ac].bmkb001_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkb001
            #add-point:ON CHANGE bmkb001 name="input.g.page1.bmkb001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbseq1
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_bmkb_d[l_ac].bmkbseq1,"1.000","1","","","azz-00079",1) THEN
               NEXT FIELD bmkbseq1
            END IF 
 
 
 
            #add-point:AFTER FIELD bmkbseq1 name="input.a.page1.bmkbseq1"
            #此段落由子樣板a05產生
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkbseq1 != g_bmkb_d_t.bmkbseq1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq = '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkbseq1 = '"||g_bmkb_d[g_detail_idx].bmkbseq1 ||"'",'std-00004',0) THEN 
                     LET g_bmkb_d[l_ac].bmkbseq1 = g_bmkb_d_t.bmkbseq1
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF


            IF NOT cl_null(g_bmkb_d[l_ac].bmkbseq1) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbseq1
            #add-point:BEFORE FIELD bmkbseq1 name="input.b.page1.bmkbseq1"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkbseq1
            #add-point:ON CHANGE bmkbseq1 name="input.g.page1.bmkbseq1"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb002
            
            #add-point:AFTER FIELD bmkb002 name="input.a.page1.bmkb002"
            CALL abmt500_oocql004_desc('1118',g_bmkb_d[l_ac].bmkb002) RETURNING g_bmkb_d[l_ac].bmkb002_desc 
            DISPLAY BY NAME g_bmkb_d[l_ac].bmkb002_desc
            IF NOT cl_null(g_bmkb_d[l_ac].bmkb002) THEN 
               IF NOT s_azzi650_chk_exist('1118',g_bmkb_d[l_ac].bmkb002) THEN
                  LET g_bmkb_d[l_ac].bmkb002 = g_bmkb_d_t.bmkb002
                  NEXT FIELD CURRENT
               END IF  
               IF NOT abmt500_oocq_chk('1118',g_bmkb_d[l_ac].bmkb002,g_bmkb_d[l_ac].bmkb001) THEN 
                  LET g_bmkb_d[l_ac].bmkb002 = g_bmkb_d_t.bmkb002
                  NEXT FIELD CURRENT               
               END IF
               IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkbseq IS NOT NULL AND g_bmkb_d[g_detail_idx].bmkb002 IS NOT NULL THEN 
                  IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb_d[g_detail_idx].bmkbseq != g_bmkb_d_t.bmkbseq OR g_bmkb_d[g_detail_idx].bmkb002 != g_bmkb_d_t.bmkb002)) THEN 
                     IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkb_t WHERE "||"bmkbent = '" ||g_enterprise|| "' AND "||"bmkbdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkbseq = '"||g_bmkb_d[g_detail_idx].bmkbseq ||"' AND "|| "bmkb002 = '"||g_bmkb_d[g_detail_idx].bmkb002 ||"'",'std-00004',0) THEN 
                        LET g_bmkb_d[l_ac].bmkb002 = g_bmkb_d_t.bmkb002
                        NEXT FIELD CURRENT
                     END IF
                  END IF
               END IF                
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb002
            #add-point:BEFORE FIELD bmkb002 name="input.b.page1.bmkb002"
            CALL abmt500_oocql004_desc('1118',g_bmkb_d[l_ac].bmkb002) RETURNING g_bmkb_d[l_ac].bmkb002_desc 
            DISPLAY BY NAME g_bmkb_d[l_ac].bmkb002_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkb002
            #add-point:ON CHANGE bmkb002 name="input.g.page1.bmkb002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb003
            #add-point:BEFORE FIELD bmkb003 name="input.b.page1.bmkb003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb003
            
            #add-point:AFTER FIELD bmkb003 name="input.a.page1.bmkb003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkb003
            #add-point:ON CHANGE bmkb003 name="input.g.page1.bmkb003"
            CALL abmt500_set_entry_b(l_cmd)
            CALL abmt500_set_no_entry_b(l_cmd)   
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkb004
            #add-point:BEFORE FIELD bmkb004 name="input.b.page1.bmkb004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkb004
            
            #add-point:AFTER FIELD bmkb004 name="input.a.page1.bmkb004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkb004
            #add-point:ON CHANGE bmkb004 name="input.g.page1.bmkb004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkbsite
            #add-point:BEFORE FIELD bmkbsite name="input.b.page1.bmkbsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkbsite
            
            #add-point:AFTER FIELD bmkbsite name="input.a.page1.bmkbsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkbsite
            #add-point:ON CHANGE bmkbsite name="input.g.page1.bmkbsite"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page1.bmkbseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbseq
            #add-point:ON ACTION controlp INFIELD bmkbseq name="input.c.page1.bmkbseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkb001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb001
            #add-point:ON ACTION controlp INFIELD bmkb001 name="input.c.page1.bmkb001"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmkb_d[l_ac].bmkb001             #給予default值
            LET g_qryparam.default2 = "" #g_bmkb_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "1117" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmkb_d[l_ac].bmkb001 = g_qryparam.return1              
            #LET g_bmkb_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_bmkb_d[l_ac].bmkb001 TO bmkb001              #
            #DISPLAY g_bmkb_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmkb001                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkbseq1
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbseq1
            #add-point:ON ACTION controlp INFIELD bmkbseq1 name="input.c.page1.bmkbseq1"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkb002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb002
            #add-point:ON ACTION controlp INFIELD bmkb002 name="input.c.page1.bmkb002"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmkb_d[l_ac].bmkb002             #給予default值
            LET g_qryparam.default2 = "" #g_bmkb_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "1118" #
            LET g_qryparam.where = " oocq004 = '",g_bmkb_d[l_ac].bmkb001,"'"
            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmkb_d[l_ac].bmkb002 = g_qryparam.return1              
            #LET g_bmkb_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_bmkb_d[l_ac].bmkb002 TO bmkb002              #
            #DISPLAY g_bmkb_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmkb002                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkb003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb003
            #add-point:ON ACTION controlp INFIELD bmkb003 name="input.c.page1.bmkb003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkb004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkb004
            #add-point:ON ACTION controlp INFIELD bmkb004 name="input.c.page1.bmkb004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page1.bmkbsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkbsite
            #add-point:ON ACTION controlp INFIELD bmkbsite name="input.c.page1.bmkbsite"
            
            #END add-point
 
 
 
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_bmkb_d[l_ac].* = g_bmkb_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmt500_bcl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = g_bmkb_d[l_ac].bmkbseq 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_bmkb_d[l_ac].* = g_bmkb_d_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               
      
               #將遮罩欄位還原
               CALL abmt500_bmkb_t_mask_restore('restore_mask_o')
      
               UPDATE bmkb_t SET (bmkbdocno,bmkbseq,bmkb001,bmkbseq1,bmkb002,bmkb003,bmkb004,bmkbsite) = (g_bmka_m.bmkadocno, 
                   g_bmkb_d[l_ac].bmkbseq,g_bmkb_d[l_ac].bmkb001,g_bmkb_d[l_ac].bmkbseq1,g_bmkb_d[l_ac].bmkb002, 
                   g_bmkb_d[l_ac].bmkb003,g_bmkb_d[l_ac].bmkb004,g_bmkb_d[l_ac].bmkbsite)
                WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmka_m.bmkadocno 
 
                  AND bmkbseq = g_bmkb_d_t.bmkbseq #項次   
                  AND bmkbseq1 = g_bmkb_d_t.bmkbseq1  
 
                  
               #add-point:單身修改中 name="input.body.m_update"
               
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_bmkb_d[l_ac].* = g_bmkb_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkb_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_bmkb_d[l_ac].* = g_bmkb_d_t.*  
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()                   
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys_bak[1] = g_bmkadocno_t
               LET gs_keys[2] = g_bmkb_d[g_detail_idx].bmkbseq
               LET gs_keys_bak[2] = g_bmkb_d_t.bmkbseq
               LET gs_keys[3] = g_bmkb_d[g_detail_idx].bmkbseq1
               LET gs_keys_bak[3] = g_bmkb_d_t.bmkbseq1
               CALL abmt500_update_b('bmkb_t',gs_keys,gs_keys_bak,"'1'")
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL abmt500_bmkb_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(g_bmkb_d[g_detail_idx].bmkbseq = g_bmkb_d_t.bmkbseq 
                  AND g_bmkb_d[g_detail_idx].bmkbseq1 = g_bmkb_d_t.bmkbseq1 
 
                  ) THEN
                  LET gs_keys[01] = g_bmka_m.bmkadocno
 
                  LET gs_keys[gs_keys.getLength()+1] = g_bmkb_d_t.bmkbseq
                  LET gs_keys[gs_keys.getLength()+1] = g_bmkb_d_t.bmkbseq1
 
                  CALL abmt500_key_update_b(gs_keys,'bmkb_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb_d_t)
               LET g_log2 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            
            #end add-point
            CALL abmt500_unlock_b("bmkb_t","'1'")
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            
            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_bmkb_d[li_reproduce_target].* = g_bmkb_d[li_reproduce].*
 
               LET g_bmkb_d[li_reproduce_target].bmkbseq = NULL
               LET g_bmkb_d[li_reproduce_target].bmkbseq1 = NULL
 
            ELSE
               CALL FGL_SET_ARR_CURR(g_bmkb_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_bmkb_d.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
      INPUT ARRAY g_bmkb2_d FROM s_detail2.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_2)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body2.before_input2"
            
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmkb2_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL abmt500_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'2',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_bmkb2_d.getLength()
            #add-point:資料輸入前 name="input.body2.before_input"
            
            #end add-point
            
         BEFORE INSERT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmkb2_d[l_ac].* TO NULL 
            INITIALIZE g_bmkb2_d_t.* TO NULL 
            INITIALIZE g_bmkb2_d_o.* TO NULL 
            #公用欄位給值(單身2)
            
            #自定義預設值(單身2)
                  LET g_bmkb2_d[l_ac].bmkc003 = "0"
 
            #add-point:modify段before備份 name="input.body2.insert.before_bak"
            
            #end add-point
            LET g_bmkb2_d_t.* = g_bmkb2_d[l_ac].*     #新輸入資料
            LET g_bmkb2_d_o.* = g_bmkb2_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmt500_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body2.insert.after_set_entry_b"
            
            #end add-point
            CALL abmt500_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmkb2_d[li_reproduce_target].* = g_bmkb2_d[li_reproduce].*
 
               LET g_bmkb2_d[li_reproduce_target].bmkcseq = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body2.before_insert"
            IF cl_null(g_bmkb2_d[l_ac].bmkcseq) THEN 
               SELECT MAX(bmkcseq) INTO g_bmkb2_d[l_ac].bmkcseq
                 FROM bmkc_t
                WHERE bmkcent = g_enterprise
                  AND bmkcdocno = g_bmka_m.bmkadocno
               IF NOT cl_null(g_bmkb2_d[l_ac].bmkcseq) THEN 
                  LET g_bmkb2_d[l_ac].bmkcseq = g_bmkb2_d[l_ac].bmkcseq + 1
               ELSE
                  LET g_bmkb2_d[l_ac].bmkcseq = 1               
               END IF
            END IF
            LET g_bmkb2_d[l_ac].bmkcsite = g_bmka_m.bmkasite
            LET g_bmkb2_d_t.* = g_bmkb2_d[l_ac].*     #新輸入資料
            LET g_bmkb2_d_o.* = g_bmkb2_d[l_ac].*     #新輸入資料 
            #end add-point  
 
         BEFORE ROW     
            #add-point:modify段before row2 name="input.body2.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET g_detail_idx_list[2] = l_ac
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_current_page = 2
              
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmt500_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_bmkb2_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmkb2_d[l_ac].bmkcseq IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_bmkb2_d_t.* = g_bmkb2_d[l_ac].*  #BACKUP
               LET g_bmkb2_d_o.* = g_bmkb2_d[l_ac].*  #BACKUP
               CALL abmt500_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body2.after_set_entry_b"
               
               #end add-point  
               CALL abmt500_set_no_entry_b(l_cmd)
               IF NOT abmt500_lock_b("bmkc_t","'2'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmt500_bcl2 INTO g_bmkb2_d[l_ac].bmkcseq,g_bmkb2_d[l_ac].bmkc001,g_bmkb2_d[l_ac].bmkc002, 
                      g_bmkb2_d[l_ac].bmkc003,g_bmkb2_d[l_ac].bmkc004,g_bmkb2_d[l_ac].bmkcsite
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE  
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_bmkb2_d_mask_o[l_ac].* =  g_bmkb2_d[l_ac].*
                  CALL abmt500_bmkc_t_mask()
                  LET g_bmkb2_d_mask_n[l_ac].* =  g_bmkb2_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL abmt500_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body2.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body2.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body2.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身2刪除前 name="input.body2.b_delete"
               
               #end add-point    
                  
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_bmka_m.bmkadocno
               LET gs_keys[gs_keys.getLength()+1] = g_bmkb2_d_t.bmkcseq
            
               #刪除同層單身
               IF NOT abmt500_delete_b('bmkc_t',gs_keys,"'2'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT abmt500_key_delete_b(gs_keys,'bmkc_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身2刪除中 name="input.body2.m_delete"
               
               #end add-point    
               
               CALL s_transaction_end('Y','0')
               CLOSE abmt500_bcl
 
               LET g_rec_b = g_rec_b-1
               #add-point:單身2刪除後 name="input.body2.a_delete"
               
               #end add-point
               LET l_count = g_bmkb_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body2.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_bmkb2_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身2新增前 name="input.body2.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmkc_t 
             WHERE bmkcent = g_enterprise AND bmkcdocno = g_bmka_m.bmkadocno
               AND bmkcseq = g_bmkb2_d[l_ac].bmkcseq
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身2新增前 name="input.body2.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys[2] = g_bmkb2_d[g_detail_idx].bmkcseq
               CALL abmt500_insert_b('bmkc_t',gs_keys,"'2'")
                           
               #add-point:單身新增後2 name="input.body2.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_bmkb_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL abmt500_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body2.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_bmkb2_d[l_ac].* = g_bmkb2_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmt500_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_bmkb2_d[l_ac].* = g_bmkb2_d_t.*
            ELSE
               #add-point:單身page2修改前 name="input.body2.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身2)
               
               
               #將遮罩欄位還原
               CALL abmt500_bmkc_t_mask_restore('restore_mask_o')
                              
               UPDATE bmkc_t SET (bmkcdocno,bmkcseq,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite) = (g_bmka_m.bmkadocno, 
                   g_bmkb2_d[l_ac].bmkcseq,g_bmkb2_d[l_ac].bmkc001,g_bmkb2_d[l_ac].bmkc002,g_bmkb2_d[l_ac].bmkc003, 
                   g_bmkb2_d[l_ac].bmkc004,g_bmkb2_d[l_ac].bmkcsite) #自訂欄位頁簽
                WHERE bmkcent = g_enterprise AND bmkcdocno = g_bmka_m.bmkadocno
                  AND bmkcseq = g_bmkb2_d_t.bmkcseq #項次 
                  
               #add-point:單身page2修改中 name="input.body2.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_bmkb2_d[l_ac].* = g_bmkb2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkc_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_bmkb2_d[l_ac].* = g_bmkb2_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys_bak[1] = g_bmkadocno_t
               LET gs_keys[2] = g_bmkb2_d[g_detail_idx].bmkcseq
               LET gs_keys_bak[2] = g_bmkb2_d_t.bmkcseq
               CALL abmt500_update_b('bmkc_t',gs_keys,gs_keys_bak,"'2'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL abmt500_bmkc_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT (g_bmkb2_d[g_detail_idx].bmkcseq = g_bmkb2_d_t.bmkcseq 
                  ) THEN
                  LET gs_keys[01] = g_bmka_m.bmkadocno
                  LET gs_keys[gs_keys.getLength()+1] = g_bmkb2_d_t.bmkcseq
                  CALL abmt500_key_update_b(gs_keys,'bmkc_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb2_d_t)
               LET g_log2 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb2_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page2修改後 name="input.body2.a_update"
               
               #end add-point
            END IF
         
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkcseq
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_bmkb2_d[l_ac].bmkcseq,"1.000","1","","","azz-00079",1) THEN
               NEXT FIELD bmkcseq
            END IF 
 
 
 
            #add-point:AFTER FIELD bmkcseq name="input.a.page2.bmkcseq"
            #此段落由子樣板a05產生
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb2_d[g_detail_idx].bmkcseq IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb2_d[g_detail_idx].bmkcseq != g_bmkb2_d_t.bmkcseq)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkc_t WHERE "||"bmkcent = '" ||g_enterprise|| "' AND "||"bmkcdocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkcseq = '"||g_bmkb2_d[g_detail_idx].bmkcseq ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF


            IF NOT cl_null(g_bmkb2_d[l_ac].bmkcseq) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkcseq
            #add-point:BEFORE FIELD bmkcseq name="input.b.page2.bmkcseq"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkcseq
            #add-point:ON CHANGE bmkcseq name="input.g.page2.bmkcseq"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc001
            #add-point:BEFORE FIELD bmkc001 name="input.b.page2.bmkc001"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc001
            
            #add-point:AFTER FIELD bmkc001 name="input.a.page2.bmkc001"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkc001
            #add-point:ON CHANGE bmkc001 name="input.g.page2.bmkc001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc002
            
            #add-point:AFTER FIELD bmkc002 name="input.a.page2.bmkc002"
            CALL abmt500_oocql004_desc('1121',g_bmkb2_d[l_ac].bmkc002) RETURNING g_bmkb2_d[l_ac].bmkc002_desc 
            DISPLAY BY NAME g_bmkb2_d[l_ac].bmkc002_desc
            IF NOT cl_null(g_bmkb2_d[l_ac].bmkc002) THEN 
               IF NOT s_azzi650_chk_exist('1121',g_bmkb2_d[l_ac].bmkc002) THEN
                  LET g_bmkb2_d[l_ac].bmkc002 = g_bmkb2_d_t.bmkc002
                  NEXT FIELD CURRENT
               END IF        
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc002
            #add-point:BEFORE FIELD bmkc002 name="input.b.page2.bmkc002"
            CALL abmt500_oocql004_desc('1121',g_bmkb2_d[l_ac].bmkc002) RETURNING g_bmkb2_d[l_ac].bmkc002_desc 
            DISPLAY BY NAME g_bmkb2_d[l_ac].bmkc002_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkc002
            #add-point:ON CHANGE bmkc002 name="input.g.page2.bmkc002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc003
            #add-point:BEFORE FIELD bmkc003 name="input.b.page2.bmkc003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc003
            
            #add-point:AFTER FIELD bmkc003 name="input.a.page2.bmkc003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkc003
            #add-point:ON CHANGE bmkc003 name="input.g.page2.bmkc003"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkc004
            #add-point:BEFORE FIELD bmkc004 name="input.b.page2.bmkc004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkc004
            
            #add-point:AFTER FIELD bmkc004 name="input.a.page2.bmkc004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkc004
            #add-point:ON CHANGE bmkc004 name="input.g.page2.bmkc004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkcsite
            #add-point:BEFORE FIELD bmkcsite name="input.b.page2.bmkcsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkcsite
            
            #add-point:AFTER FIELD bmkcsite name="input.a.page2.bmkcsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkcsite
            #add-point:ON CHANGE bmkcsite name="input.g.page2.bmkcsite"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page2.bmkcseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkcseq
            #add-point:ON ACTION controlp INFIELD bmkcseq name="input.c.page2.bmkcseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmkc001
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc001
            #add-point:ON ACTION controlp INFIELD bmkc001 name="input.c.page2.bmkc001"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmkc002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc002
            #add-point:ON ACTION controlp INFIELD bmkc002 name="input.c.page2.bmkc002"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmkb2_d[l_ac].bmkc002             #給予default值
            LET g_qryparam.default2 = "" #g_bmkb2_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "1121" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmkb2_d[l_ac].bmkc002 = g_qryparam.return1              
            #LET g_bmkb2_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_bmkb2_d[l_ac].bmkc002 TO bmkc002              #
            #DISPLAY g_bmkb2_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmkc002                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page2.bmkc003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc003
            #add-point:ON ACTION controlp INFIELD bmkc003 name="input.c.page2.bmkc003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmkc004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkc004
            #add-point:ON ACTION controlp INFIELD bmkc004 name="input.c.page2.bmkc004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page2.bmkcsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkcsite
            #add-point:ON ACTION controlp INFIELD bmkcsite name="input.c.page2.bmkcsite"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page2 after_row name="input.body2.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_bmkb2_d[l_ac].* = g_bmkb2_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmt500_bcl2
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL abmt500_unlock_b("bmkc_t","'2'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page2 after_row2 name="input.body2.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body2.after_input"
            
            #end add-point   
    
         ON ACTION controlo
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_bmkb2_d[li_reproduce_target].* = g_bmkb2_d[li_reproduce].*
 
               LET g_bmkb2_d[li_reproduce_target].bmkcseq = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_bmkb2_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_bmkb2_d.getLength()+1
            END IF
            
      END INPUT
      INPUT ARRAY g_bmkb3_d FROM s_detail3.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = l_allow_insert, #此頁面insert功能由產生器控制, 手動之設定無效! 
 
                 DELETE ROW = l_allow_delete,
                 APPEND ROW = l_allow_insert)
                 
         #自訂ACTION(detail_input,page_3)
         
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body3.before_input2"
            
            #end add-point
            IF g_insert = 'Y' AND NOT cl_null(g_insert) THEN 
              CALL FGL_SET_ARR_CURR(g_bmkb3_d.getLength()+1) 
              LET g_insert = 'N' 
           END IF 
 
            CALL abmt500_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("'3',"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = g_bmkb3_d.getLength()
            #add-point:資料輸入前 name="input.body3.before_input"
            
            #end add-point
            
         BEFORE INSERT
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE g_bmkb3_d[l_ac].* TO NULL 
            INITIALIZE g_bmkb3_d_t.* TO NULL 
            INITIALIZE g_bmkb3_d_o.* TO NULL 
            #公用欄位給值(單身3)
            
            #自定義預設值(單身3)
                  LET g_bmkb3_d[l_ac].bmkd003 = "N"
 
            #add-point:modify段before備份 name="input.body3.insert.before_bak"
            
            #end add-point
            LET g_bmkb3_d_t.* = g_bmkb3_d[l_ac].*     #新輸入資料
            LET g_bmkb3_d_o.* = g_bmkb3_d[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL abmt500_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body3.insert.after_set_entry_b"
            
            #end add-point
            CALL abmt500_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               LET g_bmkb3_d[li_reproduce_target].* = g_bmkb3_d[li_reproduce].*
 
               LET g_bmkb3_d[li_reproduce_target].bmkdseq = NULL
               LET g_bmkb3_d[li_reproduce_target].bmkdseq1 = NULL
            END IF
            
 
            #add-point:modify段before insert name="input.body3.before_insert"
            IF cl_null(g_bmkb3_d[l_ac].bmkdseq) THEN 
               SELECT MAX(bmkdseq) INTO g_bmkb3_d[l_ac].bmkdseq
                 FROM bmkd_t
                WHERE bmkdent = g_enterprise
                  AND bmkddocno = g_bmka_m.bmkadocno
               IF NOT cl_null(g_bmkb3_d[l_ac].bmkdseq) THEN 
                  LET g_bmkb3_d[l_ac].bmkdseq = g_bmkb3_d[l_ac].bmkdseq + 1
               ELSE
                  LET g_bmkb3_d[l_ac].bmkdseq = 1               
               END IF
            END IF
            LET g_bmkb3_d[l_ac].bmkdsite = g_bmka_m.bmkasite
            LET g_bmkb3_d_t.* = g_bmkb3_d[l_ac].*     #新輸入資料
            LET g_bmkb3_d_o.* = g_bmkb3_d[l_ac].*     #新輸入資料  
            #end add-point  
 
         BEFORE ROW     
            #add-point:modify段before row2 name="input.body3.before_row2"
            
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET g_detail_idx_list[3] = l_ac
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_current_page = 3
              
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE abmt500_cl
               CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = g_bmkb3_d.getLength()
            
            IF g_rec_b >= l_ac 
               AND g_bmkb3_d[l_ac].bmkdseq IS NOT NULL
               AND g_bmkb3_d[l_ac].bmkdseq1 IS NOT NULL
            THEN 
               LET l_cmd='u'
               LET g_bmkb3_d_t.* = g_bmkb3_d[l_ac].*  #BACKUP
               LET g_bmkb3_d_o.* = g_bmkb3_d[l_ac].*  #BACKUP
               CALL abmt500_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body3.after_set_entry_b"
               
               #end add-point  
               CALL abmt500_set_no_entry_b(l_cmd)
               IF NOT abmt500_lock_b("bmkd_t","'3'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH abmt500_bcl3 INTO g_bmkb3_d[l_ac].bmkdseq,g_bmkb3_d[l_ac].bmkd001,g_bmkb3_d[l_ac].bmkdseq1, 
                      g_bmkb3_d[l_ac].bmkd002,g_bmkb3_d[l_ac].bmkd003,g_bmkb3_d[l_ac].bmkd004,g_bmkb3_d[l_ac].bmkdsite 
 
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE  
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET g_bmkb3_d_mask_o[l_ac].* =  g_bmkb3_d[l_ac].*
                  CALL abmt500_bmkd_t_mask()
                  LET g_bmkb3_d_mask_n[l_ac].* =  g_bmkb3_d[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL abmt500_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body3.before_row"
            
            #end add-point  
            #其他table資料備份(確定是否更改用)
            
 
            #其他table進行lock
            
 
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body3.after_delete_d"
               
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body3.b_delete_ask"
               
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身3刪除前 name="input.body3.b_delete"
               
               #end add-point    
                  
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = g_bmka_m.bmkadocno
               LET gs_keys[gs_keys.getLength()+1] = g_bmkb3_d_t.bmkdseq
               LET gs_keys[gs_keys.getLength()+1] = g_bmkb3_d_t.bmkdseq1
            
               #刪除同層單身
               IF NOT abmt500_delete_b('bmkd_t',gs_keys,"'3'") THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT abmt500_key_delete_b(gs_keys,'bmkd_t') THEN
                  CALL s_transaction_end('N','0')
                  CLOSE abmt500_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               
 
               
               #add-point:單身3刪除中 name="input.body3.m_delete"
               
               #end add-point    
               
               CALL s_transaction_end('Y','0')
               CLOSE abmt500_bcl
 
               LET g_rec_b = g_rec_b-1
               #add-point:單身3刪除後 name="input.body3.a_delete"
               
               #end add-point
               LET l_count = g_bmkb_d.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body3.after_delete"
               
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (g_bmkb3_d.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身3新增前 name="input.body3.b_a_insert"
            
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM bmkd_t 
             WHERE bmkdent = g_enterprise AND bmkddocno = g_bmka_m.bmkadocno
               AND bmkdseq = g_bmkb3_d[l_ac].bmkdseq
               AND bmkdseq1 = g_bmkb3_d[l_ac].bmkdseq1
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身3新增前 name="input.body3.b_insert"
               
               #end add-point
            
                              INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys[2] = g_bmkb3_d[g_detail_idx].bmkdseq
               LET gs_keys[3] = g_bmkb3_d[g_detail_idx].bmkdseq1
               CALL abmt500_insert_b('bmkd_t',gs_keys,"'3'")
                           
               #add-point:單身新增後3 name="input.body3.a_insert"
               
               #end add-point
            ELSE    
               INITIALIZE g_bmkb_d[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL abmt500_b_fill()
               #資料多語言用-增/改
               
               #add-point:單身新增後 name="input.body3.after_insert"
               
               #end add-point
               CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET g_bmkb3_d[l_ac].* = g_bmkb3_d_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmt500_bcl3
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET g_bmkb3_d[l_ac].* = g_bmkb3_d_t.*
            ELSE
               #add-point:單身page3修改前 name="input.body3.b_update"
               
               #end add-point
               
               #寫入修改者/修改日期資訊(單身3)
               
               
               #將遮罩欄位還原
               CALL abmt500_bmkd_t_mask_restore('restore_mask_o')
                              
               UPDATE bmkd_t SET (bmkddocno,bmkdseq,bmkd001,bmkdseq1,bmkd002,bmkd003,bmkd004,bmkdsite) = (g_bmka_m.bmkadocno, 
                   g_bmkb3_d[l_ac].bmkdseq,g_bmkb3_d[l_ac].bmkd001,g_bmkb3_d[l_ac].bmkdseq1,g_bmkb3_d[l_ac].bmkd002, 
                   g_bmkb3_d[l_ac].bmkd003,g_bmkb3_d[l_ac].bmkd004,g_bmkb3_d[l_ac].bmkdsite) #自訂欄位頁簽 
 
                WHERE bmkdent = g_enterprise AND bmkddocno = g_bmka_m.bmkadocno
                  AND bmkdseq = g_bmkb3_d_t.bmkdseq #項次 
                  AND bmkdseq1 = g_bmkb3_d_t.bmkdseq1
                  
               #add-point:單身page3修改中 name="input.body3.m_update"
               
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET g_bmkb3_d[l_ac].* = g_bmkb3_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkd_t" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET g_bmkb3_d[l_ac].* = g_bmkb3_d_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     
                                    INITIALIZE gs_keys TO NULL 
               LET gs_keys[1] = g_bmka_m.bmkadocno
               LET gs_keys_bak[1] = g_bmkadocno_t
               LET gs_keys[2] = g_bmkb3_d[g_detail_idx].bmkdseq
               LET gs_keys_bak[2] = g_bmkb3_d_t.bmkdseq
               LET gs_keys[3] = g_bmkb3_d[g_detail_idx].bmkdseq1
               LET gs_keys_bak[3] = g_bmkb3_d_t.bmkdseq1
               CALL abmt500_update_b('bmkd_t',gs_keys,gs_keys_bak,"'3'")
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL abmt500_bmkd_t_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT (g_bmkb3_d[g_detail_idx].bmkdseq = g_bmkb3_d_t.bmkdseq 
                  AND g_bmkb3_d[g_detail_idx].bmkdseq1 = g_bmkb3_d_t.bmkdseq1 
                  ) THEN
                  LET gs_keys[01] = g_bmka_m.bmkadocno
                  LET gs_keys[gs_keys.getLength()+1] = g_bmkb3_d_t.bmkdseq
                  LET gs_keys[gs_keys.getLength()+1] = g_bmkb3_d_t.bmkdseq1
                  CALL abmt500_key_update_b(gs_keys,'bmkd_t')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb3_d_t)
               LET g_log2 = util.JSON.stringify(g_bmka_m),util.JSON.stringify(g_bmkb3_d[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page3修改後 name="input.body3.a_update"
               
               #end add-point
            END IF
         
                  #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdseq
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_bmkb3_d[l_ac].bmkdseq,"1.000","1","","","azz-00079",1) THEN
               NEXT FIELD bmkdseq
            END IF 
 
 
 
            #add-point:AFTER FIELD bmkdseq name="input.a.page3.bmkdseq"
            #此段落由子樣板a05產生
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkdseq1 != g_bmkb3_d_t.bmkdseq1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq = '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkdseq1 = '"||g_bmkb3_d[g_detail_idx].bmkdseq1 ||"'",'std-00004',0) THEN 
                     LET g_bmkb3_d[l_ac].bmkdseq = g_bmkb3_d_t.bmkdseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF
            IF NOT cl_null(g_bmkb3_d[l_ac].bmkdseq) THEN 
               IF l_cmd = 'a' OR (l_cmd = 'u' AND (g_bmkb3_d[l_ac].bmkdseq <> g_bmkb3_d_o.bmkdseq OR cl_null(g_bmkb3_d_o.bmkdseq))) THEN 
                  CALL abmt500_bmkd001_ref() 
               END IF
            END IF            
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkd001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkd001 != g_bmkb3_d_t.bmkd001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq <> '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkd001 = '"||g_bmkb3_d[g_detail_idx].bmkd001 ||"'",'std-00004',0) THEN 
                     LET g_bmkb3_d[l_ac].bmkdseq = g_bmkb3_d_t.bmkdseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF  
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkd002 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkd002 != g_bmkb3_d_t.bmkd002)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq = '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkd002 = '"||g_bmkb3_d[g_detail_idx].bmkd002 ||"'",'std-00004',0) THEN 
                     LET g_bmkb3_d[l_ac].bmkdseq = g_bmkb3_d_t.bmkdseq
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF            
            LET g_bmkb3_d_o.bmkdseq = g_bmkb3_d[l_ac].bmkdseq
            CALL abmt500_set_entry_b(l_cmd)
            CALL abmt500_set_no_entry_b(l_cmd)            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdseq
            #add-point:BEFORE FIELD bmkdseq name="input.b.page3.bmkdseq"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkdseq
            #add-point:ON CHANGE bmkdseq name="input.g.page3.bmkdseq"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd001
            
            #add-point:AFTER FIELD bmkd001 name="input.a.page3.bmkd001"
            CALL abmt500_oocql004_desc('1119',g_bmkb3_d[l_ac].bmkd001) RETURNING g_bmkb3_d[l_ac].bmkd001_desc 
            DISPLAY BY NAME g_bmkb3_d[l_ac].bmkd001_desc
            IF NOT cl_null(g_bmkb3_d[l_ac].bmkd001) THEN 
               IF NOT s_azzi650_chk_exist('1119',g_bmkb3_d[l_ac].bmkd001) THEN
                  LET g_bmkb3_d[l_ac].bmkd001 = g_bmkb3_d_t.bmkd001
                  NEXT FIELD CURRENT
               END IF 
               IF NOT abmt500_oocq_chk('1120',g_bmkb3_d[l_ac].bmkd002,g_bmkb3_d[l_ac].bmkd001) THEN 
                  LET g_bmkb3_d[l_ac].bmkd002 = g_bmkb3_d_t.bmkd002
                  NEXT FIELD CURRENT               
               END IF                
            END IF
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkd001 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkd001 != g_bmkb3_d_t.bmkd001)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq <> '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkd001 = '"||g_bmkb3_d[g_detail_idx].bmkd001 ||"'",'std-00004',0) THEN 
                     LET g_bmkb3_d[l_ac].bmkd001 = g_bmkb3_d_t.bmkd001
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF            
            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd001
            #add-point:BEFORE FIELD bmkd001 name="input.b.page3.bmkd001"
            CALL abmt500_oocql004_desc('1119',g_bmkb3_d[l_ac].bmkd001) RETURNING g_bmkb3_d[l_ac].bmkd001_desc 
            DISPLAY BY NAME g_bmkb3_d[l_ac].bmkd001_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkd001
            #add-point:ON CHANGE bmkd001 name="input.g.page3.bmkd001"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdseq1
            #應用 a15 樣板自動產生(Version:3)
            #確認欄位值在特定區間內
            IF NOT cl_ap_chk_range(g_bmkb3_d[l_ac].bmkdseq1,"1.000","1","","","azz-00079",1) THEN
               NEXT FIELD bmkdseq1
            END IF 
 
 
 
            #add-point:AFTER FIELD bmkdseq1 name="input.a.page3.bmkdseq1"
            #此段落由子樣板a05產生
            IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq1 IS NOT NULL THEN 
               IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkdseq1 != g_bmkb3_d_t.bmkdseq1)) THEN 
                  IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq = '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkdseq1 = '"||g_bmkb3_d[g_detail_idx].bmkdseq1 ||"'",'std-00004',0) THEN 
                     NEXT FIELD CURRENT
                  END IF
               END IF
            END IF


            IF NOT cl_null(g_bmkb3_d[l_ac].bmkdseq1) THEN 
            END IF 


            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdseq1
            #add-point:BEFORE FIELD bmkdseq1 name="input.b.page3.bmkdseq1"
            
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkdseq1
            #add-point:ON CHANGE bmkdseq1 name="input.g.page3.bmkdseq1"
            
            #END add-point 
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd002
            
            #add-point:AFTER FIELD bmkd002 name="input.a.page3.bmkd002"
            CALL abmt500_oocql004_desc('1120',g_bmkb3_d[l_ac].bmkd002) RETURNING g_bmkb3_d[l_ac].bmkd002_desc 
            DISPLAY BY NAME g_bmkb3_d[l_ac].bmkd002_desc
            IF NOT cl_null(g_bmkb3_d[l_ac].bmkd002) THEN 
               IF NOT s_azzi650_chk_exist('1120',g_bmkb3_d[l_ac].bmkd002) THEN
                  LET g_bmkb3_d[l_ac].bmkd002 = g_bmkb3_d_t.bmkd002
                  NEXT FIELD CURRENT
               END IF 
               IF NOT abmt500_oocq_chk('1120',g_bmkb3_d[l_ac].bmkd002,g_bmkb3_d[l_ac].bmkd001) THEN 
                  LET g_bmkb3_d[l_ac].bmkd002 = g_bmkb3_d_t.bmkd002
                  NEXT FIELD CURRENT               
               END IF 
               IF  g_bmka_m.bmkadocno IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkdseq IS NOT NULL AND g_bmkb3_d[g_detail_idx].bmkd002 IS NOT NULL THEN 
                  IF l_cmd = 'a' OR ( l_cmd = 'u' AND (g_bmka_m.bmkadocno != g_bmkadocno_t OR g_bmkb3_d[g_detail_idx].bmkdseq != g_bmkb3_d_t.bmkdseq OR g_bmkb3_d[g_detail_idx].bmkd002 != g_bmkb3_d_t.bmkd002)) THEN 
                     IF NOT ap_chk_notDup("","SELECT COUNT(*) FROM bmkd_t WHERE "||"bmkdent = '" ||g_enterprise|| "' AND "||"bmkddocno = '"||g_bmka_m.bmkadocno ||"' AND "|| "bmkdseq = '"||g_bmkb3_d[g_detail_idx].bmkdseq ||"' AND "|| "bmkd002 = '"||g_bmkb3_d[g_detail_idx].bmkd002 ||"'",'std-00004',0) THEN 
                        LET g_bmkb3_d[l_ac].bmkd002 = g_bmkb3_d_t.bmkd002
                        NEXT FIELD CURRENT
                     END IF
                  END IF
               END IF                
            END IF

            #END add-point
            
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd002
            #add-point:BEFORE FIELD bmkd002 name="input.b.page3.bmkd002"
            CALL abmt500_oocql004_desc('1120',g_bmkb3_d[l_ac].bmkd002) RETURNING g_bmkb3_d[l_ac].bmkd002_desc 
            DISPLAY BY NAME g_bmkb3_d[l_ac].bmkd002_desc
            #END add-point
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkd002
            #add-point:ON CHANGE bmkd002 name="input.g.page3.bmkd002"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd003
            #add-point:BEFORE FIELD bmkd003 name="input.b.page3.bmkd003"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd003
            
            #add-point:AFTER FIELD bmkd003 name="input.a.page3.bmkd003"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkd003
            #add-point:ON CHANGE bmkd003 name="input.g.page3.bmkd003"
            CALL abmt500_set_entry_b(l_cmd)
            CALL abmt500_set_no_entry_b(l_cmd) 
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkd004
            #add-point:BEFORE FIELD bmkd004 name="input.b.page3.bmkd004"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkd004
            
            #add-point:AFTER FIELD bmkd004 name="input.a.page3.bmkd004"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkd004
            #add-point:ON CHANGE bmkd004 name="input.g.page3.bmkd004"
            
            #END add-point 
 
 
         #應用 a01 樣板自動產生(Version:2)
         BEFORE FIELD bmkdsite
            #add-point:BEFORE FIELD bmkdsite name="input.b.page3.bmkdsite"
            
            #END add-point
 
 
         #應用 a02 樣板自動產生(Version:2)
         AFTER FIELD bmkdsite
            
            #add-point:AFTER FIELD bmkdsite name="input.a.page3.bmkdsite"
            
            #END add-point
            
 
 
         #應用 a04 樣板自動產生(Version:3)
         ON CHANGE bmkdsite
            #add-point:ON CHANGE bmkdsite name="input.g.page3.bmkdsite"
            
            #END add-point 
 
 
 
                  #Ctrlp:input.c.page3.bmkdseq
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdseq
            #add-point:ON ACTION controlp INFIELD bmkdseq name="input.c.page3.bmkdseq"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkd001
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd001
            #add-point:ON ACTION controlp INFIELD bmkd001 name="input.c.page3.bmkd001"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmkb3_d[l_ac].bmkd001             #給予default值
            LET g_qryparam.default2 = "" #g_bmkb3_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "1119" #

            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmkb3_d[l_ac].bmkd001 = g_qryparam.return1              
            #LET g_bmkb3_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_bmkb3_d[l_ac].bmkd001 TO bmkd001              #
            #DISPLAY g_bmkb3_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmkd001                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkdseq1
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdseq1
            #add-point:ON ACTION controlp INFIELD bmkdseq1 name="input.c.page3.bmkdseq1"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkd002
         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd002
            #add-point:ON ACTION controlp INFIELD bmkd002 name="input.c.page3.bmkd002"
            #此段落由子樣板a07產生            
            #開窗i段
            INITIALIZE g_qryparam.* TO NULL
            LET g_qryparam.state = 'i'
            LET g_qryparam.reqry = FALSE

            LET g_qryparam.default1 = g_bmkb3_d[l_ac].bmkd002             #給予default值
            LET g_qryparam.default2 = "" #g_bmkb3_d[l_ac].oocq002 #應用分類碼
            #給予arg
            LET g_qryparam.arg1 = "1120" #
            LET g_qryparam.where = " oocq004 = '",g_bmkb3_d[l_ac].bmkd001,"'"
            
            CALL q_oocq002()                                #呼叫開窗

            LET g_bmkb3_d[l_ac].bmkd002 = g_qryparam.return1              
            #LET g_bmkb3_d[l_ac].oocq002 = g_qryparam.return2 
            DISPLAY g_bmkb3_d[l_ac].bmkd002 TO bmkd002              #
            #DISPLAY g_bmkb3_d[l_ac].oocq002 TO oocq002 #應用分類碼
            NEXT FIELD bmkd002                          #返回原欄位


            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkd003
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd003
            #add-point:ON ACTION controlp INFIELD bmkd003 name="input.c.page3.bmkd003"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkd004
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkd004
            #add-point:ON ACTION controlp INFIELD bmkd004 name="input.c.page3.bmkd004"
            
            #END add-point
 
 
         #Ctrlp:input.c.page3.bmkdsite
#         #應用 a03 樣板自動產生(Version:3)
         ON ACTION controlp INFIELD bmkdsite
            #add-point:ON ACTION controlp INFIELD bmkdsite name="input.c.page3.bmkdsite"
            
            #END add-point
 
 
 
 
         AFTER ROW
            #add-point:單身page3 after_row name="input.body3.after_row"
            
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET g_bmkb3_d[l_ac].* = g_bmkb3_d_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE abmt500_bcl3
               CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            
            CALL abmt500_unlock_b("bmkd_t","'3'")
            CALL s_transaction_end('Y','0')
            #add-point:單身page3 after_row2 name="input.body3.after_row2"
            
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body3.after_input"
            
            #end add-point   
    
         ON ACTION controlo
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               LET g_bmkb3_d[li_reproduce_target].* = g_bmkb3_d[li_reproduce].*
 
               LET g_bmkb3_d[li_reproduce_target].bmkdseq = NULL
               LET g_bmkb3_d[li_reproduce_target].bmkdseq1 = NULL
            ELSE
               CALL FGL_SET_ARR_CURR(g_bmkb3_d.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = g_bmkb3_d.getLength()+1
            END IF
            
      END INPUT
 
      
 
 
 
 
{</section>}
 
{<section id="abmt500.input.other" >}
      
      #add-point:自定義input name="input.more_input"
      
      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog name="input.before_dialog"
         
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("s_detail1",g_idx_group.getValue("'1',"))      
         CALL DIALOG.setCurrentRow("s_detail2",g_idx_group.getValue("'2',"))
         CALL DIALOG.setCurrentRow("s_detail3",g_idx_group.getValue("'3',"))
 
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field name="input.next_field"
            
            #end add-point  
            NEXT FIELD bmkadocno
         ELSE
            CASE g_aw
               WHEN "s_detail1"
                  NEXT FIELD bmkbseq
               WHEN "s_detail2"
                  NEXT FIELD bmkcseq
               WHEN "s_detail3"
                  NEXT FIELD bmkdseq
 
               #add-point:input段modify_detail  name="input.modify_detail.other"
               
               #end add-point  
            END CASE
         END IF
      
      AFTER DIALOG
         #add-point:input段after_dialog name="input.after_dialog"
         
         #end add-point    
         
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept  name="input.accept"
         
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         #add-point:input段cancel name="input.cancel"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
 
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         #add-point:input段close name="input.close"
         
         #end add-point  
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         #add-point:input段exit name="input.exit"
         
         #end add-point
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         LET g_detail_idx_list[2] = 1
         LET g_detail_idx_list[3] = 1
 
         CALL g_curr_diag.setCurrentRow("s_detail1",1)    
         CALL g_curr_diag.setCurrentRow("s_detail2",1)
         CALL g_curr_diag.setCurrentRow("s_detail3",1)
 
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input  name="input.after_input"
   
   #end add-point    
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION abmt500_show()
   #add-point:show段define(客製用) name="show.define_customerization"
   
   #end add-point  
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="show.define"
   DEFINE l_success LIKE type_t.num5
   #end add-point  
   
   #add-point:Function前置處理 name="show.before"
   
   #end add-point
   
   
   
   IF g_bfill = "Y" THEN
      CALL abmt500_b_fill() #單身填充
      CALL abmt500_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   #應用 a12 樣板自動產生(Version:4)
 
 
 
   
   #顯示followup圖示
   #應用 a48 樣板自動產生(Version:3)
   CALL abmt500_set_pk_array()
   #add-point:ON ACTION agendum name="show.follow_pic"
   
   #END add-point
   CALL cl_user_overview_set_follow_pic()
  
 
 
 
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference name="show.head.reference"
   #160802-00030#1---mod---s
   #CALL abmt500_bmkadocno_desc('2',g_bmka_m.bmkadocno) RETURNING g_bmka_m.oobxl003
   IF NOT cl_null(g_bmka_m.bmkadocno) THEN 
      CALL abmt500_bmkadocno_desc('2',g_bmka_m.bmkadocno) RETURNING g_bmka_m.oobxl003
   END IF
   #160802-00030#1---mod---e
   DISPLAY BY NAME g_bmka_m.oobxl003    
   CALL abmt500_bmka005_desc()
   CALL s_feature_description(g_bmka_m.bmka005,g_bmka_m.bmka006) RETURNING l_success,g_bmka_m.bmka006_desc 
   #end add-point
   
   #遮罩相關處理
   LET g_bmka_m_mask_o.* =  g_bmka_m.*
   CALL abmt500_bmka_t_mask()
   LET g_bmka_m_mask_n.* =  g_bmka_m.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.oobxl003,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka001_desc, 
       g_bmka_m.bmka002,g_bmka_m.bmka002_desc,g_bmka_m.bmka003,g_bmka_m.bmka003_desc,g_bmka_m.bmkastus, 
       g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka006,g_bmka_m.bmka006_desc, 
       g_bmka_m.bmka007,g_bmka_m.bmka007_desc,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka009_desc, 
       g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka011_desc,g_bmka_m.bmka012,g_bmka_m.bmka012_desc, 
       g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkacrtdt, 
       g_bmka_m.bmkamodid,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfid_desc, 
       g_bmka_m.bmkacnfdt
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_bmka_m.bmkastus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO g_bmkb_d.getLength()
      #add-point:show段單身reference name="show.body.reference"
      
      #end add-point
   END FOR
   
   FOR l_ac = 1 TO g_bmkb2_d.getLength()
      #add-point:show段單身reference name="show.body2.reference"
      
      #end add-point
   END FOR
   FOR l_ac = 1 TO g_bmkb3_d.getLength()
      #add-point:show段單身reference name="show.body3.reference"
      
      #end add-point
   END FOR
 
   
    
   
   #add-point:show段other name="show.other"
   
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL abmt500_detail_show()
 
   #add-point:show段之後 name="show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION abmt500_detail_show()
   #add-point:detail_show段define(客製用) name="detail_show.define_customerization"
   
   #end add-point  
   #add-point:detail_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="detail_show.before"
   
   #end add-point
   
   #add-point:detail_show段之後 name="detail_show.after"
   
   #end add-point
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION abmt500_reproduce()
   #add-point:reproduce段define(客製用) name="reproduce.define_customerization"
   
   #end add-point   
   DEFINE l_newno     LIKE bmka_t.bmkadocno 
   DEFINE l_oldno     LIKE bmka_t.bmkadocno 
 
   DEFINE l_master    RECORD LIKE bmka_t.* #此變數樣板目前無使用
   DEFINE l_detail    RECORD LIKE bmkb_t.* #此變數樣板目前無使用
   DEFINE l_detail2    RECORD LIKE bmkc_t.* #此變數樣板目前無使用
 
   DEFINE l_detail3    RECORD LIKE bmkd_t.* #此變數樣板目前無使用
 
 
 
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="reproduce.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="reproduce.pre_function"
   
   #end add-point
   
   #切換畫面
   IF g_main_hidden THEN
      CALL gfrm_curr.setElementHidden("mainlayout",0)
      CALL gfrm_curr.setElementHidden("worksheet",1)
      LET g_main_hidden = 0
   END IF
   
   LET g_master_insert = FALSE
   
   IF g_bmka_m.bmkadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
    
   LET g_bmka_m.bmkadocno = ""
 
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   #應用 a14 樣板自動產生(Version:5)    
      #公用欄位新增給值  
      LET g_bmka_m.bmkaownid = g_user
      LET g_bmka_m.bmkaowndp = g_dept
      LET g_bmka_m.bmkacrtid = g_user
      LET g_bmka_m.bmkacrtdp = g_dept 
      LET g_bmka_m.bmkacrtdt = cl_get_current()
      LET g_bmka_m.bmkamodid = g_user
      LET g_bmka_m.bmkamoddt = cl_get_current()
      LET g_bmka_m.bmkastus = 'N'
 
 
 
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前 name="reproduce.head.b_input"
   LET g_bmka_m.bmkadocdt = g_today
   LET g_bmka_m.bmka002 = g_user
   LET g_bmka_m.bmka003 = g_dept
   #160325-00010#1--add--bedgin
   LET g_bmka_m.bmkacnfid = ''
   LET g_bmka_m.bmkacnfdt = ''
   LET g_bmka_m.bmkacnfid_desc = ''
   CALL s_desc_get_person_desc(g_bmka_m.bmkaownid) RETURNING g_bmka_m.bmkaownid_desc
   CALL s_desc_get_department_desc(g_bmka_m.bmkaowndp) RETURNING g_bmka_m.bmkaowndp_desc
   LET g_bmka_m.bmkacrtid_desc = g_bmka_m.bmkaownid_desc
   LET g_bmka_m.bmkacrtdp_desc = g_bmka_m.bmkaowndp_desc 
   LET g_bmka_m.bmkamodid_desc = g_bmka_m.bmkaownid_desc 
   #160325-00010#1--add--end
   CALL abmt500_bmka002_desc()
   CALL abmt500_bmka003_desc()   
   LET g_bmka_m_t.* = g_bmka_m.*
   LET g_bmka_m_o.* = g_bmka_m.*
   #end add-point
   
   #顯示狀態(stus)圖片
         #應用 a21 樣板自動產生(Version:3)
	  #根據當下狀態碼顯示圖片
      CASE g_bmka_m.bmkastus 
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
 
 
 
   
   #清空key欄位的desc
   
   
   CALL abmt500_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE g_bmka_m.* TO NULL
      INITIALIZE g_bmkb_d TO NULL
      INITIALIZE g_bmkb2_d TO NULL
      INITIALIZE g_bmkb3_d TO NULL
 
      #add-point:複製取消後 name="reproduce.cancel"
      
      #end add-point
      CALL abmt500_show()
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code = 9001 
      LET g_errparam.popup = FALSE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL abmt500_set_act_visible()   
   CALL abmt500_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
   
   #組合新增資料的條件
   LET g_add_browse = " bmkaent = " ||g_enterprise|| " AND",
                      " bmkadocno = '", g_bmka_m.bmkadocno, "' "
 
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL abmt500_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後 name="reproduce.after_reproduce"
   
   #end add-point
   
   CALL abmt500_idx_chk()
   
   LET g_data_owner = g_bmka_m.bmkaownid      
   LET g_data_dept  = g_bmka_m.bmkaowndp
   
   #功能已完成,通報訊息中心
   CALL abmt500_msgcentre_notify('reproduce')
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION abmt500_detail_reproduce()
   #add-point:delete段define(客製用) name="detail_reproduce.define_customerization"
   
   #end add-point    
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE bmkb_t.* #此變數樣板目前無使用
   DEFINE l_detail2    RECORD LIKE bmkc_t.* #此變數樣板目前無使用
 
   DEFINE l_detail3    RECORD LIKE bmkd_t.* #此變數樣板目前無使用
 
 
 
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_reproduce.define"
   
   #end add-point    
   
   #add-point:Function前置處理  name="detail_reproduce.pre_function"
   
   #end add-point
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE abmt500_detail
   
   #add-point:單身複製前1 name="detail_reproduce.body.table1.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM bmkb_t
    WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmkadocno_t
 
    INTO TEMP abmt500_detail
 
   #將key修正為調整後   
   UPDATE abmt500_detail 
      #更新key欄位
      SET bmkbdocno = g_bmka_m.bmkadocno
 
      #更新共用欄位
      
 
   #add-point:單身修改前 name="detail_reproduce.body.table1.b_update"
   
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO bmkb_t SELECT * FROM abmt500_detail
   
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1 name="detail_reproduce.body.table1.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE abmt500_detail
   
   #add-point:單身複製後1 name="detail_reproduce.body.table1.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table2.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM bmkc_t 
    WHERE bmkcent = g_enterprise AND bmkcdocno = g_bmkadocno_t
 
    INTO TEMP abmt500_detail
 
   #將key修正為調整後   
   UPDATE abmt500_detail SET bmkcdocno = g_bmka_m.bmkadocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table2.b_update"
   
   #end add-point    
 
   #將資料塞回原table   
   INSERT INTO bmkc_t SELECT * FROM abmt500_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table2.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE abmt500_detail
   
   #add-point:單身複製後 name="detail_reproduce.body.table2.a_insert"
   
   #end add-point
 
   #add-point:單身複製前 name="detail_reproduce.body.table3.b_insert"
   
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM bmkd_t 
    WHERE bmkdent = g_enterprise AND bmkddocno = g_bmkadocno_t
 
    INTO TEMP abmt500_detail
 
   #將key修正為調整後   
   UPDATE abmt500_detail SET bmkddocno = g_bmka_m.bmkadocno
 
  
   #add-point:單身修改前 name="detail_reproduce.body.table3.b_update"
   
   #end add-point    
 
   #將資料塞回原table   
   INSERT INTO bmkd_t SELECT * FROM abmt500_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table3.m_insert"
   
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE abmt500_detail
   
   #add-point:單身複製後 name="detail_reproduce.body.table3.a_insert"
   
   #end add-point
 
 
   
 
   
   #多語言複製段落
   
   
   CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.delete" >}
#+ 資料刪除
PRIVATE FUNCTION abmt500_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   
   #end add-point     
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete.pre_function"
   
   #end add-point
   
   IF g_bmka_m.bmkadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   
   
   CALL s_transaction_begin()
 
   OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN abmt500_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
   
   #檢查是否允許此動作
   IF NOT abmt500_action_chk() THEN
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET g_bmka_m_mask_o.* =  g_bmka_m.*
   CALL abmt500_bmka_t_mask()
   LET g_bmka_m_mask_n.* =  g_bmka_m.*
   
   CALL abmt500_show()
   
   #add-point:delete段before ask name="delete.before_ask"
   
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前 name="delete.head.b_delete"
      
      #end add-point   
      
      #應用 a47 樣板自動產生(Version:4)
      #刪除相關文件
      CALL abmt500_set_pk_array()
      #add-point:相關文件刪除前 name="delete.befroe.related_document_remove"
      
      #end add-point   
      CALL cl_doc_remove()  
 
 
 
  
  
      #資料備份
      LET g_bmkadocno_t = g_bmka_m.bmkadocno
 
 
      DELETE FROM bmka_t
       WHERE bmkaent = g_enterprise AND bmkadocno = g_bmka_m.bmkadocno
 
       
      #add-point:單頭刪除中 name="delete.head.m_delete"
      
      #end add-point
       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_bmka_m.bmkadocno,":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF
      
      #add-point:單頭刪除後 name="delete.head.a_delete"
      IF NOT s_aooi200_del_docno(g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt) THEN
         CALL s_transaction_end('N','0')
         RETURN
      END IF
      #end add-point
  
      #add-point:單身刪除前 name="delete.body.b_delete"
      
      #end add-point
      
      DELETE FROM bmkb_t
       WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmka_m.bmkadocno
 
 
      #add-point:單身刪除中 name="delete.body.m_delete"
      
      #end add-point
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF    
 
      #add-point:單身刪除後 name="delete.body.a_delete"
      
      #end add-point
      
            
                                                               
      #add-point:單身刪除前 name="delete.body.b_delete2"
      
      #end add-point
      DELETE FROM bmkc_t
       WHERE bmkcent = g_enterprise AND
             bmkcdocno = g_bmka_m.bmkadocno
      #add-point:單身刪除中 name="delete.body.m_delete2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete2"
      
      #end add-point
 
      #add-point:單身刪除前 name="delete.body.b_delete3"
      
      #end add-point
      DELETE FROM bmkd_t
       WHERE bmkdent = g_enterprise AND
             bmkddocno = g_bmka_m.bmkadocno
      #add-point:單身刪除中 name="delete.body.m_delete3"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete3"
      
      #end add-point
 
 
 
 
      
      #修改歷程記錄(刪除)
      LET g_log1 = util.JSON.stringify(g_bmka_m)   #(ver:78)
      IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:78)
         CLOSE abmt500_cl
         CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL g_bmkb_d.clear() 
      CALL g_bmkb2_d.clear()       
      CALL g_bmkb3_d.clear()       
 
     
      CALL abmt500_ui_browser_refresh()  
      #CALL abmt500_ui_headershow()  
      #CALL abmt500_ui_detailshow()
 
      #add-point:多語言刪除 name="delete.lang.before_delete"
      
      #end add-point
      
      #單頭多語言刪除
      
      
      #單身多語言刪除
      
      
      
 
   
      #add-point:多語言刪除 name="delete.lang.delete"
      
      #end add-point
      
      IF g_browser_cnt > 0 THEN 
         #CALL abmt500_browser_fill("")
         CALL abmt500_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
      
      CALL s_transaction_end('Y','0')
   ELSE
      CALL s_transaction_end('N','0')
   END IF
 
   CLOSE abmt500_cl
 
   #功能已完成,通報訊息中心
   CALL abmt500_msgcentre_notify('delete')
    
END FUNCTION
 
{</section>}
 
{<section id="abmt500.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION abmt500_b_fill()
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   
   #end add-point     
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="b_fill.pre_function"
   
   #end add-point
   
   #清空第一階單身
   CALL g_bmkb_d.clear()
   CALL g_bmkb2_d.clear()
   CALL g_bmkb3_d.clear()
 
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   
   #end add-point
   
   #判斷是否填充
   IF abmt500_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.long_sql_if"
      
      #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT bmkbseq,bmkb001,bmkbseq1,bmkb002,bmkb003,bmkb004,bmkbsite ,t1.oocql004 , 
             t2.oocql004 FROM bmkb_t",   
                     " INNER JOIN bmka_t ON bmkaent = " ||g_enterprise|| " AND bmkadocno = bmkbdocno ",
 
                     #"",
                     
                     "",
                     #下層單身所需的join條件
 
                                    " LEFT JOIN oocql_t t1 ON t1.oocqlent="||g_enterprise||" AND t1.oocql001='1117' AND t1.oocql002=bmkb001 AND t1.oocql003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t2 ON t2.oocqlent="||g_enterprise||" AND t2.oocql001='1118' AND t2.oocql002=bmkb002 AND t2.oocql003='"||g_dlang||"' ",
 
                     " WHERE bmkbent=? AND bmkbdocno=?"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body.fill_sql"
         
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY bmkb_t.bmkbseq,bmkb_t.bmkbseq1"
         
         #add-point:單身填充控制 name="b_fill.sql"
         
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmt500_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR abmt500_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
   #  OPEN b_fill_cs USING g_enterprise,g_bmka_m.bmkadocno   #(ver:78)
                                               
      FOREACH b_fill_cs USING g_enterprise,g_bmka_m.bmkadocno INTO g_bmkb_d[l_ac].bmkbseq,g_bmkb_d[l_ac].bmkb001, 
          g_bmkb_d[l_ac].bmkbseq1,g_bmkb_d[l_ac].bmkb002,g_bmkb_d[l_ac].bmkb003,g_bmkb_d[l_ac].bmkb004, 
          g_bmkb_d[l_ac].bmkbsite,g_bmkb_d[l_ac].bmkb001_desc,g_bmkb_d[l_ac].bmkb002_desc   #(ver:78) 
 
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill.fill"
         
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
    
   #判斷是否填充
   IF abmt500_fill_chk(2) THEN
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
         #add-point:b_fill段long_sql_if name="b_fill.body2.long_sql_if"
         
         #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT bmkcseq,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite ,t3.oocql004 FROM bmkc_t", 
                
                     " INNER JOIN  bmka_t ON bmkaent = " ||g_enterprise|| " AND bmkadocno = bmkcdocno ",
 
                     "",
                     
                                    " LEFT JOIN oocql_t t3 ON t3.oocqlent="||g_enterprise||" AND t3.oocql001='1121' AND t3.oocql002=bmkc002 AND t3.oocql003='"||g_dlang||"' ",
 
                     " WHERE bmkcent=? AND bmkcdocno=?"   
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段fill_sql name="b_fill.body2.fill_sql"
         
         #end add-point
         IF NOT cl_null(g_wc2_table2) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table2 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY bmkc_t.bmkcseq"
         
         #add-point:單身填充控制 name="b_fill.sql2"
         
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmt500_pb2 FROM g_sql
         DECLARE b_fill_cs2 CURSOR FOR abmt500_pb2
      END IF
    
      LET l_ac = 1
      
   #  OPEN b_fill_cs2 USING g_enterprise,g_bmka_m.bmkadocno   #(ver:78)
                                               
      FOREACH b_fill_cs2 USING g_enterprise,g_bmka_m.bmkadocno INTO g_bmkb2_d[l_ac].bmkcseq,g_bmkb2_d[l_ac].bmkc001, 
          g_bmkb2_d[l_ac].bmkc002,g_bmkb2_d[l_ac].bmkc003,g_bmkb2_d[l_ac].bmkc004,g_bmkb2_d[l_ac].bmkcsite, 
          g_bmkb2_d[l_ac].bmkc002_desc   #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill2.fill"
         
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
 
   #判斷是否填充
   IF abmt500_fill_chk(3) THEN
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
         #add-point:b_fill段long_sql_if name="b_fill.body3.long_sql_if"
         
         #end add-point
      THEN
         LET g_sql = "SELECT  DISTINCT bmkdseq,bmkd001,bmkdseq1,bmkd002,bmkd003,bmkd004,bmkdsite ,t4.oocql004 , 
             t5.oocql004 FROM bmkd_t",   
                     " INNER JOIN  bmka_t ON bmkaent = " ||g_enterprise|| " AND bmkadocno = bmkddocno ",
 
                     "",
                     
                                    " LEFT JOIN oocql_t t4 ON t4.oocqlent="||g_enterprise||" AND t4.oocql001='1119' AND t4.oocql002=bmkd001 AND t4.oocql003='"||g_dlang||"' ",
               " LEFT JOIN oocql_t t5 ON t5.oocqlent="||g_enterprise||" AND t5.oocql001='1120' AND t5.oocql002=bmkd002 AND t5.oocql003='"||g_dlang||"' ",
 
                     " WHERE bmkdent=? AND bmkddocno=?"   
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段fill_sql name="b_fill.body3.fill_sql"
         
         #end add-point
         IF NOT cl_null(g_wc2_table3) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table3 CLIPPED
         END IF
         
         #子單身的WC
         
         
         LET g_sql = g_sql, " ORDER BY bmkd_t.bmkdseq,bmkd_t.bmkdseq1"
         
         #add-point:單身填充控制 name="b_fill.sql3"
         
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE abmt500_pb3 FROM g_sql
         DECLARE b_fill_cs3 CURSOR FOR abmt500_pb3
      END IF
    
      LET l_ac = 1
      
   #  OPEN b_fill_cs3 USING g_enterprise,g_bmka_m.bmkadocno   #(ver:78)
                                               
      FOREACH b_fill_cs3 USING g_enterprise,g_bmka_m.bmkadocno INTO g_bmkb3_d[l_ac].bmkdseq,g_bmkb3_d[l_ac].bmkd001, 
          g_bmkb3_d[l_ac].bmkdseq1,g_bmkb3_d[l_ac].bmkd002,g_bmkb3_d[l_ac].bmkd003,g_bmkb3_d[l_ac].bmkd004, 
          g_bmkb3_d[l_ac].bmkdsite,g_bmkb3_d[l_ac].bmkd001_desc,g_bmkb3_d[l_ac].bmkd002_desc   #(ver:78) 
 
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill3.fill"
         
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
 
 
   
   #add-point:browser_fill段其他table處理 name="browser_fill.other_fill"
   
   #end add-point
   
   CALL g_bmkb_d.deleteElement(g_bmkb_d.getLength())
   CALL g_bmkb2_d.deleteElement(g_bmkb2_d.getLength())
   CALL g_bmkb3_d.deleteElement(g_bmkb3_d.getLength())
 
   
 
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE abmt500_pb
   FREE abmt500_pb2
 
   FREE abmt500_pb3
 
 
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO g_bmkb_d.getLength()
      LET g_bmkb_d_mask_o[l_ac].* =  g_bmkb_d[l_ac].*
      CALL abmt500_bmkb_t_mask()
      LET g_bmkb_d_mask_n[l_ac].* =  g_bmkb_d[l_ac].*
   END FOR
   
   LET g_bmkb2_d_mask_o.* =  g_bmkb2_d.*
   FOR l_ac = 1 TO g_bmkb2_d.getLength()
      LET g_bmkb2_d_mask_o[l_ac].* =  g_bmkb2_d[l_ac].*
      CALL abmt500_bmkc_t_mask()
      LET g_bmkb2_d_mask_n[l_ac].* =  g_bmkb2_d[l_ac].*
   END FOR
   LET g_bmkb3_d_mask_o.* =  g_bmkb3_d.*
   FOR l_ac = 1 TO g_bmkb3_d.getLength()
      LET g_bmkb3_d_mask_o[l_ac].* =  g_bmkb3_d[l_ac].*
      CALL abmt500_bmkd_t_mask()
      LET g_bmkb3_d_mask_n[l_ac].* =  g_bmkb3_d[l_ac].*
   END FOR
 
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION abmt500_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="delete_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"
      
      #end add-point    
      DELETE FROM bmkb_t
       WHERE bmkbent = g_enterprise AND
         bmkbdocno = ps_keys_bak[1] AND bmkbseq = ps_keys_bak[2] AND bmkbseq1 = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ":",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_bmkb_d.deleteElement(li_idx) 
      END IF 
 
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete2"
      
      #end add-point    
      DELETE FROM bmkc_t
       WHERE bmkcent = g_enterprise AND
             bmkcdocno = ps_keys_bak[1] AND bmkcseq = ps_keys_bak[2]
      #add-point:delete_b段刪除中 name="delete_b.m_delete2"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'2'" THEN 
         CALL g_bmkb2_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete2"
      
      #end add-point    
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete3"
      
      #end add-point    
      DELETE FROM bmkd_t
       WHERE bmkdent = g_enterprise AND
             bmkddocno = ps_keys_bak[1] AND bmkdseq = ps_keys_bak[2] AND bmkdseq1 = ps_keys_bak[3]
      #add-point:delete_b段刪除中 name="delete_b.m_delete3"
      
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'3'" THEN 
         CALL g_bmkb3_d.deleteElement(li_idx) 
      END IF 
 
      #add-point:delete_b段刪除後 name="delete_b.a_delete3"
      
      #end add-point    
   END IF
 
 
   
 
   
   #add-point:delete_b段other name="delete_b.other"
   
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION abmt500_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="insert_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"
      
      #end add-point 
      INSERT INTO bmkb_t
                  (bmkbent,
                   bmkbdocno,
                   bmkbseq,bmkbseq1
                   ,bmkb001,bmkb002,bmkb003,bmkb004,bmkbsite) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_bmkb_d[g_detail_idx].bmkb001,g_bmkb_d[g_detail_idx].bmkb002,g_bmkb_d[g_detail_idx].bmkb003, 
                       g_bmkb_d[g_detail_idx].bmkb004,g_bmkb_d[g_detail_idx].bmkbsite)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert"
      
      #end add-point 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'1'" THEN 
         CALL g_bmkb_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"
      
      #end add-point 
   END IF
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert2"
      
      #end add-point 
      INSERT INTO bmkc_t
                  (bmkcent,
                   bmkcdocno,
                   bmkcseq
                   ,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2]
                   ,g_bmkb2_d[g_detail_idx].bmkc001,g_bmkb2_d[g_detail_idx].bmkc002,g_bmkb2_d[g_detail_idx].bmkc003, 
                       g_bmkb2_d[g_detail_idx].bmkc004,g_bmkb2_d[g_detail_idx].bmkcsite)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert2"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'2'" THEN 
         CALL g_bmkb2_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert2"
      
      #end add-point
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert3"
      
      #end add-point 
      INSERT INTO bmkd_t
                  (bmkdent,
                   bmkddocno,
                   bmkdseq,bmkdseq1
                   ,bmkd001,bmkd002,bmkd003,bmkd004,bmkdsite) 
            VALUES(g_enterprise,
                   ps_keys[1],ps_keys[2],ps_keys[3]
                   ,g_bmkb3_d[g_detail_idx].bmkd001,g_bmkb3_d[g_detail_idx].bmkd002,g_bmkb3_d[g_detail_idx].bmkd003, 
                       g_bmkb3_d[g_detail_idx].bmkd004,g_bmkb3_d[g_detail_idx].bmkdsite)
      #add-point:insert_b段資料新增中 name="insert_b.m_insert3"
      
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      IF ps_page <> "'3'" THEN 
         CALL g_bmkb3_d.insertElement(li_idx) 
      END IF 
 
      #add-point:insert_b段資料新增後 name="insert_b.after_insert3"
      
      #end add-point
   END IF
 
 
   
 
   
   #add-point:insert_b段other name="insert_b.other"
   
   #end add-point     
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION abmt500_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   
   #end add-point   
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="update_b.pre_function"
   
   #end add-point
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "'1',"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmkb_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update"
      
      #end add-point 
      
      #將遮罩欄位還原
      CALL abmt500_bmkb_t_mask_restore('restore_mask_o')
               
      UPDATE bmkb_t 
         SET (bmkbdocno,
              bmkbseq,bmkbseq1
              ,bmkb001,bmkb002,bmkb003,bmkb004,bmkbsite) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_bmkb_d[g_detail_idx].bmkb001,g_bmkb_d[g_detail_idx].bmkb002,g_bmkb_d[g_detail_idx].bmkb003, 
                  g_bmkb_d[g_detail_idx].bmkb004,g_bmkb_d[g_detail_idx].bmkbsite) 
         WHERE bmkbent = g_enterprise AND bmkbdocno = ps_keys_bak[1] AND bmkbseq = ps_keys_bak[2] AND bmkbseq1 = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update"
      
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkb_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkb_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
 
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL abmt500_bmkb_t_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      
      #end add-point  
   END IF
   
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
   
   
   LET ls_group = "'2',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmkc_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update2"
      
      #end add-point  
      
      #將遮罩欄位還原
      CALL abmt500_bmkc_t_mask_restore('restore_mask_o')
               
      UPDATE bmkc_t 
         SET (bmkcdocno,
              bmkcseq
              ,bmkc001,bmkc002,bmkc003,bmkc004,bmkcsite) 
              = 
             (ps_keys[1],ps_keys[2]
              ,g_bmkb2_d[g_detail_idx].bmkc001,g_bmkb2_d[g_detail_idx].bmkc002,g_bmkb2_d[g_detail_idx].bmkc003, 
                  g_bmkb2_d[g_detail_idx].bmkc004,g_bmkb2_d[g_detail_idx].bmkcsite) 
         WHERE bmkcent = g_enterprise AND bmkcdocno = ps_keys_bak[1] AND bmkcseq = ps_keys_bak[2]
      #add-point:update_b段修改中 name="update_b.m_update2"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkc_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkc_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
          
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL abmt500_bmkc_t_mask_restore('restore_mask_n')
 
      #add-point:update_b段修改後 name="update_b.after_update2"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
   LET ls_group = "'3',"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "bmkd_t" THEN
      #add-point:update_b段修改前 name="update_b.before_update3"
      
      #end add-point  
      
      #將遮罩欄位還原
      CALL abmt500_bmkd_t_mask_restore('restore_mask_o')
               
      UPDATE bmkd_t 
         SET (bmkddocno,
              bmkdseq,bmkdseq1
              ,bmkd001,bmkd002,bmkd003,bmkd004,bmkdsite) 
              = 
             (ps_keys[1],ps_keys[2],ps_keys[3]
              ,g_bmkb3_d[g_detail_idx].bmkd001,g_bmkb3_d[g_detail_idx].bmkd002,g_bmkb3_d[g_detail_idx].bmkd003, 
                  g_bmkb3_d[g_detail_idx].bmkd004,g_bmkb3_d[g_detail_idx].bmkdsite) 
         WHERE bmkdent = g_enterprise AND bmkddocno = ps_keys_bak[1] AND bmkdseq = ps_keys_bak[2] AND bmkdseq1 = ps_keys_bak[3]
      #add-point:update_b段修改中 name="update_b.m_update3"
      
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkd_t" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "bmkd_t:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
          
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL abmt500_bmkd_t_mask_restore('restore_mask_n')
 
      #add-point:update_b段修改後 name="update_b.after_update3"
      
      #end add-point  
   END IF
 
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      
   END IF
 
 
   
 
   
   #add-point:update_b段other name="update_b.other"
   
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.key_update_b" >}
#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION abmt500_key_update_b(ps_keys_bak,ps_table)
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_key       DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_update_b.pre_function"
   
   #end add-point
   
 
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.key_delete_b" >}
#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION abmt500_key_delete_b(ps_keys_bak,ps_table)
   #add-point:delete_b段define(客製用) name="key_delete_b.define_customerization"
   
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_delete_b.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="key_delete_b.pre_function"
   
   #end add-point
   
 
   
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION abmt500_lock_b(ps_table,ps_page)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   
   #end add-point   
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   
   #end add-point
    
   #先刷新資料
   #CALL abmt500_b_fill()
   
   #鎖定整組table
   #LET ls_group = "'1',"
   #僅鎖定自身table
   LET ls_group = "bmkb_t"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN abmt500_bcl USING g_enterprise,
                                       g_bmka_m.bmkadocno,g_bmkb_d[g_detail_idx].bmkbseq,g_bmkb_d[g_detail_idx].bmkbseq1  
                                               
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmt500_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
   #鎖定整組table
   #LET ls_group = "'2',"
   #僅鎖定自身table
   LET ls_group = "bmkc_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN abmt500_bcl2 USING g_enterprise,
                                             g_bmka_m.bmkadocno,g_bmkb2_d[g_detail_idx].bmkcseq
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmt500_bcl2:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
   #鎖定整組table
   #LET ls_group = "'3',"
   #僅鎖定自身table
   LET ls_group = "bmkd_t"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN abmt500_bcl3 USING g_enterprise,
                                             g_bmka_m.bmkadocno,g_bmkb3_d[g_detail_idx].bmkdseq,g_bmkb3_d[g_detail_idx].bmkdseq1 
 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "abmt500_bcl3:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
 
 
   
 
   
   #add-point:lock_b段other name="lock_b.other"
   
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION abmt500_unlock_b(ps_table,ps_page)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   
   #end add-point  
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   
   #end add-point
    
   LET ls_group = "'1',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmt500_bcl
   END IF
   
   LET ls_group = "'2',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmt500_bcl2
   END IF
 
   LET ls_group = "'3',"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE abmt500_bcl3
   END IF
 
 
   
 
 
   #add-point:unlock_b段other name="unlock_b.other"
   
   #end add-point  
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION abmt500_set_entry(p_cmd)
   #add-point:set_entry段define(客製用) name="set_entry.define_customerization"
   
   #end add-point       
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry.define"
   
   #end add-point       
   
   #add-point:Function前置處理  name="set_entry.pre_function"
   
   #end add-point
   
   CALL cl_set_comp_entry("bmkadocno",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("bmkadocno",TRUE)
      CALL cl_set_comp_entry("bmkadocdt",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry段欄位控制 name="set_entry.field_control"
      CALL cl_set_comp_entry("bmkadocdt",TRUE)
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後 name="set_entry.after_control"
   CALL cl_set_comp_entry("bmka006",TRUE)
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION abmt500_set_no_entry(p_cmd)
   #add-point:set_no_entry段define(客製用) name="set_no_entry.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_no_entry.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("bmkadocno",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry段欄位控制 name="set_no_entry.field_control"
      CALL cl_set_comp_entry("bmkadocdt",FALSE)
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("bmkadocno",FALSE)
   END IF 
 
#  IF p_cmd = 'u' THEN  #docdt欄位依照設定關閉(FALSE則為設定不同意修正) #(ver:78)
      IF NOT cl_chk_update_docdt() THEN
         CALL cl_set_comp_entry("bmkadocdt",FALSE)
      END IF
#  END IF 
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   IF NOT abmt500_imaa005_exists() THEN 
      CALL cl_set_comp_entry("bmka006",FALSE) 
      LET g_bmka_m.bmka006 = ' '
   END IF
   #end add-point 
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION abmt500_set_entry_b(p_cmd)
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   
   #end add-point     
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   
   #end add-point
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("",TRUE)
      #add-point:set_entry段欄位控制 name="set_entry_b.field_control"
      
      #end add-point  
   END IF
   
   #add-point:set_entry_b段 name="set_entry_b.set_entry_b"
   CALL cl_set_comp_entry("bmkbseq,bmkb001,bmkbseq1,bmkb002",TRUE)
   CALL cl_set_comp_entry("bmkcseq,bmkc001",TRUE)
   CALL cl_set_comp_entry("bmkdseq,bmkd001,bmkdseq1,bmkd002",TRUE)
   CALL cl_set_comp_required("bmkb004,bmkd004",FALSE)
   #end add-point  
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION abmt500_set_no_entry_b(p_cmd)
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   
   #end add-point    
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   DEFINE l_bmjb004   LIKE bmjb_t.bmjb004
   DEFINE l_bmjd004   LIKE bmjd_t.bmjd004
   DEFINE l_cnt       LIKE type_t.num5
   #end add-point    
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("",FALSE)
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段 name="set_no_entry_b.set_no_entry_b"
   IF g_bmkb_c = TRUE THEN 
      CALL cl_set_comp_entry("bmkb001",FALSE)
   END IF
   IF g_bmkd_c = TRUE THEN 
      CALL cl_set_comp_entry("bmkd001",FALSE)
   END IF   
   IF p_cmd = 'u' THEN 
      CALL cl_set_comp_entry("bmkbseq,bmkb001",FALSE)
   END IF   
   IF p_cmd = 'u' THEN 
      CALL cl_set_comp_entry("bmkbseq,bmkb001,bmkbseq1",FALSE)
      LET l_bmjb004 = ''
      SELECT bmjb004 INTO l_bmjb004 
        FROM bmjb_t
       WHERE bmjbent = g_enterprise
         AND bmjb001 = g_bmka_m.bmka001
         AND bmjbseq = g_bmkb_d[l_ac].bmkbseq
         AND bmjbseq1 = g_bmkb_d[l_ac].bmkbseq1
      IF NOT cl_null(l_bmjb004) THEN 
         CALL cl_set_comp_entry("bmkb002",FALSE)
         IF g_bmkb_d[l_ac].bmkb003 = 'Y' AND l_bmjb004 = '2' THEN 
            CALL cl_set_comp_required("bmkb004",TRUE)
         END IF
      END IF
         
      CALL cl_set_comp_entry("bmkcseq",FALSE)
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt 
        FROM bmjc_t
       WHERE bmjcent = g_enterprise
         AND bmjc001 = g_bmka_m.bmka001
         AND bmjcseq = g_bmkb2_d[l_ac].bmkcseq
      IF l_cnt > 0 THEN 
         CALL cl_set_comp_entry("bmkc001",FALSE)
      END IF

      CALL cl_set_comp_entry("bmkdseq,bmkd001,bmkdseq1",FALSE)
      LET l_bmjd004 = ''
      SELECT bmjd004 INTO l_bmjd004 
        FROM bmjd_t
       WHERE bmjdent = g_enterprise
         AND bmjd001 = g_bmka_m.bmka001
         AND bmjdseq = g_bmkb3_d[l_ac].bmkdseq
         AND bmjdseq1 = g_bmkb3_d[l_ac].bmkdseq1
      IF NOT cl_null(l_bmjd004) THEN 
         CALL cl_set_comp_entry("bmkd002",FALSE)
         IF g_bmkb3_d[l_ac].bmkd003 = 'Y' AND l_bmjd004 = '2' THEN
            CALL cl_set_comp_required("bmkd004",TRUE)
         END IF   
      END IF
   END IF
   #end add-point     
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION abmt500_set_act_visible()
   #add-point:set_act_visible段define(客製用) name="set_act_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible.define"
   
   #end add-point   
   #add-point:set_act_visible段 name="set_act_visible.set_act_visible"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION abmt500_set_act_no_visible()
   #add-point:set_act_no_visible段define(客製用) name="set_act_no_visible.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible.define"
   
   #end add-point   
   #add-point:set_act_no_visible段 name="set_act_no_visible.set_act_no_visible"
   #應用 a63 樣板自動產生(Version:1)
   IF g_bmka_m.bmkastus NOT MATCHES "[NDR]" THEN   # N未確認/D抽單/R已拒絕允許修改
      CALL cl_set_act_visible("modify,delete,modify_detail", FALSE)
   END IF


   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION abmt500_set_act_visible_b()
   #add-point:set_act_visible_b段define(客製用) name="set_act_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible_b.define"
   
   #end add-point   
   #add-point:set_act_visible_b段 name="set_act_visible_b.set_act_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION abmt500_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define(客製用) name="set_act_no_visible_b.define_customerization"
   
   #end add-point   
   #add-point:set_act_no_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible_b.define"
   
   #end add-point   
   #add-point:set_act_no_visible_b段 name="set_act_no_visible_b.set_act_no_visible_b"
   
   #end add-point   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION abmt500_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   
   #end add-point  
   DEFINE li_idx     LIKE type_t.num10
   DEFINE li_cnt     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE ls_where   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   
   #end add-point  
   
   #add-point:Function前置處理 name="default_search.before"
   
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[01]) THEN
      LET ls_wc = ls_wc, " bmkadocno = '", g_argv[01], "' AND "
   END IF
   
 
   
   #add-point:default_search段after sql name="default_search.after_sql"
   
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      
      #預設查詢條件
      CALL cl_qbe_get_default_qryplan() RETURNING ls_where
      IF NOT cl_null(ls_where) THEN
         CALL util.JSON.parse(ls_where, la_wc)
         INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
         INITIALIZE g_wc2_table2 TO NULL
 
         INITIALIZE g_wc2_table3 TO NULL
 
 
         FOR li_idx = 1 TO la_wc.getLength()
            CASE
               WHEN la_wc[li_idx].tableid = "bmka_t" 
                  LET g_wc = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "bmkb_t" 
                  LET g_wc2_table1 = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "bmkc_t" 
                  LET g_wc2_table2 = la_wc[li_idx].wc
 
               WHEN la_wc[li_idx].tableid = "bmkd_t" 
                  LET g_wc2_table3 = la_wc[li_idx].wc
 
 
               WHEN la_wc[li_idx].tableid = "EXTENDWC"
                  LET g_wc2_extend = la_wc[li_idx].wc
            END CASE
         END FOR
         IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
            OR NOT cl_null(g_wc2_table2)
 
            OR NOT cl_null(g_wc2_table3)
 
 
            OR NOT cl_null(g_wc2_extend)
            THEN
            #組合g_wc2
            IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
               LET g_wc2 = g_wc2_table1
            END IF
            IF g_wc2_table2 <> " 1=1" AND NOT cl_null(g_wc2_table2) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_table2
            END IF
 
            IF g_wc2_table3 <> " 1=1" AND NOT cl_null(g_wc2_table3) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_table3
            END IF
 
 
            IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
            END IF
         
            IF g_wc2.subString(1,5) = " AND " THEN
               LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
            END IF
         END IF
      END IF
    
      IF cl_null(g_wc) AND cl_null(g_wc2) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   LET g_wc = g_wc," AND bmkasite = '",g_site,"'"
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.state_change" >}
   #應用 a09 樣板自動產生(Version:17)
#+ 確認碼變更 
PRIVATE FUNCTION abmt500_statechange()
   #add-point:statechange段define(客製用) name="statechange.define_customerization"
   
   #end add-point  
   DEFINE lc_state LIKE type_t.chr5
   #add-point:statechange段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="statechange.define"
   DEFINE l_success  LIKE type_t.num5
   #end add-point  
   
   #add-point:Function前置處理 name="statechange.before"
   
   #end add-point  
   
   ERROR ""     #清空畫面右下側ERROR區塊
 
   IF g_bmka_m.bmkadocno IS NULL
 
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = "std-00003" 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   CALL s_transaction_begin()
   
   OPEN abmt500_cl USING g_enterprise,g_bmka_m.bmkadocno
   IF STATUS THEN
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN abmt500_cl:" 
      LET g_errparam.code   = STATUS 
      LET g_errparam.popup  = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #顯示最新的資料
   EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
       g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
       g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
       g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
       g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
       g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
       g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkacnfid_desc 
 
   
 
   #檢查是否允許此動作
   IF NOT abmt500_action_chk() THEN
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
 
   #將資料顯示到畫面上
   DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.oobxl003,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka001_desc, 
       g_bmka_m.bmka002,g_bmka_m.bmka002_desc,g_bmka_m.bmka003,g_bmka_m.bmka003_desc,g_bmka_m.bmkastus, 
       g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka006,g_bmka_m.bmka006_desc, 
       g_bmka_m.bmka007,g_bmka_m.bmka007_desc,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka009_desc, 
       g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka011_desc,g_bmka_m.bmka012,g_bmka_m.bmka012_desc, 
       g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp,g_bmka_m.bmkaowndp_desc, 
       g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkacrtdt, 
       g_bmka_m.bmkamodid,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid,g_bmka_m.bmkacnfid_desc, 
       g_bmka_m.bmkacnfdt
 
   CASE g_bmka_m.bmkastus
      WHEN "N"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
      WHEN "Y"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
      WHEN "A"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
      WHEN "D"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
      WHEN "R"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
      WHEN "W"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
      WHEN "X"
         CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
      
   END CASE
 
   #add-point:資料刷新後 name="statechange.after_refresh"
   
   #end add-point
 
   MENU "" ATTRIBUTES (STYLE="popup")
      BEFORE MENU
         HIDE OPTION "approved"
         HIDE OPTION "rejection"
         CASE g_bmka_m.bmkastus
            
            WHEN "N"
               HIDE OPTION "unconfirmed"
            WHEN "Y"
               HIDE OPTION "confirmed"
            WHEN "A"
               HIDE OPTION "approved"
            WHEN "D"
               HIDE OPTION "withdraw"
            WHEN "R"
               HIDE OPTION "rejection"
            WHEN "W"
               HIDE OPTION "signing"
            WHEN "X"
               HIDE OPTION "invalid"
         END CASE
     
      #add-point:menu前 name="statechange.before_menu"
      CALL cl_set_act_visible("signing,withdraw",FALSE)  
      CALL cl_set_act_visible("unconfirmed,invalid,confirmed",TRUE)
      CALL cl_set_act_visible("closed",FALSE)
      
      CASE g_bmka_m.bmkastus
         WHEN "N"
            CALL cl_set_act_visible("unconfirmed,hold",FALSE)
            #需提交至BPM時，則顯示「提交」功能並隱藏「確認」功能
            IF cl_bpm_chk() THEN
                CALL cl_set_act_visible("signing",TRUE)
                CALL cl_set_act_visible("confirmed",FALSE)
            END IF
            
         WHEN "X"
            CALL cl_set_act_visible("unconfirmed,invalid,confirmed,hold",FALSE)
            #dorislai-20160115-add----(S)
            CALL s_transaction_end('N','0')
            CLOSE abmt500_cl
            RETURN
            #dorislai-20160115-add----(E)
         WHEN "Y"
            CALL cl_set_act_visible("invalid,confirmed,hold",FALSE)
         WHEN "R"   #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed,hold",FALSE)

         WHEN "D"   #保留修改的功能(如作廢)，隱藏其他應用功能(如: 確認、未確認、留置、過帳…)
            CALL cl_set_act_visible("confirmed,unconfirmed,hold",FALSE) 
         WHEN "W"    #只能顯示抽單;其餘應用功能皆隱藏
             CALL cl_set_act_visible("withdraw",TRUE)  
             CALL cl_set_act_visible("unconfirmed,invalid,confirmed,hold",FALSE)
         
         WHEN "A"     #只能顯示確認; 其餘應用功能皆隱藏
             CALL cl_set_act_visible("confirmed ",TRUE)  
             CALL cl_set_act_visible("unconfirmed,invalid,hold",FALSE)
   
      END CASE
      #end add-point
      
      #應用 a36 樣板自動產生(Version:5)
      #提交
      ON ACTION signing
         IF cl_auth_chk_act("signing") THEN
            IF NOT abmt500_send() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE abmt500_cl
            RETURN
         END IF
    
      #抽單
      ON ACTION withdraw
         IF cl_auth_chk_act("withdraw") THEN
            IF NOT abmt500_draw_out() THEN
               CALL s_transaction_end('N','0')
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
            #因應簽核行為, 該動作完成後不再進行後續處理
            #於此處直接返回
            CLOSE abmt500_cl
            RETURN
         END IF
 
 
 
	  
      ON ACTION unconfirmed
         IF cl_auth_chk_act("unconfirmed") THEN
            LET lc_state = "N"
            #add-point:action控制 name="statechange.unconfirmed"
            
            #end add-point
         END IF
         EXIT MENU
      ON ACTION confirmed
         IF cl_auth_chk_act("confirmed") THEN
            LET lc_state = "Y"
            #add-point:action控制 name="statechange.confirmed"
            
            #end add-point
         END IF
         EXIT MENU
      ON ACTION approved
         IF cl_auth_chk_act("approved") THEN
            LET lc_state = "A"
            #add-point:action控制 name="statechange.approved"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION withdraw
      #   IF cl_auth_chk_act("withdraw") THEN
      #      LET lc_state = "D"
      #      #add-point:action控制 name="statechange.withdraw"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION rejection
         IF cl_auth_chk_act("rejection") THEN
            LET lc_state = "R"
            #add-point:action控制 name="statechange.rejection"
            
            #end add-point
         END IF
         EXIT MENU
      #ON ACTION signing
      #   IF cl_auth_chk_act("signing") THEN
      #      LET lc_state = "W"
      #      #add-point:action控制 name="statechange.signing"
      #      
      #      #end add-point
      #   END IF
      #   EXIT MENU
      ON ACTION invalid
         IF cl_auth_chk_act("invalid") THEN
            LET lc_state = "X"
            #add-point:action控制 name="statechange.invalid"
            
            #end add-point
         END IF
         EXIT MENU
 
      #add-point:stus控制 name="statechange.more_control"
      
      #end add-point
      
   END MENU
   
   #確認被選取的狀態碼在清單中
   IF (lc_state <> "N" 
      AND lc_state <> "Y"
      AND lc_state <> "A"
      AND lc_state <> "D"
      AND lc_state <> "R"
      AND lc_state <> "W"
      AND lc_state <> "X"
      ) OR 
      g_bmka_m.bmkastus = lc_state OR cl_null(lc_state) THEN
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #add-point:stus修改前 name="statechange.b_update"
   CALL s_transaction_begin()
   #151125-00001#1 add start ------------------
   IF lc_state = 'X' THEN
      IF NOT cl_ask_confirm('aim-00109') THEN
         CALL s_transaction_end('N','0')   #160812-00017#4 20160815 add by beckxie
         RETURN
      END IF
   END IF
   #151125-00001#1 add end   ------------------
   IF lc_state = 'N' THEN 
      IF NOT cl_ask_confirm('aim-00110') THEN
         CALL s_transaction_end('N','0')   #160812-00017#4 20160815 add by beckxie
         RETURN
      ELSE
         CALL s_abmt500_unconfirm(g_bmka_m.bmkadocno) RETURNING l_success
         IF l_success = FALSE THEN 
            CALL s_transaction_end('N','0')
            RETURN
         END IF
      END IF
   END IF
   IF lc_state = 'Y' THEN
      IF NOT cl_ask_confirm('aim-00108') THEN
         CALL s_transaction_end('N','0')   #160812-00017#4 20160815 add by beckxie
         RETURN
      ELSE   
         IF s_abmt500_conf_chk(g_bmka_m.bmkadocno) THEN
            CALL s_abmt500_conf_upd(g_bmka_m.bmkadocno) RETURNING l_success
            IF l_success = FALSE THEN 
               CALL s_transaction_end('N','0')
               RETURN
            ELSE
               CALL s_transaction_end('Y','0')
            END IF
         ELSE
            CALL s_transaction_end('N','0')   #160812-00017#4 20160815 add by beckxie
            RETURN
         END IF
      END IF
   END IF   
   #end add-point
   
   LET g_bmka_m.bmkamodid = g_user
   LET g_bmka_m.bmkamoddt = cl_get_current()
   LET g_bmka_m.bmkastus = lc_state
   
   #異動狀態碼欄位/修改人/修改日期
   UPDATE bmka_t 
      SET (bmkastus,bmkamodid,bmkamoddt) 
        = (g_bmka_m.bmkastus,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt)     
    WHERE bmkaent = g_enterprise AND bmkadocno = g_bmka_m.bmkadocno
 
    
   IF SQLCA.sqlcode THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code   = SQLCA.sqlcode 
      LET g_errparam.popup  = FALSE 
      CALL cl_err()
   ELSE
      CASE lc_state
         WHEN "N"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/unconfirmed.png")
         WHEN "Y"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/confirmed.png")
         WHEN "A"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/approved.png")
         WHEN "D"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/withdraw.png")
         WHEN "R"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/rejection.png")
         WHEN "W"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/signing.png")
         WHEN "X"
            CALL gfrm_curr.setElementImage("statechange", "stus/32/invalid.png")
         
      END CASE
    
      #撈取異動後的資料
      EXECUTE abmt500_master_referesh USING g_bmka_m.bmkadocno INTO g_bmka_m.bmkadocno,g_bmka_m.bmkadocdt, 
          g_bmka_m.bmka001,g_bmka_m.bmka002,g_bmka_m.bmka003,g_bmka_m.bmkastus,g_bmka_m.bmka004,g_bmka_m.bmka005, 
          g_bmka_m.bmka006,g_bmka_m.bmka007,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009,g_bmka_m.bmka010, 
          g_bmka_m.bmka011,g_bmka_m.bmka012,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaowndp,g_bmka_m.bmkacrtid, 
          g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
          g_bmka_m.bmkacnfdt,g_bmka_m.bmka001_desc,g_bmka_m.bmka002_desc,g_bmka_m.bmka003_desc,g_bmka_m.bmka007_desc, 
          g_bmka_m.bmka009_desc,g_bmka_m.bmka011_desc,g_bmka_m.bmka012_desc,g_bmka_m.bmkaownid_desc, 
          g_bmka_m.bmkaowndp_desc,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp_desc,g_bmka_m.bmkamodid_desc, 
          g_bmka_m.bmkacnfid_desc
      
      #將資料顯示到畫面上
      DISPLAY BY NAME g_bmka_m.bmkadocno,g_bmka_m.oobxl003,g_bmka_m.bmkadocdt,g_bmka_m.bmka001,g_bmka_m.bmka001_desc, 
          g_bmka_m.bmka002,g_bmka_m.bmka002_desc,g_bmka_m.bmka003,g_bmka_m.bmka003_desc,g_bmka_m.bmkastus, 
          g_bmka_m.bmka004,g_bmka_m.bmka005,g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka006,g_bmka_m.bmka006_desc, 
          g_bmka_m.bmka007,g_bmka_m.bmka007_desc,g_bmka_m.bmka008,g_bmka_m.bmkasite,g_bmka_m.bmka009, 
          g_bmka_m.bmka009_desc,g_bmka_m.bmka010,g_bmka_m.bmka011,g_bmka_m.bmka011_desc,g_bmka_m.bmka012, 
          g_bmka_m.bmka012_desc,g_bmka_m.bmka013,g_bmka_m.bmkaownid,g_bmka_m.bmkaownid_desc,g_bmka_m.bmkaowndp, 
          g_bmka_m.bmkaowndp_desc,g_bmka_m.bmkacrtid,g_bmka_m.bmkacrtid_desc,g_bmka_m.bmkacrtdp,g_bmka_m.bmkacrtdp_desc, 
          g_bmka_m.bmkacrtdt,g_bmka_m.bmkamodid,g_bmka_m.bmkamodid_desc,g_bmka_m.bmkamoddt,g_bmka_m.bmkacnfid, 
          g_bmka_m.bmkacnfid_desc,g_bmka_m.bmkacnfdt
   END IF
 
   #add-point:stus修改後 name="statechange.a_update"
   CALL cl_set_act_visible("modify,modify_detail,delete",TRUE)
   IF g_bmka_m.bmkastus <> 'N' THEN 
      CALL cl_set_act_visible("modify,modify_detail,delete",FALSE)
   END IF
   #end add-point
 
   #add-point:statechange段結束前 name="statechange.after"
   CALL s_transaction_end('Y','0')
   #end add-point  
 
   CLOSE abmt500_cl
   CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL abmt500_msgcentre_notify('statechange:'||lc_state)
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="abmt500.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION abmt500_idx_chk()
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   
   #end add-point  
   #add-point:idx_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail1")
      IF g_detail_idx > g_bmkb_d.getLength() THEN
         LET g_detail_idx = g_bmkb_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_bmkb_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_bmkb_d.getLength() TO FORMONLY.cnt
   END IF
   
   IF g_current_page = 2 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail2")
      IF g_detail_idx > g_bmkb2_d.getLength() THEN
         LET g_detail_idx = g_bmkb2_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_bmkb2_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_bmkb2_d.getLength() TO FORMONLY.cnt
   END IF
   IF g_current_page = 3 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("s_detail3")
      IF g_detail_idx > g_bmkb3_d.getLength() THEN
         LET g_detail_idx = g_bmkb3_d.getLength()
      END IF
      IF g_detail_idx = 0 AND g_bmkb3_d.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY g_bmkb3_d.getLength() TO FORMONLY.cnt
   END IF
 
   
   #add-point:idx_chk段other name="idx_chk.other"
   
   #end add-point  
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION abmt500_b_fill2(pi_idx)
   #add-point:b_fill2段define(客製用) name="b_fill2.define_customerization"
   
   #end add-point
   DEFINE pi_idx                 LIKE type_t.num10
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"
   
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
   LET li_detail_idx_tmp = g_detail_idx
   
 
      
 
      
   #add-point:單身填充後 name="b_fill2.after_fill"
   
   #end add-point
    
   LET l_ac = li_ac
   
   CALL abmt500_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION abmt500_fill_chk(ps_idx)
   #add-point:fill_chk段define(客製用) name="fill_chk.define_customerization"
   
   #end add-point
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fill_chk.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="fill_chk.before_chk"
   
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF (cl_null(g_wc2_table1) OR g_wc2_table1.trim() = '1=1')  AND 
      (cl_null(g_wc2_table2) OR g_wc2_table2.trim() = '1=1')  AND 
      (cl_null(g_wc2_table3) OR g_wc2_table3.trim() = '1=1') THEN
      #add-point:fill_chk段other_chk name="fill_chk.other_chk"
      
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk name="fill_chk.after_chk"
   
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
 
{</section>}
 
{<section id="abmt500.status_show" >}
PRIVATE FUNCTION abmt500_status_show()
   #add-point:status_show段define(客製用) name="status_show.define_customerization"
   
   #end add-point
   #add-point:status_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="status_show.define"
   
   #end add-point
   
   #add-point:status_show段status_show name="status_show.status_show"
   
   #end add-point
END FUNCTION
 
{</section>}
 
{<section id="abmt500.mask_functions" >}
&include "erp/abm/abmt500_mask.4gl"
 
{</section>}
 
{<section id="abmt500.signature" >}
   #應用 a39 樣板自動產生(Version:10)
#+ BPM提交
PRIVATE FUNCTION abmt500_send()
   #add-point:send段define(客製用) name="send.define_customerization"
   
   #end add-point 
   #add-point:send段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="send.define"
   
   #end add-point 
   
   #add-point:Function前置處理  name="send.pre_function"
   
   #end add-point
   
   #依據單據個數，需要指定所有單身條件為" 1=1"  (單身有幾個就要設幾個)
   LET g_wc2_table1 = " 1=1"
   LET g_wc2_table2 = " 1=1"
   LET g_wc2_table3 = " 1=1"
 
 
   CALL abmt500_show()
   CALL abmt500_set_pk_array()
   
   #add-point: 初始化的ADP name="send.before_send"
 
   #end add-point
   
   #公用變數初始化
   CALL cl_bpm_data_init()
                  
   #依照主檔/單身個數產生 CALL cl_bpm_set_master_data() / cl_bpm_set_detail_data() 
   #單頭固定為 CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(xxxx)) 傳入參數: (1)單頭陣列  ; 回傳值: 無
   CALL cl_bpm_set_master_data(util.JSONObject.fromFGL(g_bmka_m))
                              
   #單身固定為 CALL cl_bpm_set_detail_data(s_detailX, util.JSONArray.fromFGL(xxxx)) 傳入參數: (1)單身SR名稱  (2)單身陣列  ; 回傳值: 無
   CALL cl_bpm_set_detail_data("s_detail1", util.JSONArray.fromFGL(g_bmkb_d))
   CALL cl_bpm_set_detail_data("s_detail2", util.JSONArray.fromFGL(g_bmkb2_d))
   CALL cl_bpm_set_detail_data("s_detail3", util.JSONArray.fromFGL(g_bmkb3_d))
 
 
   # cl_bpm_cli() 裡有包含以前的aws_condition()=>送簽資料檢核和更新單據狀況碼為'W'
   # cl_bpm_cli() 傳入參數:無  ;  回傳值: 0 開單失敗; 1 開單成功
 
   #add-point: 提交前的ADP name="send.before_cli"
   IF NOT s_abmt500_conf_chk(g_bmka_m.bmkadocno) THEN
      CLOSE abmt500_cl
      CALL s_transaction_end('N','0')
      RETURN FALSE
   END IF
   #end add-point
 
   #開單失敗
   IF NOT cl_bpm_cli() THEN 
      RETURN FALSE
   END IF
 
   #add-point: 提交後的ADP name="send.after_send"
   
   #end add-point
 
   #此段落不需要刪除資料,但是否需要refresh圖片樣式???
   #CALL abmt500_ui_browser_refresh()
 
   #重新指定此筆單據資料狀態圖片=>送簽中
   LET g_browser[g_current_idx].b_statepic = "stus/16/signing.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL abmt500_ui_headershow()
   CALL abmt500_ui_detailshow()
 
   RETURN TRUE
   
END FUNCTION
 
 
 
#應用 a40 樣板自動產生(Version:9)
#+ BPM抽單
PRIVATE FUNCTION abmt500_draw_out()
   #add-point:draw段define name="draw.define_customerization"
   
   #end add-point
   #add-point:draw段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="draw.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="draw.pre_function"
   
   #end add-point
   
   #抽單失敗
   IF NOT cl_bpm_draw_out() THEN 
      RETURN FALSE
   END IF    
          
   #重新指定此筆單據資料狀態圖片=>抽單
   LET g_browser[g_current_idx].b_statepic = "stus/16/draw_out.png"
 
   #重新取得單頭/單身資料,DISPLAY在畫面上
   CALL abmt500_ui_headershow()  
   CALL abmt500_ui_detailshow()
 
   #add-point:Function後置處理  name="draw.after_function"
   
   #end add-point
 
   RETURN TRUE
   
END FUNCTION
 
 
 
 
 
{</section>}
 
{<section id="abmt500.set_pk_array" >}
   #應用 a51 樣板自動產生(Version:8)
#+ 給予pk_array內容
PRIVATE FUNCTION abmt500_set_pk_array()
   #add-point:set_pk_array段define name="set_pk_array.define_customerization"
   
   #end add-point
   #add-point:set_pk_array段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_pk_array.define"
   
   #end add-point
   
   #add-point:Function前置處理 name="set_pk_array.before"
   
   #end add-point  
   
   #若l_ac<=0代表沒有資料
   IF l_ac <= 0 THEN
      RETURN
   END IF
   
   CALL g_pk_array.clear()
   LET g_pk_array[1].values = g_bmka_m.bmkadocno
   LET g_pk_array[1].column = 'bmkadocno'
 
   
   #add-point:set_pk_array段之後 name="set_pk_array.after"
   
   #end add-point  
   
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="abmt500.other_dialog" readonly="Y" >}
   
 
{</section>}
 
{<section id="abmt500.msgcentre_notify" >}
#應用 a66 樣板自動產生(Version:6)
PRIVATE FUNCTION abmt500_msgcentre_notify(lc_state)
   #add-point:msgcentre_notify段define name="msgcentre_notify.define_customerization"
   
   #end add-point   
   DEFINE lc_state LIKE type_t.chr80
   #add-point:msgcentre_notify段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="msgcentre_notify.define"
   
   #end add-point
   
   #add-point:Function前置處理  name="msgcentre_notify.pre_function"
   
   #end add-point
   
   INITIALIZE g_msgparam TO NULL
 
   #action-id與狀態填寫
   LET g_msgparam.state = lc_state
 
   #PK資料填寫
   CALL abmt500_set_pk_array()
   #單頭資料填寫
   LET g_msgparam.data[1] = util.JSON.stringify(g_bmka_m)
 
   #add-point:msgcentre其他通知 name="msgcentre_notify.process"
   
   #end add-point
 
   #呼叫訊息中心傳遞本關完成訊息
   CALL cl_msgcentre_notify()
 
END FUNCTION
 
 
 
 
{</section>}
 
{<section id="abmt500.action_chk" >}
#+ 修改/刪除前行為檢查(是否可允許此動作), 若有其他行為須管控也可透過此段落
PRIVATE FUNCTION abmt500_action_chk()
   #add-point:action_chk段define(客製用) name="action_chk.define_customerization"
   
   #end add-point
   #add-point:action_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="action_chk.define"
   
   #end add-point
   
   #add-point:action_chk段action_chk name="action_chk.action_chk"
   #160818-00017#4-s
   SELECT bmkastus INTO g_bmka_m.bmkastus FROM bmka_t
    WHERE bmkaent = g_enterprise
      AND bmkasite = g_site
      AND bmkadocno = g_bmka_m.bmkadocno
   IF (g_action_choice="modify" OR g_action_choice="delete" OR g_action_choice="modify_detail")  THEN
     LET g_errno = NULL
     CASE g_bmka_m.bmkastus
        WHEN 'W'
           LET g_errno = 'sub-01347'
        WHEN 'X'
           LET g_errno = 'sub-00229'
        WHEN 'Y'
           LET g_errno = 'sub-00178'
     END CASE

     IF NOT cl_null(g_errno) THEN
        INITIALIZE g_errparam TO NULL
        LET g_errparam.code = g_errno
        LET g_errparam.extend = g_bmka_m.bmkadocno
        LET g_errparam.popup = TRUE
        CALL cl_err()
        LET g_errno = NULL
        CALL abmt500_set_act_visible()
        CALL abmt500_set_act_no_visible()
        CALL abmt500_show()
        RETURN FALSE
     END IF
   END IF      
   #160818-00017#4-e
   #end add-point
      
   RETURN TRUE
   
END FUNCTION
 
{</section>}
 
{<section id="abmt500.other_function" readonly="Y" >}

PRIVATE FUNCTION abmt500_bmka001_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_bmka_m.bmka001
   CALL ap_ref_array2(g_ref_fields,"SELECT bmjal003 FROM bmjal_t WHERE bmjalent='"||g_enterprise||"' AND bmjal001=? AND bmjal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_bmka_m.bmka001_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_bmka_m.bmka001_desc
END FUNCTION

PRIVATE FUNCTION abmt500_bmka002_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_bmka_m.bmka002
   CALL ap_ref_array2(g_ref_fields,"SELECT ooag011 FROM ooag_t WHERE ooagent='"||g_enterprise||"' AND ooag001=? ","") RETURNING g_rtn_fields
   LET g_bmka_m.bmka002_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_bmka_m.bmka002_desc
END FUNCTION

PRIVATE FUNCTION abmt500_bmka003_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_bmka_m.bmka003
   CALL ap_ref_array2(g_ref_fields,"SELECT ooefl003 FROM ooefl_t WHERE ooeflent='"||g_enterprise||"' AND ooefl001=? AND ooefl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_bmka_m.bmka003_desc = '', g_rtn_fields[1] , ''
   DISPLAY BY NAME g_bmka_m.bmka003_desc
END FUNCTION

PRIVATE FUNCTION abmt500_bmka005_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_bmka_m.bmka005
   CALL ap_ref_array2(g_ref_fields,"SELECT imaal003,imaal004 FROM imaal_t WHERE imaalent='"||g_enterprise||"' AND imaal001=? AND imaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_bmka_m.imaal003 = g_rtn_fields[1]
   LET g_bmka_m.imaal004 = g_rtn_fields[2]  
   DISPLAY BY NAME g_bmka_m.imaal003,g_bmka_m.imaal004,g_bmka_m.bmka011
END FUNCTION

PRIVATE FUNCTION abmt500_gen()
DEFINE l_sql      STRING
DEFINE r_success LIKE type_t.num5

   LET r_success = TRUE
   DELETE FROM bmkb_t WHERE bmkbent = g_enterprise AND bmkbdocno = g_bmka_m.bmkadocno
   DELETE FROM bmkc_t WHERE bmkcent = g_enterprise AND bmkcdocno = g_bmka_m.bmkadocno
   DELETE FROM bmkd_t WHERE bmkdent = g_enterprise AND bmkddocno = g_bmka_m.bmkadocno 
   
   LET l_sql = "SELECT DISTINCT '",g_enterprise,"','",g_site,"','",g_bmka_m.bmkadocno,"',bmjbseq,bmjbseq1,bmjb002,bmjb003,'N','' ",
               "  FROM bmjb_t ",
               " WHERE bmjbent = '",g_enterprise,"'",
               "   AND bmjbsite = '",g_site,"'",
               "   AND bmjb001 = '",g_bmka_m.bmka001,"'"
   LET l_sql = "INSERT INTO bmkb_t(bmkbent,bmkbsite,bmkbdocno,bmkbseq,bmkbseq1,bmkb001,bmkb002,bmkb003,bmkb004) ",l_sql
   PREPARE ins_bmkb FROM l_sql
   EXECUTE ins_bmkb 
   IF SQLCA.sqlcode THEN 
      LET r_success = FALSE
   END IF
   
   LET l_sql = "SELECT DISTINCT '",g_enterprise,"','",g_site,"','",g_bmka_m.bmkadocno,"',bmjcseq,bmjc002,'',0,'' ",
               "  FROM bmjc_t ",
               " WHERE bmjcent = '",g_enterprise,"'",
               "   AND bmjcsite = '",g_site,"'",
               "   AND bmjc001 = '",g_bmka_m.bmka001,"'"
   LET l_sql = "INSERT INTO bmkc_t(bmkcent,bmkcsite,bmkcdocno,bmkcseq,bmkc001,bmkc002,bmkc003,bmkc004) ",l_sql
   PREPARE ins_bmkc FROM l_sql
   EXECUTE ins_bmkc  
   IF SQLCA.sqlcode THEN 
      LET r_success = FALSE
   END IF   
   
   LET l_sql = "SELECT DISTINCT '",g_enterprise,"','",g_site,"','",g_bmka_m.bmkadocno,"',bmjdseq,bmjdseq1,bmjd002,bmjd003,'N','' ",
               "  FROM bmjd_t ",
               " WHERE bmjdent = '",g_enterprise,"'",
               "   AND bmjdsite = '",g_site,"'",
               "   AND bmjd001 = '",g_bmka_m.bmka001,"'"
   LET l_sql = "INSERT INTO bmkd_t(bmkdent,bmkdsite,bmkddocno,bmkdseq,bmkdseq1,bmkd001,bmkd002,bmkd003,bmkd004) ",l_sql
   PREPARE ins_bmkd FROM l_sql
   EXECUTE ins_bmkd
   IF SQLCA.sqlcode THEN 
      LET r_success = FALSE
   END IF
   RETURN r_success  
END FUNCTION

PRIVATE FUNCTION abmt500_oocql004_desc(p_oocql001,p_oocql002)
DEFINE p_oocql001   LIKE oocql_t.oocql001,
       p_oocql002   LIKE oocql_t.oocql002,
       r_oocql004   LIKE oocql_t.oocql004
   
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = p_oocql001
   LET g_ref_fields[2] = p_oocql002
   CALL ap_ref_array2(g_ref_fields,"SELECT oocql004 FROM oocql_t WHERE oocqlent='"||g_enterprise||"' AND oocql001=? AND oocql002=? AND oocql003='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET r_oocql004 = g_rtn_fields[1]
   RETURN r_oocql004
END FUNCTION

PRIVATE FUNCTION abmt500_bmka009_desc()
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = g_bmka_m.bmka009
   CALL ap_ref_array2(g_ref_fields,"SELECT pmaal003 FROM pmaal_t WHERE pmaalent='"||g_enterprise||"' AND pmaal001=? AND pmaal002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET g_bmka_m.bmka009_desc = g_rtn_fields[1]
   DISPLAY BY NAME g_bmka_m.bmka009_desc
END FUNCTION

PRIVATE FUNCTION abmt500_imaa005_exists()
DEFINE l_imaa005  LIKE imaa_t.imaa005
   IF NOT cl_null(g_bmka_m.bmka005) THEN
      SELECT imaa005 INTO l_imaa005 FROM imaa_t
       WHERE imaaent = g_enterprise AND imaa001 = g_bmka_m.bmka005
      IF cl_null(l_imaa005) THEN
         RETURN FALSE
      END IF
   ELSE
      RETURN FALSE
   END IF
   RETURN TRUE
END FUNCTION

PRIVATE FUNCTION abmt500_bmkadocno_desc(p_flag,p_bmkadocno)
DEFINE p_flag      LIKE type_t.chr1 
DEFINE p_bmkadocno LIKE bmka_t.bmkadocno
DEFINE l_ooba002   LIKE ooba_t.ooba002
DEFINE l_success   LIKE type_t.num5
DEFINE r_bmkadocno_desc LIKE oobxl_t.oobxl003

   IF p_flag = '2' THEN  
      Call s_aooi200_get_slip(p_bmkadocno) returning l_success,l_ooba002
   ELSE
      LET l_ooba002 = p_bmkadocno   
   END IF
   INITIALIZE g_ref_fields TO NULL
   LET g_ref_fields[1] = l_ooba002
   CALL ap_ref_array2(g_ref_fields,"SELECT oobxl003 FROM oobxl_t WHERE oobxlent='"||g_enterprise||"' AND oobxl001= ? AND oobxl002='"||g_dlang||"'","") RETURNING g_rtn_fields
   LET r_bmkadocno_desc = '', g_rtn_fields[1] , ''
   RETURN r_bmkadocno_desc
END FUNCTION

PRIVATE FUNCTION abmt500_oocq_chk(p_oocq001,p_oocq002,p_oocq004)
DEFINE p_oocq001   LIKE oocq_t.oocq001
DEFINE p_oocq002   LIKE oocq_t.oocq002
DEFINE p_oocq004   LIKE oocq_t.oocq004
DEFINE l_cnt       LIKE type_t.num5
DEFINE l_oocqstus  LIKE oocq_t.oocqstus

   IF NOT cl_null(p_oocq002) AND NOT cl_null(p_oocq004)THEN
      SELECT oocqstus INTO l_oocqstus
        FROM oocq_t
       WHERE oocqent = g_enterprise
         AND oocq001 = p_oocq001
         AND oocq002 = p_oocq002
         AND oocq004 = p_oocq004
      CASE 
         WHEN sqlca.sqlcode = 100
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "" 
            IF p_oocq001 = '1118' THEN
               LET g_errparam.code   = "abm-00203" 
            ELSE
               LET g_errparam.code   = "abm-00205"
            END IF
            LET g_errparam.popup  = TRUE 
            CALL cl_err()    
            RETURN FALSE
         WHEN l_oocqstus <> 'Y'
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "" 
            IF p_oocq001 = '1118' THEN
               #LET g_errparam.code   = "abm-00204"  #160318-00005#6 mark
               #160318-00005#6 --s add
               LET g_errparam.code   = "sub-01302"   
               LET g_errparam.replace[1] = 'abmi502'
               LET g_errparam.replace[2] = cl_get_progname('abmi502',g_lang,"2")
               LET g_errparam.exeprog = 'abmi502'
               #160318-00005#6 --e add
            ELSE
               #LET g_errparam.code   = "abm-00206"
               #160318-00005#6 --s add
               LET g_errparam.code   = "sub-01302"   
               LET g_errparam.replace[1] = 'abmi504'
               LET g_errparam.replace[2] = cl_get_progname('abmi504',g_lang,"2")
               LET g_errparam.exeprog = 'abmi504'
               #160318-00005#6 --e add
            END IF 
            LET g_errparam.popup  = TRUE 

            CALL cl_err()    
            RETURN FALSE                    
      END CASE
   END IF
   RETURN TRUE   
END FUNCTION

PRIVATE FUNCTION abmt500_bmkb001_ref()
DEFINE l_cnt      LIKE type_t.num5
 
   LET l_cnt = 0 
   SELECT COUNT(*) INTO l_cnt 
     FROM bmkb_t
    WHERE bmkbent = g_enterprise
      AND bmkbdocno = g_bmka_m.bmkadocno 
      AND bmkbseq = g_bmkb_d[l_ac].bmkbseq
   IF l_cnt > 0 THEN 
      SELECT DISTINCT bmkb001 INTO g_bmkb_d[l_ac].bmkb001
        FROM bmkb_t
       WHERE bmkbent = g_enterprise
         AND bmkbdocno = g_bmka_m.bmkadocno
         AND bmkbseq = g_bmkb_d[l_ac].bmkbseq
      LET g_bmkb_c = TRUE  
   ELSE
      LET g_bmkb_d[l_ac].bmkb001 = '' 
      LET g_bmkb_c = FALSE    
   END IF
   CALL abmt500_oocql004_desc('1117',g_bmkb_d[l_ac].bmkb001) RETURNING g_bmkb_d[l_ac].bmkb001_desc
   DISPLAY BY NAME g_bmkb_d[l_ac].bmkb001_desc   
END FUNCTION

PRIVATE FUNCTION abmt500_bmkd001_ref()
DEFINE l_cnt      LIKE type_t.num5
 
   LET l_cnt = 0 
   SELECT COUNT(*) INTO l_cnt 
     FROM bmkd_t
    WHERE bmkdent = g_enterprise
      AND bmkddocno = g_bmka_m.bmkadocno
      AND bmkdseq = g_bmkb3_d[l_ac].bmkdseq
   IF l_cnt > 0 THEN 
      SELECT DISTINCT bmkd001 INTO g_bmkb3_d[l_ac].bmkd001
        FROM bmkd_t
       WHERE bmkdent = g_enterprise
         AND bmkddocno = g_bmka_m.bmkadocno 
         AND bmkdseq = g_bmkb3_d[l_ac].bmkdseq
      LET g_bmkd_c = TRUE  
   ELSE
      LET g_bmkb3_d[l_ac].bmkd001 = ''
      LET g_bmkd_c = FALSE    
   END IF
   CALL abmt500_oocql004_desc('1119',g_bmkb3_d[l_ac].bmkd001) RETURNING g_bmkb3_d[l_ac].bmkd001_desc
   DISPLAY BY NAME g_bmkb3_d[l_ac].bmkd001_desc   
END FUNCTION

PRIVATE FUNCTION abmt500_ecm_chk()
DEFINE l_cnt   LIKE type_t.num5

   IF NOT cl_null(g_bmka_m.bmka005) AND NOT cl_null(g_bmka_m.bmka007) AND NOT cl_null(g_bmka_m.bmka008) THEN 
      LET l_cnt = 0
      SELECT COUNT(*) INTO l_cnt
        FROM ecbb_t
       WHERE ecbbent = g_enterprise
         AND ecbbsite = g_bmka_m.bmkasite
         AND ecbb001 = g_bmka_m.bmka005
         AND ecbb004 = g_bmka_m.bmka007
         AND ecbb005 = g_bmka_m.bmka008
      IF l_cnt = 0 THEN 
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code   = 'abm-00207' 
         LET g_errparam.popup  = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   RETURN TRUE
END FUNCTION

 
{</section>}
 
